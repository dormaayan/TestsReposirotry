@Test public void addsTheViewMessageBodyWriterWithSingleViewRendererToTheEnvironment() throws Exception {
  final String configurationKey="freemarker";
  final String testKey="testKey";
  final Map<String,String> freeMarkerConfig=Collections.singletonMap(testKey,"yes");
  final Map<String,Map<String,String>> viewRendererConfig=Collections.singletonMap(configurationKey,freeMarkerConfig);
  final MyConfiguration myConfiguration=new MyConfiguration();
  myConfiguration.setViewRendererConfiguration(viewRendererConfig);
  ViewRenderer renderer=new ViewRenderer(){
    @Override public boolean isRenderable(    View view){
      return false;
    }
    @Override public void render(    View view,    Locale locale,    OutputStream output) throws IOException, WebApplicationException {
    }
    @Override public void configure(    Map<String,String> options){
      assertThat(options).containsKey(testKey);
    }
    @Override public String getConfigurationKey(){
      return configurationKey;
    }
  }
;
  new ViewBundle<MyConfiguration>(Collections.singletonList(renderer)){
    @Override public Map<String,Map<String,String>> getViewConfiguration(    MyConfiguration configuration){
      return configuration.getViewRendererConfiguration();
    }
  }
.run(myConfiguration,environment);
  final ArgumentCaptor<ViewMessageBodyWriter> captor=ArgumentCaptor.forClass(ViewMessageBodyWriter.class);
  verify(jerseyEnvironment).register(captor.capture());
  final ViewMessageBodyWriter capturedRenderer=captor.getValue();
  final Iterable<ViewRenderer> configuredRenderers=capturedRenderer.getRenderers();
  assertThat(configuredRenderers).hasSize(1);
  assertThat(configuredRenderers).contains(renderer);
}
