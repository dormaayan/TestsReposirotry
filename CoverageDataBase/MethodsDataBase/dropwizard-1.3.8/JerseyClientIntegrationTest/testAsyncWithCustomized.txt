@Test public void testAsyncWithCustomized() throws Exception {
  httpServer.createContext("/test",httpExchange -> {
    try {
      httpExchange.getResponseHeaders().add(HttpHeaders.CONTENT_TYPE,TEXT_PLAIN);
      byte[] body="Hello World!".getBytes(StandardCharsets.UTF_8);
      httpExchange.sendResponseHeaders(200,body.length);
      httpExchange.getResponseBody().write(body);
    }
  finally {
      httpExchange.close();
    }
  }
);
  httpServer.start();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Client jersey=new JerseyClientBuilder(new MetricRegistry()).using(executor,JSON_MAPPER).build("test-jersey-client");
  String uri="http://127.0.0.1:" + httpServer.getAddress().getPort() + "/test";
  CountDownLatch countDownLatch=new CountDownLatch(25);
  for (int i=0; i < 25; i++) {
    jersey.target(uri).register(HttpAuthenticationFeature.basic("scott","t1ger")).request().async().get(new InvocationCallback<String>(){
      @Override public void completed(      String s){
        assertThat(s).isEqualTo("Hello World!");
        countDownLatch.countDown();
      }
      @Override public void failed(      Throwable t){
        t.printStackTrace();
      }
    }
);
  }
  countDownLatch.await(5,TimeUnit.SECONDS);
  assertThat(countDownLatch.getCount()).isEqualTo(0);
  executor.shutdown();
  jersey.close();
}
