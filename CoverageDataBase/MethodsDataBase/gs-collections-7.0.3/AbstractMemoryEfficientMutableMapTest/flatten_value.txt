@Test public void flatten_value(){
  MutableMap<String,String> map=this.newMapWithKeysValues("1","One","2","Two");
  Function<String,Iterable<Character>> function=object -> {
    MutableList<Character> result=Lists.mutable.of();
    if (object != null) {
      char[] chars=object.toCharArray();
      for (      char aChar : chars) {
        result.add(Character.valueOf(aChar));
      }
    }
    return result;
  }
;
  RichIterable<Character> blob=map.flatCollect(function);
  RichIterable<Character> blobFromTarget=map.flatCollect(function,FastList.<Character>newList());
switch (map.size()) {
case 1:
    Assert.assertTrue(blob.containsAllArguments(Character.valueOf('O'),Character.valueOf('n'),Character.valueOf('e')));
  Assert.assertTrue(blobFromTarget.containsAllArguments(Character.valueOf('O'),Character.valueOf('n'),Character.valueOf('e')));
break;
case 2:
case 3:
Assert.assertTrue(blob.containsAllArguments(Character.valueOf('O'),Character.valueOf('n'),Character.valueOf('e'),Character.valueOf('T'),Character.valueOf('w'),Character.valueOf('o')));
Assert.assertTrue(blobFromTarget.containsAllArguments(Character.valueOf('O'),Character.valueOf('n'),Character.valueOf('e'),Character.valueOf('T'),Character.valueOf('w'),Character.valueOf('o')));
break;
default :
Assert.assertEquals(0,blob.size());
Assert.assertEquals(0,blobFromTarget.size());
break;
}
}
