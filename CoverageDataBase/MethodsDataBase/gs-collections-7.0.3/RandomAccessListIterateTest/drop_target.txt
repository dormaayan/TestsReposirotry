@Test public void drop_target(){
  MutableList<Integer> integers=this.getIntegerList();
  MutableList<Integer> expected1=FastList.newListWith(-1);
  expected1.addAll(integers.drop(2));
  Verify.assertListsEqual(expected1,RandomAccessListIterate.drop(integers,2,FastList.newListWith(-1)));
  MutableList<Integer> expected2=FastList.newListWith(-1);
  expected2.addAll(integers.drop(5));
  Verify.assertListsEqual(expected2,RandomAccessListIterate.drop(integers,5,FastList.newListWith(-1)));
  MutableList<Integer> expected3=FastList.newListWith(-1);
  expected3.addAll(integers.drop(6));
  Verify.assertListsEqual(expected3,RandomAccessListIterate.drop(integers,6,FastList.newListWith(-1)));
  MutableList<Integer> expected4=FastList.newListWith(-1);
  expected4.addAll(integers.drop(Integer.MAX_VALUE));
  Verify.assertListsEqual(expected4,RandomAccessListIterate.drop(integers,Integer.MAX_VALUE,FastList.newListWith(-1)));
  MutableList<Integer> expected5=FastList.newListWith(-1);
  expected5.addAll(integers.drop(0));
  Verify.assertListsEqual(expected5,RandomAccessListIterate.drop(integers,0,FastList.newListWith(-1)));
  Verify.assertListsEqual(FastList.newListWith(-1),RandomAccessListIterate.drop(Lists.fixedSize.of(),0,FastList.newListWith(-1)));
  Verify.assertListsEqual(FastList.newListWith(-1),RandomAccessListIterate.drop(Lists.fixedSize.of(),2,FastList.newListWith(-1)));
}
