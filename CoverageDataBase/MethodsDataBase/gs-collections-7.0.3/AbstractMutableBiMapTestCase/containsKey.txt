@Override @Test public void containsKey(){
  super.containsKey();
  MutableBiMap<Integer,Character> biMap=this.classUnderTest();
  Assert.assertTrue(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertFalse(biMap.containsKey(4));
  Assert.assertNull(biMap.put(4,'d'));
  Assert.assertTrue(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertTrue(biMap.containsKey(4));
  Assert.assertNull(biMap.put(1,null));
  Assert.assertTrue(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertTrue(biMap.containsKey(4));
  Assert.assertNull(biMap.forcePut(1,'e'));
  Assert.assertTrue(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertTrue(biMap.containsKey(4));
  Assert.assertNull(biMap.forcePut(5,'e'));
  Assert.assertFalse(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(5));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertTrue(biMap.containsKey(4));
  Assert.assertEquals(Character.valueOf('d'),biMap.forcePut(4,'e'));
  Assert.assertFalse(biMap.containsKey(1));
  Assert.assertTrue(biMap.containsKey(null));
  Assert.assertTrue(biMap.containsKey(3));
  Assert.assertTrue(biMap.containsKey(4));
  Assert.assertFalse(biMap.containsKey(5));
  HashBiMap<Integer,Character> actual=HashBiMap.newMap();
  actual.put(1,null);
  Assert.assertTrue(actual.containsKey(1));
  Assert.assertFalse(actual.containsKey(0));
}
