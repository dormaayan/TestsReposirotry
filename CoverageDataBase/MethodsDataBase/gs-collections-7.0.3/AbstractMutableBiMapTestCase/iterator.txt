@Override @Test public void iterator(){
  MutableSet<Character> expected=UnifiedSet.newSetWith(null,'b','c');
  MutableSet<Character> actual=UnifiedSet.newSet();
  MutableBiMap<Integer,Character> biMap=this.classUnderTest();
  Iterator<Character> iterator=biMap.iterator();
  Assert.assertTrue(iterator.hasNext());
  Verify.assertThrows(IllegalStateException.class,iterator::remove);
  Verify.assertSize(3,biMap);
  Verify.assertSize(3,biMap.inverse());
  for (int i=0; i < 3; i++) {
    Assert.assertTrue(iterator.hasNext());
    actual.add(iterator.next());
  }
  Assert.assertEquals(expected,actual);
  Assert.assertFalse(iterator.hasNext());
  Verify.assertThrows(NoSuchElementException.class,(Runnable)iterator::next);
  Iterator<Character> iteratorRemove=biMap.iterator();
  Assert.assertTrue(iteratorRemove.hasNext());
  Character first=iteratorRemove.next();
  iteratorRemove.remove();
  MutableBiMap<Integer,Character> expectedMap=this.classUnderTest();
  expectedMap.inverse().remove(first);
  Assert.assertEquals(expectedMap,biMap);
  Assert.assertEquals(expectedMap.inverse(),biMap.inverse());
  Verify.assertSize(2,biMap);
  Verify.assertSize(2,biMap.inverse());
  Assert.assertTrue(iteratorRemove.hasNext());
  Character second=iteratorRemove.next();
  iteratorRemove.remove();
  expectedMap.inverse().remove(second);
  Assert.assertEquals(expectedMap,biMap);
  Assert.assertEquals(expectedMap.inverse(),biMap.inverse());
  Verify.assertSize(1,biMap);
  Verify.assertSize(1,biMap.inverse());
  Assert.assertTrue(iteratorRemove.hasNext());
  Character third=iteratorRemove.next();
  iteratorRemove.remove();
  expectedMap.inverse().remove(third);
  Assert.assertEquals(expectedMap,biMap);
  Assert.assertEquals(expectedMap.inverse(),biMap.inverse());
  Verify.assertEmpty(biMap);
  Verify.assertEmpty(biMap.inverse());
  Assert.assertFalse(iteratorRemove.hasNext());
  Verify.assertThrows(NoSuchElementException.class,(Runnable)iteratorRemove::next);
}
