@Override @Test default void RichIterable_collectPrimitive(){
  assertEquals(this.getExpectedBoolean(false,true,false),this.newWith(3,2,1).collectBoolean(each -> each % 2 == 0));
  assertEquals(this.getExpectedBoolean(false,true,false),this.newWith(3,2,1).collectBoolean(each -> each % 2 == 0,this.newBooleanForTransform()));
  RichIterable<Integer> iterable=this.newWith(13,12,11,3,2,1);
  assertEquals(this.getExpectedByte((byte)3,(byte)2,(byte)1,(byte)3,(byte)2,(byte)1),iterable.collectByte(each -> (byte)(each % 10)));
  assertEquals(this.getExpectedByte((byte)3,(byte)2,(byte)1,(byte)3,(byte)2,(byte)1),iterable.collectByte(each -> (byte)(each % 10),this.newByteForTransform()));
  assertEquals(this.getExpectedChar((char)3,(char)2,(char)1,(char)3,(char)2,(char)1),iterable.collectChar(each -> (char)(each % 10)));
  assertEquals(this.getExpectedChar((char)3,(char)2,(char)1,(char)3,(char)2,(char)1),iterable.collectChar(each -> (char)(each % 10),this.newCharForTransform()));
  assertEquals(this.getExpectedDouble(3.0,2.0,1.0,3.0,2.0,1.0),iterable.collectDouble(each -> (double)(each % 10)));
  assertEquals(this.getExpectedDouble(3.0,2.0,1.0,3.0,2.0,1.0),iterable.collectDouble(each -> (double)(each % 10),this.newDoubleForTransform()));
  assertEquals(this.getExpectedFloat(3.0f,2.0f,1.0f,3.0f,2.0f,1.0f),iterable.collectFloat(each -> (float)(each % 10)));
  assertEquals(this.getExpectedFloat(3.0f,2.0f,1.0f,3.0f,2.0f,1.0f),iterable.collectFloat(each -> (float)(each % 10),this.newFloatForTransform()));
  assertEquals(this.getExpectedInt(3,2,1,3,2,1),iterable.collectInt(each -> each % 10));
  assertEquals(this.getExpectedInt(3,2,1,3,2,1),iterable.collectInt(each -> each % 10,this.newIntForTransform()));
  assertEquals(this.getExpectedLong(3,2,1,3,2,1),iterable.collectLong(each -> each % 10));
  assertEquals(this.getExpectedLong(3,2,1,3,2,1),iterable.collectLong(each -> each % 10,this.newLongForTransform()));
  assertEquals(this.getExpectedShort((short)3,(short)2,(short)1,(short)3,(short)2,(short)1),iterable.collectShort(each -> (short)(each % 10)));
  assertEquals(this.getExpectedShort((short)3,(short)2,(short)1,(short)3,(short)2,(short)1),iterable.collectShort(each -> (short)(each % 10),this.newShortForTransform()));
}
