@Override @Test public void select(){
  MutableMap<String,String> map=this.classUnderTest();
  MutableMap<String,String> empty=map.select((ignored1,ignored2) -> false);
  Verify.assertInstanceOf(EmptyMap.class,empty);
  MutableMap<String,String> full=map.select((ignored1,ignored2) -> true);
  Verify.assertInstanceOf(TripletonMap.class,full);
  Assert.assertEquals(map,full);
  MutableMap<String,String> one=map.select((argument1,argument2) -> "1".equals(argument1));
  Verify.assertInstanceOf(SingletonMap.class,one);
  Assert.assertEquals(new SingletonMap<>("1","One"),one);
  MutableMap<String,String> two=map.select((argument1,argument2) -> "2".equals(argument1));
  Verify.assertInstanceOf(SingletonMap.class,two);
  Assert.assertEquals(new SingletonMap<>("2","Two"),two);
  MutableMap<String,String> three=map.select((argument1,argument2) -> "3".equals(argument1));
  Verify.assertInstanceOf(SingletonMap.class,three);
  Assert.assertEquals(new SingletonMap<>("3","Three"),three);
  MutableMap<String,String> oneAndThree=map.select((argument1,argument2) -> "1".equals(argument1) || "3".equals(argument1));
  Verify.assertInstanceOf(DoubletonMap.class,oneAndThree);
  Assert.assertEquals(new DoubletonMap<>("1","One","3","Three"),oneAndThree);
  MutableMap<String,String> oneAndTwo=map.select((argument1,argument2) -> "1".equals(argument1) || "2".equals(argument1));
  Verify.assertInstanceOf(DoubletonMap.class,oneAndTwo);
  Assert.assertEquals(new DoubletonMap<>("1","One","2","Two"),oneAndTwo);
  MutableMap<String,String> twoAndThree=map.select((argument1,argument2) -> "2".equals(argument1) || "3".equals(argument1));
  Verify.assertInstanceOf(DoubletonMap.class,twoAndThree);
  Assert.assertEquals(new DoubletonMap<>("2","Two","3","Three"),twoAndThree);
}
