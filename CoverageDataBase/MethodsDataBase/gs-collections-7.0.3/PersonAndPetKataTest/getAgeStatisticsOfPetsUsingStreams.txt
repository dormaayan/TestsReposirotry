@Test public void getAgeStatisticsOfPetsUsingStreams(){
  List<Integer> agesStream=this.people.stream().flatMap(person -> person.getPets().stream()).map(Pet::getAge).collect(Collectors.toList());
  Set<Integer> uniqueAges=new HashSet<>(agesStream);
  IntSummaryStatistics stats=agesStream.stream().collect(Collectors.summarizingInt(i -> i));
  Assert.assertEquals(Sets.mutable.with(1,2,3,4),uniqueAges);
  Assert.assertEquals(stats.getMin(),agesStream.stream().mapToInt(i -> i).min().getAsInt());
  Assert.assertEquals(stats.getMax(),agesStream.stream().mapToInt(i -> i).max().getAsInt());
  Assert.assertEquals(stats.getSum(),agesStream.stream().mapToInt(i -> i).sum());
  Assert.assertEquals(stats.getAverage(),agesStream.stream().mapToInt(i -> i).average().getAsDouble(),0.0);
  Assert.assertEquals(stats.getCount(),agesStream.size());
  Assert.assertTrue(agesStream.stream().allMatch(i -> i > 0));
  Assert.assertFalse(agesStream.stream().anyMatch(i -> i == 0));
  Assert.assertTrue(agesStream.stream().noneMatch(i -> i < 0));
}
