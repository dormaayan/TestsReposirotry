@Test public void partitionPeopleByCatOwnersAndNonCatOwners(){
  PartitionMutableList<Person> catsAndNoCatsEager=this.people.partition(person -> person.hasPet(PetType.CAT));
  Verify.assertSize(2,catsAndNoCatsEager.getSelected());
  Verify.assertSize(5,catsAndNoCatsEager.getRejected());
  PartitionMutableList<Person> catsAndNoCatsEagerMR=this.people.partitionWith(Person::hasPet,PetType.CAT);
  Verify.assertSize(2,catsAndNoCatsEagerMR.getSelected());
  Verify.assertSize(5,catsAndNoCatsEagerMR.getRejected());
  PartitionIterable<Person> catsAndNoCatsLazy=this.people.asLazy().partition(person -> person.hasPet(PetType.CAT));
  Verify.assertSize(2,catsAndNoCatsLazy.getSelected());
  Verify.assertSize(5,catsAndNoCatsLazy.getRejected());
  PartitionIterable<Person> catsAndNoCatsLazyMR=this.people.asLazy().partitionWith(Person::hasPet,PetType.CAT);
  Verify.assertSize(2,catsAndNoCatsLazyMR.getSelected());
  Verify.assertSize(5,catsAndNoCatsLazyMR.getRejected());
}
