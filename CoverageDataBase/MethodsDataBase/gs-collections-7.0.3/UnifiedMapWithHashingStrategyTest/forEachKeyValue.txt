@Override @Test public void forEachKeyValue(){
  super.forEachKeyValue();
  UnifiedSet<Integer> keys=UnifiedSet.newSet();
  UnifiedSet<Integer> values=UnifiedSet.newSet();
  UnifiedMapWithHashingStrategy<Integer,Integer> map=UnifiedMapWithHashingStrategy.newWithKeysValues(INTEGER_HASHING_STRATEGY,COLLISION_1,1,COLLISION_2,2,COLLISION_3,3,COLLISION_4,4).withKeysValues(1,5);
  map.forEachKeyValue((argument1,argument2) -> {
    keys.add(argument1);
    values.add(argument2);
  }
);
  Verify.assertSetsEqual(UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4,1),keys);
  Verify.assertSetsEqual(UnifiedSet.newSetWith(1,2,3,4,5),values);
  UnifiedSet<Integer> keys2=UnifiedSet.newSet();
  UnifiedSet<Integer> values2=UnifiedSet.newSet();
  UnifiedMapWithHashingStrategy<Integer,Integer> map2=UnifiedMapWithHashingStrategy.newWithKeysValues(INTEGER_HASHING_STRATEGY,COLLISION_1,1,COLLISION_2,2,COLLISION_3,3,1,4);
  map2.forEachKeyValue((argument1,argument2) -> {
    keys2.add(argument1);
    values2.add(argument2);
  }
);
  Verify.assertSetsEqual(UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3,1),keys2);
  Verify.assertSetsEqual(UnifiedSet.newSetWith(1,2,3,4),values2);
}
