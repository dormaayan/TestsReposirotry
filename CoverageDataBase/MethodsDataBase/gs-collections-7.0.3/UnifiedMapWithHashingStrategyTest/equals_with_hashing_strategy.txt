@Test public void equals_with_hashing_strategy(){
  UnifiedMapWithHashingStrategy<Person,Integer> map1=UnifiedMapWithHashingStrategy.newWithKeysValues(LAST_NAME_HASHING_STRATEGY,JOHNDOE,1,JANEDOE,1,JOHNSMITH,1,JANESMITH,1);
  UnifiedMapWithHashingStrategy<Person,Integer> map2=UnifiedMapWithHashingStrategy.newWithKeysValues(FIRST_NAME_HASHING_STRATEGY,JOHNDOE,1,JANEDOE,1,JOHNSMITH,1,JANESMITH,1);
  Assert.assertEquals(map1,map2);
  Assert.assertEquals(map2,map1);
  Assert.assertNotEquals(map1.hashCode(),map2.hashCode());
  UnifiedMapWithHashingStrategy<Person,Integer> map3=UnifiedMapWithHashingStrategy.newWithKeysValues(LAST_NAME_HASHING_STRATEGY,JOHNDOE,1,JANEDOE,2,JOHNSMITH,3,JANESMITH,4);
  UnifiedMapWithHashingStrategy<Person,Integer> map4=UnifiedMapWithHashingStrategy.newMap(map3);
  HashMap<Person,Integer> hashMap=new HashMap<>(map3);
  Verify.assertEqualsAndHashCode(map3,map4);
  Assert.assertTrue(map3.equals(hashMap) && hashMap.equals(map3) && map3.hashCode() != hashMap.hashCode());
  UnifiedMap<Person,Integer> unifiedMap=UnifiedMap.newWithKeysValues(JOHNDOE,1,JANEDOE,1,JOHNSMITH,1,JANESMITH,1);
  UnifiedMapWithHashingStrategy<Person,Integer> map5=UnifiedMapWithHashingStrategy.newMap(LAST_NAME_HASHING_STRATEGY,unifiedMap);
  Assert.assertNotEquals(map5,unifiedMap);
}
