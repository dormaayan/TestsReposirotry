@Test public void equalsAndHashCode(){
  ImmutableList<Integer> immutable=this.classUnderTest();
  MutableList<Integer> mutable1=FastList.newList(immutable);
  ImmutableList<Integer> immutable1=mutable1.toImmutable();
  List<Integer> mutable2=new LinkedList<>(mutable1);
  List<Integer> mutable3=new ArrayList<>(mutable1);
  Verify.assertEqualsAndHashCode(mutable1,immutable);
  Verify.assertEqualsAndHashCode(immutable1,immutable);
  Verify.assertEqualsAndHashCode(mutable2,immutable);
  Verify.assertEqualsAndHashCode(mutable3,immutable);
  Verify.assertPostSerializedEqualsAndHashCode(immutable);
  Assert.assertNotEquals(immutable,UnifiedSet.newSet(mutable1));
  mutable1.add(null);
  mutable2.add(null);
  mutable3.add(null);
  Assert.assertNotEquals(mutable1,immutable);
  Assert.assertNotEquals(mutable2,immutable);
  Assert.assertNotEquals(mutable3,immutable);
  mutable1.remove(null);
  mutable2.remove(null);
  mutable3.remove(null);
  Verify.assertEqualsAndHashCode(mutable1,immutable);
  Verify.assertEqualsAndHashCode(mutable2,immutable);
  Verify.assertEqualsAndHashCode(mutable3,immutable);
  if (immutable.size() > 2) {
    mutable1.set(2,null);
    mutable2.set(2,null);
    mutable3.set(2,null);
    Assert.assertNotEquals(mutable1,immutable);
    Assert.assertNotEquals(mutable2,immutable);
    Assert.assertNotEquals(mutable3,immutable);
    mutable1.remove(2);
    mutable2.remove(2);
    mutable3.remove(2);
    Assert.assertNotEquals(mutable1,immutable);
    Assert.assertNotEquals(mutable2,immutable);
    Assert.assertNotEquals(mutable3,immutable);
  }
}
