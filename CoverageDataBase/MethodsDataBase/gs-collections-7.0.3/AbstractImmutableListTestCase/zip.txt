@Test public void zip(){
  ImmutableCollection<Integer> immutableCollection=this.classUnderTest();
  List<Object> nulls=Collections.nCopies(immutableCollection.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(immutableCollection.size() + 1,null);
  List<Object> nullsMinusOne=Collections.nCopies(immutableCollection.size() - 1,null);
  ImmutableCollection<Pair<Integer,Object>> pairs=immutableCollection.zip(nulls);
  Assert.assertEquals(immutableCollection,pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Assert.assertEquals(nulls,pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableCollection<Pair<Integer,Object>> pairsPlusOne=immutableCollection.zip(nullsPlusOne);
  Assert.assertEquals(immutableCollection,pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Assert.assertEquals(nulls,pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableCollection<Pair<Integer,Object>> pairsMinusOne=immutableCollection.zip(nullsMinusOne);
  Assert.assertEquals(immutableCollection.size() - 1,pairsMinusOne.size());
  Assert.assertTrue(immutableCollection.containsAllIterable(pairsMinusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne)));
  Assert.assertEquals(immutableCollection.zip(nulls),immutableCollection.zip(nulls,FastList.<Pair<Integer,Object>>newList()));
}
