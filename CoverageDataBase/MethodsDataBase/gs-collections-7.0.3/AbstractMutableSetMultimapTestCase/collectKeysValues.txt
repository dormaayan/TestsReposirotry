@Override @Test public void collectKeysValues(){
  MutableSetMultimap<String,Integer> multimap=this.newMultimap();
  multimap.putAll("1",FastList.newListWith(1,2,3,4));
  multimap.putAll("2",FastList.newListWith(2,3,4,5));
  MutableBagMultimap<Integer,String> collectedMultimap1=multimap.collectKeysValues((key,value) -> Tuples.pair(Integer.valueOf(key),value + "Value"));
  MutableBagMultimap<Integer,String> expectedMultimap1=HashBagMultimap.newMultimap();
  expectedMultimap1.putAll(1,FastList.newListWith("1Value","2Value","3Value","4Value"));
  expectedMultimap1.putAll(2,FastList.newListWith("2Value","3Value","4Value","5Value"));
  Assert.assertEquals(expectedMultimap1,collectedMultimap1);
  Assert.assertEquals(expectedMultimap1.get(1),collectedMultimap1.get(1));
  Assert.assertEquals(expectedMultimap1.get(2),collectedMultimap1.get(2));
  MutableBagMultimap<Integer,String> collectedMultimap2=multimap.collectKeysValues((key,value) -> Tuples.pair(1,value + "Value"));
  MutableBagMultimap<Integer,String> expectedMultimap2=HashBagMultimap.newMultimap();
  expectedMultimap2.putAll(1,FastList.newListWith("1Value","2Value","3Value","4Value"));
  expectedMultimap2.putAll(1,FastList.newListWith("2Value","3Value","4Value","5Value"));
  Assert.assertEquals(expectedMultimap2,collectedMultimap2);
  Assert.assertEquals(expectedMultimap2.get(1),collectedMultimap2.get(1));
}
