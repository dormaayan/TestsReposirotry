@Test public void selectInstancesOf(){
  Assert.assertEquals(this.getExpected().selectInstancesOf(Integer.class),this.getActual(this.classUnderTest().selectInstancesOf(Integer.class)));
  Assert.assertEquals(this.getExpected().selectInstancesOf(String.class),this.getActual(this.classUnderTest().selectInstancesOf(String.class)));
  Assert.assertEquals(this.getExpected().selectInstancesOf(Integer.class).toList().toBag(),this.classUnderTest().selectInstancesOf(Integer.class).toList().toBag());
  Assert.assertEquals(this.getExpected().selectInstancesOf(Integer.class).toBag(),this.classUnderTest().selectInstancesOf(Integer.class).toBag());
  Function<Integer,Number> numberFunction=integer -> {
    if (IntegerPredicates.isEven().accept(integer)) {
      return Double.valueOf(integer.doubleValue());
    }
    return integer;
  }
;
  Assert.assertEquals(this.getExpectedCollect().collect(numberFunction).selectInstancesOf(Integer.class),this.getActual(this.classUnderTest().collect(numberFunction).selectInstancesOf(Integer.class)));
}
