@Test public void sumOfFloatConsistentRounding(){
  FloatFunction<Integer> roundingSensitiveElementFunction=i -> (i <= 99995) ? 1.0e-18f : 1.0f;
  MutableList<Integer> list=Interval.oneTo(100_000).toList().shuffleThis();
  double baseline=this.getExpectedWith(list.toArray(new Integer[]{})).sumOfFloat(roundingSensitiveElementFunction);
  for (  Integer batchSize : BATCH_SIZES) {
    this.batchSize=batchSize;
    ParallelIterable<Integer> testCollection=this.newWith(list.toArray(new Integer[]{}));
    Assert.assertEquals("Batch size: " + this.batchSize,baseline,testCollection.sumOfFloat(roundingSensitiveElementFunction),1.0e-15d);
  }
}
