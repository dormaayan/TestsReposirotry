@Test public void mapsEqual(){
  Map<?,?> nullMap=null;
  Verify.assertMapsEqual(nullMap,nullMap);
  Verify.assertMapsEqual("assertMapsEqual(nullMap, nullMap)",nullMap,nullMap);
  Verify.assertMapsEqual(this.map,this.map);
  Verify.assertMapsEqual("assertMapsEqual(map, map)",this.map,this.map);
  try {
    Verify.assertMapsEqual("assertMapsEqual(nullMap, map)",nullMap,this.map);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertMapsEqual(nullMap,this.map);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertMapsEqual("assertMapsEqual(map, nullMap)",this.map,nullMap);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertMapsEqual(this.map,nullMap);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
}
