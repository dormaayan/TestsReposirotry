@Test public void setsEqual(){
  Set<?> nullSet=null;
  Verify.assertSetsEqual(nullSet,nullSet);
  Verify.assertSetsEqual("assertSetsEqual(nullSet, nullSet)",nullSet,nullSet);
  Verify.assertSetsEqual(this.set,this.set);
  Verify.assertSetsEqual("assertSetsEqual(set, set)",this.set,this.set);
  try {
    Verify.assertSetsEqual("assertSetsEqual(nullSet, set)",nullSet,this.set);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSetsEqual(nullSet,this.set);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSetsEqual("assertSetsEqual(set, nullSet)",this.set,nullSet);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSetsEqual(this.set,nullSet);
    Assert.fail("AssertionError expected");
  }
 catch (  AssertionError e) {
    Verify.assertContains(CollectionsEqualTest.class.getName(),e.getStackTrace()[0].toString());
  }
}
