@Override @Test public void powerSet(){
  ImmutableSortedSet<SortedSetIterable<Integer>> intPowerSet=SortedSets.immutable.of(1,2,3).powerSet();
  ImmutableSortedSet<SortedSetIterable<Integer>> revPowerSet=SortedSets.immutable.of(Comparators.<Integer>reverseNaturalOrder(),1,2,3).powerSet();
  FastList<TreeSortedSet<Integer>> expectedSortedSet=FastList.newListWith(TreeSortedSet.<Integer>newSet(),TreeSortedSet.newSetWith(1),TreeSortedSet.newSetWith(2),TreeSortedSet.newSetWith(3),TreeSortedSet.newSetWith(1,2),TreeSortedSet.newSetWith(1,3),TreeSortedSet.newSetWith(2,3),TreeSortedSet.newSetWith(1,2,3));
  FastList<TreeSortedSet<Integer>> expectedRevSortedSet=FastList.newListWith(TreeSortedSet.<Integer>newSet(),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),3),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),2),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),2,3),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1,3),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1,2),TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1,2,3));
  Verify.assertListsEqual(expectedSortedSet,intPowerSet.toList());
  Verify.assertListsEqual(expectedRevSortedSet,revPowerSet.toList());
}
