@SuppressWarnings("RedundantArrayCreation") @Test public void newBagWithArray(){
  ImmutableBooleanBag bag=BooleanBags.immutable.of();
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true}));
  Assert.assertEquals(bag=bag.newWith(false),BooleanBags.immutable.of(new boolean[]{true,false}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true}));
  Assert.assertEquals(bag=bag.newWith(false),BooleanBags.immutable.of(new boolean[]{true,false,true,false}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true}));
  Assert.assertEquals(bag=bag.newWith(false),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false,true}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false,true,true}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true}));
  Assert.assertEquals(bag=bag.newWith(false),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true,false}));
  Assert.assertEquals(bag=bag.newWith(true),BooleanBags.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true,false,true}));
}
