@Override @Test public void detect(){
  super.detect();
  int size=MORE_COLLISIONS.size();
  for (int i=1; i < size; i++) {
    MutableSet<Integer> set=this.newWith();
    set.addAll(MORE_COLLISIONS.subList(0,i));
    Verify.assertItemAtIndex(set.detect(MORE_COLLISIONS.get(i - 1)::equals),i - 1,MORE_COLLISIONS);
  }
  MutableSet<Integer> set=this.newWith(COLLISION_1,COLLISION_2);
  set.remove(COLLISION_2);
  Assert.assertEquals(COLLISION_1,set.detect(COLLISION_1::equals));
  Assert.assertNull(set.detect(COLLISION_2::equals));
  for (int i=0; i < COLLISIONS.size(); i++) {
    MutableSet<Integer> rehashingSet=this.newWith();
    rehashingSet.addAll(COLLISIONS.subList(0,i));
    Integer last=COLLISIONS.subList(0,i).getLast();
    rehashingSet.remove(last);
    int rehashingSetSize=rehashingSet.size();
    for (int j=0; j < rehashingSetSize; j++) {
      rehashingSet.add(Integer.valueOf(j + 1));
    }
    rehashingSet.add(last);
    Assert.assertEquals(last,rehashingSet.detect(Predicates.equal(last)));
    Assert.assertNull(rehashingSet.detect(Integer.valueOf(5)::equals));
  }
}
