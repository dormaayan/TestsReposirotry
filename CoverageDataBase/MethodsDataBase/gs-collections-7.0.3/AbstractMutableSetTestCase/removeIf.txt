@Override @Test public void removeIf(){
  super.removeIf();
  MutableSet<IntegerWithCast> set=this.newWith();
  MutableList<IntegerWithCast> collisions=COLLISIONS.collect(IntegerWithCast::new);
  set.addAll(collisions);
  collisions.reverseForEach(each -> {
    Assert.assertFalse(set.remove(null));
    Assert.assertTrue(set.remove(each));
    Assert.assertFalse(set.remove(each));
    Assert.assertFalse(set.remove(null));
    Assert.assertFalse(set.remove(new IntegerWithCast(COLLISION_10)));
  }
);
  Assert.assertEquals(UnifiedSet.<IntegerWithCast>newSet(),set);
  collisions.forEach(Procedures.cast(each -> {
    MutableSet<IntegerWithCast> set2=this.newWith();
    set2.addAll(collisions);
    Assert.assertFalse(set2.remove(null));
    Assert.assertTrue(set2.remove(each));
    Assert.assertFalse(set2.remove(each));
    Assert.assertFalse(set2.remove(null));
    Assert.assertFalse(set2.remove(new IntegerWithCast(COLLISION_10)));
  }
));
  MutableSet<Integer> set3=this.newWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4);
  Assert.assertTrue(set3.remove(COLLISION_3));
  Assert.assertEquals(UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_4),set3);
  Assert.assertTrue(set3.remove(COLLISION_2));
  Assert.assertEquals(UnifiedSet.newSetWith(COLLISION_1,COLLISION_4),set3);
  MutableSet<Integer> chain=this.newWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4);
  Assert.assertFalse(chain.remove(COLLISION_5));
  MutableSet<Integer> deepChain=this.newWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4,COLLISION_5,COLLISION_6,COLLISION_7);
  Assert.assertFalse(deepChain.remove(COLLISION_8));
  MutableSet<Integer> empty=this.newWith();
  Assert.assertFalse(empty.remove(COLLISION_1));
}
