@Override @Test public void anySatisfyWith(){
  super.anySatisfyWith();
  int size=MORE_COLLISIONS.size();
  for (int i=1; i < size; i++) {
    MutableSet<Integer> set=this.newWith();
    set.addAll(MORE_COLLISIONS.subList(0,i));
    Assert.assertTrue(set.anySatisfyWith(Object::equals,MORE_COLLISIONS.subList(0,i).getLast()));
    Assert.assertFalse(set.anySatisfyWith(Predicates2.greaterThan(),MORE_COLLISIONS.subList(0,i).getLast()));
  }
  MutableSet<Integer> set=this.newWith(COLLISION_1,COLLISION_2);
  set.remove(COLLISION_2);
  Assert.assertTrue(set.anySatisfyWith(Object::equals,COLLISION_1));
  Assert.assertFalse(set.anySatisfyWith(Object::equals,COLLISION_2));
  MutableSet<Integer> caseA=this.newWith(COLLISION_1,COLLISION_2);
  caseA.remove(COLLISION_2);
  caseA.add(Integer.valueOf(1));
  caseA.add(Integer.valueOf(2));
  caseA.add(COLLISION_2);
  Assert.assertTrue(caseA.anySatisfyWith(Object::equals,COLLISION_2));
}
