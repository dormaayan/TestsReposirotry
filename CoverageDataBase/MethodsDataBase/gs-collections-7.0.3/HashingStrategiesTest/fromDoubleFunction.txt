@Test public void fromDoubleFunction(){
  HashingStrategy<Integer> doubleFunctionHashingStrategy=HashingStrategies.fromDoubleFunction((DoubleFunction<Integer>)Integer::doubleValue);
  Assert.assertEquals(Double.valueOf(100).hashCode(),doubleFunctionHashingStrategy.computeHashCode(Integer.valueOf(100)));
  Assert.assertTrue(doubleFunctionHashingStrategy.equals(Integer.valueOf(2),Integer.valueOf(2)));
  Assert.assertFalse(doubleFunctionHashingStrategy.equals(Integer.valueOf(2),Integer.valueOf(1)));
  HashingStrategy<Double> doublePassThruFunction=HashingStrategies.fromDoubleFunction(Double::doubleValue);
  Assert.assertEquals(Double.valueOf(Double.NaN).hashCode(),doublePassThruFunction.computeHashCode(Double.NaN));
  Assert.assertNotEquals(Double.valueOf(Double.POSITIVE_INFINITY).hashCode(),doublePassThruFunction.computeHashCode(Double.NaN));
  Assert.assertEquals(Double.valueOf(Double.POSITIVE_INFINITY).hashCode(),doublePassThruFunction.computeHashCode(Double.POSITIVE_INFINITY));
  Assert.assertTrue(doublePassThruFunction.equals(Double.NaN,Double.NaN));
  Assert.assertFalse(doublePassThruFunction.equals(Double.NaN,Double.POSITIVE_INFINITY));
}
