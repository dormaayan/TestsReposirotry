@Test public void fromFloatFunction(){
  HashingStrategy<Integer> floatFunctionHashingStrategy=HashingStrategies.fromFloatFunction((FloatFunction<Integer>)Integer::floatValue);
  Assert.assertEquals(Float.valueOf(100).hashCode(),floatFunctionHashingStrategy.computeHashCode(Integer.valueOf(100)));
  Assert.assertTrue(floatFunctionHashingStrategy.equals(Integer.valueOf(2),Integer.valueOf(2)));
  Assert.assertFalse(floatFunctionHashingStrategy.equals(Integer.valueOf(2),Integer.valueOf(1)));
  HashingStrategy<Float> floatPassThruFunction=HashingStrategies.fromFloatFunction(Float::floatValue);
  Assert.assertEquals(Float.valueOf(Float.NaN).hashCode(),floatPassThruFunction.computeHashCode(Float.NaN));
  Assert.assertNotEquals(Float.valueOf(Float.POSITIVE_INFINITY).hashCode(),floatPassThruFunction.computeHashCode(Float.NaN));
  Assert.assertEquals(Float.valueOf(Float.POSITIVE_INFINITY).hashCode(),floatPassThruFunction.computeHashCode(Float.POSITIVE_INFINITY));
  Assert.assertTrue(floatPassThruFunction.equals(Float.NaN,Float.NaN));
  Assert.assertFalse(floatPassThruFunction.equals(Float.NaN,Float.POSITIVE_INFINITY));
}
