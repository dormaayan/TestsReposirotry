@Test public void drop_target(){
  ArrayList<Integer> list=this.getIntegerList();
  MutableList<Integer> integers1=FastList.newList(list);
  MutableList<Integer> expected1=FastList.newListWith(-1);
  expected1.addAll(integers1.drop(2));
  Verify.assertListsEqual(expected1,ArrayListIterate.drop(list,2,FastList.newListWith(-1)));
  MutableList<Integer> expected2=FastList.newListWith(-1);
  expected2.addAll(integers1.drop(5));
  Verify.assertListsEqual(expected2,ArrayListIterate.drop(list,5,FastList.newListWith(-1)));
  MutableList<Integer> expected3=FastList.newListWith(-1);
  expected3.addAll(integers1.drop(6));
  Verify.assertListsEqual(expected3,ArrayListIterate.drop(list,6,FastList.newListWith(-1)));
  MutableList<Integer> expected4=FastList.newListWith(-1);
  expected4.addAll(integers1.drop(0));
  Verify.assertListsEqual(expected4,ArrayListIterate.drop(list,0,FastList.newListWith(-1)));
  MutableList<Integer> expected5=FastList.newListWith(-1);
  expected5.addAll(integers1.drop(Integer.MAX_VALUE));
  Verify.assertListsEqual(expected5,ArrayListIterate.drop(list,Integer.MAX_VALUE,FastList.newListWith(-1)));
  Verify.assertListsEqual(FastList.newListWith(-1),ArrayListIterate.drop(new ArrayList<>(),2,FastList.newListWith(-1)));
  ArrayList<Integer> list2=new ArrayList<>();
  list2.addAll(Interval.oneTo(125));
  FastList<Integer> integers2=FastList.newList(list2);
  MutableList<Integer> expected6=FastList.newListWith(-1);
  expected6.addAll(integers2.drop(120));
  Verify.assertListsEqual(expected6,ArrayListIterate.drop(list2,120,FastList.newListWith(-1)));
  MutableList<Integer> expected7=FastList.newListWith(-1);
  expected7.addAll(integers2.drop(125));
  Verify.assertListsEqual(expected7,ArrayListIterate.drop(list2,125,FastList.newListWith(-1)));
  Verify.assertListsEqual(FastList.newListWith(-1),ArrayListIterate.drop(list2,Integer.MAX_VALUE,FastList.newListWith(-1)));
}
