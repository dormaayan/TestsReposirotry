@Test public void take_target(){
  ArrayList<Integer> list1=this.getIntegerList();
  MutableList<Integer> expected1=FastList.newListWith(-1);
  expected1.addAll(FastList.newList(list1).take(2));
  Verify.assertListsEqual(expected1,ArrayListIterate.take(list1,2,FastList.newListWith(-1)));
  MutableList<Integer> expected2=FastList.newListWith(-1);
  expected2.addAll(FastList.newList(list1).take(0));
  Verify.assertListsEqual(expected2,ArrayListIterate.take(list1,0,FastList.newListWith(-1)));
  MutableList<Integer> expected3=FastList.newListWith(-1);
  expected3.addAll(FastList.newList(list1).take(5));
  Verify.assertListsEqual(expected3,ArrayListIterate.take(list1,5,FastList.newListWith(-1)));
  Verify.assertListsEqual(FastList.newListWith(-1),ArrayListIterate.take(new ArrayList<>(),2,FastList.newListWith(-1)));
  ArrayList<Integer> list2=new ArrayList<>();
  list2.addAll(Interval.oneTo(120));
  FastList<Integer> integers=FastList.newList(list2);
  MutableList<Integer> expected4=FastList.newListWith(-1);
  expected4.addAll(integers.take(125));
  Verify.assertListsEqual(expected4,ArrayListIterate.take(list2,125,FastList.newListWith(-1)));
  MutableList<Integer> expected5=FastList.newListWith(-1);
  expected5.addAll(integers.take(Integer.MAX_VALUE));
  Verify.assertListsEqual(expected5,ArrayListIterate.take(list2,Integer.MAX_VALUE,FastList.newListWith(-1)));
}
