@Test public void sumByFloatConsistentRounding(){
  MutableList<Integer> group1=Interval.oneTo(100_000).toList().shuffleThis();
  MutableList<Integer> group2=Interval.fromTo(100_001,200_000).toList().shuffleThis();
  MutableList<Integer> integers=Lists.mutable.withAll(group1);
  integers.addAll(group2);
  ObjectDoubleMap<Integer> result=ParallelIterate.<Integer,Integer>sumByFloat(integers,integer -> integer > 100_000 ? 2 : 1,integer -> {
    Integer i=integer > 100_000 ? integer - 100_000 : integer;
    return 1.0f / (i.floatValue() * i.floatValue() * i.floatValue()* i.floatValue());
  }
);
  Assert.assertEquals(1.082323233761663,result.get(1),1.0e-15);
  Assert.assertEquals(1.082323233761663,result.get(2),1.0e-15);
}
