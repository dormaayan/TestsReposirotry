@Test public void sumByBigInteger(){
  MutableList<BigInteger> list=Interval.oneTo(100000).collect(Object::toString).collect(BigInteger::new).toList().shuffleThis();
  MutableMap<String,BigInteger> sumByCount=ParallelIterate.sumByBigInteger(list,EVEN_OR_ODD_BI,bi -> BigInteger.valueOf(1L));
  Assert.assertEquals(BigInteger.valueOf(50000L),sumByCount.get("Even"));
  Assert.assertEquals(BigInteger.valueOf(50000L),sumByCount.get("Odd"));
  MutableMap<String,BigInteger> sumByValue=ParallelIterate.sumByBigInteger(list,EVEN_OR_ODD_BI,bi -> bi);
  Assert.assertEquals(Iterate.sumByBigInteger(list,EVEN_OR_ODD_BI,bi -> bi),sumByValue);
  MutableMap<Integer,BigInteger> sumByValue2=ParallelIterate.sumByBigInteger(list,bi -> bi.intValue() % 1000,bi -> bi);
  Assert.assertEquals(Iterate.sumByBigInteger(list,bi -> bi.intValue() % 1000,bi -> bi),sumByValue2);
  MutableList<BigInteger> list2=Interval.oneTo(UNEVEN_COUNT_FOR_SUMBY).collect(Object::toString).collect(BigInteger::new).toList();
  MutableMap<String,BigInteger> sumByValue3=ParallelIterate.sumByBigInteger(list2,EVEN_OR_ODD_BI,bi -> bi);
  Assert.assertEquals(Iterate.sumByBigInteger(list2,EVEN_OR_ODD_BI,bi -> bi),sumByValue3);
  MutableMap<Integer,BigInteger> sumByValue4=ParallelIterate.sumByBigInteger(list2,bi -> bi.intValue() % 1000,bi -> bi);
  Assert.assertEquals(Iterate.sumByBigInteger(list2,bi -> bi.intValue() % 1000,bi -> bi),sumByValue4);
  Interval small=Interval.oneTo(11);
  MutableMap<String,BigInteger> smallSumByCount=ParallelIterate.sumByBigInteger(small,EVEN_OR_ODD,i -> BigInteger.valueOf(1L));
  Assert.assertEquals(new BigInteger("5"),smallSumByCount.get("Even"));
  Assert.assertEquals(new BigInteger("6"),smallSumByCount.get("Odd"));
}
