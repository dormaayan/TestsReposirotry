@Test public void sumByBigDecimal(){
  MutableList<BigDecimal> list=Interval.oneTo(100000).collect(BigDecimal::new).toList().shuffleThis();
  MutableMap<String,BigDecimal> sumByCount=ParallelIterate.sumByBigDecimal(list,EVEN_OR_ODD_BD,bd -> new BigDecimal(1L));
  Assert.assertEquals(BigDecimal.valueOf(50000L),sumByCount.get("Even"));
  Assert.assertEquals(BigDecimal.valueOf(50000L),sumByCount.get("Odd"));
  MutableMap<String,BigDecimal> sumByValue=ParallelIterate.sumByBigDecimal(list,EVEN_OR_ODD_BD,bd -> bd);
  Assert.assertEquals(Iterate.sumByBigDecimal(list,EVEN_OR_ODD_BD,bd -> bd),sumByValue);
  MutableMap<Integer,BigDecimal> sumByValue2=ParallelIterate.sumByBigDecimal(list,bd -> bd.intValue() % 1000,bd -> bd);
  Assert.assertEquals(Iterate.sumByBigDecimal(list,bd -> bd.intValue() % 1000,bd -> bd),sumByValue2);
  MutableList<BigDecimal> list2=Interval.oneTo(UNEVEN_COUNT_FOR_SUMBY).collect(BigDecimal::new).toList();
  MutableMap<String,BigDecimal> sumByValue3=ParallelIterate.sumByBigDecimal(list2,EVEN_OR_ODD_BD,bd -> bd);
  Assert.assertEquals(Iterate.sumByBigDecimal(list2,EVEN_OR_ODD_BD,bd -> bd),sumByValue3);
  MutableMap<Integer,BigDecimal> sumByValue4=ParallelIterate.sumByBigDecimal(list2,bd -> bd.intValue() % 1000,bd -> bd);
  Assert.assertEquals(Iterate.sumByBigDecimal(list2,bd -> bd.intValue() % 1000,bd -> bd),sumByValue4);
  Interval small=Interval.oneTo(11);
  MutableMap<String,BigDecimal> smallSumByCount=ParallelIterate.sumByBigDecimal(small,EVEN_OR_ODD,i -> BigDecimal.valueOf(1L));
  Assert.assertEquals(new BigDecimal(5),smallSumByCount.get("Even"));
  Assert.assertEquals(new BigDecimal(6),smallSumByCount.get("Odd"));
}
