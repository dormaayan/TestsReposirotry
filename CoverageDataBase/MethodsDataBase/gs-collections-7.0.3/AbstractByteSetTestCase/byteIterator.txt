@Override @Test public void byteIterator(){
  MutableSet<Byte> expected=UnifiedSet.newSetWith((byte)0,(byte)1,(byte)31,(byte)63,(byte)100,(byte)127,(byte)-1,(byte)-35,(byte)-64,(byte)-100,(byte)-128);
  MutableSet<Byte> actual=UnifiedSet.newSet();
  MutableByteSet set=this.newWith((byte)0,(byte)1,(byte)31,(byte)63,(byte)100,(byte)127,(byte)-1,(byte)-35,(byte)-64,(byte)-100,(byte)-128);
  ByteIterator iterator=set.byteIterator();
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertTrue(iterator.hasNext());
  actual.add(iterator.next());
  Assert.assertFalse(iterator.hasNext());
  Assert.assertEquals(expected,actual);
  Verify.assertThrows(NoSuchElementException.class,(Runnable)iterator::next);
}
