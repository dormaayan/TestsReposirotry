@Override @Test public void removeAll(){
  super.removeAll();
  MutableByteSet set=this.newWith((byte)0,(byte)1,(byte)31,(byte)63,(byte)100,(byte)127,(byte)-1,(byte)-35,(byte)-64,(byte)-100,(byte)-128);
  Assert.assertFalse(set.removeAll());
  Assert.assertFalse(set.removeAll((byte)15,(byte)-5,(byte)-32));
  Assert.assertEquals(ByteHashSet.newSetWith((byte)0,(byte)1,(byte)31,(byte)63,(byte)100,(byte)127,(byte)-1,(byte)-35,(byte)-64,(byte)-100,(byte)-128),set);
  Assert.assertTrue(set.removeAll((byte)0,(byte)1,(byte)-1,(byte)-128));
  Assert.assertEquals(ByteHashSet.newSetWith((byte)31,(byte)63,(byte)100,(byte)127,(byte)-35,(byte)-64,(byte)-100),set);
  Assert.assertTrue(set.removeAll((byte)31,(byte)63,(byte)14,(byte)-100));
  Assert.assertEquals(ByteHashSet.newSetWith((byte)100,(byte)127,(byte)-35,(byte)-64),set);
  Assert.assertFalse(set.removeAll((byte)-34,(byte)-36,(byte)-63,(byte)-65,(byte)99,(byte)101,(byte)126,(byte)128));
  Assert.assertEquals(ByteHashSet.newSetWith((byte)100,(byte)127,(byte)-35,(byte)-64),set);
  Assert.assertTrue(set.removeAll((byte)-35,(byte)-63,(byte)-64,(byte)100,(byte)127));
  Assert.assertEquals(new ByteHashSet(),set);
}
