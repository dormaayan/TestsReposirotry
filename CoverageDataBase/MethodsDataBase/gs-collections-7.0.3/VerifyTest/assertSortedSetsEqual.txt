@Test public void assertSortedSetsEqual(){
  TreeSortedSet<Integer> integers=TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1,2,3,4);
  Verify.assertSortedSetsEqual(null,null);
  Verify.assertSortedSetsEqual(TreeSortedSet.newSet(),new TreeSet<Object>());
  Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(1,2,3),new TreeSet<Integer>(FastList.newListWith(1,2,3)));
  Verify.assertSortedSetsEqual(new TreeSet<Integer>(integers),integers);
  Verify.assertSortedSetsEqual(TreeSortedSet.newSet(integers),integers);
  try {
    Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(1,2,3),new TreeSet<Object>(FastList.newListWith()));
    Assert.fail();
  }
 catch (  AssertionError e) {
    Verify.assertContains(VerifyTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(1,2,3),integers);
    Assert.fail();
  }
 catch (  AssertionError e) {
    Verify.assertContains(VerifyTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),1,2,3,4,5),integers);
    Assert.fail();
  }
 catch (  AssertionError e) {
    Verify.assertContains(VerifyTest.class.getName(),e.getStackTrace()[0].toString());
  }
  try {
    Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(Comparators.<Integer>reverseNaturalOrder(),3,4),integers);
    Assert.fail();
  }
 catch (  AssertionError e) {
    Verify.assertContains(VerifyTest.class.getName(),e.getStackTrace()[0].toString());
  }
}
