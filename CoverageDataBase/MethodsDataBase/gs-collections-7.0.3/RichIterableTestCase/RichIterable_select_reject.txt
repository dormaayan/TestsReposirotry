@Test default void RichIterable_select_reject(){
  RichIterable<Integer> iterable=this.newWith(4,4,4,4,3,3,3,2,2,1);
  assertEquals(this.getExpectedFiltered(4,4,4,4,2,2),iterable.select(IntegerPredicates.isEven()));
  assertEquals(this.newMutableForFilter(4,4,4,4,2,2),iterable.select(IntegerPredicates.isEven(),this.<Integer>newMutableForFilter()));
  assertEquals(this.getExpectedFiltered(4,4,4,4,3,3,3),iterable.selectWith(Predicates2.greaterThan(),2));
  assertEquals(this.newMutableForFilter(4,4,4,4,3,3,3),iterable.selectWith(Predicates2.<Integer>greaterThan(),2,this.<Integer>newMutableForFilter()));
  assertEquals(this.getExpectedFiltered(4,4,4,4,2,2),iterable.reject(IntegerPredicates.isOdd()));
  assertEquals(this.newMutableForFilter(4,4,4,4,2,2),iterable.reject(IntegerPredicates.isOdd(),this.<Integer>newMutableForFilter()));
  assertEquals(this.getExpectedFiltered(4,4,4,4,3,3,3),iterable.rejectWith(Predicates2.lessThan(),3));
  assertEquals(this.newMutableForFilter(4,4,4,4,3,3,3),iterable.rejectWith(Predicates2.<Integer>lessThan(),3,this.<Integer>newMutableForFilter()));
}
