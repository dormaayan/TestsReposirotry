@Override @Test public void addAllIterable(){
  super.addAllIterable();
  MutableSet<Integer> expected=UnifiedSetWithHashingStrategy.newSetWith(INTEGER_HASHING_STRATEGY,COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4,COLLISION_5,COLLISION_6,COLLISION_7);
  Assert.assertTrue(UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY).addAllIterable(expected));
  UnifiedSetWithHashingStrategy<Integer> tiny=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY,0);
  Assert.assertTrue(tiny.addAllIterable(FastList.newListWith(COLLISION_1)));
  UnifiedSetWithHashingStrategy<Integer> integers=UnifiedSetWithHashingStrategy.newSetWith(INTEGER_HASHING_STRATEGY,COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4);
  UnifiedSetWithHashingStrategy<Integer> set=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY);
  integers.remove(COLLISION_4);
  Assert.assertTrue(set.addAllIterable(integers));
  Assert.assertEquals(UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3),set);
  integers.remove(COLLISION_3);
  Assert.assertFalse(set.addAllIterable(integers));
  integers.remove(COLLISION_2);
  Assert.assertFalse(set.addAllIterable(integers));
  Assert.assertEquals(UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3),set);
}
