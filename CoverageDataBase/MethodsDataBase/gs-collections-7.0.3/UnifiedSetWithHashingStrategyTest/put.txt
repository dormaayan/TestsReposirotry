@Test public void put(){
  int size=MORE_COLLISIONS.size();
  for (int i=1; i <= size; i++) {
    Pool<Integer> unifiedSet=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY,1).withAll(MORE_COLLISIONS.subList(0,i - 1));
    Integer newValue=MORE_COLLISIONS.get(i - 1);
    Assert.assertSame(newValue,unifiedSet.put(newValue));
    Assert.assertSame(newValue,unifiedSet.put(new Integer(newValue)));
  }
  Pool<Integer> set=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY,4).with(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4);
  for (int i=0; i < set.size(); i++) {
    Integer value=COLLISIONS.get(i);
    Assert.assertSame(value,set.put(value));
  }
  for (int i=0; i < COLLISIONS.size(); i++) {
    Pool<Integer> pool=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY,i).withAll(COLLISIONS.subList(0,i));
    if (i == 2) {
      pool.put(Integer.valueOf(1));
    }
    if (i == 4) {
      pool.put(Integer.valueOf(1));
      pool.put(Integer.valueOf(2));
    }
    Integer value=COLLISIONS.get(i);
    Assert.assertSame(value,pool.put(value));
  }
  Pool<Integer> pool=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY,2).with(COLLISION_1,COLLISION_2);
  pool.removeFromPool(COLLISION_2);
  pool.put(Integer.valueOf(1));
  pool.put(Integer.valueOf(2));
  Assert.assertSame(COLLISION_2,pool.put(COLLISION_2));
  Pool<Integer> olympicPool=UnifiedSetWithHashingStrategy.newSet(INTEGER_HASHING_STRATEGY);
  Assert.assertSame(COLLISION_1,olympicPool.put(COLLISION_1));
  Assert.assertSame(COLLISION_2,olympicPool.put(COLLISION_2));
}
