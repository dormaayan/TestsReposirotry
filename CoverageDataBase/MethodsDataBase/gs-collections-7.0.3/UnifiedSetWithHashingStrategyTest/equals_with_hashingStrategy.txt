@Test public void equals_with_hashingStrategy(){
  HashingStrategy<Person> personHashingStrategy=HashingStrategies.fromFunction(Person.TO_LAST);
  HashingStrategy<Person> personHashingStrategyCopy=HashingStrategies.fromFunction(Person.TO_LAST);
  UnifiedSetWithHashingStrategy<Person> setA=UnifiedSetWithHashingStrategy.newSet(personHashingStrategy,PEOPLE);
  UnifiedSetWithHashingStrategy<Person> setB=UnifiedSetWithHashingStrategy.newSet(personHashingStrategyCopy,PEOPLE);
  Verify.assertEqualsAndHashCode(setA,setB);
  HashSet<Person> hashSet=new HashSet<>(setA);
  Assert.assertTrue(hashSet.equals(setA) && setA.equals(hashSet));
  UnifiedSet<Person> unifiedSet=UnifiedSet.newSet(setA);
  Assert.assertTrue(unifiedSet.equals(setA) && setA.equals(unifiedSet));
  HashingStrategy<String> firstLetterHashingStrategy=new HashingStrategy<String>(){
    public int computeHashCode(    String object){
      return Character.valueOf(object.charAt(0));
    }
    public boolean equals(    String object1,    String object2){
      return object1.charAt(0) == object2.charAt(0);
    }
  }
;
  UnifiedSetWithHashingStrategy<String> hashedString=UnifiedSetWithHashingStrategy.newSetWith(firstLetterHashingStrategy,"apple","banana","cheese");
  UnifiedSetWithHashingStrategy<String> anotherHashedString=UnifiedSetWithHashingStrategy.newSetWith(firstLetterHashingStrategy,"a","b","c");
  UnifiedSet<String> normalString=UnifiedSet.newSetWith("alpha","bravo","charlie");
  Assert.assertTrue(hashedString.equals(normalString) && hashedString.equals(hashedString));
  Assert.assertFalse(normalString.equals(hashedString) && hashedString.equals(normalString));
  Verify.assertEqualsAndHashCode(hashedString,anotherHashedString);
  Assert.assertNotEquals(hashedString,normalString.remove("alpha"));
}
