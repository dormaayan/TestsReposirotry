@Override @Test public void retainAll_iterable(){
  super.retainAll_iterable();
  Assert.assertFalse(this.emptySet.retainAll(new BooleanArrayList()));
  Assert.assertTrue(this.setWithTrueFalse.retainAll(BooleanArrayList.newListWith(true,true)));
  Assert.assertEquals(BooleanHashSet.newSetWith(true),this.setWithTrueFalse);
  MutableBooleanSet set=this.newWith(true,false);
  Assert.assertTrue(set.retainAll(BooleanArrayList.newListWith()));
  Assert.assertEquals(BooleanHashSet.newSetWith(),set);
  MutableBooleanSet sett=this.newWith(true,false);
  Assert.assertTrue(sett.retainAll(BooleanArrayList.newListWith(false,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(false),sett);
  MutableBooleanSet sett2=this.newWith(true);
  Assert.assertTrue(sett2.retainAll(BooleanArrayList.newListWith(false,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(),sett2);
  Assert.assertTrue(this.setWithTrue.retainAll(BooleanArrayList.newListWith(false,false)));
  Assert.assertFalse(this.setWithTrue.retainAll(BooleanArrayList.newListWith(true,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(),this.setWithTrue);
  MutableBooleanSet sett3=this.newWith(false);
  Assert.assertFalse(sett3.retainAll(BooleanArrayList.newListWith(false,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(false),sett3);
  Assert.assertTrue(this.setWithFalse.retainAll(BooleanArrayList.newListWith(true,true)));
  Assert.assertFalse(this.setWithFalse.retainAll(BooleanArrayList.newListWith(true,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(),this.setWithFalse);
  Assert.assertFalse(this.emptySet.retainAll(BooleanArrayList.newListWith(true,true)));
  Assert.assertFalse(this.emptySet.retainAll(BooleanArrayList.newListWith(true,false)));
  Assert.assertFalse(this.emptySet.retainAll(BooleanArrayList.newListWith(false,false)));
  Assert.assertEquals(BooleanHashSet.newSetWith(),this.emptySet);
}
