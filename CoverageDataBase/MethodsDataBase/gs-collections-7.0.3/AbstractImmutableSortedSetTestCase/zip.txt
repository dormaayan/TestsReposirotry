@Test public void zip(){
  ImmutableSortedSet<Integer> immutableSet=this.classUnderTest(Collections.<Integer>reverseOrder());
  List<Object> nulls=Collections.nCopies(immutableSet.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(immutableSet.size() + 1,null);
  List<Object> nullsMinusOne=Collections.nCopies(immutableSet.size() - 1,null);
  ImmutableList<Pair<Integer,Object>> pairs=immutableSet.zip(nulls);
  Assert.assertEquals(immutableSet.toList(),pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Verify.assertListsEqual(FastList.newList(Interval.fromTo(immutableSet.size(),1)),pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).toList());
  Assert.assertEquals(FastList.newList(nulls),pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableList<Pair<Integer,Object>> pairsPlusOne=immutableSet.zip(nullsPlusOne);
  Assert.assertEquals(immutableSet.toList(),pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Verify.assertListsEqual(FastList.newList(Interval.fromTo(immutableSet.size(),1)),pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).castToList());
  Assert.assertEquals(FastList.newList(nulls),pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableList<Pair<Integer,Object>> pairsMinusOne=immutableSet.zip(nullsMinusOne);
  Verify.assertListsEqual(FastList.newList(Interval.fromTo(immutableSet.size(),2)),pairsMinusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).castToList());
  Assert.assertEquals(immutableSet.zip(nulls),immutableSet.zip(nulls,FastList.<Pair<Integer,Object>>newList()));
  FastList<Holder> holders=FastList.newListWith(new Holder(1),new Holder(2),new Holder(3));
  ImmutableList<Pair<Integer,Holder>> zipped=immutableSet.zip(holders);
  Verify.assertSize(3,zipped.castToList());
  AbstractImmutableSortedSetTestCase.Holder two=new Holder(-1);
  AbstractImmutableSortedSetTestCase.Holder two1=new Holder(-1);
  Assert.assertEquals(Tuples.pair(10,two1),zipped.newWith(Tuples.pair(10,two)).getLast());
  Assert.assertEquals(Tuples.pair(1,new Holder(3)),this.classUnderTest().zip(holders.reverseThis()).getFirst());
}
