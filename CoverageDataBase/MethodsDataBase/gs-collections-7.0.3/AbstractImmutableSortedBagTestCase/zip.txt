@Test public void zip(){
  ImmutableSortedBag<Integer> immutableBag=this.classUnderTest(Collections.<Integer>reverseOrder());
  List<Object> nulls=Collections.nCopies(immutableBag.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(immutableBag.size() + 1,null);
  List<Object> nullsMinusOne=Collections.nCopies(immutableBag.size() - 1,null);
  ImmutableList<Pair<Integer,Object>> pairs=immutableBag.zip(nulls);
  Assert.assertEquals(immutableBag.toList(),pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Verify.assertListsEqual(FastList.newListWith(2,1,1,1),pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).toList());
  Assert.assertEquals(FastList.newList(nulls),pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableList<Pair<Integer,Object>> pairsPlusOne=immutableBag.zip(nullsPlusOne);
  Assert.assertEquals(immutableBag.toList(),pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne));
  Verify.assertListsEqual(FastList.newListWith(2,1,1,1),pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).castToList());
  Assert.assertEquals(FastList.newList(nulls),pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo));
  ImmutableList<Pair<Integer,Object>> pairsMinusOne=immutableBag.zip(nullsMinusOne);
  Verify.assertListsEqual(FastList.newListWith(2,1,1),pairsMinusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).castToList());
  Assert.assertEquals(immutableBag.zip(nulls),immutableBag.zip(nulls,FastList.<Pair<Integer,Object>>newList()));
  Assert.assertEquals(immutableBag.zip(nulls).toBag(),immutableBag.zip(nulls,new HashBag<>()));
  FastList<Holder> holders=FastList.newListWith(new Holder(1),new Holder(2),new Holder(3));
  ImmutableList<Pair<Integer,Holder>> zipped=immutableBag.zip(holders);
  Verify.assertSize(3,zipped.castToList());
  AbstractImmutableSortedBagTestCase.Holder two=new Holder(-1);
  AbstractImmutableSortedBagTestCase.Holder two1=new Holder(-1);
  Assert.assertEquals(Tuples.pair(10,two1),zipped.newWith(Tuples.pair(10,two)).getLast());
  Assert.assertEquals(Tuples.pair(1,new Holder(3)),this.classUnderTest().zip(holders.reverseThis()).getFirst());
}
