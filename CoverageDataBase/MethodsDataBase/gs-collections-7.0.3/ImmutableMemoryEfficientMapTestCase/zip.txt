@Test public void zip(){
  ImmutableMap<String,String> map=this.newMapWithKeysValues("1","One","2","Two","3","Three","4","Four");
  List<Object> nulls=Collections.nCopies(map.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(map.size() + 1,null);
  RichIterable<Pair<String,Object>> pairs=map.zip(nulls);
  Assert.assertEquals(map.toSet(),pairs.collect((Function<Pair<String,?>,String>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  RichIterable<Pair<String,Object>> pairsPlusOne=map.zip(nullsPlusOne);
  Assert.assertEquals(map.toSet(),pairsPlusOne.collect((Function<Pair<String,?>,String>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  if (map.notEmpty()) {
    List<Object> nullsMinusOne=Collections.nCopies(map.size() - 1,null);
    RichIterable<Pair<String,Object>> pairsMinusOne=map.zip(nullsMinusOne);
    Assert.assertEquals(map.size() - 1,pairsMinusOne.size());
  }
  Assert.assertEquals(map.zip(nulls).toSet(),map.zip(nulls,UnifiedSet.<Pair<String,Object>>newSet()));
}
