@Test public void flatCollect(){
  ImmutableMap<Integer,Integer> map=this.newMapWithKeysValues(1,1,2,2,3,3,4,4);
  if (map.isEmpty()) {
    Function<Integer,Iterable<Object>> fail=each -> {
      throw new AssertionError();
    }
;
    Assert.assertEquals(Bags.immutable.empty(),map.flatCollect(fail));
    Assert.assertEquals(Bags.immutable.empty(),map.flatCollect(fail,HashBag.newBag()));
  }
 else {
    MutableBag<Integer> expected=Interval.oneTo(map.size()).flatCollect(each -> Interval.oneTo(each)).toBag();
    Assert.assertEquals(expected,map.flatCollect(each -> Interval.oneTo(each)));
    Assert.assertEquals(expected,map.flatCollect(each -> Interval.oneTo(each),HashBag.newBag()));
  }
}
