@Test public void groupBy(){
  ImmutableMap<String,Integer> map=this.newMapWithKeysValues("1",1,"2",2,"3",3,"4",4);
  Function<Integer,Boolean> isOddFunction=object -> IntegerPredicates.isOdd().accept(object);
  Multimap<Boolean,Integer> expected;
switch (map.size()) {
case 1:
    expected=FastListMultimap.newMultimap(Tuples.pair(Boolean.TRUE,1));
  break;
case 2:
expected=FastListMultimap.newMultimap(Tuples.pair(Boolean.TRUE,1),Tuples.pair(Boolean.FALSE,2));
break;
case 3:
expected=FastListMultimap.newMultimap(Tuples.pair(Boolean.TRUE,1),Tuples.pair(Boolean.TRUE,3),Tuples.pair(Boolean.FALSE,2));
break;
case 4:
expected=FastListMultimap.newMultimap(Tuples.pair(Boolean.TRUE,1),Tuples.pair(Boolean.TRUE,3),Tuples.pair(Boolean.FALSE,2),Tuples.pair(Boolean.FALSE,4));
break;
default :
expected=FastListMultimap.newMultimap();
break;
}
Multimap<Boolean,Integer> actual=map.groupBy(isOddFunction);
Assert.assertEquals(HashBagMultimap.newMultimap(expected),HashBagMultimap.newMultimap(actual));
Multimap<Boolean,Integer> actualFromTarget=map.groupBy(isOddFunction,FastListMultimap.<Boolean,Integer>newMultimap());
Assert.assertEquals(HashBagMultimap.newMultimap(expected),HashBagMultimap.newMultimap(actualFromTarget));
}
