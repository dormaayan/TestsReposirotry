@Override @Test public void retainAllFromEntrySet(){
  super.retainAllFromEntrySet();
  for (int i=1; i < COLLISIONS.size(); i++) {
    MutableMap<Integer,Integer> map=this.mapWithCollisionsOfSize(i);
    Assert.assertFalse(map.entrySet().retainAll(FastList.newList(map.entrySet()).with(ImmutableEntry.of(COLLISION_10,COLLISION_10))));
    Assert.assertTrue(map.entrySet().retainAll(this.mapWithCollisionsOfSize(i - 1).entrySet()));
    Assert.assertEquals(this.mapWithCollisionsOfSize(i - 1),map);
  }
  for (  Integer item : MORE_COLLISIONS) {
    MutableMap<Integer,Integer> integers=this.mapWithCollisionsOfSize(9);
    @SuppressWarnings("BoxingBoxedValue") Integer keyCopy=new Integer(item);
    Assert.assertTrue(integers.entrySet().retainAll(mList(ImmutableEntry.of(keyCopy,keyCopy))));
    Assert.assertEquals(iMap(keyCopy,keyCopy),integers);
    Assert.assertNotSame(keyCopy,Iterate.getOnly(integers.entrySet()).getKey());
  }
  MutableMap<Integer,String> map4=this.newMapWithKeysValues(1,"One",2,"Two");
  FastList<Object> toRetain=FastList.newListWith(ImmutableEntry.of(1,"One"),"explosion!",ImmutableEntry.of(2,"Two"));
  Assert.assertFalse(map4.entrySet().retainAll(toRetain));
}
