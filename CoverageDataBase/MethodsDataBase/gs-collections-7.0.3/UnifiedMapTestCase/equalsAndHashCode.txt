@Override @Test public void equalsAndHashCode(){
  super.equalsAndHashCode();
  for (int i=1; i < COLLISIONS.size(); i++) {
    MutableMap<Integer,Integer> map=this.mapWithCollisionsOfSize(i);
    Map<Integer,Integer> expectedMap=new HashMap<>(map);
    Verify.assertEqualsAndHashCode(expectedMap,map);
    MutableMap<Integer,Integer> clone1=map.clone();
    clone1.put(COLLISION_10,COLLISION_10);
    Assert.assertNotEquals(expectedMap,clone1);
    MutableMap<Integer,Integer> clone2=map.clone();
    clone2.put(null,null);
    Assert.assertNotEquals(expectedMap,clone2);
    expectedMap.put(null,null);
    Assert.assertNotEquals(expectedMap,map);
    expectedMap.remove(null);
    expectedMap.put(COLLISION_10,COLLISION_10);
    Assert.assertNotEquals(expectedMap,map);
  }
  MutableMap<Integer,Integer> mapA=this.mapWithCollisionsOfSize(3);
  MutableMap<Integer,Integer> mapB=this.mapWithCollisionsOfSize(3);
  mapA.put(null,null);
  mapB.put(42,84);
  Assert.assertNotEquals(mapA,mapB);
  Assert.assertNotEquals(mapA.hashCode(),mapB.hashCode());
  mapB.remove(42);
  mapB.put(null,42);
  Assert.assertNotEquals(mapA,mapB);
  mapB.remove(null);
  mapB.remove(42);
  mapA.remove(null);
  mapA.put(17,null);
  Assert.assertNotEquals(mapA,mapB);
  MutableMap<Integer,String> mapC=this.newMapWithKeysValues(1,"One",2,"Two",null,null);
  MutableMap<Integer,String> mapD=this.newMapWithKeysValues(1,"One",2,"Two",3,"Three");
  Assert.assertNotEquals(mapC,mapD);
  mapC.remove(null);
  mapC.put(3,null);
  Assert.assertNotEquals(mapC,mapD);
  mapC.remove(3);
  mapC.put(null,null);
  mapD.remove(3);
  mapD.put(null,"Three");
  Assert.assertNotEquals(mapC,mapD);
  Assert.assertEquals(0,this.newMapWithKeyValue(null,null).hashCode());
}
