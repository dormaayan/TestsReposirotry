@Test public void testPushPopAndPeek(){
  BooleanArrayStack stack=BooleanArrayStack.newStackFromTopToBottom();
  stack.push(true);
  Assert.assertTrue(stack.peek());
  Assert.assertEquals(BooleanArrayStack.newStackFromTopToBottom(true),stack);
  stack.push(false);
  Assert.assertFalse(stack.peek());
  Assert.assertEquals(BooleanArrayStack.newStackFromTopToBottom(false,true),stack);
  stack.push(true);
  Assert.assertTrue(stack.peek());
  Assert.assertEquals(BooleanArrayStack.newStackFromTopToBottom(true,false,true),stack);
  Assert.assertFalse(stack.peekAt(1));
  Assert.assertTrue(stack.pop());
  Assert.assertFalse(stack.peek());
  Assert.assertFalse(stack.pop());
  Assert.assertTrue(stack.peek());
  Assert.assertTrue(stack.pop());
  BooleanArrayStack stack2=BooleanArrayStack.newStackFromTopToBottom(true,false,true,false,true);
  stack2.pop(2);
  Assert.assertEquals(BooleanArrayStack.newStackFromTopToBottom(true,false,true),stack2);
  Assert.assertEquals(BooleanArrayList.newListWith(true,false),stack2.peek(2));
  BooleanArrayStack stack8=BooleanArrayStack.newStackFromTopToBottom(false,true,false,true);
  Verify.assertEmpty(stack8.pop(0));
  Assert.assertEquals(BooleanArrayStack.newStackFromTopToBottom(false,true,false,true),stack8);
  Assert.assertEquals(new BooleanArrayList(),stack8.peek(0));
  BooleanArrayStack stack9=BooleanArrayStack.newStackFromTopToBottom();
  Assert.assertEquals(new BooleanArrayList(),stack9.pop(0));
  Assert.assertEquals(new BooleanArrayList(),stack9.peek(0));
}
