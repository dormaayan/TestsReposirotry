@Override @Test public void groupByEach(){
  super.groupByEach();
  MutableSortedBag<Integer> bag=this.newWith(Collections.<Integer>reverseOrder(),1,1,1,2,3,4,5,6,7,8,9);
  NegativeIntervalFunction function=new NegativeIntervalFunction();
  MutableSortedBagMultimap<Integer,Integer> expected=this.newWith(Collections.<Integer>reverseOrder()).groupByEach(function);
  for (int i=1; i < 10; i++) {
    expected.putAll(-i,Interval.fromTo(i,9));
  }
  expected.put(-1,1);
  expected.put(-1,1);
  MutableSortedBagMultimap<Integer,Integer> actual=bag.groupByEach(function);
  Assert.assertEquals(expected,actual);
  MutableSortedBagMultimap<Integer,Integer> actualWithTarget=bag.groupByEach(function,this.<Integer>newWith().groupByEach(function));
  Assert.assertEquals(expected,actualWithTarget);
  for (int i=1; i < 10; ++i) {
    Verify.assertSortedBagsEqual(expected.get(-i),actual.get(-i));
  }
  Verify.assertSize(9,actual.keysView().toList());
  Verify.assertSize(9,actualWithTarget.keysView().toList());
}
