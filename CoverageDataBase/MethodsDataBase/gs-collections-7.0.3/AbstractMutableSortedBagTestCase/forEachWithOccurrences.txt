@Override @Test public void forEachWithOccurrences(){
  super.forEachWithOccurrences();
  MutableSortedBag<Integer> bag=this.newWith(Collections.reverseOrder(),3,3,3,2,2,1);
  MutableList<Integer> actualItems=FastList.newList();
  MutableList<Integer> actualIndexes=FastList.newList();
  bag.forEachWithOccurrences((each,index) -> {
    actualItems.add(each);
    actualIndexes.add(index);
  }
);
  Assert.assertEquals(FastList.newListWith(3,2,1),actualItems);
  Assert.assertEquals(FastList.newListWith(3,2,1),actualIndexes);
  MutableSortedBag<Integer> bag2=this.newWith();
  bag2.addOccurrences(1,10);
  bag2.addOccurrences(2,10);
  bag2.addOccurrences(3,10);
  IntegerSum sum=new IntegerSum(0);
  Counter counter=new Counter();
  bag2.forEachWithOccurrences((each,occurrences) -> {
    counter.increment();
    sum.add(each * occurrences * counter.getCount());
  }
);
  Assert.assertEquals(140,sum.getIntSum());
  bag2.removeOccurrences(2,1);
  IntegerSum sum2=new IntegerSum(0);
  bag2.forEachWithOccurrences((each,occurrences) -> sum2.add(each * occurrences));
  Assert.assertEquals(58,sum2.getIntSum());
  bag2.removeOccurrences(1,3);
  IntegerSum sum3=new IntegerSum(0);
  bag2.forEachWithOccurrences((each,occurrences) -> sum3.add(each * occurrences));
  Assert.assertEquals(55,sum3.getIntSum());
}
