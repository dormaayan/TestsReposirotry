@Override @Test public void iterator(){
  super.iterator();
  MutableSortedBag<Integer> bag=this.newWith(-1,0,1,1,2);
  Iterator<Integer> iterator=bag.iterator();
  Assert.assertTrue(iterator.hasNext());
  Assert.assertEquals(Integer.valueOf(-1),iterator.next());
  Assert.assertTrue(iterator.hasNext());
  Assert.assertEquals(Integer.valueOf(0),iterator.next());
  Assert.assertTrue(iterator.hasNext());
  Assert.assertEquals(Integer.valueOf(1),iterator.next());
  Assert.assertTrue(iterator.hasNext());
  Assert.assertEquals(Integer.valueOf(1),iterator.next());
  Assert.assertTrue(iterator.hasNext());
  Assert.assertEquals(Integer.valueOf(2),iterator.next());
  Assert.assertFalse(iterator.hasNext());
  MutableSortedBag<Integer> revBag=this.newWith(Comparators.reverseNaturalOrder(),-1,0,1,1,2);
  Iterator<Integer> revIterator=revBag.iterator();
  Assert.assertTrue(revIterator.hasNext());
  Assert.assertEquals(Integer.valueOf(2),revIterator.next());
  Assert.assertTrue(revIterator.hasNext());
  Assert.assertEquals(Integer.valueOf(1),revIterator.next());
  Assert.assertTrue(revIterator.hasNext());
  Assert.assertEquals(Integer.valueOf(1),revIterator.next());
  Assert.assertTrue(revIterator.hasNext());
  Assert.assertEquals(Integer.valueOf(0),revIterator.next());
  Assert.assertTrue(revIterator.hasNext());
  Assert.assertEquals(Integer.valueOf(-1),revIterator.next());
  Assert.assertFalse(revIterator.hasNext());
  MutableSortedBag<Integer> sortedBag=this.newWith(Collections.reverseOrder(),1,1,1,1,2);
  MutableList<Integer> validate=Lists.mutable.empty();
  for (  Integer each : sortedBag) {
    validate.add(each);
  }
  Verify.assertSortedBagsEqual(TreeBag.newBagWith(Collections.reverseOrder(),1,1,1,1,2),TreeBag.newBag(Collections.reverseOrder(),validate));
  Iterator<Integer> sortedBagIterator=sortedBag.iterator();
  MutableSortedBag<Integer> expected=this.newWith(Collections.reverseOrder(),1,1,1,1,2);
  Verify.assertThrows(IllegalStateException.class,sortedBagIterator::remove);
  this.assertIteratorRemove(sortedBag,sortedBagIterator,expected);
  this.assertIteratorRemove(sortedBag,sortedBagIterator,expected);
  this.assertIteratorRemove(sortedBag,sortedBagIterator,expected);
  this.assertIteratorRemove(sortedBag,sortedBagIterator,expected);
  this.assertIteratorRemove(sortedBag,sortedBagIterator,expected);
  Verify.assertEmpty(sortedBag);
  Assert.assertFalse(sortedBagIterator.hasNext());
  Verify.assertThrows(NoSuchElementException.class,(Runnable)sortedBagIterator::next);
}
