@Test public void ofElements(){
  Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(1,1,2)),SortedBags.immutable.of(1,1,2));
  Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(Comparators.reverseNaturalOrder(),1,1,2)),SortedBags.immutable.of(Comparators.reverseNaturalOrder(),1,1,2));
  Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of());
  Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of());
  Comparator<Integer> nullComparator=null;
  Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of(nullComparator));
  Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(nullComparator));
  Assert.assertEquals(TreeBag.newBag(Comparators.reverseNaturalOrder()),SortedBags.immutable.of(Comparator.reverseOrder()));
  Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(Comparator.reverseOrder()));
  Assert.assertEquals(TreeBag.newBag(Comparators.reverseNaturalOrder()),SortedBags.immutable.of(Comparator.reverseOrder(),new Integer[]{}));
  Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(Comparator.reverseOrder(),new Integer[]{}));
  Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of(new Integer[]{}));
  Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(new Integer[]{}));
}
