@Test public void groupByEachWithTarget(){
  MutableList<String> source=FastList.newListWith("Ted","Sally","Sally","Mary","Bob","Sara");
  Function<String,Set<Character>> uppercaseSetFunction=StringIterate::asUppercaseSet;
  Multimap<Character,String> result1=Iterate.groupByEach(source,uppercaseSetFunction,FastListMultimap.<Character,String>newMultimap());
  Multimap<Character,String> result2=Iterate.groupByEach(Collections.synchronizedList(source),uppercaseSetFunction,FastListMultimap.<Character,String>newMultimap());
  Multimap<Character,String> result3=Iterate.groupByEach(Collections.synchronizedCollection(source),uppercaseSetFunction,FastListMultimap.<Character,String>newMultimap());
  Multimap<Character,String> result4=Iterate.groupByEach(LazyIterate.adapt(source),uppercaseSetFunction,FastListMultimap.<Character,String>newMultimap());
  Multimap<Character,String> result5=Iterate.groupByEach(new ArrayList<>(source),uppercaseSetFunction,FastListMultimap.<Character,String>newMultimap());
  MutableMultimap<Character,String> expected=FastListMultimap.newMultimap();
  expected.put('T',"Ted");
  expected.putAll('E',FastList.newListWith("Ted"));
  expected.put('D',"Ted");
  expected.putAll('S',FastList.newListWith("Sally","Sally","Sara"));
  expected.putAll('A',FastList.newListWith("Sally","Sally","Mary","Sara"));
  expected.putAll('L',FastList.newListWith("Sally","Sally"));
  expected.putAll('Y',FastList.newListWith("Sally","Sally"));
  expected.put('M',"Mary");
  expected.putAll('R',FastList.newListWith("Mary","Sara"));
  expected.put('Y',"Mary");
  expected.put('B',"Bob");
  expected.put('O',"Bob");
  Assert.assertEquals(expected,result1);
  Assert.assertEquals(expected,result2);
  Assert.assertEquals(expected,result3);
  Assert.assertEquals(expected,result4);
  Assert.assertEquals(expected,result5);
  Verify.assertThrows(IllegalArgumentException.class,() -> Iterate.groupByEach(null,null,null));
}
