@Test public void collect_sortedSetSource(){
class Foo implements Comparable<Foo> {
    private final int value;
    Foo(    int value){
      this.value=value;
    }
    public int getValue(){
      return this.value;
    }
    @Override public int compareTo(    Foo that){
      return Comparators.naturalOrder().compare(this.value,that.value);
    }
    @Override public boolean equals(    Object o){
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }
      Foo foo=(Foo)o;
      return this.value == foo.value;
    }
    @Override public int hashCode(){
      return this.value;
    }
  }
class Bar {
    private final int value;
    Bar(    int value){
      this.value=value;
    }
    public int getValue(){
      return this.value;
    }
    @Override public boolean equals(    Object o){
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }
      Bar bar=(Bar)o;
      return this.value == bar.value;
    }
    @Override public int hashCode(){
      return this.value;
    }
  }
  Set<Foo> foos=new TreeSet<>();
  foos.add(new Foo(1));
  foos.add(new Foo(2));
  Collection<Bar> bars=Iterate.collect(foos,foo -> new Bar(foo.getValue()));
  Assert.assertEquals(FastList.newListWith(new Bar(1),new Bar(2)),bars);
}
