@Test public void testPushPopAndPeek(){
  MutableStack<String> stack=this.newStackWith();
  stack.push("1");
  Assert.assertEquals("1",stack.peek());
  Assert.assertEquals(this.newStackWith("1"),stack);
  stack.push("2");
  Assert.assertEquals("2",stack.peek());
  Assert.assertEquals(this.newStackWith("1","2"),stack);
  stack.push("3");
  Assert.assertEquals("3",stack.peek());
  Assert.assertEquals(this.newStackWith("1","2","3"),stack);
  Assert.assertEquals("2",stack.peekAt(1));
  Assert.assertEquals("3",stack.pop());
  Assert.assertEquals("2",stack.peek());
  Assert.assertEquals("2",stack.pop());
  Assert.assertEquals("1",stack.peek());
  Assert.assertEquals("1",stack.pop());
  MutableStack<Integer> stack2=this.newStackFromTopToBottom(5,4,3,2,1);
  stack2.pop(2);
  Assert.assertEquals(this.newStackFromTopToBottom(3,2,1),stack2);
  Assert.assertEquals(FastList.newListWith(3,2),stack2.peek(2));
  MutableStack<Integer> stack3=Stacks.mutable.ofReversed(1,2,3);
  Assert.assertEquals(this.newStackFromTopToBottom(1,2,3),stack3);
  MutableStack<Integer> stack4=Stacks.mutable.ofAll(FastList.newListWith(1,2,3));
  MutableStack<Integer> stack5=Stacks.mutable.ofAllReversed(FastList.newListWith(1,2,3));
  Assert.assertEquals(this.newStackFromTopToBottom(3,2,1),stack4);
  Assert.assertEquals(this.newStackFromTopToBottom(1,2,3),stack5);
  MutableStack<Integer> stack6=this.newStackFromTopToBottom(1,2,3,4);
  Assert.assertEquals(FastList.newListWith(1,2),stack6.pop(2,FastList.<Integer>newList()));
  MutableStack<Integer> stack7=this.newStackFromTopToBottom(1,2,3,4);
  Assert.assertEquals(ArrayStack.newStackFromTopToBottom(2,1),stack7.pop(2,ArrayStack.<Integer>newStack()));
  MutableStack<Integer> stack8=this.newStackFromTopToBottom(1,2,3,4);
  Verify.assertIterableEmpty(stack8.pop(0));
  Assert.assertEquals(ArrayStack.newStackFromTopToBottom(1,2,3,4),stack8);
  Assert.assertEquals(FastList.newList(),stack8.peek(0));
  MutableStack<Integer> stack9=ArrayStack.newStack();
  Assert.assertEquals(FastList.newList(),stack9.pop(0));
  Assert.assertEquals(FastList.newList(),stack9.peek(0));
  Assert.assertEquals(FastList.newList(),stack9.pop(0,FastList.<Integer>newList()));
  Assert.assertEquals(ArrayStack.newStack(),stack9.pop(0,ArrayStack.<Integer>newStack()));
}
