@SuppressWarnings("RedundantArrayCreation") @Test public void newListWithArray(){
  ImmutableBooleanList list=BooleanLists.immutable.of();
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true}));
  Assert.assertEquals(list=list.newWith(false),BooleanLists.immutable.of(new boolean[]{true,false}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true}));
  Assert.assertEquals(list=list.newWith(false),BooleanLists.immutable.of(new boolean[]{true,false,true,false}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true}));
  Assert.assertEquals(list=list.newWith(false),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false,true}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false,true,true}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true}));
  Assert.assertEquals(list=list.newWith(false),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true,false}));
  Assert.assertEquals(list=list.newWith(true),BooleanLists.immutable.of(new boolean[]{true,false,true,false,true,false,true,true,true,false,true}));
}
