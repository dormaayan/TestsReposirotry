@Test public void putWithRehash() throws Exception {
  ObjectBooleanHashMap<Integer> hashMap=ObjectBooleanHashMap.newMap();
  for (int i=2; i < 10; i++) {
    Assert.assertFalse(hashMap.containsKey(i));
    hashMap.put(i,(i & 1) == 0);
  }
  Field keys=ObjectBooleanHashMap.class.getDeclaredField("keys");
  Field values=ObjectBooleanHashMap.class.getDeclaredField("values");
  keys.setAccessible(true);
  values.setAccessible(true);
  Assert.assertEquals(16L,((Object[])keys.get(hashMap)).length);
  Assert.assertEquals(64L,((BitSet)values.get(hashMap)).size());
  Verify.assertSize(8,hashMap);
  for (int i=2; i < 10; i++) {
    Assert.assertTrue(hashMap.containsKey(i));
  }
  Assert.assertTrue(hashMap.containsValue(false));
  Assert.assertTrue(hashMap.containsValue(true));
  hashMap.put(10,true);
  Assert.assertEquals(32L,((Object[])keys.get(hashMap)).length);
  Assert.assertEquals(64L,((BitSet)values.get(hashMap)).size());
  for (int i=11; i < 75; i++) {
    Assert.assertFalse(String.valueOf(i),hashMap.containsKey(i));
    hashMap.put(i,(i & 1) == 0);
  }
  Assert.assertEquals(256L,((Object[])keys.get(hashMap)).length);
  Assert.assertEquals(256L,((BitSet)values.get(hashMap)).size());
}
