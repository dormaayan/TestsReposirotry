@Test public void getIfAbsentPutWith(){
  BooleanFunction<String> functionLengthEven=string -> (string.length() & 1) == 0;
  MutableObjectBooleanMap<Integer> map1=this.getEmptyMap();
  Assert.assertFalse(map1.getIfAbsentPutWith(0,functionLengthEven,"123456789"));
  BooleanFunction<String> functionThrows=string -> {
    throw new AssertionError();
  }
;
  Assert.assertFalse(map1.getIfAbsentPutWith(0,functionThrows,"unused"));
  Assert.assertEquals(this.newWithKeysValues(0,false),map1);
  Assert.assertFalse(map1.getIfAbsentPutWith(1,functionLengthEven,"123456789"));
  Assert.assertFalse(map1.getIfAbsentPutWith(1,functionThrows,"unused"));
  Assert.assertEquals(this.newWithKeysValues(0,false,1,false),map1);
  MutableObjectBooleanMap<Integer> map2=this.getEmptyMap();
  Assert.assertTrue(map2.getIfAbsentPutWith(1,functionLengthEven,"1234567890"));
  Assert.assertTrue(map2.getIfAbsentPutWith(1,functionThrows,"unused0"));
  Assert.assertEquals(this.newWithKeysValues(1,true),map2);
  Assert.assertTrue(map2.getIfAbsentPutWith(0,functionLengthEven,"1234567890"));
  Assert.assertTrue(map2.getIfAbsentPutWith(0,functionThrows,"unused0"));
  Assert.assertEquals(this.newWithKeysValues(0,true,1,true),map2);
  MutableObjectBooleanMap<Integer> map3=this.getEmptyMap();
  Assert.assertFalse(map3.getIfAbsentPutWith(null,functionLengthEven,"123456789"));
  Assert.assertFalse(map3.getIfAbsentPutWith(null,functionThrows,"unused"));
  Assert.assertEquals(this.newWithKeysValues(null,false),map3);
}
