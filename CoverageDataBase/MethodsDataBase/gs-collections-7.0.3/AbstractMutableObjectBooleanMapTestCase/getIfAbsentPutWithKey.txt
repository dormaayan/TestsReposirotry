@Test public void getIfAbsentPutWithKey(){
  BooleanFunction<Integer> function=anObject -> anObject == null || (anObject & 1) == 0;
  MutableObjectBooleanMap<Integer> map1=this.getEmptyMap();
  Assert.assertTrue(map1.getIfAbsentPutWithKey(0,function));
  BooleanFunction<Integer> functionThrows=anObject -> {
    throw new AssertionError();
  }
;
  Assert.assertTrue(map1.getIfAbsentPutWithKey(0,functionThrows));
  Assert.assertEquals(this.newWithKeysValues(0,true),map1);
  Assert.assertFalse(map1.getIfAbsentPutWithKey(1,function));
  Assert.assertFalse(map1.getIfAbsentPutWithKey(1,functionThrows));
  Assert.assertEquals(this.newWithKeysValues(0,true,1,false),map1);
  MutableObjectBooleanMap<Integer> map2=this.getEmptyMap();
  Assert.assertFalse(map2.getIfAbsentPutWithKey(1,function));
  Assert.assertFalse(map2.getIfAbsentPutWithKey(1,functionThrows));
  Assert.assertEquals(this.newWithKeysValues(1,false),map2);
  Assert.assertTrue(map2.getIfAbsentPutWithKey(0,function));
  Assert.assertTrue(map2.getIfAbsentPutWithKey(0,functionThrows));
  Assert.assertEquals(this.newWithKeysValues(0,true,1,false),map2);
  MutableObjectBooleanMap<Integer> map3=this.getEmptyMap();
  Assert.assertTrue(map3.getIfAbsentPutWithKey(null,function));
  Assert.assertTrue(map3.getIfAbsentPutWithKey(null,functionThrows));
  Assert.assertEquals(this.newWithKeysValues(null,true),map3);
}
