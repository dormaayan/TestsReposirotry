@Test public void bottomOccurrences(){
  MutableBag<String> mutable=HashBag.newBag();
  mutable.addOccurrences("one",1);
  mutable.addOccurrences("two",2);
  mutable.addOccurrences("three",3);
  mutable.addOccurrences("four",4);
  mutable.addOccurrences("five",5);
  mutable.addOccurrences("six",6);
  mutable.addOccurrences("seven",7);
  mutable.addOccurrences("eight",8);
  mutable.addOccurrences("nine",9);
  mutable.addOccurrences("ten",10);
  ImmutableBag<String> strings=ImmutableArrayBag.copyFrom(mutable);
  ImmutableList<ObjectIntPair<String>> bottom5=strings.bottomOccurrences(5);
  Verify.assertIterableSize(5,bottom5);
  Assert.assertEquals("one",bottom5.getFirst().getOne());
  Assert.assertEquals(1,bottom5.getFirst().getTwo());
  Assert.assertEquals("five",bottom5.getLast().getOne());
  Assert.assertEquals(5,bottom5.getLast().getTwo());
  Verify.assertIterableSize(0,ImmutableArrayBag.newBagWith().bottomOccurrences(5));
  Verify.assertIterableSize(3,this.newWith("one","two","three").bottomOccurrences(5));
  Verify.assertIterableSize(3,this.newWith("one","two","three").bottomOccurrences(1));
  Verify.assertIterableSize(3,this.newWith("one","two","three").bottomOccurrences(2));
  Verify.assertIterableSize(3,this.newWith("one","one","two","two","three").bottomOccurrences(2));
  Verify.assertIterableSize(3,this.newWith("one","one","two","two","three","three").bottomOccurrences(1));
  Verify.assertIterableSize(3,this.newWith(null,"one","two").bottomOccurrences(5));
  Verify.assertIterableSize(3,this.newWith(null,"one","two").bottomOccurrences(1));
  Verify.assertIterableSize(3,this.newWith("one","one","two","two","three","three").bottomOccurrences(1));
  Verify.assertIterableSize(0,this.newWith("one").newWithout("one").bottomOccurrences(0));
  Verify.assertIterableSize(0,this.newWith("one").bottomOccurrences(0));
  Verify.assertThrows(IllegalArgumentException.class,() -> this.newWith("one").bottomOccurrences(-1));
}
