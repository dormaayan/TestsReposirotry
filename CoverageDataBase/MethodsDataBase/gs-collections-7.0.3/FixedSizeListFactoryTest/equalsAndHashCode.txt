@Test public void equalsAndHashCode(){
  MutableList<String> empty=Lists.fixedSize.of();
  MutableList<String> emptyA=Lists.mutable.of();
  Verify.assertEqualsAndHashCode(empty,emptyA);
  MutableList<String> one=Lists.fixedSize.of("1");
  MutableList<String> oneA=Lists.mutable.of();
  oneA.add("1");
  Verify.assertEqualsAndHashCode(one,oneA);
  MutableList<String> two=Lists.fixedSize.of("1","2");
  MutableList<String> twoA=Lists.mutable.of();
  twoA.add("1");
  twoA.add("2");
  Verify.assertEqualsAndHashCode(two,twoA);
  MutableList<String> three=Lists.fixedSize.of("1","2","3");
  MutableList<String> threeA=Lists.mutable.of();
  threeA.add("1");
  threeA.add("2");
  threeA.add("3");
  Verify.assertEqualsAndHashCode(three,threeA);
  Assert.assertNotEquals(three,twoA);
  Assert.assertNotEquals(twoA,three);
  MutableList<String> differentThree=Lists.mutable.of();
  differentThree.add("1");
  differentThree.add("Two");
  differentThree.add("3");
  Assert.assertNotEquals(three,differentThree);
  Assert.assertNotEquals(differentThree,three);
  Assert.assertEquals(new LinkedList<>(threeA),three);
  Assert.assertNotEquals(new LinkedList<>(differentThree),three);
  Assert.assertNotEquals(new LinkedList<>(FastList.newListWith("1","2","3","4")),three);
  Assert.assertNotEquals(new LinkedList<>(FastList.newListWith("1","2")),three);
}
