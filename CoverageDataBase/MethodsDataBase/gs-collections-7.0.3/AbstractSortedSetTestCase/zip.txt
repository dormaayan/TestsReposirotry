@Override @Test public void zip(){
  super.zip();
  MutableSortedSet<Integer> revInt=this.newWith(Collections.<Integer>reverseOrder(),2,3,5,1,4);
  MutableSortedSet<Integer> integers=this.newWith(1,3,2,4,5);
  MutableList<Pair<Integer,Integer>> zip=integers.zip(revInt);
  MutableList<Pair<Integer,Integer>> revZip=revInt.zip(integers);
  Verify.assertSize(5,zip);
  Verify.assertSize(5,revZip);
  Iterator<Pair<Integer,Integer>> zipItr=zip.iterator();
  Iterator<Pair<Integer,Integer>> revZipItr=revZip.iterator();
  for (int i=1; i < 6; ++i) {
    Assert.assertEquals(Tuples.pair(i,6 - i),zipItr.next());
    Assert.assertEquals(Tuples.pair(6 - i,i),revZipItr.next());
  }
  Person john=new Person("John","Smith");
  Person jane=new Person("Jane","Smith");
  Person johnDoe=new Person("John","Doe");
  MutableSortedSet<Person> people=this.newWith(john,johnDoe);
  MutableList<Holder> list=FastList.newListWith(new Holder(1),new Holder(2),new Holder(3));
  MutableList<Pair<Person,Holder>> pairs=people.zip(list);
  Assert.assertEquals(FastList.newListWith(Tuples.pair(johnDoe,new Holder(1)),Tuples.pair(john,new Holder(2))),pairs.toList());
  Assert.assertTrue(pairs.add(Tuples.pair(new Person("Jack","Baker"),new Holder(3))));
  Assert.assertEquals(Tuples.pair(new Person("Jack","Baker"),new Holder(3)),pairs.getLast());
}
