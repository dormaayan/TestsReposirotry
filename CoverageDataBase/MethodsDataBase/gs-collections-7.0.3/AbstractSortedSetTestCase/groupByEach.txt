@Override @Test public void groupByEach(){
  super.groupByEach();
  MutableSortedSet<Integer> set=this.newWith(Collections.<Integer>reverseOrder(),1,2,3,4,5,6,7);
  NegativeIntervalFunction function=new NegativeIntervalFunction();
  MutableSortedSetMultimap<Integer,Integer> expected=this.newWith(Collections.<Integer>reverseOrder()).groupByEach(function);
  for (int i=1; i < 8; i++) {
    expected.putAll(-i,Interval.fromTo(i,7));
  }
  MutableSortedSetMultimap<Integer,Integer> actual=set.groupByEach(function);
  Assert.assertEquals(expected,actual);
  MutableSortedSetMultimap<Integer,Integer> actualWithTarget=set.groupByEach(function,this.<Integer>newWith().groupByEach(function));
  Assert.assertEquals(expected,actualWithTarget);
  for (int i=1; i < 8; ++i) {
    Verify.assertSortedSetsEqual(expected.get(-i),actual.get(-i));
    Verify.assertSortedSetsEqual(expected.get(-i),actualWithTarget.get(-i).toSortedSet(Collections.<Integer>reverseOrder()));
  }
  Verify.assertSize(7,actual.keysView().toList());
  Verify.assertSize(7,actualWithTarget.keysView().toList());
}
