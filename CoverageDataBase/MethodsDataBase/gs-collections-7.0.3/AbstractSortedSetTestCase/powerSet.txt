@Test public void powerSet(){
  MutableSortedSet<String> set=this.newWith("1","2","3","4","5","test");
  MutableSortedSet<SortedSetIterable<String>> powerSet=set.powerSet();
  Verify.assertSize((int)StrictMath.pow(2,set.size()),powerSet);
  Verify.assertContains(TreeSortedSet.<String>newSet(),powerSet);
  Verify.assertContains(set,powerSet);
  MutableSortedSet<SortedSetIterable<Integer>> intPowerSet=this.newWith(1,2,3).powerSet();
  MutableSortedSet<SortedSetIterable<Integer>> revPowerSet=this.newWith(Collections.<Integer>reverseOrder(),1,2,3,4,5,6).powerSet();
  FastList<TreeSortedSet<Integer>> expectedSortedSet=FastList.newListWith(TreeSortedSet.<Integer>newSet(),TreeSortedSet.newSetWith(1),TreeSortedSet.newSetWith(2),TreeSortedSet.newSetWith(3),TreeSortedSet.newSetWith(1,2),TreeSortedSet.newSetWith(1,3),TreeSortedSet.newSetWith(2,3),TreeSortedSet.newSetWith(1,2,3));
  Verify.assertListsEqual(expectedSortedSet,intPowerSet.toList());
  Verify.assertSortedSetsEqual(TreeSortedSet.newSetWith(Collections.<Integer>reverseOrder(),1,2,3,4,5,6),(SortedSet<Integer>)revPowerSet.getLast());
  Verify.assertInstanceOf(TreeSortedSet.class,intPowerSet);
  Verify.assertInstanceOf(TreeSortedSet.class,intPowerSet.getFirst());
}
