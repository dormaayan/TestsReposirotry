@Test public void entrySet_remove(){
  MutableBiMap<Integer,String> biMap=this.newMapWithKeysValues(1,"One",3,"Three",4,"Four");
  Set<Map.Entry<Integer,String>> entries=biMap.entrySet();
  entries.remove(ImmutableEntry.of(5,"Five"));
  Verify.assertSize(3,biMap);
  Verify.assertSize(3,biMap.inverse());
  Verify.assertSize(3,biMap.entrySet());
  entries.remove(ImmutableEntry.of(1,"Two"));
  Verify.assertSize(3,biMap);
  Verify.assertSize(3,biMap.inverse());
  entries.remove(ImmutableEntry.of(1,"One"));
  Verify.assertSize(2,biMap);
  Verify.assertSize(2,biMap.inverse());
  Verify.assertSize(2,biMap.entrySet());
  Assert.assertEquals(HashBiMap.newWithKeysValues(3,"Three",4,"Four"),biMap);
  Assert.assertEquals(HashBiMap.newWithKeysValues(3,"Three",4,"Four").inverse(),biMap.inverse());
  MutableBiMap<Integer,String> map1=this.newMapWithKeysValues(1,null,3,"Three",4,"Four");
  Set<Map.Entry<Integer,String>> entries1=map1.entrySet();
  entries1.remove(ImmutableEntry.of(1,null));
  Verify.assertSize(2,biMap);
  Verify.assertSize(2,biMap.inverse());
  Verify.assertSize(2,biMap.entrySet());
  Assert.assertEquals(HashBiMap.newWithKeysValues(3,"Three",4,"Four"),biMap);
}
