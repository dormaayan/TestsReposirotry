@Test public void delegatingMethods(){
  Assert.assertEquals(this.mutableCollection.notEmpty(),this.unmodifiableCollection.notEmpty());
  Assert.assertEquals(this.mutableCollection.isEmpty(),this.unmodifiableCollection.isEmpty());
  Assert.assertEquals(this.mutableCollection.size(),this.unmodifiableCollection.size());
  Assert.assertEquals(this.mutableCollection.getFirst(),this.unmodifiableCollection.getFirst());
  Assert.assertEquals(this.mutableCollection.getLast(),this.unmodifiableCollection.getLast());
  Assert.assertEquals(this.mutableCollection.count(ignored6 -> true),this.unmodifiableCollection.count(ignored5 -> true));
  Verify.assertSize(4,this.unmodifiableCollection.select(ignored4 -> true));
  Verify.assertSize(4,this.unmodifiableCollection.select(ignored3 -> true,FastList.<String>newList()));
  Verify.assertSize(1,this.unmodifiableCollection.selectWith(Object::equals,METALLICA));
  Verify.assertSize(1,this.unmodifiableCollection.selectWith(Object::equals,METALLICA,FastList.<String>newList()));
  Verify.assertSize(2,this.unmodifiableCollection.reject(StringPredicates.contains("p")));
  Verify.assertSize(2,this.unmodifiableCollection.reject(StringPredicates.contains("p"),FastList.<String>newList()));
  Verify.assertSize(3,this.unmodifiableCollection.rejectWith(Object::equals,METALLICA));
  Verify.assertSize(3,this.unmodifiableCollection.rejectWith(Object::equals,METALLICA,FastList.<String>newList()));
  Verify.assertSize(4,this.unmodifiableCollection.collect(Functions.getStringPassThru()));
  Verify.assertSize(4,this.unmodifiableCollection.collect(Functions.getStringPassThru(),FastList.<String>newList()));
  Function<String,Collection<String>> flattenFunction=object -> FastList.newListWith(object,object);
  Verify.assertSize(8,this.unmodifiableCollection.flatCollect(flattenFunction));
  Verify.assertSize(8,this.unmodifiableCollection.flatCollect(flattenFunction,FastList.<String>newList()));
  Verify.assertSize(4,this.unmodifiableCollection.collectIf(ignored2 -> true,Functions.getStringPassThru()));
  Verify.assertSize(4,this.unmodifiableCollection.collectIf(ignored1 -> true,Functions.getStringPassThru(),FastList.<String>newList()));
  Assert.assertEquals(METALLICA,this.unmodifiableCollection.detect(StringPredicates.contains("allic")));
  Assert.assertEquals("Not found",this.unmodifiableCollection.detectIfNone(StringPredicates.contains("donna"),new PassThruFunction0<>("Not found")));
  Assert.assertEquals(METALLICA,this.unmodifiableCollection.detectWith(Object::equals,METALLICA));
  Assert.assertEquals("Not found",this.unmodifiableCollection.detectWithIfNone(Object::equals,"Madonna",new PassThruFunction0<>("Not found")));
  Assert.assertEquals(4,this.unmodifiableCollection.count(ignored -> true));
  Assert.assertEquals(1,this.unmodifiableCollection.countWith(Object::equals,METALLICA));
  Assert.assertTrue(this.unmodifiableCollection.anySatisfy(StringPredicates.contains("allic")));
  Assert.assertTrue(this.unmodifiableCollection.anySatisfyWith(Object::equals,METALLICA));
  Assert.assertTrue(this.unmodifiableCollection.allSatisfy(Predicates.notNull()));
  Assert.assertTrue(this.unmodifiableCollection.allSatisfyWith((ignored1,ignored2) -> true,""));
  Assert.assertEquals(this.mutableCollection,this.unmodifiableCollection.toList());
  Verify.assertListsEqual(Lists.mutable.of("Bon Jovi","Europe",METALLICA,"Scorpions"),this.unmodifiableCollection.toSortedList());
  Verify.assertListsEqual(Lists.mutable.of("Scorpions",METALLICA,"Europe","Bon Jovi"),this.unmodifiableCollection.toSortedList(Collections.reverseOrder()));
  Verify.assertSize(4,this.unmodifiableCollection.toSet());
  Verify.assertSize(4,this.unmodifiableCollection.toMap(Functions.getStringPassThru(),Functions.getStringPassThru()));
}
