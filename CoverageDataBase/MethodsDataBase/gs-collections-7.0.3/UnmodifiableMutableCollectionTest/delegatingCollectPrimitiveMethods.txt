@Test public void delegatingCollectPrimitiveMethods(){
  MutableCollection<Integer> mutable=Interval.oneTo(4).toList();
  MutableCollection<Integer> unmodifiable=new UnmodifiableMutableCollection<>(mutable);
  MutableBooleanCollection expectedBooleans=mutable.collectBoolean(PrimitiveFunctions.integerIsPositive());
  Assert.assertEquals(expectedBooleans,unmodifiable.collectBoolean(PrimitiveFunctions.integerIsPositive()));
  Assert.assertEquals(BooleanArrayList.newListWith(true,true,true,true),expectedBooleans);
  MutableByteCollection expectedBytes=mutable.collectByte(PrimitiveFunctions.unboxIntegerToByte());
  Assert.assertEquals(expectedBytes,unmodifiable.collectByte(PrimitiveFunctions.unboxIntegerToByte()));
  Assert.assertEquals(ByteArrayList.newListWith((byte)1,(byte)2,(byte)3,(byte)4),expectedBytes);
  MutableCharCollection expectedChars=mutable.collectChar(PrimitiveFunctions.unboxIntegerToChar());
  Assert.assertEquals(expectedChars,unmodifiable.collectChar(PrimitiveFunctions.unboxIntegerToChar()));
  Assert.assertEquals(CharArrayList.newListWith((char)1,(char)2,(char)3,(char)4),expectedChars);
  MutableDoubleCollection expectedDoubles=mutable.collectDouble(PrimitiveFunctions.unboxIntegerToDouble());
  Assert.assertEquals(expectedDoubles,unmodifiable.collectDouble(PrimitiveFunctions.unboxIntegerToDouble()));
  Assert.assertEquals(DoubleArrayList.newListWith(1.0d,2.0d,3.0d,4.0d),expectedDoubles);
  MutableFloatCollection expectedFloats=mutable.collectFloat(PrimitiveFunctions.unboxIntegerToFloat());
  Assert.assertEquals(expectedFloats,unmodifiable.collectFloat(PrimitiveFunctions.unboxIntegerToFloat()));
  Assert.assertEquals(FloatArrayList.newListWith(1.0f,2.0f,3.0f,4.0f),expectedFloats);
  MutableIntCollection expectedInts=mutable.collectInt(PrimitiveFunctions.unboxIntegerToInt());
  Assert.assertEquals(expectedInts,unmodifiable.collectInt(PrimitiveFunctions.unboxIntegerToInt()));
  Assert.assertEquals(IntArrayList.newListWith(1,2,3,4),expectedInts);
  MutableLongCollection expectedLongs=mutable.collectLong(PrimitiveFunctions.unboxIntegerToLong());
  Assert.assertEquals(expectedLongs,unmodifiable.collectLong(PrimitiveFunctions.unboxIntegerToLong()));
  Assert.assertEquals(LongArrayList.newListWith(1L,2L,3L,4L),expectedLongs);
  MutableShortCollection expectedShorts=mutable.collectShort(PrimitiveFunctions.unboxIntegerToShort());
  Assert.assertEquals(expectedShorts,unmodifiable.collectShort(PrimitiveFunctions.unboxIntegerToShort()));
  Assert.assertEquals(ShortArrayList.newListWith((short)1,(short)2,(short)3,(short)4),expectedShorts);
}
