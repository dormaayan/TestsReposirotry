@Test public void removeFromPool(){
  Pool<Integer> unifiedSet=UnifiedSet.<Integer>newSet(8).withAll(COLLISIONS);
  COLLISIONS.reverseForEach(each -> {
    Assert.assertNull(unifiedSet.removeFromPool(null));
    Assert.assertSame(each,unifiedSet.removeFromPool(each));
    Assert.assertNull(unifiedSet.removeFromPool(each));
    Assert.assertNull(unifiedSet.removeFromPool(null));
    Assert.assertNull(unifiedSet.removeFromPool(COLLISION_10));
  }
);
  Assert.assertEquals(UnifiedSet.<Integer>newSet(),unifiedSet);
  COLLISIONS.forEach(Procedures.cast(each -> {
    Pool<Integer> unifiedSet2=UnifiedSet.<Integer>newSet(8).withAll(COLLISIONS);
    Assert.assertNull(unifiedSet2.removeFromPool(null));
    Assert.assertSame(each,unifiedSet2.removeFromPool(each));
    Assert.assertNull(unifiedSet2.removeFromPool(each));
    Assert.assertNull(unifiedSet2.removeFromPool(null));
    Assert.assertNull(unifiedSet2.removeFromPool(COLLISION_10));
  }
));
  Pool<Integer> chain=UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4);
  Assert.assertNull(chain.removeFromPool(COLLISION_5));
  Pool<Integer> deepChain=UnifiedSet.newSetWith(COLLISION_1,COLLISION_2,COLLISION_3,COLLISION_4,COLLISION_5,COLLISION_6,COLLISION_7);
  Assert.assertNull(deepChain.removeFromPool(COLLISION_8));
  Pool<Integer> empty=UnifiedSet.newSetWith(COLLISION_1);
  Assert.assertNull(empty.removeFromPool(COLLISION_2));
}
