@Test public void zip(){
  MutableCollection<Object> collection=(MutableCollection<Object>)this.getCollection();
  List<Object> nulls=Collections.nCopies(collection.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(collection.size() + 1,null);
  List<Object> nullsMinusOne=Collections.nCopies(collection.size() - 1,null);
  MutableCollection<Pair<Object,Object>> pairs=collection.zip(nulls);
  Assert.assertEquals(collection.toSet(),pairs.collect((Function<Pair<Object,?>,Object>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  MutableCollection<Pair<Object,Object>> pairsPlusOne=collection.zip(nullsPlusOne);
  Assert.assertEquals(collection.toSet(),pairsPlusOne.collect((Function<Pair<Object,?>,Object>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  MutableCollection<Pair<Object,Object>> pairsMinusOne=collection.zip(nullsMinusOne);
  Assert.assertEquals(collection.size() - 1,pairsMinusOne.size());
  Assert.assertTrue(collection.containsAll(pairsMinusOne.collect((Function<Pair<Object,?>,Object>)Pair::getOne)));
  Assert.assertEquals(collection.zip(nulls).toSet(),collection.zip(nulls,new UnifiedSet<>()));
}
