@Override @Test default void RichIterable_collectPrimitive(){
  assertEquals(this.getExpectedBoolean(false,false,true,true,false,false),this.newWith(1,1,2,2,3,3).collectBoolean(each -> each % 2 == 0));
  assertEquals(this.newBooleanForTransform(false,false,true,true,false,false),this.newWith(1,1,2,2,3,3).collectBoolean(each -> each % 2 == 0,this.newBooleanForTransform()));
  RichIterable<Integer> iterable=this.newWith(1,1,2,2,3,3,11,11,12,12,13,13);
  assertEquals(this.getExpectedByte((byte)1,(byte)1,(byte)2,(byte)2,(byte)3,(byte)3,(byte)1,(byte)1,(byte)2,(byte)2,(byte)3,(byte)3),iterable.collectByte(each -> (byte)(each % 10)));
  assertEquals(this.newByteForTransform((byte)1,(byte)1,(byte)2,(byte)2,(byte)3,(byte)3,(byte)1,(byte)1,(byte)2,(byte)2,(byte)3,(byte)3),iterable.collectByte(each -> (byte)(each % 10),this.newByteForTransform()));
  assertEquals(this.getExpectedChar((char)1,(char)1,(char)2,(char)2,(char)3,(char)3,(char)1,(char)1,(char)2,(char)2,(char)3,(char)3),iterable.collectChar(each -> (char)(each % 10)));
  assertEquals(this.newCharForTransform((char)1,(char)1,(char)2,(char)2,(char)3,(char)3,(char)1,(char)1,(char)2,(char)2,(char)3,(char)3),iterable.collectChar(each -> (char)(each % 10),this.newCharForTransform()));
  assertEquals(this.getExpectedDouble(1.0,1.0,2.0,2.0,3.0,3.0,1.0,1.0,2.0,2.0,3.0,3.0),iterable.collectDouble(each -> (double)(each % 10)));
  assertEquals(this.newDoubleForTransform(1.0,1.0,2.0,2.0,3.0,3.0,1.0,1.0,2.0,2.0,3.0,3.0),iterable.collectDouble(each -> (double)(each % 10),this.newDoubleForTransform()));
  assertEquals(this.getExpectedFloat(1.0f,1.0f,2.0f,2.0f,3.0f,3.0f,1.0f,1.0f,2.0f,2.0f,3.0f,3.0f),iterable.collectFloat(each -> (float)(each % 10)));
  assertEquals(this.newFloatForTransform(1.0f,1.0f,2.0f,2.0f,3.0f,3.0f,1.0f,1.0f,2.0f,2.0f,3.0f,3.0f),iterable.collectFloat(each -> (float)(each % 10),this.newFloatForTransform()));
  assertEquals(this.getExpectedInt(1,1,2,2,3,3,1,1,2,2,3,3),iterable.collectInt(each -> each % 10));
  assertEquals(this.newIntForTransform(1,1,2,2,3,3,1,1,2,2,3,3),iterable.collectInt(each -> each % 10,this.newIntForTransform()));
  assertEquals(this.getExpectedLong(1,1,2,2,3,3,1,1,2,2,3,3),iterable.collectLong(each -> each % 10));
  assertEquals(this.newLongForTransform(1,1,2,2,3,3,1,1,2,2,3,3),iterable.collectLong(each -> each % 10,this.newLongForTransform()));
  assertEquals(this.getExpectedShort((short)1,(short)1,(short)2,(short)2,(short)3,(short)3,(short)1,(short)1,(short)2,(short)2,(short)3,(short)3),iterable.collectShort(each -> (short)(each % 10)));
  assertEquals(this.newShortForTransform((short)1,(short)1,(short)2,(short)2,(short)3,(short)3,(short)1,(short)1,(short)2,(short)2,(short)3,(short)3),iterable.collectShort(each -> (short)(each % 10),this.newShortForTransform()));
}
