@Test public void zip(){
  List<Object> nulls=Collections.nCopies(this.lazyIterable.size(),null);
  List<Object> nullsPlusOne=Collections.nCopies(this.lazyIterable.size() + 1,null);
  List<Object> nullsMinusOne=Collections.nCopies(this.lazyIterable.size() - 1,null);
  LazyIterable<Pair<Integer,Object>> pairs=this.lazyIterable.zip(nulls);
  Assert.assertEquals(this.lazyIterable.toSet(),pairs.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairs.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  LazyIterable<Pair<Integer,Object>> pairsPlusOne=this.lazyIterable.zip(nullsPlusOne);
  Assert.assertEquals(this.lazyIterable.toSet(),pairsPlusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne).toSet());
  Assert.assertEquals(nulls,pairsPlusOne.collect((Function<Pair<?,Object>,Object>)Pair::getTwo,Lists.mutable.of()));
  LazyIterable<Pair<Integer,Object>> pairsMinusOne=this.lazyIterable.zip(nullsMinusOne);
  Assert.assertEquals(this.lazyIterable.size() - 1,pairsMinusOne.size());
  Assert.assertTrue(this.lazyIterable.containsAllIterable(pairsMinusOne.collect((Function<Pair<Integer,?>,Integer>)Pair::getOne)));
  Assert.assertEquals(this.lazyIterable.zip(nulls).toSet(),this.lazyIterable.zip(nulls,UnifiedSet.<Pair<Integer,Object>>newSet()));
}
