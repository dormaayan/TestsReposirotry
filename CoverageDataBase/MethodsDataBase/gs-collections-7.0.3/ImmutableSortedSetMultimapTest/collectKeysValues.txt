@Override @Test public void collectKeysValues(){
  TreeSortedSetMultimap<String,Integer> mutableMultimap=TreeSortedSetMultimap.newMultimap(Comparators.<Integer>reverseNaturalOrder());
  mutableMultimap.putAll("1",FastList.newListWith(4,3,2,1,1));
  mutableMultimap.putAll("2",FastList.newListWith(5,4,3,2,2));
  ImmutableSortedSetMultimap<String,Integer> immutableMap=mutableMultimap.toImmutable();
  ImmutableBagMultimap<Integer,String> collectedMultimap1=immutableMap.collectKeysValues((key,value) -> Tuples.pair(Integer.valueOf(key),value + "Value"));
  HashBagMultimap<Integer,String> expectedMultimap1=HashBagMultimap.newMultimap();
  expectedMultimap1.putAll(1,FastList.newListWith("4Value","3Value","2Value","1Value"));
  expectedMultimap1.putAll(2,FastList.newListWith("5Value","4Value","3Value","2Value"));
  ImmutableBagMultimap<Integer,String> expectedImmutableMultimap1=expectedMultimap1.toImmutable();
  Assert.assertEquals(expectedImmutableMultimap1,collectedMultimap1);
  ImmutableBagMultimap<Integer,String> collectedMultimap2=immutableMap.collectKeysValues((key,value) -> Tuples.pair(1,value + "Value"));
  HashBagMultimap<Integer,String> expectedMultimap2=HashBagMultimap.newMultimap();
  expectedMultimap2.putAll(1,FastList.newListWith("4Value","3Value","2Value","1Value"));
  expectedMultimap2.putAll(1,FastList.newListWith("5Value","4Value","3Value","2Value"));
  ImmutableBagMultimap<Integer,String> expectedImmutableMultimap2=expectedMultimap2.toImmutable();
  Assert.assertEquals(expectedImmutableMultimap2,collectedMultimap2);
}
