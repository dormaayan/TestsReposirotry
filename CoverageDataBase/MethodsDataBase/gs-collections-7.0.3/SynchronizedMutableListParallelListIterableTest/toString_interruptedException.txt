@Override @Test public void toString_interruptedException(){
  Thread.currentThread().interrupt();
  Verify.assertThrowsWithCause(RuntimeException.class,InterruptedException.class,() -> this.classUnderTest().collect(new CheckedFunction<Integer,String>(){
    @Override public String safeValueOf(    Integer each) throws InterruptedException {
      Thread.sleep(1000);
      return String.valueOf(each);
    }
  }
).toString());
  Assert.assertFalse(Thread.interrupted());
  MutableCollection<Integer> actual=HashBag.<Integer>newBag().asSynchronized();
  this.classUnderTest().forEach(CollectionAddProcedure.on(actual));
  Assert.assertEquals(this.getExpected().toBag(),actual);
}
