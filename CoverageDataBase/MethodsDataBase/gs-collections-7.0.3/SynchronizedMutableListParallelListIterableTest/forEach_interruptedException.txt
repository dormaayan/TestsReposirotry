@Override @Test public void forEach_interruptedException(){
  final MutableCollection<Integer> actual1=HashBag.<Integer>newBag().asSynchronized();
  Thread.currentThread().interrupt();
  Verify.assertThrowsWithCause(RuntimeException.class,InterruptedException.class,() -> this.classUnderTest().forEach(new CheckedProcedure<Integer>(){
    @Override public void safeValue(    Integer each) throws InterruptedException {
      Thread.sleep(1000);
      actual1.add(each);
    }
  }
));
  Assert.assertFalse(Thread.interrupted());
  MutableCollection<Integer> actual2=HashBag.<Integer>newBag().asSynchronized();
  this.classUnderTest().forEach(CollectionAddProcedure.on(actual2));
  Assert.assertEquals(this.getExpected().toBag(),actual2);
}
