@Test @Deprecated public void forAllButLastDoCollection(){
  final Closure<List<? extends Number>> testClosure=ClosureUtils.invokerClosure("clear");
  final Collection<List<? extends Number>> col=new ArrayList<>();
  col.add(collectionA);
  col.add(collectionB);
  List<? extends Number> lastElement=CollectionUtils.forAllButLastDo(col,testClosure);
  assertSame(lastElement,collectionB);
  assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());
  col.clear();
  col.add(collectionB);
  lastElement=CollectionUtils.forAllButLastDo(col,testClosure);
  assertSame(lastElement,collectionB);
  assertTrue(!collectionB.isEmpty());
  col.clear();
  lastElement=CollectionUtils.forAllButLastDo(col,testClosure);
  assertNull(lastElement);
  final Collection<String> strings=Arrays.asList("a","b","c");
  final StringBuffer result=new StringBuffer();
  result.append(CollectionUtils.forAllButLastDo(strings,new Closure<String>(){
    @Override public void execute(    final String input){
      result.append(input + ";");
    }
  }
));
  assertEquals("a;b;c",result.toString());
  final Collection<String> oneString=Arrays.asList("a");
  final StringBuffer resultOne=new StringBuffer();
  resultOne.append(CollectionUtils.forAllButLastDo(oneString,new Closure<String>(){
    @Override public void execute(    final String input){
      resultOne.append(input + ";");
    }
  }
));
  assertEquals("a",resultOne.toString());
  assertNull(CollectionUtils.forAllButLastDo(strings,(Closure<String>)null));
  assertNull(CollectionUtils.forAllButLastDo((Collection<String>)null,(Closure<String>)null));
}
