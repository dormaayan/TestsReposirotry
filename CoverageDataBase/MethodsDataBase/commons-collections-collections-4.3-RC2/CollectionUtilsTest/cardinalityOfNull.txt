@Test @Deprecated public void cardinalityOfNull(){
  final List<String> list=new ArrayList<>();
  assertEquals(0,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertNull(freq.get(null));
  }
  list.add("A");
  assertEquals(0,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertNull(freq.get(null));
  }
  list.add(null);
  assertEquals(1,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertEquals(Integer.valueOf(1),freq.get(null));
  }
  list.add("B");
  assertEquals(1,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertEquals(Integer.valueOf(1),freq.get(null));
  }
  list.add(null);
  assertEquals(2,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertEquals(Integer.valueOf(2),freq.get(null));
  }
  list.add("B");
  assertEquals(2,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertEquals(Integer.valueOf(2),freq.get(null));
  }
  list.add(null);
  assertEquals(3,CollectionUtils.cardinality(null,list));
{
    final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);
    assertEquals(Integer.valueOf(3),freq.get(null));
  }
}
