@Test public void testIsEqualCollectionEquator(){
  final Collection<Integer> collB=CollectionUtils.collect(collectionB,TRANSFORM_TO_INTEGER);
  final Equator<Integer> e=new Equator<Integer>(){
    @Override public boolean equate(    final Integer o1,    final Integer o2){
      if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {
        return false;
      }
      return true;
    }
    @Override public int hash(    final Integer o){
      return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();
    }
  }
;
  assertTrue(CollectionUtils.isEqualCollection(collectionA,collectionA,e));
  assertTrue(CollectionUtils.isEqualCollection(collectionA,collB,e));
  assertTrue(CollectionUtils.isEqualCollection(collB,collectionA,e));
  final Equator<Number> defaultEquator=DefaultEquator.defaultEquator();
  assertFalse(CollectionUtils.isEqualCollection(collectionA,collectionB,defaultEquator));
  assertFalse(CollectionUtils.isEqualCollection(collectionA,collB,defaultEquator));
}
