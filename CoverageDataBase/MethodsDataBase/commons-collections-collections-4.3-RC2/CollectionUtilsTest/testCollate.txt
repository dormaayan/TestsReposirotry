@Test public void testCollate(){
  List<Integer> result=CollectionUtils.collate(emptyCollection,emptyCollection);
  assertEquals("Merge empty with empty",0,result.size());
  result=CollectionUtils.collate(collectionA,emptyCollection);
  assertEquals("Merge empty with non-empty",collectionA,result);
  List<Integer> result1=CollectionUtils.collate(collectionD,collectionE);
  List<Integer> result2=CollectionUtils.collate(collectionE,collectionD);
  assertEquals("Merge two lists 1",result1,result2);
  final List<Integer> combinedList=new ArrayList<>();
  combinedList.addAll(collectionD);
  combinedList.addAll(collectionE);
  Collections.sort(combinedList);
  assertEquals("Merge two lists 2",combinedList,result2);
  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());
  result=CollectionUtils.collate(emptyCollection,emptyCollection,reverseComparator);
  assertEquals("Comparator Merge empty with empty",0,result.size());
  Collections.reverse((List<Integer>)collectionD);
  Collections.reverse((List<Integer>)collectionE);
  Collections.reverse(combinedList);
  result1=CollectionUtils.collate(collectionD,collectionE,reverseComparator);
  result2=CollectionUtils.collate(collectionE,collectionD,reverseComparator);
  assertEquals("Comparator Merge two lists 1",result1,result2);
  assertEquals("Comparator Merge two lists 2",combinedList,result2);
}
