/** 
 * This test ensures that  {@link Iterable}s are supported by  {@link CollectionUtils}. Specifically, it uses mocks to ensure that if the passed in {@link Iterable} is a {@link Collection} then{@link Collection#addAll(Collection)} is called instead of iterating.
 */
@Test public void addAllForIterable(){
  final Collection<Integer> inputCollection=createMock(Collection.class);
  final Iterable<Integer> inputIterable=inputCollection;
  final Iterable<Long> iterable=createMock(Iterable.class);
  final Iterator<Long> iterator=createMock(Iterator.class);
  final Collection<Number> c=createMock(Collection.class);
  expect(iterable.iterator()).andReturn(iterator);
  next(iterator,1L);
  next(iterator,2L);
  next(iterator,3L);
  expect(iterator.hasNext()).andReturn(false);
  expect(c.add(1L)).andReturn(true);
  expect(c.add(2L)).andReturn(true);
  expect(c.add(3L)).andReturn(true);
  expect(c.addAll(inputCollection)).andReturn(true);
  expect(iterable.iterator()).andReturn(iterator);
  next(iterator,1L);
  expect(iterator.hasNext()).andReturn(false);
  expect(c.add(1L)).andReturn(false);
  expect(c.addAll(inputCollection)).andReturn(false);
  replay();
  assertTrue(CollectionUtils.addAll(c,iterable));
  assertTrue(CollectionUtils.addAll(c,inputIterable));
  assertFalse(CollectionUtils.addAll(c,iterable));
  assertFalse(CollectionUtils.addAll(c,inputIterable));
  verify();
}
