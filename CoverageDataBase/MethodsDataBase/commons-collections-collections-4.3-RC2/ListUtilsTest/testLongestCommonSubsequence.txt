@Test @SuppressWarnings("boxing") public void testLongestCommonSubsequence(){
  try {
    ListUtils.longestCommonSubsequence((List<?>)null,null);
    fail("failed to check for null argument");
  }
 catch (  final NullPointerException e) {
  }
  try {
    ListUtils.longestCommonSubsequence(Arrays.asList('A'),null);
    fail("failed to check for null argument");
  }
 catch (  final NullPointerException e) {
  }
  try {
    ListUtils.longestCommonSubsequence(null,Arrays.asList('A'));
    fail("failed to check for null argument");
  }
 catch (  final NullPointerException e) {
  }
  @SuppressWarnings("unchecked") List<Character> lcs=ListUtils.longestCommonSubsequence(Collections.EMPTY_LIST,Collections.EMPTY_LIST);
  assertEquals(0,lcs.size());
  final List<Character> list1=Arrays.asList('B','A','N','A','N','A');
  final List<Character> list2=Arrays.asList('A','N','A','N','A','S');
  lcs=ListUtils.longestCommonSubsequence(list1,list2);
  List<Character> expected=Arrays.asList('A','N','A','N','A');
  assertEquals(expected,lcs);
  final List<Character> list3=Arrays.asList('A','T','A','N','A');
  lcs=ListUtils.longestCommonSubsequence(list1,list3);
  expected=Arrays.asList('A','A','N','A');
  assertEquals(expected,lcs);
  final List<Character> listZorro=Arrays.asList('Z','O','R','R','O');
  lcs=ListUtils.longestCommonSubsequence(list1,listZorro);
  assertTrue(lcs.isEmpty());
}
