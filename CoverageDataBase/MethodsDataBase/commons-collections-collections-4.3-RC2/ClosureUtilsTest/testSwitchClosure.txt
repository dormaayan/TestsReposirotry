@Test @SuppressWarnings("unchecked") public void testSwitchClosure(){
  final MockClosure<String> a=new MockClosure<>();
  final MockClosure<String> b=new MockClosure<>();
  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("WELL");
  assertEquals(0,a.count);
  assertEquals(0,b.count);
  a.reset();
  b.reset();
  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("HELLO");
  assertEquals(1,a.count);
  assertEquals(0,b.count);
  a.reset();
  b.reset();
  final MockClosure<String> c=new MockClosure<>();
  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b},c).execute("WELL");
  assertEquals(0,a.count);
  assertEquals(0,b.count);
  assertEquals(1,c.count);
  a.reset();
  b.reset();
  final Map<Predicate<String>,Closure<String>> map=new HashMap<>();
  map.put(EqualPredicate.equalPredicate("HELLO"),a);
  map.put(EqualPredicate.equalPredicate("THERE"),b);
  ClosureUtils.<String>switchClosure(map).execute(null);
  assertEquals(0,a.count);
  assertEquals(0,b.count);
  a.reset();
  b.reset();
  map.clear();
  map.put(EqualPredicate.equalPredicate("HELLO"),a);
  map.put(EqualPredicate.equalPredicate("THERE"),b);
  ClosureUtils.switchClosure(map).execute("THERE");
  assertEquals(0,a.count);
  assertEquals(1,b.count);
  a.reset();
  b.reset();
  c.reset();
  map.clear();
  map.put(EqualPredicate.equalPredicate("HELLO"),a);
  map.put(EqualPredicate.equalPredicate("THERE"),b);
  map.put(null,c);
  ClosureUtils.switchClosure(map).execute("WELL");
  assertEquals(0,a.count);
  assertEquals(0,b.count);
  assertEquals(1,c.count);
  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new Predicate[0],new Closure[0]));
  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new HashMap<Predicate<String>,Closure<String>>()));
  map.clear();
  map.put(null,null);
  assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchClosure(map));
  try {
    ClosureUtils.switchClosure(null,null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<String>switchClosure((Predicate<String>[])null,(Closure<String>[])null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<String>switchClosure((Map<Predicate<String>,Closure<String>>)null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<String>switchClosure(new Predicate[2],new Closure[2]);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<String>switchClosure(new Predicate[]{TruePredicate.<String>truePredicate()},new Closure[]{a,b});
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
}
