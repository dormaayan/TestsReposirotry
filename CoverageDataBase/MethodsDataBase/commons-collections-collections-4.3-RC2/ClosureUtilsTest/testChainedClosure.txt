@Test @SuppressWarnings("unchecked") public void testChainedClosure(){
  MockClosure<Object> a=new MockClosure<>();
  MockClosure<Object> b=new MockClosure<>();
  ClosureUtils.chainedClosure(a,b).execute(null);
  assertEquals(1,a.count);
  assertEquals(1,b.count);
  a=new MockClosure<>();
  b=new MockClosure<>();
  ClosureUtils.<Object>chainedClosure(new Closure[]{a,b,a}).execute(null);
  assertEquals(2,a.count);
  assertEquals(1,b.count);
  a=new MockClosure<>();
  b=new MockClosure<>();
  Collection<Closure<Object>> coll=new ArrayList<>();
  coll.add(b);
  coll.add(a);
  coll.add(b);
  ClosureUtils.<Object>chainedClosure(coll).execute(null);
  assertEquals(1,a.count);
  assertEquals(2,b.count);
  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(new Closure[0]));
  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));
  try {
    ClosureUtils.chainedClosure(null,null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<Object>chainedClosure((Closure[])null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>)null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    ClosureUtils.<Object>chainedClosure(new Closure[]{null,null});
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    coll=new ArrayList<>();
    coll.add(null);
    coll.add(null);
    ClosureUtils.chainedClosure(coll);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
}
