@Test public void testPutAll_Map_array(){
  try {
    MapUtils.putAll(null,null);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  try {
    MapUtils.putAll(null,new Object[0]);
    fail();
  }
 catch (  final NullPointerException ex) {
  }
  Map<String,String> test=MapUtils.putAll(new HashMap<String,String>(),new String[0]);
  assertEquals(0,test.size());
  test=MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{"GREEN","#00FF00"},{"BLUE","#0000FF"}});
  assertEquals(true,test.containsKey("RED"));
  assertEquals("#FF0000",test.get("RED"));
  assertEquals(true,test.containsKey("GREEN"));
  assertEquals("#00FF00",test.get("GREEN"));
  assertEquals(true,test.containsKey("BLUE"));
  assertEquals("#0000FF",test.get("BLUE"));
  assertEquals(3,test.size());
  try {
    MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},null,{"BLUE","#0000FF"}});
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
  try {
    MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{"GREEN"},{"BLUE","#0000FF"}});
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
  try {
    MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{},{"BLUE","#0000FF"}});
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
  test=MapUtils.putAll(new HashMap<String,String>(),new String[]{"RED","#FF0000","GREEN","#00FF00","BLUE","#0000FF"});
  assertEquals(true,test.containsKey("RED"));
  assertEquals("#FF0000",test.get("RED"));
  assertEquals(true,test.containsKey("GREEN"));
  assertEquals("#00FF00",test.get("GREEN"));
  assertEquals(true,test.containsKey("BLUE"));
  assertEquals("#0000FF",test.get("BLUE"));
  assertEquals(3,test.size());
  test=MapUtils.putAll(new HashMap<String,String>(),new String[]{"RED","#FF0000","GREEN","#00FF00","BLUE","#0000FF","PURPLE"});
  assertEquals(true,test.containsKey("RED"));
  assertEquals("#FF0000",test.get("RED"));
  assertEquals(true,test.containsKey("GREEN"));
  assertEquals("#00FF00",test.get("GREEN"));
  assertEquals(true,test.containsKey("BLUE"));
  assertEquals("#0000FF",test.get("BLUE"));
  assertEquals(3,test.size());
  test=MapUtils.putAll(new HashMap<String,String>(),null);
  assertEquals(0,test.size());
  test=MapUtils.putAll(new HashMap<String,String>(),new Object[]{new DefaultMapEntry<>("RED","#FF0000"),new DefaultMapEntry<>("GREEN","#00FF00"),new DefaultMapEntry<>("BLUE","#0000FF")});
  assertEquals(true,test.containsKey("RED"));
  assertEquals("#FF0000",test.get("RED"));
  assertEquals(true,test.containsKey("GREEN"));
  assertEquals("#00FF00",test.get("GREEN"));
  assertEquals(true,test.containsKey("BLUE"));
  assertEquals("#0000FF",test.get("BLUE"));
  assertEquals(3,test.size());
  test=MapUtils.putAll(new HashMap<String,String>(),new Object[]{new DefaultKeyValue<>("RED","#FF0000"),new DefaultKeyValue<>("GREEN","#00FF00"),new DefaultKeyValue<>("BLUE","#0000FF")});
  assertEquals(true,test.containsKey("RED"));
  assertEquals("#FF0000",test.get("RED"));
  assertEquals(true,test.containsKey("GREEN"));
  assertEquals("#00FF00",test.get("GREEN"));
  assertEquals(true,test.containsKey("BLUE"));
  assertEquals("#0000FF",test.get("BLUE"));
  assertEquals(3,test.size());
}
