@Test public void testUnknownObjectBehavior(){
  FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCities);
  try {
    comparator.compare("New York","Minneapolis");
    fail("Should have thrown a IllegalArgumentException");
  }
 catch (  final IllegalArgumentException e) {
  }
  try {
    comparator.compare("Minneapolis","New York");
    fail("Should have thrown a IllegalArgumentException");
  }
 catch (  final IllegalArgumentException e) {
  }
  assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION,comparator.getUnknownObjectBehavior());
  comparator=new FixedOrderComparator<>(topCities);
  comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);
  assertEquals(FixedOrderComparator.UnknownObjectBehavior.BEFORE,comparator.getUnknownObjectBehavior());
  LinkedList<String> keys=new LinkedList<>(Arrays.asList(topCities));
  keys.addFirst("Minneapolis");
  assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);
  assertEquals(-1,comparator.compare("Minneapolis","New York"));
  assertEquals(1,comparator.compare("New York","Minneapolis"));
  assertEquals(0,comparator.compare("Minneapolis","St Paul"));
  comparator=new FixedOrderComparator<>(topCities);
  comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
  keys=new LinkedList<>(Arrays.asList(topCities));
  keys.add("Minneapolis");
  assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);
  assertEquals(1,comparator.compare("Minneapolis","New York"));
  assertEquals(-1,comparator.compare("New York","Minneapolis"));
  assertEquals(0,comparator.compare("Minneapolis","St Paul"));
}
