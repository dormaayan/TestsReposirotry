/** 
 * Test empty list iterator
 */
@Test public void testEmptyListIterator(){
  assertSame(EmptyListIterator.INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);
  assertSame(EmptyListIterator.RESETTABLE_INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);
  assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);
  assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);
  assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);
  assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);
  assertEquals(false,IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);
  assertEquals(false,IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());
  assertEquals(0,IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());
  assertEquals(-1,IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());
  IteratorUtils.EMPTY_LIST_ITERATOR.reset();
  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.EMPTY_LIST_ITERATOR);
  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.emptyListIterator());
  try {
    IteratorUtils.EMPTY_LIST_ITERATOR.next();
    fail();
  }
 catch (  final NoSuchElementException ex) {
  }
  try {
    IteratorUtils.EMPTY_LIST_ITERATOR.previous();
    fail();
  }
 catch (  final NoSuchElementException ex) {
  }
  try {
    IteratorUtils.EMPTY_LIST_ITERATOR.remove();
    fail();
  }
 catch (  final IllegalStateException ex) {
  }
  try {
    IteratorUtils.emptyListIterator().set(null);
    fail();
  }
 catch (  final IllegalStateException ex) {
  }
  try {
    IteratorUtils.emptyListIterator().add(null);
    fail();
  }
 catch (  final UnsupportedOperationException ex) {
  }
}
