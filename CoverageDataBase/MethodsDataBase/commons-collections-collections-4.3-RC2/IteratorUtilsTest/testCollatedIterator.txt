/** 
 * Tests methods collatedIterator(...)
 */
@Test public void testCollatedIterator(){
  try {
    IteratorUtils.collatedIterator(null,collectionOdd.iterator(),null);
    fail("expecting NullPointerException");
  }
 catch (  final NullPointerException npe) {
  }
  try {
    IteratorUtils.collatedIterator(null,null,collectionEven.iterator());
    fail("expecting NullPointerException");
  }
 catch (  final NullPointerException npe) {
  }
  Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionEven.iterator());
  List<Integer> result=IteratorUtils.toList(it);
  assertEquals(12,result.size());
  final List<Integer> combinedList=new ArrayList<>();
  combinedList.addAll(collectionOdd);
  combinedList.addAll(collectionEven);
  Collections.sort(combinedList);
  assertEquals(combinedList,result);
  it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),emptyCollection.iterator());
  result=IteratorUtils.toList(it);
  assertEquals(collectionOdd,result);
  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());
  Collections.reverse(collectionOdd);
  Collections.reverse(collectionEven);
  Collections.reverse(combinedList);
  it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator(),collectionEven.iterator());
  result=IteratorUtils.toList(it);
  assertEquals(combinedList,result);
}
