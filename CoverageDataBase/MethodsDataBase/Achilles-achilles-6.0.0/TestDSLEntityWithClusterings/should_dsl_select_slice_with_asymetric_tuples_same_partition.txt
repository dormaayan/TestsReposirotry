@Test public void should_dsl_select_slice_with_asymetric_tuples_same_partition() throws Exception {
  final Map<String,Object> values=new HashMap<>();
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  values.put("id1",id);
  values.put("id2",id);
  values.put("id3",id);
  values.put("id4",id);
  values.put("id5",id);
  final UUID uuid1=new UUID(0L,0L);
  final UUID uuid2=new UUID(0L,1L);
  values.put("uuid1",uuid1);
  values.put("uuid2",uuid1);
  values.put("uuid3",uuid1);
  values.put("uuid4",uuid2);
  values.put("uuid5",uuid2);
  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date date2=dateFormat.parse("2015-10-02 00:00:00 GMT");
  final Date date3=dateFormat.parse("2015-10-03 00:00:00 GMT");
  values.put("date1","'2015-10-01 00:00:00+0000'");
  values.put("date2","'2015-10-02 00:00:00+0000'");
  values.put("date3","'2015-10-03 00:00:00+0000'");
  values.put("date4","'2015-10-04 00:00:00+0000'");
  values.put("date5","'2015-10-05 00:00:00+0000'");
  scriptExecutor.executeScriptTemplate("EntityWithClusteringColumns/insert_many_rows.cql",values);
  final List<EntityWithClusteringColumns> list=manager.dsl().select().uuid().date().value().fromBaseTable().where().id().Eq(id).uuid_date().uuid_And_date_Gt_And_uuid_Lt(uuid1,date2,uuid2).getList();
  assertThat(list).hasSize(1);
  assertThat(list.get(0).getUuid()).isEqualTo(uuid1);
  assertThat(list.get(0).getDate()).isEqualTo(date3);
  assertThat(list.get(0).getValue()).isEqualTo("val3");
}
