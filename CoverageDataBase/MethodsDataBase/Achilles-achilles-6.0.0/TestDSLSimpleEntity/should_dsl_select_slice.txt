@Test public void should_dsl_select_slice() throws Exception {
  final Map<String,Object> values=new HashMap<>();
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  values.put("id",id);
  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date date1=dateFormat.parse("2015-10-01 00:00:00 GMT");
  final Date date9=dateFormat.parse("2015-10-09 00:00:00 GMT");
  values.put("date1","'2015-10-01 00:00:00+0000'");
  values.put("date2","'2015-10-02 00:00:00+0000'");
  values.put("date3","'2015-10-03 00:00:00+0000'");
  values.put("date4","'2015-10-04 00:00:00+0000'");
  values.put("date5","'2015-10-05 00:00:00+0000'");
  values.put("date6","'2015-10-06 00:00:00+0000'");
  values.put("date7","'2015-10-07 00:00:00+0000'");
  values.put("date8","'2015-10-08 00:00:00+0000'");
  values.put("date9","'2015-10-09 00:00:00+0000'");
  scriptExecutor.executeScriptTemplate("SimpleEntity/insert_many_rows.cql",values);
  final List<SimpleEntity> list=manager.dsl().select().consistencyList().simpleSet().simpleMap().value().simpleMap().fromBaseTable().where().id().Eq(id).date().Gte_And_Lt(date1,date9).getList();
  assertThat(list).hasSize(8);
  final SimpleEntity instance1=list.get(0);
  final SimpleEntity instance2=list.get(1);
  final SimpleEntity instance3=list.get(2);
  final SimpleEntity instance4=list.get(3);
  final SimpleEntity instance5=list.get(4);
  final SimpleEntity instance6=list.get(5);
  final SimpleEntity instance7=list.get(6);
  final SimpleEntity instance8=list.get(7);
  assertThat(instance1.getConsistencyList()).containsExactly(ONE);
  assertThat(instance2.getConsistencyList()).containsExactly(TWO);
  assertThat(instance3.getConsistencyList()).containsExactly(THREE);
  assertThat(instance4.getConsistencyList()).containsExactly(QUORUM);
  assertThat(instance5.getConsistencyList()).containsExactly(ALL);
  assertThat(instance6.getConsistencyList()).containsExactly(LOCAL_ONE);
  assertThat(instance7.getConsistencyList()).containsExactly(LOCAL_QUORUM);
  assertThat(instance8.getConsistencyList()).containsExactly(EACH_QUORUM);
  assertThat(instance1.getSimpleSet()).containsOnly(1.0);
  assertThat(instance2.getSimpleSet()).containsOnly(2.0);
  assertThat(instance3.getSimpleSet()).containsOnly(3.0);
  assertThat(instance4.getSimpleSet()).containsOnly(4.0);
  assertThat(instance5.getSimpleSet()).containsOnly(5.0);
  assertThat(instance6.getSimpleSet()).containsOnly(6.0);
  assertThat(instance7.getSimpleSet()).containsOnly(7.0);
  assertThat(instance8.getSimpleSet()).containsOnly(8.0);
  assertThat(instance1.getSimpleMap()).containsExactly(entry(1,"one"));
  assertThat(instance2.getSimpleMap()).containsExactly(entry(2,"two"));
  assertThat(instance3.getSimpleMap()).containsExactly(entry(3,"three"));
  assertThat(instance4.getSimpleMap()).containsExactly(entry(4,"four"));
  assertThat(instance5.getSimpleMap()).containsExactly(entry(5,"five"));
  assertThat(instance6.getSimpleMap()).containsExactly(entry(6,"six"));
  assertThat(instance7.getSimpleMap()).containsExactly(entry(7,"seven"));
  assertThat(instance8.getSimpleMap()).containsExactly(entry(8,"eight"));
  assertThat(instance1.getValue()).isEqualTo("id - date1");
  assertThat(instance2.getValue()).isEqualTo("id - date2");
  assertThat(instance3.getValue()).isEqualTo("id - date3");
  assertThat(instance4.getValue()).isEqualTo("id - date4");
  assertThat(instance5.getValue()).isEqualTo("id - date5");
  assertThat(instance6.getValue()).isEqualTo("id - date6");
  assertThat(instance7.getValue()).isEqualTo("id - date7");
  assertThat(instance8.getValue()).isEqualTo("id - date8");
}
