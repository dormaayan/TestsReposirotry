@Test public void should_dsl_select_with_iterator() throws Exception {
  final Map<String,Object> values=new HashMap<>();
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  values.put("id",id);
  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date date1=dateFormat.parse("2015-10-01 00:00:00 GMT");
  final Date date2=dateFormat.parse("2015-10-02 00:00:00 GMT");
  final Date date3=dateFormat.parse("2015-10-03 00:00:00 GMT");
  final Date date4=dateFormat.parse("2015-10-04 00:00:00 GMT");
  final Date date5=dateFormat.parse("2015-10-05 00:00:00 GMT");
  final Date date6=dateFormat.parse("2015-10-06 00:00:00 GMT");
  final Date date7=dateFormat.parse("2015-10-07 00:00:00 GMT");
  final Date date8=dateFormat.parse("2015-10-08 00:00:00 GMT");
  final Date date9=dateFormat.parse("2015-10-09 00:00:00 GMT");
  values.put("date1","'2015-10-01 00:00:00+0000'");
  values.put("date2","'2015-10-02 00:00:00+0000'");
  values.put("date3","'2015-10-03 00:00:00+0000'");
  values.put("date4","'2015-10-04 00:00:00+0000'");
  values.put("date5","'2015-10-05 00:00:00+0000'");
  values.put("date6","'2015-10-06 00:00:00+0000'");
  values.put("date7","'2015-10-07 00:00:00+0000'");
  values.put("date8","'2015-10-08 00:00:00+0000'");
  values.put("date9","'2015-10-09 00:00:00+0000'");
  scriptExecutor.executeScriptTemplate("SimpleEntity/insert_many_rows.cql",values);
  final Iterator<SimpleEntity> iterator=manager.dsl().select().allColumns_FromBaseTable().where().id().Eq(id).date().Gt_And_Lte(date1,date9).orderByDateDescending().withFetchSize(2).withResultSetAsyncListener(rs -> {
    assertThat(rs.getAvailableWithoutFetching()).isEqualTo(2);
    return rs;
  }
).iterator();
  assertThat(iterator.next().getDate()).isEqualTo(date9);
  assertThat(iterator.next().getDate()).isEqualTo(date8);
  assertThat(iterator.next().getDate()).isEqualTo(date7);
  assertThat(iterator.next().getDate()).isEqualTo(date6);
  assertThat(iterator.next().getDate()).isEqualTo(date5);
  assertThat(iterator.next().getDate()).isEqualTo(date4);
  assertThat(iterator.next().getDate()).isEqualTo(date3);
  assertThat(iterator.next().getDate()).isEqualTo(date2);
  assertThat(iterator.hasNext()).isFalse();
}
