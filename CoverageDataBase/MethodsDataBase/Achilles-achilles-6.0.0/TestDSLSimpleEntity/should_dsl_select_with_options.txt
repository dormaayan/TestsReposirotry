@Test public void should_dsl_select_with_options() throws Exception {
  final Map<String,Object> values=new HashMap<>();
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  values.put("id",id);
  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date date1=dateFormat.parse("2015-10-01 00:00:00 GMT");
  final Date date2=dateFormat.parse("2015-10-02 00:00:00 GMT");
  final Date date3=dateFormat.parse("2015-10-03 00:00:00 GMT");
  final Date date6=dateFormat.parse("2015-10-06 00:00:00 GMT");
  values.put("date1","'2015-10-01 00:00:00+0000'");
  values.put("date2","'2015-10-02 00:00:00+0000'");
  values.put("date3","'2015-10-03 00:00:00+0000'");
  values.put("date4","'2015-10-04 00:00:00+0000'");
  values.put("date5","'2015-10-05 00:00:00+0000'");
  values.put("date6","'2015-10-06 00:00:00+0000'");
  values.put("date7","'2015-10-07 00:00:00+0000'");
  values.put("date8","'2015-10-08 00:00:00+0000'");
  values.put("date9","'2015-10-09 00:00:00+0000'");
  scriptExecutor.executeScriptTemplate("SimpleEntity/insert_many_rows.cql",values);
  final AtomicInteger rsCount=new AtomicInteger(0);
  final AtomicInteger rowCounter=new AtomicInteger(0);
  final CassandraLogAsserter logAsserter=new CassandraLogAsserter();
  logAsserter.prepareLogLevelForDriverConnection();
  final List<SimpleEntity> found=manager.dsl().select().value().fromBaseTable().where().id().Eq(id).date().IN(date1,date2,date3,date6).orderByDateDescending().limit(3).withConsistencyLevel(THREE).withRetryPolicy(DowngradingConsistencyRetryPolicy.INSTANCE).withResultSetAsyncListener(rs -> {
    rsCount.getAndSet(rs.getAvailableWithoutFetching());
    return rs;
  }
).withRowAsyncListener(row -> {
    rowCounter.getAndIncrement();
    return row;
  }
).getList();
  assertThat(found).hasSize(3);
  assertThat(found.get(0).getValue()).isEqualTo("id - date6");
  assertThat(found.get(1).getValue()).isEqualTo("id - date3");
  assertThat(found.get(2).getValue()).isEqualTo("id - date2");
  assertThat(rsCount.get()).isEqualTo(3);
  assertThat(rowCounter.get()).isEqualTo(3);
  logAsserter.assertConsistencyLevels(THREE,ONE);
}
