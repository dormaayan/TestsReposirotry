@Test public void should_call_user_defined_functions() throws Exception {
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final TestUDT udt=new TestUDT();
  final EntityWithComplexTypes entity=new EntityWithComplexTypes();
  entity.setId(id);
  entity.setValue("12345");
  entity.setListOfOptional(Arrays.asList(Optional.of("one"),Optional.of("two")));
  entity.setComplexNestingMap(ImmutableMap.of(udt,ImmutableMap.of(1,Tuple3.of(1,2,ConsistencyLevel.ALL))));
  complexTypes_manager.crud().insert(entity).execute();
  final TypedMap typedMap=complexTypes_manager.dsl().select().function(FunctionsRegistry.convertToLong(EntityWithComplexTypes_AchillesMeta.COLUMNS.VALUE),"asLong").function(FunctionsRegistry.convertListToJson(EntityWithComplexTypes_AchillesMeta.COLUMNS.LIST_OF_OPTIONAL),"list_as_json").function(FunctionsRegistry.stringifyComplexNestingMap(EntityWithComplexTypes_AchillesMeta.COLUMNS.COMPLEX_NESTING_MAP),"complex_map").fromBaseTable().where().id().Eq(id).getTypedMap();
  assertThat(typedMap.<Long>getTyped("aslong")).isEqualTo(12345L);
  assertThat(typedMap.<String>getTyped("list_as_json")).isEqualTo("[one, two]");
  assertThat(typedMap.<String>getTyped("complex_map")).contains("whatever");
}
