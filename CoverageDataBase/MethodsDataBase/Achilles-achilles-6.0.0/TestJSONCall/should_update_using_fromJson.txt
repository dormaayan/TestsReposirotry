@Test public void should_update_using_fromJson() throws Exception {
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
  manager.dsl().update().fromBaseTable().value().Set_FromJSON("\"new_val\"").listString().Set_FromJSON("[\"one\"]").setString().Set_FromJSON("[\"two\"]").mapString().Set_FromJSON("{\"3\": \"three\"}").where().id().Eq_FromJson("\"" + id + "\"").clust().Eq_FromJson("\"1\"").if_Value().Eq_FromJSON("\"val\"").if_ListString().Eq_FromJSON("[\"1\", \"2\"]").if_SetString().Eq_FromJSON("[\"1\", \"2\"]").if_MapString().Eq_FromJSON("{\"1\": \"1\", \"2\": \"2\"}").execute();
  final Row row=session.execute("SELECT * FROM achilles_embedded.entity_for_json_function_call WHERE id = " + id).one();
  assertThat(row).isNotNull();
  assertThat(row.getString("value")).isEqualTo("new_val");
  assertThat(row.getList("liststring",String.class)).containsExactly("one");
  assertThat(row.getSet("setstring",String.class)).containsExactly("two");
  assertThat(row.getMap("mapstring",Integer.class,String.class)).hasSize(1).containsEntry(3,"three");
}
