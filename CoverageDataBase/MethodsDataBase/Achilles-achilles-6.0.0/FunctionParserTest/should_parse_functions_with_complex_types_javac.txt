@Test public void should_parse_functions_with_complex_types_javac() throws Exception {
  setExec(aptUtils -> {
    final ClassName testUDTType=ClassName.get(TestUDT.class);
    final String className=TestFunctionRegistryWithComplexTypes.class.getCanonicalName();
    final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(className);
    final List<FunctionSignature> udfSignatures=FunctionParser.parseFunctionRegistryAndValidateTypes(aptUtils,typeElement,context);
    assertThat(udfSignatures).hasSize(24);
    final FunctionSignature enumeratedParam=udfSignatures.get(0);
    assertThat(enumeratedParam.getFunctionName()).isEqualTo("enumeratedParam");
    assertThat(enumeratedParam.parameterSignatures.get(0).sourceTypeName).isEqualTo(CONSISTENCY_LEVEL);
    assertThat(enumeratedParam.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(OBJECT_INT);
    assertThat(enumeratedParam.parameterSignatures.get(0).targetCQLDataType).isEqualTo("int");
    assertThat(enumeratedParam.returnTypeSignature.targetCQLTypeName).isEqualTo(STRING);
    assertThat(enumeratedParam.returnTypeSignature.targetCQLDataType).isEqualTo("text");
    final FunctionSignature json=udfSignatures.get(1);
    assertThat(json.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_UTIL_DATE);
    assertThat(json.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(STRING);
    assertThat(json.parameterSignatures.get(0).targetCQLDataType).isEqualTo("text");
    final FunctionSignature primitiveByteArray=udfSignatures.get(2);
    assertThat(primitiveByteArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(byte[].class));
    assertThat(primitiveByteArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(BYTE_BUFFER);
    assertThat(primitiveByteArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("blob");
    final FunctionSignature objectByteArray=udfSignatures.get(3);
    assertThat(objectByteArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(Byte[].class));
    assertThat(objectByteArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(BYTE_BUFFER);
    assertThat(objectByteArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("blob");
    final FunctionSignature intToStringCodec=udfSignatures.get(4);
    assertThat(intToStringCodec.parameterSignatures.get(0).sourceTypeName).isEqualTo(OBJECT_INT);
    assertThat(intToStringCodec.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(STRING);
    assertThat(intToStringCodec.parameterSignatures.get(0).targetCQLDataType).isEqualTo("text");
    final FunctionSignature udf=udfSignatures.get(5);
    assertThat(udf.parameterSignatures.get(0).sourceTypeName).isEqualTo(testUDTType);
    assertThat(udf.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_DRIVER_UDT_VALUE_TYPE);
    assertThat(udf.parameterSignatures.get(0).targetCQLDataType).isEqualTo("frozen<my_type>");
    final FunctionSignature listUDT=udfSignatures.get(6);
    assertThat(listUDT.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(LIST,testUDTType));
    assertThat(listUDT.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(genericType(LIST,JAVA_DRIVER_UDT_VALUE_TYPE));
    assertThat(listUDT.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<frozen<my_type>>");
    final FunctionSignature mapUDT=udfSignatures.get(7);
    assertThat(mapUDT.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(MAP,OBJECT_INT,testUDTType));
    assertThat(mapUDT.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(genericType(MAP,OBJECT_INT,JAVA_DRIVER_UDT_VALUE_TYPE));
    assertThat(mapUDT.parameterSignatures.get(0).targetCQLDataType).isEqualTo("map<int, frozen<my_type>>");
    final FunctionSignature setEnum=udfSignatures.get(8);
    assertThat(setEnum.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(SET,CONSISTENCY_LEVEL));
    assertThat(setEnum.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(genericType(SET,STRING));
    assertThat(setEnum.parameterSignatures.get(0).targetCQLDataType).isEqualTo("set<text>");
    final FunctionSignature listOfMap=udfSignatures.get(9);
    assertThat(listOfMap.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(LIST,genericType(MAP,OBJECT_INT,STRING)));
    assertThat(listOfMap.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(genericType(LIST,genericType(MAP,OBJECT_INT,STRING)));
    assertThat(listOfMap.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<frozen<map<int, text>>>");
    final FunctionSignature tuple1=udfSignatures.get(10);
    assertThat(tuple1.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(TUPLE1,CONSISTENCY_LEVEL));
    assertThat(tuple1.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_DRIVER_TUPLE_VALUE_TYPE);
    assertThat(tuple1.parameterSignatures.get(0).targetCQLDataType).isEqualTo("frozen<tuple<text>>");
    final FunctionSignature tuple2=udfSignatures.get(11);
    assertThat(tuple2.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(TUPLE2,OBJECT_INT,genericType(LIST,OBJECT_INT)));
    assertThat(tuple2.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_DRIVER_TUPLE_VALUE_TYPE);
    assertThat(tuple2.parameterSignatures.get(0).targetCQLDataType).isEqualTo("frozen<tuple<int, list<text>>>");
    final FunctionSignature complicated=udfSignatures.get(12);
    assertThat(complicated.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(MAP,testUDTType,genericType(MAP,OBJECT_INT,genericType(TUPLE3,OBJECT_INT,OBJECT_INT,CONSISTENCY_LEVEL))));
    assertThat(complicated.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(genericType(MAP,STRING,genericType(MAP,OBJECT_INT,JAVA_DRIVER_TUPLE_VALUE_TYPE)));
    assertThat(complicated.parameterSignatures.get(0).targetCQLDataType).isEqualTo("map<text, frozen<map<int, frozen<tuple<text, int, int>>>>>");
    final FunctionSignature timeuuid=udfSignatures.get(13);
    assertThat(timeuuid.parameterSignatures.get(0).sourceTypeName).isEqualTo(UUID);
    assertThat(timeuuid.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(UUID);
    assertThat(timeuuid.parameterSignatures.get(0).targetCQLDataType).isEqualTo("timeuuid");
    final FunctionSignature longArray=udfSignatures.get(14);
    assertThat(longArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(long[].class));
    assertThat(longArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(TypeName.get(long[].class));
    assertThat(longArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<bigint>");
    final FunctionSignature intArray=udfSignatures.get(15);
    assertThat(intArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(int[].class));
    assertThat(intArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(TypeName.get(int[].class));
    assertThat(intArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<int>");
    final FunctionSignature doubleArray=udfSignatures.get(16);
    assertThat(doubleArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(double[].class));
    assertThat(doubleArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(TypeName.get(double[].class));
    assertThat(doubleArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<double>");
    final FunctionSignature floatArray=udfSignatures.get(17);
    assertThat(floatArray.parameterSignatures.get(0).sourceTypeName).isEqualTo(TypeName.get(float[].class));
    assertThat(floatArray.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(TypeName.get(float[].class));
    assertThat(floatArray.parameterSignatures.get(0).targetCQLDataType).isEqualTo("list<float>");
    final FunctionSignature localDate=udfSignatures.get(18);
    assertThat(localDate.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_DRIVER_LOCAL_DATE);
    assertThat(localDate.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_DRIVER_LOCAL_DATE);
    assertThat(localDate.parameterSignatures.get(0).targetCQLDataType).isEqualTo("date");
    final FunctionSignature jdkInstant=udfSignatures.get(19);
    assertThat(jdkInstant.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_TIME_INSTANT);
    assertThat(jdkInstant.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_TIME_INSTANT);
    assertThat(jdkInstant.parameterSignatures.get(0).targetCQLDataType).isEqualTo("timestamp");
    final FunctionSignature jdkLocalDate=udfSignatures.get(20);
    assertThat(jdkLocalDate.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_TIME_LOCAL_DATE);
    assertThat(jdkLocalDate.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_TIME_LOCAL_DATE);
    assertThat(jdkLocalDate.parameterSignatures.get(0).targetCQLDataType).isEqualTo("date");
    final FunctionSignature jdkLocalTime=udfSignatures.get(21);
    assertThat(jdkLocalTime.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_TIME_LOCAL_TIME);
    assertThat(jdkLocalTime.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_TIME_LOCAL_TIME);
    assertThat(jdkLocalTime.parameterSignatures.get(0).targetCQLDataType).isEqualTo("time");
    final FunctionSignature jdkZonedDateTime=udfSignatures.get(22);
    assertThat(jdkZonedDateTime.parameterSignatures.get(0).sourceTypeName).isEqualTo(JAVA_TIME_ZONED_DATE_TME);
    assertThat(jdkZonedDateTime.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(JAVA_TIME_ZONED_DATE_TME);
    assertThat(jdkZonedDateTime.parameterSignatures.get(0).targetCQLDataType).isEqualTo("tuple<timestamp, varchar>");
    final FunctionSignature jdkOptional=udfSignatures.get(23);
    assertThat(jdkOptional.parameterSignatures.get(0).sourceTypeName).isEqualTo(genericType(OPTIONAL,STRING));
    assertThat(jdkOptional.parameterSignatures.get(0).targetCQLTypeName).isEqualTo(STRING);
    assertThat(jdkOptional.parameterSignatures.get(0).targetCQLDataType).isEqualTo("text");
  }
);
  launchTest();
}
