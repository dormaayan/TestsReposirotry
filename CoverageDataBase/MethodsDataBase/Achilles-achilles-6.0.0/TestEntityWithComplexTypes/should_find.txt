@Test public void should_find() throws Exception {
  final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  scriptExecutor.executeScriptTemplate("EntityWithComplexTypes/insert_single_row.cql",ImmutableMap.of("id",id));
  final TestUDT udt=new TestUDT();
  udt.setList(asList("list"));
  udt.setName("name");
  udt.setMap(ImmutableMap.of(1,"1"));
  final EntityWithComplexTypes actual=manager.crud().findById(id).get();
  assertThat(actual.getCodecOnClass()).isInstanceOf(ClassAnnotatedByCodec.class);
  assertThat(actual.getComplexNestingMap()).containsEntry(udt,ImmutableMap.of(1,Tuple3.of(1,2,ConsistencyLevel.ALL)));
  assertThat(actual.getConsistencyLevel()).isEqualTo(EACH_QUORUM);
  assertThat(actual.getInteger()).isEqualTo(123);
  assertThat(actual.getJsonMap()).containsEntry(1,asList(1,2,3));
  assertThat(actual.getListNesting()).containsExactly(ImmutableMap.of(1,"one"));
  assertThat(actual.getListUdt()).containsExactly(udt);
  assertThat(actual.getMapUdt()).containsEntry(1,udt);
  assertThat(actual.getMapWithNestedJson()).containsEntry(1,asList(ImmutableMap.of(1,"one")));
  assertThat(actual.getObjectBoolean()).isTrue();
  assertThat(actual.getObjectByte()).isEqualTo((byte)5);
  assertThat(actual.getObjectByteArray()).isEqualTo(new Byte[]{0,0,0,0,0,0,0,7});
  assertThat(actual.getOkSet()).containsOnly(LOCAL_ONE,LOCAL_QUORUM);
  assertThat(actual.isPrimitiveBoolean()).isTrue();
  assertThat(actual.getPrimitiveByte()).isEqualTo((byte)3);
  assertThat(actual.getPrimitiveByteArray()).isEqualTo(new byte[]{0,0,0,0,0,0,0,4});
  assertThat(actual.getSimpleUdt()).isEqualTo(udt);
  assertThat(actual.getTime()).isEqualTo(new Date(1234567));
  assertThat(actual.getTimeuuid()).isEqualTo(UUID.fromString("50554d6e-29bb-11e5-b345-feff819cdc9f"));
  assertThat(actual.getTuple1()).isEqualTo(Tuple1.of(THREE));
  assertThat(actual.getTuple2()).isEqualTo(Tuple2.of(TWO,2));
  assertThat(actual.getTupleNesting()).isEqualTo(Tuple2.of(1,asList("1")));
  assertThat(actual.getValue()).isEqualTo("val");
  assertThat(actual.getWriteTime()).isGreaterThan(0L);
  assertThat(actual.getWriteTimeWithCodec()).isNotNull();
  assertThat(actual.getIntWrapper()).isEqualTo(new IntWrapper(456));
  assertThat(actual.getProtocolVersion()).isEqualTo(ProtocolVersion.V2);
  assertThat(actual.getEncoding()).isEqualTo(Enumerated.Encoding.NAME);
  assertThat(actual.getDoubleArray()).isEqualTo(new double[]{1.0,2.0});
  assertThat(actual.getFloatArray()).isEqualTo(new float[]{3.0f,4.0f});
  assertThat(actual.getIntArray()).isEqualTo(new int[]{5,6});
  assertThat(actual.getLongArray()).isEqualTo(new long[]{7L,8L});
  assertThat(actual.getJdkInstant()).isNotNull();
  assertThat(actual.getJdkLocalDate()).isNotNull();
  assertThat(actual.getJdkLocalTime()).isNotNull();
  assertThat(actual.getJdkZonedDateTime()).isNotNull();
  assertThat(actual.getProtocolVersionAsOrdinal()).isEqualTo(ProtocolVersion.V3);
  assertThat(actual.getOptionalString()).isEqualTo(Optional.empty());
  assertThat(actual.getOptionalProtocolVersion()).isEqualTo(Optional.of(ProtocolVersion.V3));
  assertThat(actual.getOptionalEncodingAsOrdinal()).isEqualTo(Optional.of(ProtocolVersion.V2));
  assertThat(actual.getListOfOptional()).isEqualTo(Arrays.asList(Optional.of("1"),Optional.of("2")));
  assertThat(actual.getAscii()).isEqualTo("ascii_value");
}
