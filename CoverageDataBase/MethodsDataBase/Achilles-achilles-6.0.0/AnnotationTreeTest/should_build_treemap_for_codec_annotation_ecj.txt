@Ignore @Test public void should_build_treemap_for_codec_annotation_ecj() throws Exception {
  setExec(aptUtils -> {
    try {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityForAnnotationTree.class.getCanonicalName());
      final VariableElement mapWithCodec=findFieldByName(typeElement,"mapWithCodec");
      AnnotationTree annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,mapWithCodec).next();
      final Set<String> annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Integer.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Codec.class.getSimpleName());
      final CodecContext codecContext=annotationTree.getAnnotations().get(Codec.class).getTyped("codecContext");
      assertThat(codecContext.codecType).isEqualTo(ClassName.get(IntToStringCodec.class));
      assertThat(codecContext.sourceType).isEqualTo(ClassName.get(Integer.class));
      assertThat(codecContext.targetType).isEqualTo(ClassName.get(String.class));
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      aptUtils.messager.printMessage(Diagnostic.Kind.ERROR,ex.getMessage());
    }
  }
);
  Truth.ASSERT.about(JavaSourceSubjectFactory.javaSource()).that(loadClass(TestEntityForAnnotationTree.class)).processedWith(this).compilesWithoutError();
}
