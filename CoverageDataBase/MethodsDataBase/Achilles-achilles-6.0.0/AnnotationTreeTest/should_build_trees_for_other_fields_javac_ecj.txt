@Ignore @Test public void should_build_trees_for_other_fields_javac_ecj() throws Exception {
  setExec(aptUtils -> {
    try {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityForAnnotationTree.class.getCanonicalName());
      final VariableElement idElm=findFieldByName(typeElement,"id");
      final VariableElement timeElm=findFieldByName(typeElement,"time");
      final VariableElement listElm=findFieldByName(typeElement,"list");
      final VariableElement setElm=findFieldByName(typeElement,"set");
      AnnotationTree annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,idElm);
      Set<String> annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Long.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Enumerated.class.getSimpleName());
      annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,timeElm);
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Date.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(JSON.class.getSimpleName());
      annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,listElm);
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(List.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).isEmpty();
      annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,setElm);
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Set.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).isEmpty();
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Double.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Enumerated.class.getSimpleName());
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      aptUtils.messager.printMessage(Diagnostic.Kind.ERROR,ex.getMessage());
    }
  }
);
  Truth.ASSERT.about(JavaSourceSubjectFactory.javaSource()).that(loadClass(TestEntityForAnnotationTree.class)).processedWith(this).compilesWithoutError();
}
