@Test public void should_build_annotation_tree_for_map_javac() throws Exception {
  setExec(aptUtils -> {
    try {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityForAnnotationTree.class.getCanonicalName());
      final VariableElement mapElt=findFieldByName(typeElement,"map");
      AnnotationTree annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,mapElt);
      Set<String> annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(annotationTree).isNotNull();
      assertThat(isTypeOf(Map.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(EmptyCollectionIfNull.class.getSimpleName(),Frozen.class.getSimpleName());
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Integer.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(JSON.class.getSimpleName(),Frozen.class.getSimpleName());
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Map.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).isEmpty();
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Integer.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Frozen.class.getSimpleName());
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Tuple3.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).isEmpty();
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(String.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).isEmpty();
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Integer.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Frozen.class.getSimpleName(),EmptyCollectionIfNull.class.getSimpleName());
      annotationTree=annotationTree.next();
      annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Date.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Enumerated.class.getSimpleName());
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      aptUtils.messager.printMessage(Diagnostic.Kind.ERROR,ex.getMessage());
    }
  }
);
  Truth.ASSERT.about(JavaSourceSubjectFactory.javaSource()).that(loadClass(TestEntityForAnnotationTree.class)).processedWith(this).compilesWithoutError();
}
