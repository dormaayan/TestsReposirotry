@Ignore @Test public void should_build_treemap_for_computed_annotation_ecj() throws Exception {
  setExec(aptUtils -> {
    try {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityForAnnotationTree.class.getCanonicalName());
      final VariableElement writetime=findFieldByName(typeElement,"writetime");
      AnnotationTree annotationTree=AnnotationTree.buildFrom(aptUtils,globalParsingContext,writetime);
      final Set<String> annotationNames=getAnnotationNames(annotationTree.getAnnotations());
      assertThat(isTypeOf(Long.class,annotationTree.getCurrentType())).isTrue();
      assertThat(annotationNames).containsOnly(Computed.class.getSimpleName());
      final TypedMap typedMap=annotationTree.getAnnotations().get(Computed.class);
      assertThat(typedMap.<String>getTyped("function")).isEqualTo("writetime");
      assertThat(typedMap.<String>getTyped("alias")).isEqualTo("writetime_col");
      assertThat(typedMap.<Class<?>>getTyped("cqlClass")).isEqualTo(Long.class);
      assertThat(typedMap.<List<String>>getTyped("targetColumns")).containsExactly("id","value");
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      aptUtils.messager.printMessage(Diagnostic.Kind.ERROR,ex.getMessage());
    }
  }
);
  Truth.ASSERT.about(JavaSourceSubjectFactory.javaSource()).that(loadClass(TestEntityForAnnotationTree.class)).processedWith(this).compilesWithoutError();
}
