@Test public void should_parse_optional_protocol_version_from_inline_codec() throws Exception {
  setExec(aptUtils -> {
    final GlobalParsingContext globalContext=globalParsingContext;
    new CodecRegistryParser(aptUtils).parseCodecs(env,globalContext);
    final FieldParser fieldParser=new FieldParser(aptUtils);
    final String className=TestEntityForCodecs.class.getCanonicalName();
    final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(className);
    final EntityParsingContext entityContext=new EntityParsingContext(typeElement,ClassName.get(TestEntityForCodecs.class),strategy,globalContext);
    VariableElement elm=findFieldInType(typeElement,"optionalEncodingAsOrdinal");
    FieldMetaSignature parsingResult=fieldParser.parse(elm,entityContext);
    assertThat(parsingResult.targetType.toString()).isEqualTo("java.lang.Integer");
    assertThat(parsingResult.buildPropertyAsField().toString().trim().replaceAll("\n","")).isEqualTo(readCodeLineFromFile("expected_code/field_parser/should_parse_optional_protocol_version_from_inline_codec.txt"));
  }
);
  Truth.ASSERT.about(JavaSourcesSubjectFactory.javaSources()).that(Sets.newHashSet(loadClass(TestEntityForCodecs.class),loadClass(TestCodecRegistry.class),loadClass(TestCodecRegistry2.class))).processedWith(this).compilesWithoutError();
}
