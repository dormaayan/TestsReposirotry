@Test public void should_dsl_select_with_token_value() throws Exception {
  final long id1=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final long id2=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final long id3=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final long id4=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final long id5=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final UUID uuid1=new UUID(1L,1L);
  final UUID uuid2=new UUID(2L,2L);
  final UUID uuid3=new UUID(3L,3L);
  final UUID uuid4=new UUID(4L,4L);
  final UUID uuid5=new UUID(5L,5L);
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id1,"uuid",uuid1,"value","val1"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id2,"uuid",uuid2,"value","val2"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id3,"uuid",uuid3,"value","val3"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id4,"uuid",uuid4,"value","val4"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id5,"uuid",uuid5,"value","val5"));
  final List<Tuple2<Long,UUID>> tuple2s=session.execute("SELECT token(id, uuid) AS tokens,uuid FROM achilles_embedded.entity_composite_pk LIMIT 6").all().stream().map(row -> Tuple2.of(row.getLong("tokens"),row.getUUID("uuid"))).sorted(Comparator.comparing(Tuple2::_1)).limit(2).collect(toList());
  final Long token=tuple2s.get(1)._1();
  final List<EntityWithCompositePartitionKey> actuals=manager.dsl().select().uuid().fromBaseTable().where().tokenValueOf_id_uuid().Lte(token).getList();
  assertThat(actuals).hasSize(2);
  assertThat(actuals.stream().map(EntityWithCompositePartitionKey::getUuid).sorted().collect(toList())).containsOnlyElementsOf(tuple2s.stream().map(Tuple2::_2).collect(toSet()));
}
