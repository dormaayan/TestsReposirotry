@Test public void should_dsl_select_with_IN_clause() throws Exception {
  final long id1=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final long id2=RandomUtils.nextLong(0L,Long.MAX_VALUE);
  final UUID uuid1=new UUID(1L,1L);
  final UUID uuid2=new UUID(2L,2L);
  final UUID uuid3=new UUID(3L,3L);
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id1,"uuid",uuid1,"value","val1-1"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id1,"uuid",uuid2,"value","val1-2"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id2,"uuid",uuid1,"value","val2-1"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id2,"uuid",uuid2,"value","val2-2"));
  scriptExecutor.executeScriptTemplate("EntityWithCompositePartitionKey/insert_single_row.cql",ImmutableMap.of("id",id2,"uuid",uuid3,"value","val2-3"));
  final List<EntityWithCompositePartitionKey> actuals=manager.dsl().select().value().fromBaseTable().where().id().IN(id1,id2).uuid().IN(uuid1,uuid3).getList();
  assertThat(actuals).hasSize(3);
  assertThat(actuals.stream().map(EntityWithCompositePartitionKey::getValue).sorted().collect(toList())).containsExactly("val1-1","val2-1","val2-3");
}
