@Test public void testTokenization21() throws Exception {
  final Tokenizer tokenizer=new Tokenizer("log(x) - y * (sqrt(x^cos(y)))",null,null,new HashSet<String>(Arrays.asList("x","y")));
  assertTrue(tokenizer.hasNext());
  assertFunctionToken(tokenizer.nextToken(),"log",1);
  assertTrue(tokenizer.hasNext());
  assertOpenParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertVariableToken(tokenizer.nextToken(),"x");
  assertTrue(tokenizer.hasNext());
  assertCloseParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",2,Operator.PRECEDENCE_SUBTRACTION);
  assertTrue(tokenizer.hasNext());
  assertVariableToken(tokenizer.nextToken(),"y");
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"*",2,Operator.PRECEDENCE_MULTIPLICATION);
  assertTrue(tokenizer.hasNext());
  assertOpenParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertFunctionToken(tokenizer.nextToken(),"sqrt",1);
  assertTrue(tokenizer.hasNext());
  assertOpenParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertVariableToken(tokenizer.nextToken(),"x");
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"^",2,Operator.PRECEDENCE_POWER);
  assertTrue(tokenizer.hasNext());
  assertFunctionToken(tokenizer.nextToken(),"cos",1);
  assertTrue(tokenizer.hasNext());
  assertOpenParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertVariableToken(tokenizer.nextToken(),"y");
  assertTrue(tokenizer.hasNext());
  assertCloseParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertCloseParenthesesToken(tokenizer.nextToken());
  assertTrue(tokenizer.hasNext());
  assertCloseParenthesesToken(tokenizer.nextToken());
  assertFalse(tokenizer.hasNext());
}
