@Test public void testOperators4() throws Exception {
  Operator greaterEq=new Operator(">=",2,true,4){
    @Override public double apply(    double[] values){
      if (values[0] >= values[1]) {
        return 1d;
      }
 else {
        return 0d;
      }
    }
  }
;
  Operator greater=new Operator(">",2,true,4){
    @Override public double apply(    double[] values){
      if (values[0] > values[1]) {
        return 1d;
      }
 else {
        return 0d;
      }
    }
  }
;
  Operator newPlus=new Operator(">=>",2,true,4){
    @Override public double apply(    double[] values){
      return values[0] + values[1];
    }
  }
;
  Expression e=new ExpressionBuilder("1>2").operator(greater).build();
  assertTrue(0d == e.evaluate());
  e=new ExpressionBuilder("2>=2").operator(greaterEq).build();
  assertTrue(1d == e.evaluate());
  e=new ExpressionBuilder("1>=>2").operator(newPlus).build();
  assertTrue(3d == e.evaluate());
  e=new ExpressionBuilder("1>=>2>2").operator(greater).operator(newPlus).build();
  assertTrue(1d == e.evaluate());
  e=new ExpressionBuilder("1>=>2>2>=1").operator(greater).operator(newPlus).operator(greaterEq).build();
  assertTrue(1d == e.evaluate());
  e=new ExpressionBuilder("1 >=> 2 > 2 >= 1").operator(greater).operator(newPlus).operator(greaterEq).build();
  assertTrue(1d == e.evaluate());
  e=new ExpressionBuilder("1 >=> 2 >= 2 > 1").operator(greater).operator(newPlus).operator(greaterEq).build();
  assertTrue(0d == e.evaluate());
  e=new ExpressionBuilder("1 >=> 2 >= 2 > 0").operator(greater).operator(newPlus).operator(greaterEq).build();
  assertTrue(1d == e.evaluate());
  e=new ExpressionBuilder("1 >=> 2 >= 2 >= 1").operator(greater).operator(newPlus).operator(greaterEq).build();
  assertTrue(1d == e.evaluate());
}
