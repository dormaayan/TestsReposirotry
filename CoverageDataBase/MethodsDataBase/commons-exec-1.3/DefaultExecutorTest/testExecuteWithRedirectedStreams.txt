/** 
 * Start a process with redirected streams - stdin of the newly created process is connected to a FileInputStream whereas the "redirect" script reads all lines from stdin and prints them on stdout. Furthermore the script prints a status message on stderr.
 * @throws Exception the test failed
 */
@Test public void testExecuteWithRedirectedStreams() throws Exception {
  if (OS.isFamilyUnix()) {
    final FileInputStream fis=new FileInputStream("./NOTICE.txt");
    final CommandLine cl=new CommandLine(redirectScript);
    final PumpStreamHandler pumpStreamHandler=new PumpStreamHandler(baos,baos,fis);
    final DefaultExecutor executor=new DefaultExecutor();
    executor.setWorkingDirectory(new File("."));
    executor.setStreamHandler(pumpStreamHandler);
    final int exitValue=executor.execute(cl);
    fis.close();
    final String result=baos.toString().trim();
    assertTrue(result,result.indexOf("Finished reading from stdin") > 0);
    assertFalse("exitValue=" + exitValue,exec.isFailure(exitValue));
  }
 else   if (OS.isFamilyWindows()) {
    System.err.println("The code samples to do that in windows look like a joke ... :-( .., no way I'm doing that");
    System.err.println("The test 'testExecuteWithRedirectedStreams' does not support the following OS : " + System.getProperty("os.name"));
    return;
  }
 else {
    System.err.println("The test 'testExecuteWithRedirectedStreams' does not support the following OS : " + System.getProperty("os.name"));
    return;
  }
}
