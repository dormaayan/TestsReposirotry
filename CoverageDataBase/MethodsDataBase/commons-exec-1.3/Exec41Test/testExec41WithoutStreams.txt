/** 
 * Test EXEC-41 with a disabled PumpStreamHandler to check if we could return immediately after killing the process (no streams implies no blocking stream pumper threads). But you have to be 100% sure that the subprocess is not writing to 'stdout' and 'stderr'. For this test we are using the batch file - under Windows the 'ping' process can't be killed (not supported by Win32) and will happily run the given time (e.g. 10 seconds) even hwen the batch file is already killed.
 * @throws Exception the test failed
 */
@Test public void testExec41WithoutStreams() throws Exception {
  final CommandLine cmdLine=new CommandLine(pingScript);
  cmdLine.addArgument("10");
  final DefaultExecutor executor=new DefaultExecutor();
  final ExecuteWatchdog watchdog=new ExecuteWatchdog(2 * 1000);
  final PumpStreamHandler pumpStreamHandler=new PumpStreamHandler(null,null,null);
  executor.setWatchdog(watchdog);
  executor.setStreamHandler(pumpStreamHandler);
  final long startTime=System.currentTimeMillis();
  try {
    executor.execute(cmdLine);
  }
 catch (  final ExecuteException e) {
    System.out.println(e);
  }
  final long duration=System.currentTimeMillis() - startTime;
  System.out.println("Process completed in " + duration + " millis; below is its output");
  if (watchdog.killedProcess()) {
    System.out.println("Process timed out and was killed.");
  }
  assertTrue("The process was killed by the watchdog",watchdog.killedProcess());
  assertTrue("Skipping the Thread.join() did not work, duration=" + duration,duration < 9000);
}
