/** 
 * When a process runs longer than allowed by a configured watchdog's timeout, the watchdog tries to destroy it and then DefaultExecutor tries to clean up by joining with all installed pump stream threads. Problem is, that sometimes the native process doesn't die and thus streams aren't closed and the stream threads do not complete.
 * @throws Exception the test failed
 */
@Test public void testExec41WithStreams() throws Exception {
  CommandLine cmdLine;
  if (OS.isFamilyWindows()) {
    cmdLine=CommandLine.parse("ping.exe -n 10 -w 1000 127.0.0.1");
  }
 else   if ("HP-UX".equals(System.getProperty("os.name"))) {
    cmdLine=CommandLine.parse("ping 127.0.0.1 -n 10");
  }
 else   if (OS.isFamilyUnix()) {
    cmdLine=CommandLine.parse("ping -c 10 127.0.0.1");
  }
 else {
    System.err.println("The test 'testExec41WithStreams' does not support the following OS : " + System.getProperty("os.name"));
    return;
  }
  final DefaultExecutor executor=new DefaultExecutor();
  final ExecuteWatchdog watchdog=new ExecuteWatchdog(2 * 1000);
  final PumpStreamHandler pumpStreamHandler=new PumpStreamHandler(System.out,System.err);
  executor.setWatchdog(watchdog);
  executor.setStreamHandler(pumpStreamHandler);
  final long startTime=System.currentTimeMillis();
  try {
    executor.execute(cmdLine);
  }
 catch (  final ExecuteException e) {
  }
  final long duration=System.currentTimeMillis() - startTime;
  System.out.println("Process completed in " + duration + " millis; below is its output");
  if (watchdog.killedProcess()) {
    System.out.println("Process timed out and was killed by watchdog.");
  }
  assertTrue("The process was killed by the watchdog",watchdog.killedProcess());
  assertTrue("Skipping the Thread.join() did not work",duration < 9000);
}
