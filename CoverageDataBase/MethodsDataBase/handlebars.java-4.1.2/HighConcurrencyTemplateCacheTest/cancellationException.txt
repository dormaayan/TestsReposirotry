@Test @SuppressWarnings("unchecked") public void cancellationException() throws IOException, InterruptedException, ExecutionException {
  TemplateSource source=createMock(TemplateSource.class);
  Template template=createMock(Template.class);
  Future<Pair<TemplateSource,Template>> future=createMock(Future.class);
  expect(future.get()).andThrow(new CancellationException());
  expect(future.get()).andReturn(ImmutablePair.<TemplateSource,Template>of(source,template));
  Capture<TemplateSource> keyGet=new Capture<>();
  Capture<TemplateSource> keyRemove=new Capture<>();
  ConcurrentMap<TemplateSource,Future<Pair<TemplateSource,Template>>> cache=createMock(ConcurrentMap.class);
  expect(cache.get(capture(keyGet))).andReturn(future).times(2);
  expect(cache.remove(capture(keyRemove),eq(future))).andReturn(true);
  Parser parser=createMock(Parser.class);
  Object[] mocks={cache,source,future,template};
  replay(mocks);
  Template result=new HighConcurrencyTemplateCache(cache).get(source,parser);
  assertEquals(template,result);
  verify(mocks);
}
