@Test(timeout=2000) public void testWatchForMultipleEventTypes() throws IOException, InterruptedException {
  JimfsPath path=createDirectory();
  watcher.register(path,ImmutableList.of(ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY));
  Files.createDirectory(path.resolve("foo"));
  Files.createFile(path.resolve("bar"));
  assertWatcherHasEvents(new Event<>(ENTRY_CREATE,1,fs.getPath("bar")),new Event<>(ENTRY_CREATE,1,fs.getPath("foo")));
  Files.createFile(path.resolve("baz"));
  Files.delete(path.resolve("bar"));
  Files.createFile(path.resolve("foo/bar"));
  assertWatcherHasEvents(new Event<>(ENTRY_CREATE,1,fs.getPath("baz")),new Event<>(ENTRY_DELETE,1,fs.getPath("bar")),new Event<>(ENTRY_MODIFY,1,fs.getPath("foo")));
  Files.delete(path.resolve("foo/bar"));
  ensureTimeToPoll();
  Files.delete(path.resolve("foo"));
  assertWatcherHasEvents(new Event<>(ENTRY_MODIFY,1,fs.getPath("foo")),new Event<>(ENTRY_DELETE,1,fs.getPath("foo")));
  Files.createDirectories(path.resolve("foo/bar"));
  assertWatcherHasEvents(ImmutableList.<WatchEvent<?>>of(new Event<>(ENTRY_CREATE,1,fs.getPath("foo"))),ImmutableList.<WatchEvent<?>>of(new Event<>(ENTRY_CREATE,1,fs.getPath("foo")),new Event<>(ENTRY_MODIFY,1,fs.getPath("foo"))));
  Files.delete(path.resolve("foo/bar"));
  Files.delete(path.resolve("foo"));
  assertWatcherHasEvents(ImmutableList.<WatchEvent<?>>of(new Event<>(ENTRY_DELETE,1,fs.getPath("foo"))),ImmutableList.<WatchEvent<?>>of(new Event<>(ENTRY_MODIFY,1,fs.getPath("foo")),new Event<>(ENTRY_DELETE,1,fs.getPath("foo"))));
}
