@Test public void testAsynchronousClose() throws Exception {
  RegularFile file=regularFile(10);
  final FileChannel channel=channel(file,READ,WRITE);
  file.writeLock().lock();
  ExecutorService executor=Executors.newCachedThreadPool();
  CountDownLatch latch=new CountDownLatch(BLOCKING_OP_COUNT);
  List<Future<?>> futures=queueAllBlockingOperations(channel,executor,latch);
  latch.await();
  Uninterruptibles.sleepUninterruptibly(20,MILLISECONDS);
  channel.close();
  for (  Future<?> future : futures) {
    try {
      future.get();
      fail();
    }
 catch (    ExecutionException expected) {
      assertThat(expected.getCause()).named("blocking thread exception").isInstanceOf(AsynchronousCloseException.class);
    }
  }
}
