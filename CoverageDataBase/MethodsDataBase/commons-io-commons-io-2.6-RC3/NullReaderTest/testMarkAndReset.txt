@Test public void testMarkAndReset() throws Exception {
  int position=0;
  final int readlimit=10;
  final Reader reader=new TestNullReader(100,true,false);
  assertTrue("Mark Should be Supported",reader.markSupported());
  try {
    reader.reset();
    fail("Read limit exceeded, expected IOException ");
  }
 catch (  final IOException e) {
    assertEquals("No Mark IOException message","No position has been marked",e.getMessage());
  }
  for (; position < 3; position++) {
    assertEquals("Read Before Mark [" + position + "]",position,reader.read());
  }
  reader.mark(readlimit);
  for (int i=0; i < 3; i++) {
    assertEquals("Read After Mark [" + i + "]",position + i,reader.read());
  }
  reader.reset();
  for (int i=0; i < readlimit + 1; i++) {
    assertEquals("Read After Reset [" + i + "]",position + i,reader.read());
  }
  try {
    reader.reset();
    fail("Read limit exceeded, expected IOException ");
  }
 catch (  final IOException e) {
    assertEquals("Read limit IOException message","Marked position [" + position + "] is no longer valid - passed the read limit ["+ readlimit+ "]",e.getMessage());
  }
  reader.close();
}
