@Test public void testSizeOfDirectoryAsBigInteger() throws Exception {
  final File file=new File(getTestDirectory(),getName());
  try {
    FileUtils.sizeOfDirectoryAsBigInteger(file);
    fail("Exception expected.");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  file.createNewFile();
  file.deleteOnExit();
  try {
    FileUtils.sizeOfDirectoryAsBigInteger(file);
    fail("Exception expected.");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  file.delete();
  file.mkdir();
  this.createCircularSymLink(file);
  assertEquals("Unexpected directory size",TEST_DIRECTORY_SIZE_BI,FileUtils.sizeOfDirectoryAsBigInteger(file));
  file.delete();
  file.mkdir();
  final File nonEmptyFile=new File(file,"nonEmptyFile" + System.nanoTime());
  if (!nonEmptyFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + nonEmptyFile + " as the parent directory does not exist");
  }
  final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(nonEmptyFile));
  try {
    TestUtils.generateTestData(output,TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
  }
  finally {
    IOUtils.closeQuietly(output);
  }
  nonEmptyFile.deleteOnExit();
  assertEquals("Unexpected directory size",TEST_DIRECTORY_SIZE_GT_ZERO_BI,FileUtils.sizeOfDirectoryAsBigInteger(file));
  nonEmptyFile.delete();
  file.delete();
}
