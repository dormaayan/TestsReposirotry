@Test public void testContentEqualsIgnoreEOL() throws Exception {
  final File file1=new File(getTestDirectory(),getName());
  final File file2=new File(getTestDirectory(),getName() + "2");
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file1,file1,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file1,file2,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file2,file2,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file2,file1,null));
  try {
    FileUtils.contentEqualsIgnoreEOL(getTestDirectory(),getTestDirectory(),null);
    fail("Comparing directories should fail with an IOException");
  }
 catch (  final IOException ioe) {
  }
  final File tfile1=new File(getTestDirectory(),getName() + ".txt1");
  tfile1.deleteOnExit();
  FileUtils.write(tfile1,"123\r");
  final File tfile2=new File(getTestDirectory(),getName() + ".txt2");
  tfile1.deleteOnExit();
  FileUtils.write(tfile2,"123\n");
  final File tfile3=new File(getTestDirectory(),getName() + ".collection");
  tfile3.deleteOnExit();
  FileUtils.write(tfile3,"123\r\n2");
  assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1,tfile1,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2,tfile2,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3,tfile3,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1,tfile2,null));
  assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1,tfile3,null));
  assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2,tfile3,null));
  final URL urlCR=getClass().getResource("FileUtilsTestDataCR.dat");
  assertNotNull(urlCR);
  final File cr=new File(urlCR.getPath());
  assertTrue(cr.exists());
  final URL urlCRLF=getClass().getResource("FileUtilsTestDataCRLF.dat");
  assertNotNull(urlCRLF);
  final File crlf=new File(urlCRLF.getPath());
  assertTrue(crlf.exists());
  final URL urlLF=getClass().getResource("FileUtilsTestDataLF.dat");
  assertNotNull(urlLF);
  final File lf=new File(urlLF.getPath());
  assertTrue(lf.exists());
  assertTrue(FileUtils.contentEqualsIgnoreEOL(cr,cr,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf,crlf,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(lf,lf,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(cr,crlf,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(cr,lf,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf,lf,null));
  assertTrue(FileUtils.contentEquals(cr,cr));
  assertTrue(FileUtils.contentEquals(crlf,crlf));
  assertTrue(FileUtils.contentEquals(lf,lf));
  assertFalse(FileUtils.contentEquals(cr,crlf));
  assertFalse(FileUtils.contentEquals(cr,lf));
  assertFalse(FileUtils.contentEquals(crlf,lf));
  file1.createNewFile();
  file2.createNewFile();
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file1,file1,null));
  assertTrue(FileUtils.contentEqualsIgnoreEOL(file1,file2,null));
}
