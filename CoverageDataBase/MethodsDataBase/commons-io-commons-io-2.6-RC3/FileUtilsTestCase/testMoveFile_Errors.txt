@Test public void testMoveFile_Errors() throws Exception {
  try {
    FileUtils.moveFile(null,new File("foo"));
    fail("Expected NullPointerException when source is null");
  }
 catch (  final NullPointerException e) {
  }
  try {
    FileUtils.moveFile(new File("foo"),null);
    fail("Expected NullPointerException when destination is null");
  }
 catch (  final NullPointerException e) {
  }
  try {
    FileUtils.moveFile(new File("nonexistant"),new File("foo"));
    fail("Expected FileNotFoundException for source");
  }
 catch (  final FileNotFoundException e) {
  }
  try {
    FileUtils.moveFile(getTestDirectory(),new File("foo"));
    fail("Expected IOException when source is a directory");
  }
 catch (  final IOException e) {
  }
  final File testSourceFile=new File(getTestDirectory(),"testMoveFileSource");
  final File testDestFile=new File(getTestDirectory(),"testMoveFileSource");
  if (!testSourceFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + testSourceFile + " as the parent directory does not exist");
  }
  final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(testSourceFile));
  try {
    TestUtils.generateTestData(output1,0);
  }
  finally {
    IOUtils.closeQuietly(output1);
  }
  if (!testDestFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + testDestFile + " as the parent directory does not exist");
  }
  final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(testDestFile));
  try {
    TestUtils.generateTestData(output,0);
  }
  finally {
    IOUtils.closeQuietly(output);
  }
  try {
    FileUtils.moveFile(testSourceFile,testDestFile);
    fail("Expected FileExistsException when dest already exists");
  }
 catch (  final FileExistsException e) {
  }
}
