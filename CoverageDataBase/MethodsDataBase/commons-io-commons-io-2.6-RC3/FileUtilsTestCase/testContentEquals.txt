@Test public void testContentEquals() throws Exception {
  final File file=new File(getTestDirectory(),getName());
  final File file2=new File(getTestDirectory(),getName() + "2");
  assertTrue(FileUtils.contentEquals(file,file));
  assertTrue(FileUtils.contentEquals(file,file2));
  assertTrue(FileUtils.contentEquals(file2,file2));
  assertTrue(FileUtils.contentEquals(file2,file));
  try {
    FileUtils.contentEquals(getTestDirectory(),getTestDirectory());
    fail("Comparing directories should fail with an IOException");
  }
 catch (  final IOException ioe) {
  }
  final File objFile1=new File(getTestDirectory(),getName() + ".object");
  objFile1.deleteOnExit();
  FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"),objFile1);
  final File objFile1b=new File(getTestDirectory(),getName() + ".object2");
  objFile1.deleteOnExit();
  FileUtils.copyURLToFile(getClass().getResource("/java/lang/Object.class"),objFile1b);
  final File objFile2=new File(getTestDirectory(),getName() + ".collection");
  objFile2.deleteOnExit();
  FileUtils.copyURLToFile(getClass().getResource("/java/util/Collection.class"),objFile2);
  assertFalse(FileUtils.contentEquals(objFile1,objFile2));
  assertFalse(FileUtils.contentEquals(objFile1b,objFile2));
  assertTrue(FileUtils.contentEquals(objFile1,objFile1b));
  assertTrue(FileUtils.contentEquals(objFile1,objFile1));
  assertTrue(FileUtils.contentEquals(objFile1b,objFile1b));
  assertTrue(FileUtils.contentEquals(objFile2,objFile2));
  file.createNewFile();
  file2.createNewFile();
  assertTrue(FileUtils.contentEquals(file,file));
  assertTrue(FileUtils.contentEquals(file,file2));
}
