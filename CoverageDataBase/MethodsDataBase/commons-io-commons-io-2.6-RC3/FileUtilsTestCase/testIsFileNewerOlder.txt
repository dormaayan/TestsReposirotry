@Test public void testIsFileNewerOlder() throws Exception {
  final File reference=new File(getTestDirectory(),"FileUtils-reference.txt");
  final File oldFile=new File(getTestDirectory(),"FileUtils-old.txt");
  final File newFile=new File(getTestDirectory(),"FileUtils-new.txt");
  final File invalidFile=new File(getTestDirectory(),"FileUtils-invalid-file.txt");
  if (!oldFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + oldFile + " as the parent directory does not exist");
  }
  final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(oldFile));
  try {
    TestUtils.generateTestData(output1,0);
  }
  finally {
    IOUtils.closeQuietly(output1);
  }
  do {
    try {
      TestUtils.sleep(1000);
    }
 catch (    final InterruptedException ie) {
    }
    if (!reference.getParentFile().exists()) {
      throw new IOException("Cannot create file " + reference + " as the parent directory does not exist");
    }
    final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(reference));
    try {
      TestUtils.generateTestData(output,0);
    }
  finally {
      IOUtils.closeQuietly(output);
    }
  }
 while (oldFile.lastModified() == reference.lastModified());
  final Date date=new Date();
  final long now=date.getTime();
  do {
    try {
      TestUtils.sleep(1000);
    }
 catch (    final InterruptedException ie) {
    }
    if (!newFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + newFile + " as the parent directory does not exist");
    }
    final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(newFile));
    try {
      TestUtils.generateTestData(output,0);
    }
  finally {
      IOUtils.closeQuietly(output);
    }
  }
 while (reference.lastModified() == newFile.lastModified());
  assertFalse("Old File - Newer - File",FileUtils.isFileNewer(oldFile,reference));
  assertFalse("Old File - Newer - Date",FileUtils.isFileNewer(oldFile,date));
  assertFalse("Old File - Newer - Mili",FileUtils.isFileNewer(oldFile,now));
  assertTrue("New File - Newer - File",FileUtils.isFileNewer(newFile,reference));
  assertTrue("New File - Newer - Date",FileUtils.isFileNewer(newFile,date));
  assertTrue("New File - Newer - Mili",FileUtils.isFileNewer(newFile,now));
  assertFalse("Invalid - Newer - File",FileUtils.isFileNewer(invalidFile,reference));
  final String invalidFileName=invalidFile.getName();
  try {
    FileUtils.isFileNewer(newFile,invalidFile);
    fail("Should have cause IllegalArgumentException");
  }
 catch (  final IllegalArgumentException iae) {
    final String message=iae.getMessage();
    assertTrue("Message should contain: " + invalidFileName + " but was: "+ message,message.contains(invalidFileName));
  }
  assertTrue("Old File - Older - File",FileUtils.isFileOlder(oldFile,reference));
  assertTrue("Old File - Older - Date",FileUtils.isFileOlder(oldFile,date));
  assertTrue("Old File - Older - Mili",FileUtils.isFileOlder(oldFile,now));
  assertFalse("New File - Older - File",FileUtils.isFileOlder(newFile,reference));
  assertFalse("New File - Older - Date",FileUtils.isFileOlder(newFile,date));
  assertFalse("New File - Older - Mili",FileUtils.isFileOlder(newFile,now));
  assertFalse("Invalid - Older - File",FileUtils.isFileOlder(invalidFile,reference));
  try {
    FileUtils.isFileOlder(newFile,invalidFile);
    fail("Should have cause IllegalArgumentException");
  }
 catch (  final IllegalArgumentException iae) {
    final String message=iae.getMessage();
    assertTrue("Message should contain: " + invalidFileName + " but was: "+ message,message.contains(invalidFileName));
  }
  try {
    FileUtils.isFileNewer(null,now);
    fail("Newer Null, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException expected) {
  }
  try {
    FileUtils.isFileNewer(oldFile,(File)null);
    fail("Newer Null reference, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileNewer(oldFile,invalidFile);
    fail("Newer invalid reference, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileNewer(oldFile,(Date)null);
    fail("Newer Null date, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileOlder(null,now);
    fail("Older Null, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileOlder(oldFile,(File)null);
    fail("Older Null reference, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileOlder(oldFile,invalidFile);
    fail("Older invalid reference, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    FileUtils.isFileOlder(oldFile,(Date)null);
    fail("Older Null date, expected IllegalArgumentExcepion");
  }
 catch (  final IllegalArgumentException ignore) {
  }
}
