@Test public void testPrefixCaseInsensitive() throws Exception {
  IOFileFilter filter=new PrefixFileFilter(new String[]{"foo","bar"},IOCase.INSENSITIVE);
  assertFiltering(filter,new File("foo.test1"),true);
  assertFiltering(filter,new File("bar.test1"),true);
  assertFiltering(filter,new File("FOO.test1"),true);
  assertFiltering(filter,new File("BAR.test1"),true);
  filter=new PrefixFileFilter("bar",IOCase.INSENSITIVE);
  assertFiltering(filter,new File("foo.test2"),false);
  assertFiltering(filter,new File("bar.test2"),true);
  assertFiltering(filter,new File("FOO.test2"),false);
  assertFiltering(filter,new File("BAR.test2"),true);
  final List<String> prefixes=Arrays.asList("foo","bar");
  filter=new PrefixFileFilter(prefixes,IOCase.INSENSITIVE);
  assertFiltering(filter,new File("foo.test3"),true);
  assertFiltering(filter,new File("bar.test3"),true);
  assertFiltering(filter,new File("FOO.test3"),true);
  assertFiltering(filter,new File("BAR.test3"),true);
  try {
    new PrefixFileFilter((String)null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new PrefixFileFilter((String[])null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new PrefixFileFilter((List<String>)null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  filter=FileFilterUtils.prefixFileFilter("bar",IOCase.INSENSITIVE);
  assertFiltering(filter,new File("foo.test2"),false);
  assertFiltering(filter,new File("bar.test2"),true);
  assertFiltering(filter,new File("FOO.test2"),false);
  assertFiltering(filter,new File("BAR.test2"),true);
  try {
    FileFilterUtils.prefixFileFilter(null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
}
