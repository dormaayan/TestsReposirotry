@Test public void testMakeFileOnly() throws Exception {
  assertSame(FileFileFilter.FILE,FileFilterUtils.makeFileOnly(null));
  final IOFileFilter filter=FileFilterUtils.makeFileOnly(FileFilterUtils.nameFileFilter("B"));
  final File fileA=new File(getTestDirectory(),"A");
  final File fileB=new File(getTestDirectory(),"B");
  fileA.mkdirs();
  fileB.mkdirs();
  assertFiltering(filter,fileA,false);
  assertFiltering(filter,fileB,false);
  FileUtils.deleteDirectory(fileA);
  FileUtils.deleteDirectory(fileB);
  if (!fileA.getParentFile().exists()) {
    throw new IOException("Cannot create file " + fileA + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(fileA))){
    TestUtils.generateTestData(output1,32);
  }
   if (!fileB.getParentFile().exists()) {
    throw new IOException("Cannot create file " + fileB + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(fileB))){
    TestUtils.generateTestData(output,32);
  }
   assertFiltering(filter,fileA,false);
  assertFiltering(filter,fileB,true);
  fileA.delete();
  fileB.delete();
}
