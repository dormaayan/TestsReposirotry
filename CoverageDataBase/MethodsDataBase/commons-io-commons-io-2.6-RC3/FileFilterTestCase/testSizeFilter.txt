@Test public void testSizeFilter() throws Exception {
  final File smallFile=new File(getTestDirectory(),"small.txt");
  if (!smallFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + smallFile + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(smallFile))){
    TestUtils.generateTestData(output1,32);
  }
   final File largeFile=new File(getTestDirectory(),"large.txt");
  if (!largeFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + largeFile + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(largeFile))){
    TestUtils.generateTestData(output,128);
  }
   final IOFileFilter filter1=FileFilterUtils.sizeFileFilter(64);
  final IOFileFilter filter2=FileFilterUtils.sizeFileFilter(64,true);
  final IOFileFilter filter3=FileFilterUtils.sizeFileFilter(64,false);
  assertFiltering(filter1,smallFile,false);
  assertFiltering(filter2,smallFile,false);
  assertFiltering(filter3,smallFile,true);
  assertFiltering(filter1,largeFile,true);
  assertFiltering(filter2,largeFile,true);
  assertFiltering(filter3,largeFile,false);
  final IOFileFilter filter4=FileFilterUtils.sizeRangeFileFilter(33,127);
  final IOFileFilter filter5=FileFilterUtils.sizeRangeFileFilter(32,127);
  final IOFileFilter filter6=FileFilterUtils.sizeRangeFileFilter(33,128);
  final IOFileFilter filter7=FileFilterUtils.sizeRangeFileFilter(31,129);
  final IOFileFilter filter8=FileFilterUtils.sizeRangeFileFilter(128,128);
  assertFiltering(filter4,smallFile,false);
  assertFiltering(filter4,largeFile,false);
  assertFiltering(filter5,smallFile,true);
  assertFiltering(filter5,largeFile,false);
  assertFiltering(filter6,smallFile,false);
  assertFiltering(filter6,largeFile,true);
  assertFiltering(filter7,smallFile,true);
  assertFiltering(filter7,largeFile,true);
  assertFiltering(filter8,largeFile,true);
  try {
    FileFilterUtils.sizeFileFilter(-1);
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
}
