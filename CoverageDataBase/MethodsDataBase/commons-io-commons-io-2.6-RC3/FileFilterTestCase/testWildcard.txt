@Test public void testWildcard() throws Exception {
  IOFileFilter filter=new WildcardFileFilter("*.txt");
  assertFiltering(filter,new File("log.txt"),true);
  assertFiltering(filter,new File("log.TXT"),false);
  filter=new WildcardFileFilter("*.txt",IOCase.SENSITIVE);
  assertFiltering(filter,new File("log.txt"),true);
  assertFiltering(filter,new File("log.TXT"),false);
  filter=new WildcardFileFilter("*.txt",IOCase.INSENSITIVE);
  assertFiltering(filter,new File("log.txt"),true);
  assertFiltering(filter,new File("log.TXT"),true);
  filter=new WildcardFileFilter("*.txt",IOCase.SYSTEM);
  assertFiltering(filter,new File("log.txt"),true);
  assertFiltering(filter,new File("log.TXT"),WINDOWS);
  filter=new WildcardFileFilter("*.txt",null);
  assertFiltering(filter,new File("log.txt"),true);
  assertFiltering(filter,new File("log.TXT"),false);
  filter=new WildcardFileFilter(new String[]{"*.java","*.class"});
  assertFiltering(filter,new File("Test.java"),true);
  assertFiltering(filter,new File("Test.class"),true);
  assertFiltering(filter,new File("Test.jsp"),false);
  filter=new WildcardFileFilter(new String[]{"*.java","*.class"},IOCase.SENSITIVE);
  assertFiltering(filter,new File("Test.java"),true);
  assertFiltering(filter,new File("Test.JAVA"),false);
  filter=new WildcardFileFilter(new String[]{"*.java","*.class"},IOCase.INSENSITIVE);
  assertFiltering(filter,new File("Test.java"),true);
  assertFiltering(filter,new File("Test.JAVA"),true);
  filter=new WildcardFileFilter(new String[]{"*.java","*.class"},IOCase.SYSTEM);
  assertFiltering(filter,new File("Test.java"),true);
  assertFiltering(filter,new File("Test.JAVA"),WINDOWS);
  filter=new WildcardFileFilter(new String[]{"*.java","*.class"},null);
  assertFiltering(filter,new File("Test.java"),true);
  assertFiltering(filter,new File("Test.JAVA"),false);
  final List<String> patternList=Arrays.asList("*.txt","*.xml","*.gif");
  final IOFileFilter listFilter=new WildcardFileFilter(patternList);
  assertFiltering(listFilter,new File("Test.txt"),true);
  assertFiltering(listFilter,new File("Test.xml"),true);
  assertFiltering(listFilter,new File("Test.gif"),true);
  assertFiltering(listFilter,new File("Test.bmp"),false);
  final File txtFile=new File("test.txt");
  final File bmpFile=new File("test.bmp");
  final File dir=new File("src/java");
  assertTrue(listFilter.accept(txtFile));
  assertTrue(!listFilter.accept(bmpFile));
  assertTrue(!listFilter.accept(dir));
  assertTrue(listFilter.accept(txtFile.getParentFile(),txtFile.getName()));
  assertTrue(!listFilter.accept(bmpFile.getParentFile(),bmpFile.getName()));
  assertTrue(!listFilter.accept(dir.getParentFile(),dir.getName()));
  try {
    new WildcardFileFilter((String)null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new WildcardFileFilter((String[])null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new WildcardFileFilter((List<String>)null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
}
