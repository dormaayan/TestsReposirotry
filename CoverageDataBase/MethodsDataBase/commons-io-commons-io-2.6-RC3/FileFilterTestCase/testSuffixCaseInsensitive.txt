@Test public void testSuffixCaseInsensitive() throws Exception {
  IOFileFilter filter=new SuffixFileFilter(new String[]{"tes","est"},IOCase.INSENSITIVE);
  assertFiltering(filter,new File("foo.tes"),true);
  assertFiltering(filter,new File("foo.est"),true);
  assertFiltering(filter,new File("foo.EST"),true);
  assertFiltering(filter,new File("foo.TES"),true);
  assertFiltering(filter,new File("foo.exe"),false);
  filter=new SuffixFileFilter("est",IOCase.INSENSITIVE);
  assertFiltering(filter,new File("test"),true);
  assertFiltering(filter,new File("TEST"),true);
  final List<String> suffixes=Arrays.asList("tes","est");
  filter=new SuffixFileFilter(suffixes,IOCase.INSENSITIVE);
  assertFiltering(filter,new File("bar.tes"),true);
  assertFiltering(filter,new File("bar.est"),true);
  assertFiltering(filter,new File("bar.EST"),true);
  assertFiltering(filter,new File("bar.TES"),true);
  assertFiltering(filter,new File("bar.exe"),false);
  try {
    new SuffixFileFilter((String)null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new SuffixFileFilter((String[])null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new SuffixFileFilter((List<String>)null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  filter=FileFilterUtils.suffixFileFilter("est",IOCase.INSENSITIVE);
  assertFiltering(filter,new File("test"),true);
  assertFiltering(filter,new File("TEST"),true);
  try {
    FileFilterUtils.suffixFileFilter(null,IOCase.INSENSITIVE);
    fail();
  }
 catch (  final IllegalArgumentException ex) {
  }
}
