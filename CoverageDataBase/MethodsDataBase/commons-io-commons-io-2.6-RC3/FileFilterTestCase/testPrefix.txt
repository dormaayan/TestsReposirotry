@Test public void testPrefix() throws Exception {
  IOFileFilter filter=new PrefixFileFilter(new String[]{"foo","bar"});
  final File testFile=new File("test");
  final File fredFile=new File("fred");
  assertFiltering(filter,new File("foo.test"),true);
  assertFiltering(filter,new File("FOO.test"),false);
  assertFiltering(filter,new File("foo"),true);
  assertFiltering(filter,new File("bar"),true);
  assertFiltering(filter,new File("food/"),true);
  filter=FileFilterUtils.prefixFileFilter("bar");
  assertFiltering(filter,new File("barred\\"),true);
  assertFiltering(filter,new File("test"),false);
  assertFiltering(filter,new File("fo_o.test"),false);
  assertFiltering(filter,new File("abar.exe"),false);
  filter=new PrefixFileFilter("tes");
  assertFiltering(filter,new File("test"),true);
  assertFiltering(filter,new File("fred"),false);
  assertTrue(filter.accept(testFile.getParentFile(),testFile.getName()));
  assertTrue(!filter.accept(fredFile.getParentFile(),fredFile.getName()));
  final List<String> prefixes=Arrays.asList("foo","fre");
  final IOFileFilter listFilter=new PrefixFileFilter(prefixes);
  assertTrue(!listFilter.accept(testFile.getParentFile(),testFile.getName()));
  assertTrue(listFilter.accept(fredFile.getParentFile(),fredFile.getName()));
  try {
    new PrefixFileFilter((String)null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new PrefixFileFilter((String[])null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
  try {
    new PrefixFileFilter((List<String>)null);
    fail();
  }
 catch (  final IllegalArgumentException ignore) {
  }
}
