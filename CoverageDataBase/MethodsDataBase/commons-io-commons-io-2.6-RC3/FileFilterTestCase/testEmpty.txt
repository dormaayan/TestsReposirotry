@Test public void testEmpty() throws Exception {
  final File emptyDir=new File(getTestDirectory(),"empty-dir");
  emptyDir.mkdirs();
  assertFiltering(EmptyFileFilter.EMPTY,emptyDir,true);
  assertFiltering(EmptyFileFilter.NOT_EMPTY,emptyDir,false);
  final File emptyFile=new File(emptyDir,"empty-file.txt");
  if (!emptyFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + emptyFile + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(emptyFile))){
    TestUtils.generateTestData(output1,0);
  }
   assertFiltering(EmptyFileFilter.EMPTY,emptyFile,true);
  assertFiltering(EmptyFileFilter.NOT_EMPTY,emptyFile,false);
  assertFiltering(EmptyFileFilter.EMPTY,emptyDir,false);
  assertFiltering(EmptyFileFilter.NOT_EMPTY,emptyDir,true);
  final File notEmptyFile=new File(emptyDir,"not-empty-file.txt");
  if (!notEmptyFile.getParentFile().exists()) {
    throw new IOException("Cannot create file " + notEmptyFile + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(notEmptyFile))){
    TestUtils.generateTestData(output,32);
  }
   assertFiltering(EmptyFileFilter.EMPTY,notEmptyFile,false);
  assertFiltering(EmptyFileFilter.NOT_EMPTY,notEmptyFile,true);
  FileUtils.forceDelete(emptyDir);
}
