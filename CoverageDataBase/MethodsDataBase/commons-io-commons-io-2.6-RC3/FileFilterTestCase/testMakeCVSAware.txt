@Test public void testMakeCVSAware() throws Exception {
  final IOFileFilter filter1=FileFilterUtils.makeCVSAware(null);
  final IOFileFilter filter2=FileFilterUtils.makeCVSAware(FileFilterUtils.nameFileFilter("test-file1.txt"));
  File file=new File(getTestDirectory(),"CVS");
  file.mkdirs();
  assertFiltering(filter1,file,false);
  assertFiltering(filter2,file,false);
  FileUtils.deleteDirectory(file);
  file=new File(getTestDirectory(),"test-file1.txt");
  if (!file.getParentFile().exists()) {
    throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output2=new BufferedOutputStream(new FileOutputStream(file))){
    TestUtils.generateTestData(output2,0);
  }
   assertFiltering(filter1,file,true);
  assertFiltering(filter2,file,true);
  file=new File(getTestDirectory(),"test-file2.log");
  if (!file.getParentFile().exists()) {
    throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(file))){
    TestUtils.generateTestData(output1,0);
  }
   assertFiltering(filter1,file,true);
  assertFiltering(filter2,file,false);
  file=new File(getTestDirectory(),"CVS");
  if (!file.getParentFile().exists()) {
    throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
  }
  try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(file))){
    TestUtils.generateTestData(output,0);
  }
   assertFiltering(filter1,file,true);
  assertFiltering(filter2,file,false);
}
