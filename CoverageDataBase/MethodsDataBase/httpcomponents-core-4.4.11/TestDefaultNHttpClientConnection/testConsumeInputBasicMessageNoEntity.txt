@Test public void testConsumeInputBasicMessageNoEntity() throws Exception {
  final ReadableByteChannelMock rchannel=Mockito.spy(new ReadableByteChannelMock(new String[]{"HTTP/1.1 100 Continue\r\n\r\n"},Consts.ASCII));
  final ByteChannelMock channel=new ByteChannelMock(rchannel,null);
  Mockito.when(session.channel()).thenReturn(channel);
  Mockito.when(session.getEventMask()).thenReturn(SelectionKey.OP_READ);
  final LinkedList<HttpResponse> responses=new LinkedList<HttpResponse>();
  Mockito.doAnswer(new ResponseCapturingAnswer(responses)).when(handler).responseReceived(Matchers.<NHttpClientConnection>any());
  Mockito.doAnswer(new ConsumeContentAnswer(new SimpleInputBuffer(64))).when(handler).inputReady(Matchers.<NHttpClientConnection>any(),Matchers.<ContentDecoder>any());
  conn.consumeInput(handler);
  Assert.assertNull(conn.getHttpResponse());
  Assert.assertNull(conn.contentDecoder);
  Mockito.verify(handler,Mockito.times(1)).responseReceived(Matchers.<NHttpClientConnection>any());
  Mockito.verify(handler,Mockito.never()).inputReady(Matchers.<NHttpClientConnection>any(),Matchers.<LengthDelimitedDecoder>any());
  Mockito.verify(rchannel,Mockito.times(1)).read(Matchers.<ByteBuffer>any());
  Mockito.verify(handler,Mockito.never()).exception(Matchers.<NHttpClientConnection>any(),Matchers.<Exception>any());
  Assert.assertFalse(responses.isEmpty());
  final HttpResponse response=responses.getFirst();
  Assert.assertNotNull(response);
  Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
  Assert.assertEquals(100,response.getStatusLine().getStatusCode());
  final HttpEntity entity=response.getEntity();
  Assert.assertNull(entity);
}
