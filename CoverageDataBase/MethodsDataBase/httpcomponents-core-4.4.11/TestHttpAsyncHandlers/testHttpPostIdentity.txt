@Test public void testHttpPostIdentity() throws Exception {
  this.server.registerHandler("*",new BasicAsyncRequestHandler(new SimpleRequestHandler()));
  this.client.setHttpProcessor(new ImmutableHttpProcessor(new HttpRequestInterceptor(){
    @Override public void process(    final HttpRequest request,    final HttpContext context) throws HttpException, IOException {
      request.addHeader(HTTP.TRANSFER_ENCODING,"identity");
    }
  }
,new RequestTargetHost(),new RequestConnControl(),new RequestUserAgent(),new RequestExpectContinue(true)));
  final HttpHost target=start();
  this.client.setMaxPerRoute(3);
  this.client.setMaxTotal(3);
  final String pattern=RndTestPatternGenerator.generateText();
  final int count=RndTestPatternGenerator.generateCount(1000);
  final BasicHttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST",createRequestUri(pattern,count));
  request.setEntity(null);
  final Future<HttpResponse> future=this.client.execute(target,request);
  final HttpResponse response=future.get(RESULT_TIMEOUT_SEC,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(HttpStatus.SC_BAD_REQUEST,response.getStatusLine().getStatusCode());
}
