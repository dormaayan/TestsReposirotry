@Test public void testHttpPostsWithExpectationVerification() throws Exception {
  this.server.registerHandler("*",new BasicAsyncRequestHandler(new SimpleRequestHandler()));
  this.server.setExpectationVerifier(new HttpAsyncExpectationVerifier(){
    @Override public void verify(    final HttpAsyncExchange httpexchange,    final HttpContext context) throws HttpException {
      final HttpRequest request=httpexchange.getRequest();
      ProtocolVersion ver=request.getRequestLine().getProtocolVersion();
      final String s=request.getRequestLine().getUri();
      if (!s.equals("AAAAAx10")) {
        if (!ver.lessEquals(HttpVersion.HTTP_1_1)) {
          ver=HttpVersion.HTTP_1_1;
        }
        final BasicHttpResponse response=new BasicHttpResponse(ver,HttpStatus.SC_EXPECTATION_FAILED,"Expectation failed");
        response.setEntity(new NStringEntity("Expectation failed",ContentType.TEXT_PLAIN));
        httpexchange.submitResponse(new BasicAsyncResponseProducer(response));
      }
 else {
        httpexchange.submitResponse();
      }
    }
  }
);
  final HttpHost target=start();
  final BasicHttpEntityEnclosingRequest request1=new BasicHttpEntityEnclosingRequest("POST",createRequestUri("AAAAA",10));
  request1.setEntity(new NStringEntity(createExpectedString("AAAAA",10)));
  final BasicHttpEntityEnclosingRequest request2=new BasicHttpEntityEnclosingRequest("POST",createRequestUri("AAAAA",10));
  request2.setEntity(new NStringEntity(createExpectedString("AAAAA",10)));
  final BasicHttpEntityEnclosingRequest request3=new BasicHttpEntityEnclosingRequest("POST",createRequestUri("BBBBB",10));
  request3.setEntity(new NStringEntity(createExpectedString("BBBBB",10)));
  final HttpRequest[] requests=new HttpRequest[]{request1,request2,request3};
  final Queue<Future<HttpResponse>> queue=new ConcurrentLinkedQueue<Future<HttpResponse>>();
  for (  final HttpRequest request : requests) {
    final HttpContext context=new BasicHttpContext();
    final Future<HttpResponse> future=this.client.execute(target,request,context);
    queue.add(future);
  }
  final Future<HttpResponse> future1=queue.remove();
  final HttpResponse response1=future1.get();
  Assert.assertEquals(HttpStatus.SC_OK,response1.getStatusLine().getStatusCode());
  final Future<HttpResponse> future2=queue.remove();
  final HttpResponse response2=future2.get();
  Assert.assertEquals(HttpStatus.SC_OK,response2.getStatusLine().getStatusCode());
  final Future<HttpResponse> future3=queue.remove();
  final HttpResponse response3=future3.get();
  Assert.assertEquals(HttpStatus.SC_EXPECTATION_FAILED,response3.getStatusLine().getStatusCode());
}
