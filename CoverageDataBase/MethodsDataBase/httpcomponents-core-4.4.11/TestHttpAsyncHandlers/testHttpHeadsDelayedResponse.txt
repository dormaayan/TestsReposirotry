@Test public void testHttpHeadsDelayedResponse() throws Exception {
class DelayedRequestHandler implements HttpAsyncRequestHandler<HttpRequest> {
    private final SimpleRequestHandler requestHandler;
    public DelayedRequestHandler(){
      super();
      this.requestHandler=new SimpleRequestHandler();
    }
    @Override public HttpAsyncRequestConsumer<HttpRequest> processRequest(    final HttpRequest request,    final HttpContext context){
      return new BasicAsyncRequestConsumer();
    }
    @Override public void handle(    final HttpRequest request,    final HttpAsyncExchange httpexchange,    final HttpContext context) throws HttpException, IOException {
      ProtocolVersion ver=request.getRequestLine().getProtocolVersion();
      if (!ver.lessEquals(HttpVersion.HTTP_1_1)) {
        ver=HttpVersion.HTTP_1_1;
      }
      final BasicHttpResponse response=new BasicHttpResponse(ver,HttpStatus.SC_OK,"OK");
      new Thread(){
        @Override public void run(){
          try {
            Thread.sleep(100);
          }
 catch (          final InterruptedException ie) {
          }
          try {
            requestHandler.handle(request,response,context);
          }
 catch (          final Exception ex) {
            response.setStatusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
          }
          httpexchange.submitResponse(new BasicAsyncResponseProducer(response));
        }
      }
.start();
    }
  }
  this.server.registerHandler("*",new DelayedRequestHandler());
  final HttpHost target=start();
  this.client.setMaxPerRoute(3);
  this.client.setMaxTotal(3);
  final String pattern=RndTestPatternGenerator.generateText();
  final int count=RndTestPatternGenerator.generateCount(1000);
  final Queue<Future<HttpResponse>> queue=new ConcurrentLinkedQueue<Future<HttpResponse>>();
  for (int i=0; i < 30; i++) {
    final BasicHttpRequest request=new BasicHttpRequest("HEAD",createRequestUri(pattern,count));
    final Future<HttpResponse> future=this.client.execute(target,request);
    queue.add(future);
  }
  while (!queue.isEmpty()) {
    final Future<HttpResponse> future=queue.remove();
    final HttpResponse response=future.get(RESULT_TIMEOUT_SEC,TimeUnit.SECONDS);
    Assert.assertNotNull(response);
    Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
  }
}
