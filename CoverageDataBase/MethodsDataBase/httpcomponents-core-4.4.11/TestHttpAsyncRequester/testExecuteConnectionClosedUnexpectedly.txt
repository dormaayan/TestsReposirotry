@Test public void testExecuteConnectionClosedUnexpectedly() throws Exception {
  Mockito.when(this.conn.isOpen()).thenReturn(false);
  final Future<Object> future=this.requester.execute(this.requestProducer,this.responseConsumer,this.conn,this.exchangeContext,null);
  Assert.assertNotNull(future);
  Mockito.verify(this.requestProducer).failed(Matchers.any(ConnectionClosedException.class));
  Mockito.verify(this.responseConsumer).failed(Matchers.any(ConnectionClosedException.class));
  Mockito.verify(this.requestProducer,Mockito.atLeastOnce()).close();
  Mockito.verify(this.responseConsumer,Mockito.atLeastOnce()).close();
  Assert.assertTrue(future.isDone());
  Assert.assertNotNull(future.isDone());
  try {
    future.get();
  }
 catch (  final ExecutionException ex) {
    final Throwable cause=ex.getCause();
    Assert.assertNotNull(cause);
    Assert.assertTrue(cause instanceof ConnectionClosedException);
  }
}
