@Test public void testRequestCancelled() throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  final Cancellable cancellable=new Cancellable(){
    @Override public boolean cancel(){
      latch.countDown();
      return true;
    }
  }
;
  this.server.registerHandler("*",new HttpAsyncRequestHandler<HttpRequest>(){
    @Override public HttpAsyncRequestConsumer<HttpRequest> processRequest(    final HttpRequest request,    final HttpContext context) throws HttpException, IOException {
      return new BasicAsyncRequestConsumer();
    }
    @Override public void handle(    final HttpRequest data,    final HttpAsyncExchange httpExchange,    final HttpContext context) throws HttpException, IOException {
      httpExchange.setCallback(cancellable);
    }
  }
);
  this.server.start();
  final ListenerEndpoint endpoint=this.server.getListenerEndpoint();
  endpoint.waitFor();
  final InetSocketAddress address=(InetSocketAddress)endpoint.getAddress();
  final Socket socket=new Socket("localhost",address.getPort());
  try {
    final OutputStream outStream=socket.getOutputStream();
    final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outStream,"US-ASCII"));
    writer.write("GET /long HTTP/1.1\r\n");
    writer.write("Host: localhost\r\n");
    writer.write("\r\n");
    writer.flush();
    Thread.sleep(250);
    writer.close();
  }
  finally {
    socket.close();
  }
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}
