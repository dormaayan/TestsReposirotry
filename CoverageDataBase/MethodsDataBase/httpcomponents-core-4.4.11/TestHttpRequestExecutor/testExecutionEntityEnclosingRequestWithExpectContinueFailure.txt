@Test public void testExecutionEntityEnclosingRequestWithExpectContinueFailure() throws Exception {
  final HttpProcessor httprocessor=Mockito.mock(HttpProcessor.class);
  final HttpClientConnection conn=Mockito.mock(HttpClientConnection.class);
  final HttpRequestExecutor executor=new HttpRequestExecutor();
  final HttpCoreContext context=HttpCoreContext.create();
  final HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST","/");
  request.addHeader(HTTP.EXPECT_DIRECTIVE,HTTP.EXPECT_CONTINUE);
  final HttpEntity entity=Mockito.mock(HttpEntity.class);
  request.setEntity(entity);
  executor.preProcess(request,httprocessor,context);
  Mockito.verify(httprocessor).process(request,context);
  Mockito.when(conn.receiveResponseHeader()).thenReturn(new BasicHttpResponse(HttpVersion.HTTP_1_1,402,"OK"));
  Mockito.when(conn.isResponseAvailable(Matchers.anyInt())).thenReturn(Boolean.TRUE);
  final HttpResponse response=executor.execute(request,conn,context);
  Mockito.verify(conn).sendRequestHeader(request);
  Mockito.verify(conn,Mockito.never()).sendRequestEntity(request);
  Mockito.verify(conn,Mockito.times(2)).flush();
  Mockito.verify(conn).isResponseAvailable(3000);
  Mockito.verify(conn).receiveResponseHeader();
  Mockito.verify(conn).receiveResponseEntity(response);
  executor.postProcess(response,httprocessor,context);
  Mockito.verify(httprocessor).process(response,context);
}
