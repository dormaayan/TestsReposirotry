@Test public void testEndpointUpAndDown() throws Exception {
  final IOEventDispatch eventDispatch=createIOEventDispatch();
  final IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(1).build();
  final ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
  final Thread t=new Thread(new Runnable(){
    @Override public void run(){
      try {
        ioReactor.execute(eventDispatch);
      }
 catch (      final IOException ex) {
      }
    }
  }
);
  t.start();
  Set<ListenerEndpoint> endpoints=ioReactor.getEndpoints();
  Assert.assertNotNull(endpoints);
  Assert.assertEquals(0,endpoints.size());
  final ListenerEndpoint endpoint1=ioReactor.listen(new InetSocketAddress(0));
  endpoint1.waitFor();
  final ListenerEndpoint endpoint2=ioReactor.listen(new InetSocketAddress(0));
  endpoint2.waitFor();
  final int port=((InetSocketAddress)endpoint2.getAddress()).getPort();
  endpoints=ioReactor.getEndpoints();
  Assert.assertNotNull(endpoints);
  Assert.assertEquals(2,endpoints.size());
  endpoint1.close();
  endpoints=ioReactor.getEndpoints();
  Assert.assertNotNull(endpoints);
  Assert.assertEquals(1,endpoints.size());
  final ListenerEndpoint endpoint=endpoints.iterator().next();
  Assert.assertEquals(port,((InetSocketAddress)endpoint.getAddress()).getPort());
  ioReactor.shutdown(1000);
  t.join(1000);
  Assert.assertEquals(IOReactorStatus.SHUT_DOWN,ioReactor.getStatus());
}
