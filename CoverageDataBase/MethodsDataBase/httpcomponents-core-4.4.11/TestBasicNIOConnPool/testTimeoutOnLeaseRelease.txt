@Test public void testTimeoutOnLeaseRelease() throws Exception {
  final HttpHost host=new HttpHost("somehost");
  final SessionRequest sessionRequest=Mockito.mock(SessionRequest.class);
  Mockito.when(sessionRequest.getSession()).thenReturn(session);
  Mockito.when(sessionRequest.getAttachment()).thenReturn(host);
  Mockito.when(reactor.connect(Matchers.any(SocketAddress.class),Matchers.any(SocketAddress.class),Matchers.eq(host),Matchers.any(SessionRequestCallback.class))).thenReturn(sessionRequest);
  Mockito.when(session.getSocketTimeout()).thenReturn(999);
  final Future<BasicNIOPoolEntry> future1=pool.lease(host,null,10,TimeUnit.SECONDS,null);
  Mockito.verify(sessionRequest).setConnectTimeout(10000);
  pool.requestCompleted(sessionRequest);
  final BasicNIOPoolEntry entry1=future1.get();
  final NHttpClientConnection conn1=entry1.getConnection();
  Assert.assertNotNull(entry1);
  Assert.assertNotNull(conn1);
  Assert.assertEquals(999,entry1.getSocketTimeout());
  Assert.assertEquals(999,conn1.getSocketTimeout());
  Mockito.when(session.getSocketTimeout()).thenReturn(888);
  pool.release(entry1,true);
  Assert.assertEquals(888,entry1.getSocketTimeout());
  Mockito.verify(session).setSocketTimeout(0);
  final Future<BasicNIOPoolEntry> future2=pool.lease(host,null,10,TimeUnit.SECONDS,null);
  final BasicNIOPoolEntry entry2=future2.get();
  final NHttpClientConnection conn2=entry2.getConnection();
  Assert.assertNotNull(entry2);
  Assert.assertNotNull(conn2);
  Assert.assertEquals(888,entry1.getSocketTimeout());
  Mockito.verify(session).setSocketTimeout(888);
}
