@Test public void testProduceOutputLongChunkedMessageSaturatedChannel() throws Exception {
  conn=new DefaultNHttpServerConnection(session,64);
  final BasicHttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
  response.addHeader(HTTP.TRANSFER_ENCODING,HTTP.CHUNK_CODING);
  final NStringEntity entity=new NStringEntity("a lot of various stuff");
  entity.setChunked(true);
  response.setEntity(entity);
  final WritableByteChannelMock wchannel=Mockito.spy(new WritableByteChannelMock(64,64));
  final ByteChannelMock channel=new ByteChannelMock(null,wchannel);
  Mockito.when(session.channel()).thenReturn(channel);
  Mockito.doAnswer(new ResponseReadyAnswer(response)).when(handler).responseReady(Matchers.<NHttpServerConnection>any());
  Mockito.doAnswer(new ProduceContentAnswer(entity)).when(handler).outputReady(Matchers.<NHttpServerConnection>any(),Matchers.<ContentEncoder>any());
  conn.produceOutput(handler);
  Assert.assertNull(conn.getHttpResponse());
  Assert.assertNull(conn.contentEncoder);
  Assert.assertEquals("HTTP/1.1 200 OK\r\nTransfer-Encoding: chunked\r\n\r\n" + "5\r\na lot\r\n11\r\n of",wchannel.dump(Consts.ASCII));
  Assert.assertEquals(21,conn.outbuf.length());
  Mockito.verify(session,Mockito.never()).clearEvent(SelectionKey.OP_WRITE);
  Mockito.verify(wchannel,Mockito.times(2)).write(Matchers.<ByteBuffer>any());
}
