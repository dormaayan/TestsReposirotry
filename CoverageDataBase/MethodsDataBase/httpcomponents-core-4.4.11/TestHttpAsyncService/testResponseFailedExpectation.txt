@Test public void testResponseFailedExpectation() throws Exception {
  final State state=new State();
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST","/",HttpVersion.HTTP_1_1);
  final Incoming incoming=new Incoming(request,this.requestHandler,this.requestConsumer,exchangeContext);
  state.setIncoming(incoming);
  state.setRequestState(MessageState.ACK_EXPECTED);
  final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,417,"Expectation failed");
  final Outgoing outgoing=new Outgoing(request,response,this.responseProducer,exchangeContext);
  state.setOutgoing(outgoing);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  response.setEntity(new NStringEntity("stuff"));
  Mockito.when(this.responseProducer.generateResponse()).thenReturn(response);
  this.protocolHandler.responseReady(this.conn);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.BODY_STREAM,state.getResponseState());
  Mockito.verify(this.conn).resetInput();
  Mockito.verify(this.httpProcessor).process(response,exchangeContext);
  Mockito.verify(this.conn).submitResponse(response);
  Mockito.verify(this.responseProducer,Mockito.never()).responseCompleted(exchangeContext);
}
