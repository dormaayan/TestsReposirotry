@Test public void testResponseHandleFailedPipelinedRequest() throws Exception {
  final State state=new State();
  final Queue<PipelineEntry> pipeline=state.getPipeline();
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  final Exception ex=new Exception("Opppsie");
  final PipelineEntry entry=new PipelineEntry(request,null,ex,requestHandler,exchangeContext);
  pipeline.add(entry);
  state.setRequestState(MessageState.READY);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  this.protocolHandler.responseReady(this.conn);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.BODY_STREAM,state.getResponseState());
  final Outgoing outgoing=state.getOutgoing();
  Assert.assertNotNull(outgoing.getProducer());
  final HttpResponse response=outgoing.getResponse();
  Assert.assertNotNull(response);
  Assert.assertEquals(500,response.getStatusLine().getStatusCode());
  Mockito.verify(this.requestHandler,Mockito.never()).handle(Matchers.<HttpRequest>any(),Matchers.<HttpAsyncExchange>any(),Matchers.<HttpContext>any());
  Mockito.verify(this.conn).submitResponse(Matchers.same(response));
}
