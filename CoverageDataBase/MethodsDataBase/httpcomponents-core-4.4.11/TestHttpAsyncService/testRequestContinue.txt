@Test public void testRequestContinue() throws Exception {
  final State state=new State();
  state.setRequestState(MessageState.ACK_EXPECTED);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpAsyncExchange httpexchanage=protocolHandler.new HttpAsyncExchangeImpl(new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1),new BasicHttpResponse(HttpVersion.HTTP_1_1,100,"Continue"),state,this.conn,exchangeContext);
  Assert.assertFalse(httpexchanage.isCompleted());
  httpexchanage.submitResponse();
  Assert.assertTrue(httpexchanage.isCompleted());
  final Outgoing outgoing=state.getOutgoing();
  Assert.assertNotNull(outgoing);
  final HttpAsyncResponseProducer responseProducer=outgoing.getProducer();
  Assert.assertNotNull(responseProducer);
  Assert.assertEquals(MessageState.ACK_EXPECTED,state.getRequestState());
  Assert.assertEquals(MessageState.READY,state.getResponseState());
  final HttpResponse response=responseProducer.generateResponse();
  Assert.assertEquals(HttpStatus.SC_CONTINUE,response.getStatusLine().getStatusCode());
  Mockito.verify(this.conn).requestOutput();
  try {
    httpexchanage.submitResponse(this.responseProducer);
    Assert.fail("IllegalStateException expected");
  }
 catch (  final IllegalStateException ex) {
  }
}
