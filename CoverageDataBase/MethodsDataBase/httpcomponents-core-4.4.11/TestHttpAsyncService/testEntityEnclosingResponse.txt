@Test public void testEntityEnclosingResponse() throws Exception {
  final State state=new State();
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  final Incoming incoming=new Incoming(request,this.requestHandler,this.requestConsumer,exchangeContext);
  state.setIncoming(incoming);
  state.setRequestState(MessageState.COMPLETED);
  final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
  final Outgoing outgoing=new Outgoing(request,response,this.responseProducer,exchangeContext);
  state.setOutgoing(outgoing);
  state.setResponseState(MessageState.INIT);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  response.setEntity(new NStringEntity("stuff"));
  Mockito.when(this.responseProducer.generateResponse()).thenReturn(response);
  this.protocolHandler.responseReady(this.conn);
  Assert.assertEquals(MessageState.COMPLETED,state.getRequestState());
  Assert.assertEquals(MessageState.BODY_STREAM,state.getResponseState());
  Assert.assertEquals("[incoming COMPLETED GET / HTTP/1.1; outgoing BODY_STREAM HTTP/1.1 200 OK]",state.toString());
  Mockito.verify(this.httpProcessor).process(response,exchangeContext);
  Mockito.verify(this.conn).submitResponse(response);
  Mockito.verify(this.responseProducer,Mockito.never()).responseCompleted(exchangeContext);
}
