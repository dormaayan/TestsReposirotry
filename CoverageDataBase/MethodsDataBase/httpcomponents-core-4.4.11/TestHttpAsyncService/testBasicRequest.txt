@Test public void testBasicRequest() throws Exception {
  final State state=new State();
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  Mockito.when(this.conn.getHttpRequest()).thenReturn(request);
  Mockito.when(this.requestHandler.processRequest(Matchers.eq(request),Matchers.any(HttpContext.class))).thenReturn(this.requestConsumer);
  Mockito.when(this.requestConsumer.getException()).thenReturn(null);
  final Object data=new Object();
  Mockito.when(this.requestConsumer.getResult()).thenReturn(data);
  this.protocolHandler.requestReceived(this.conn);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.READY,state.getResponseState());
  final Incoming incoming=state.getIncoming();
  Assert.assertNull(incoming);
  final ArgumentCaptor<HttpContext> argumentCaptor=ArgumentCaptor.forClass(HttpContext.class);
  Mockito.verify(this.httpProcessor).process(Matchers.eq(request),argumentCaptor.capture());
  final HttpContext exchangeContext=argumentCaptor.getValue();
  Assert.assertNotNull(exchangeContext);
  Assert.assertSame(request,exchangeContext.getAttribute(HttpCoreContext.HTTP_REQUEST));
  Assert.assertSame(this.conn,exchangeContext.getAttribute(HttpCoreContext.HTTP_CONNECTION));
  Mockito.verify(this.requestConsumer).requestReceived(request);
  Mockito.verify(this.requestConsumer).requestCompleted(exchangeContext);
  Mockito.verify(this.conn).requestOutput();
  final PipelineEntry entry=state.getPipeline().poll();
  Assert.assertNotNull(entry);
  Assert.assertSame(request,entry.getRequest());
  Assert.assertSame(requestHandler,entry.getHandler());
  Assert.assertNotNull(entry.getResult());
  Assert.assertNull(entry.getException());
}
