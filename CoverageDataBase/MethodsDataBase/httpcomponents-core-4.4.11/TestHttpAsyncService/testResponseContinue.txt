@Test public void testResponseContinue() throws Exception {
  final State state=new State();
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST","/",HttpVersion.HTTP_1_1);
  final Incoming incoming=new Incoming(request,this.requestHandler,this.requestConsumer,exchangeContext);
  state.setIncoming(incoming);
  state.setRequestState(MessageState.ACK_EXPECTED);
  final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,HttpStatus.SC_CONTINUE,"Continue");
  final Outgoing outgoing=new Outgoing(request,response,this.responseProducer,exchangeContext);
  state.setOutgoing(outgoing);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  Mockito.when(this.responseProducer.generateResponse()).thenReturn(response);
  this.protocolHandler.responseReady(this.conn);
  Assert.assertEquals(MessageState.BODY_STREAM,state.getRequestState());
  Assert.assertEquals(MessageState.READY,state.getResponseState());
  Mockito.verify(this.conn).requestInput();
  Mockito.verify(this.conn).submitResponse(Matchers.argThat(new ArgumentMatcher<HttpResponse>(){
    @Override public boolean matches(    final Object argument){
      final int status=((HttpResponse)argument).getStatusLine().getStatusCode();
      return status == 100;
    }
  }
));
}
