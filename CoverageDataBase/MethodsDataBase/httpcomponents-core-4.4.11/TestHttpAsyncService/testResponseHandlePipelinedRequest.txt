@Test public void testResponseHandlePipelinedRequest() throws Exception {
  final State state=new State();
  final Queue<PipelineEntry> pipeline=state.getPipeline();
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  final PipelineEntry entry=new PipelineEntry(request,request,null,requestHandler,exchangeContext);
  pipeline.add(entry);
  state.setRequestState(MessageState.READY);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  this.protocolHandler.responseReady(this.conn);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.INIT,state.getResponseState());
  Assert.assertNull(state.getOutgoing());
  final ArgumentCaptor<HttpAsyncExchange> argCaptor=ArgumentCaptor.forClass(HttpAsyncExchange.class);
  Mockito.verify(this.requestHandler).handle(Matchers.same(request),argCaptor.capture(),Matchers.same(exchangeContext));
  final HttpAsyncExchange exchange=argCaptor.getValue();
  Assert.assertNotNull(exchange);
  Assert.assertSame(request,exchange.getRequest());
  Assert.assertNotNull(exchange.getResponse());
  Assert.assertEquals(200,exchange.getResponse().getStatusLine().getStatusCode());
}
