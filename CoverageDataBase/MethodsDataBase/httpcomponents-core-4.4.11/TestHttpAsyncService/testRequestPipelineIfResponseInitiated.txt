@Test public void testRequestPipelineIfResponseInitiated() throws Exception {
  final State state=new State();
  state.setRequestState(MessageState.READY);
  state.setResponseState(MessageState.INIT);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  Mockito.when(this.conn.getHttpRequest()).thenReturn(request);
  Mockito.when(this.requestHandler.processRequest(Matchers.eq(request),Matchers.any(HttpContext.class))).thenReturn(this.requestConsumer);
  Mockito.when(this.requestConsumer.getException()).thenReturn(null);
  final Object data=new Object();
  Mockito.when(this.requestConsumer.getResult()).thenReturn(data);
  this.protocolHandler.requestReceived(this.conn);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.INIT,state.getResponseState());
  final Incoming incoming=state.getIncoming();
  Assert.assertNull(incoming);
  Mockito.verify(this.requestConsumer).requestReceived(request);
  Mockito.verify(this.requestConsumer).requestCompleted(Matchers.<HttpContext>any());
  Mockito.verify(this.requestHandler,Mockito.never()).handle(Matchers.any(),Matchers.any(HttpAsyncExchange.class),Matchers.any(HttpContext.class));
  Assert.assertFalse(state.getPipeline().isEmpty());
  final PipelineEntry entry=state.getPipeline().remove();
  Assert.assertSame(request,entry.getRequest());
  Assert.assertSame(data,entry.getResult());
}
