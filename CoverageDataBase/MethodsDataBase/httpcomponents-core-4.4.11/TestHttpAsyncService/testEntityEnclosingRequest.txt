@Test public void testEntityEnclosingRequest() throws Exception {
  final State state=new State();
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST","/",HttpVersion.HTTP_1_1);
  Mockito.when(this.conn.getHttpRequest()).thenReturn(request);
  Mockito.when(this.requestHandler.processRequest(Matchers.eq(request),Matchers.any(HttpContext.class))).thenReturn(this.requestConsumer);
  this.protocolHandler.requestReceived(this.conn);
  Assert.assertEquals(MessageState.BODY_STREAM,state.getRequestState());
  Assert.assertEquals(MessageState.READY,state.getResponseState());
  final Incoming incoming=state.getIncoming();
  Assert.assertNotNull(incoming);
  Assert.assertSame(request,incoming.getRequest());
  Assert.assertSame(this.requestHandler,incoming.getHandler());
  Assert.assertSame(this.requestConsumer,incoming.getConsumer());
  final HttpContext exchangeContext=incoming.getContext();
  Assert.assertNotNull(exchangeContext);
  Assert.assertSame(request,exchangeContext.getAttribute(HttpCoreContext.HTTP_REQUEST));
  Assert.assertSame(this.conn,exchangeContext.getAttribute(HttpCoreContext.HTTP_CONNECTION));
  Mockito.verify(this.httpProcessor).process(request,exchangeContext);
  Mockito.verify(this.requestConsumer).requestReceived(request);
  Mockito.verify(this.conn,Mockito.never()).suspendInput();
}
