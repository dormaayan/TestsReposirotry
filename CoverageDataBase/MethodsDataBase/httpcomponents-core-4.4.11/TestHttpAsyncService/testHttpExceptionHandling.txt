@Test public void testHttpExceptionHandling() throws Exception {
  final State state=new State();
  state.setRequestState(MessageState.READY);
  state.setResponseState(MessageState.READY);
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpRequest request=new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1);
  final Incoming incoming=new Incoming(request,this.requestHandler,this.requestConsumer,exchangeContext);
  state.setIncoming(incoming);
  state.setCancellable(this.cancellable);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpException httpex=new HttpException();
  this.protocolHandler.exception(this.conn,httpex);
  Assert.assertEquals(MessageState.READY,state.getRequestState());
  Assert.assertEquals(MessageState.BODY_STREAM,state.getResponseState());
  final Outgoing outgoing=state.getOutgoing();
  Assert.assertNotNull(outgoing);
  Assert.assertNotNull(outgoing.getProducer());
  Assert.assertNotNull(outgoing.getResponse());
  Assert.assertEquals(500,outgoing.getResponse().getStatusLine().getStatusCode());
  Mockito.verify(this.requestConsumer).failed(httpex);
  Mockito.verify(this.requestConsumer).close();
  Mockito.verify(this.cancellable).cancel();
  Mockito.verify(this.conn,Mockito.never()).shutdown();
  Mockito.verify(this.conn,Mockito.never()).close();
}
