@Test public void testResponseTrigger() throws Exception {
  final State state=new State();
  state.setRequestState(MessageState.COMPLETED);
  state.setResponseState(MessageState.READY);
  this.connContext.setAttribute(HttpAsyncService.HTTP_EXCHANGE_STATE,state);
  final HttpContext exchangeContext=new BasicHttpContext();
  final HttpAsyncExchange httpexchanage=protocolHandler.new HttpAsyncExchangeImpl(new BasicHttpRequest("GET","/",HttpVersion.HTTP_1_1),new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK"),state,this.conn,exchangeContext);
  Assert.assertFalse(httpexchanage.isCompleted());
  httpexchanage.submitResponse(this.responseProducer);
  Assert.assertTrue(httpexchanage.isCompleted());
  Assert.assertEquals(MessageState.COMPLETED,state.getRequestState());
  Assert.assertEquals(MessageState.READY,state.getResponseState());
  final Outgoing outgoing=state.getOutgoing();
  Assert.assertNotNull(outgoing);
  Assert.assertSame(this.responseProducer,outgoing.getProducer());
  Mockito.verify(this.conn).requestOutput();
  try {
    httpexchanage.submitResponse(Mockito.mock(HttpAsyncResponseProducer.class));
    Assert.fail("IllegalStateException expected");
  }
 catch (  final IllegalStateException ex) {
  }
}
