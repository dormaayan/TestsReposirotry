@Test public void testLeaseRelease() throws Exception {
  final HttpConnection conn1=Mockito.mock(HttpConnection.class);
  Mockito.when(conn1.isOpen()).thenReturn(true);
  final HttpConnection conn2=Mockito.mock(HttpConnection.class);
  Mockito.when(conn2.isOpen()).thenReturn(true);
  final LocalConnFactory connFactory=Mockito.mock(LocalConnFactory.class);
  Mockito.when(connFactory.create(Matchers.eq("somehost"))).thenReturn(conn1);
  Mockito.when(connFactory.create(Matchers.eq("otherhost"))).thenReturn(conn2);
  final LocalConnPool pool=new LocalConnPool(connFactory,2,10);
  final Future<LocalPoolEntry> future1=pool.lease("somehost",null);
  final LocalPoolEntry entry1=future1.get(1,TimeUnit.SECONDS);
  Assert.assertNotNull(entry1);
  final Future<LocalPoolEntry> future2=pool.lease("somehost",null);
  final LocalPoolEntry entry2=future2.get(1,TimeUnit.SECONDS);
  Assert.assertNotNull(entry2);
  final Future<LocalPoolEntry> future3=pool.lease("otherhost",null);
  final LocalPoolEntry entry3=future3.get(1,TimeUnit.SECONDS);
  Assert.assertNotNull(entry3);
  PoolStats totals=pool.getTotalStats();
  Assert.assertEquals(0,totals.getAvailable());
  Assert.assertEquals(3,totals.getLeased());
  final LocalPoolEntry entry=future1.get();
  Assert.assertSame(entry1,entry);
  pool.release(entry1,true);
  pool.release(entry2,true);
  pool.release(entry3,false);
  Mockito.verify(conn1,Mockito.never()).close();
  Mockito.verify(conn2,Mockito.times(1)).close();
  totals=pool.getTotalStats();
  Assert.assertEquals(2,totals.getAvailable());
  Assert.assertEquals(0,totals.getLeased());
}
