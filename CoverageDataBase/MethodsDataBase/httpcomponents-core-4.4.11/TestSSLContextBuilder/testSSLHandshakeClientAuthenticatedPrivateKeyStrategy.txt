@Test public void testSSLHandshakeClientAuthenticatedPrivateKeyStrategy() throws Exception {
  final URL resource1=getResource("/test-server.keystore");
  final String storePassword="nopassword";
  final String keyPassword="nopassword";
  final SSLContext serverSslContext=SSLContextBuilder.create().loadTrustMaterial(resource1,storePassword.toCharArray()).loadKeyMaterial(resource1,storePassword.toCharArray(),keyPassword.toCharArray()).build();
  Assert.assertNotNull(serverSslContext);
  final PrivateKeyStrategy privateKeyStrategy=new PrivateKeyStrategy(){
    @Override public String chooseAlias(    final Map<String,PrivateKeyDetails> aliases,    final Socket socket){
      return aliases.keySet().contains("client2") ? "client2" : null;
    }
  }
;
  final URL resource2=getResource("/test-client.keystore");
  final SSLContext clientSslContext=SSLContextBuilder.create().loadTrustMaterial(resource2,storePassword.toCharArray()).loadKeyMaterial(resource2,storePassword.toCharArray(),storePassword.toCharArray(),privateKeyStrategy).build();
  Assert.assertNotNull(clientSslContext);
  final SSLServerSocket serverSocket=(SSLServerSocket)serverSslContext.getServerSocketFactory().createServerSocket();
  serverSocket.setNeedClientAuth(true);
  serverSocket.bind(new InetSocketAddress(0));
  this.executorService=Executors.newSingleThreadExecutor();
  final Future<Principal> future=this.executorService.submit(new Callable<Principal>(){
    @Override public Principal call() throws Exception {
      final SSLSocket socket=(SSLSocket)serverSocket.accept();
      try {
        final SSLSession session=socket.getSession();
        final Principal clientPrincipal=session.getPeerPrincipal();
        final OutputStream outputStream=socket.getOutputStream();
        outputStream.write(new byte[]{'H','i'});
        outputStream.flush();
        return clientPrincipal;
      }
  finally {
        socket.close();
      }
    }
  }
);
  final int localPort=serverSocket.getLocalPort();
  final SSLSocket clientSocket=(SSLSocket)clientSslContext.getSocketFactory().createSocket();
  try {
    clientSocket.connect(new InetSocketAddress("localhost",localPort),TIMEOUT);
    clientSocket.setSoTimeout(TIMEOUT);
    clientSocket.startHandshake();
    final InputStream inputStream=clientSocket.getInputStream();
    Assert.assertEquals('H',inputStream.read());
    Assert.assertEquals('i',inputStream.read());
    Assert.assertEquals(-1,inputStream.read());
  }
  finally {
    clientSocket.close();
  }
  final Principal clientPrincipal=future.get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(clientPrincipal);
  Assert.assertEquals("CN=Test Client 2,OU=HttpComponents Project,O=Apache Software Foundation",clientPrincipal.getName());
}
