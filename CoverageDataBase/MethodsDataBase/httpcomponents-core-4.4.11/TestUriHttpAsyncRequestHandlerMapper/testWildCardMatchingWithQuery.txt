@Test public void testWildCardMatchingWithQuery() throws Exception {
  final HttpAsyncRequestHandler<?> h1=Mockito.mock(HttpAsyncRequestHandler.class);
  final HttpAsyncRequestHandler<?> h2=Mockito.mock(HttpAsyncRequestHandler.class);
  final HttpAsyncRequestHandler<?> def=Mockito.mock(HttpAsyncRequestHandler.class);
  final UriPatternMatcher<HttpAsyncRequestHandler<?>> matcher=Mockito.spy(new UriPatternMatcher<HttpAsyncRequestHandler<?>>());
  final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper(matcher);
  registry.register("*",def);
  registry.register("*.view",h1);
  registry.register("*.form",h2);
  HttpAsyncRequestHandler<?> h;
  h=registry.lookup(new BasicHttpRequest("GET","/that.view?param=value"));
  Assert.assertNotNull(h);
  Assert.assertTrue(h1 == h);
  h=registry.lookup(new BasicHttpRequest("GET","/that.form?whatever"));
  Assert.assertNotNull(h);
  Assert.assertTrue(h2 == h);
  h=registry.lookup(new BasicHttpRequest("GET","/whatever"));
  Assert.assertNotNull(h);
  Assert.assertTrue(def == h);
}
