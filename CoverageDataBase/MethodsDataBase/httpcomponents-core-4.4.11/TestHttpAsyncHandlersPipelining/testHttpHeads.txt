@Test public void testHttpHeads() throws Exception {
  this.server.registerHandler("*",new BasicAsyncRequestHandler(new SimpleRequestHandler()));
  final HttpHost target=start();
  this.client.setMaxPerRoute(3);
  this.client.setMaxTotal(3);
  final String pattern=RndTestPatternGenerator.generateText();
  final int count=RndTestPatternGenerator.generateCount(1000);
  final Queue<Future<List<HttpResponse>>> queue=new ConcurrentLinkedQueue<Future<List<HttpResponse>>>();
  for (int i=0; i < 10; i++) {
    final String requestUri=createRequestUri(pattern,count);
    final HttpRequest head1=new BasicHttpRequest("HEAD",requestUri);
    final HttpRequest head2=new BasicHttpRequest("HEAD",requestUri);
    final BasicHttpEntityEnclosingRequest post1=new BasicHttpEntityEnclosingRequest("POST",requestUri);
    post1.setEntity(new NStringEntity("stuff",ContentType.TEXT_PLAIN));
    final Future<List<HttpResponse>> future=this.client.executePipelined(target,head1,head2,post1);
    queue.add(future);
  }
  while (!queue.isEmpty()) {
    final Future<List<HttpResponse>> future=queue.remove();
    final List<HttpResponse> responses=future.get(RESULT_TIMEOUT_SEC,TimeUnit.SECONDS);
    Assert.assertNotNull(responses);
    Assert.assertEquals(3,responses.size());
    for (    final HttpResponse response : responses) {
      Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
    }
  }
}
