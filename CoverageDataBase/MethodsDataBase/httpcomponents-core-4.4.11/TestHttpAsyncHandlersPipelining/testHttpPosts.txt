@Test public void testHttpPosts() throws Exception {
  this.server.registerHandler("*",new BasicAsyncRequestHandler(new SimpleRequestHandler()));
  final HttpHost target=start();
  this.client.setMaxPerRoute(3);
  this.client.setMaxTotal(3);
  final String pattern=RndTestPatternGenerator.generateText();
  final int count=RndTestPatternGenerator.generateCount(1000);
  final String expectedPattern=createExpectedString(pattern,count);
  final Queue<Future<List<HttpResponse>>> queue=new ConcurrentLinkedQueue<Future<List<HttpResponse>>>();
  for (int i=0; i < 10; i++) {
    final String requestUri=createRequestUri(pattern,count);
    final HttpEntityEnclosingRequest request1=new BasicHttpEntityEnclosingRequest("POST",requestUri);
    final NStringEntity entity1=new NStringEntity(expectedPattern,ContentType.DEFAULT_TEXT);
    entity1.setChunked(RndTestPatternGenerator.generateBoolean());
    request1.setEntity(entity1);
    final HttpEntityEnclosingRequest request2=new BasicHttpEntityEnclosingRequest("POST",requestUri);
    final NStringEntity entity2=new NStringEntity(expectedPattern,ContentType.DEFAULT_TEXT);
    entity2.setChunked(RndTestPatternGenerator.generateBoolean());
    request2.setEntity(entity2);
    final HttpEntityEnclosingRequest request3=new BasicHttpEntityEnclosingRequest("POST",requestUri);
    final NStringEntity entity3=new NStringEntity(expectedPattern,ContentType.DEFAULT_TEXT);
    entity3.setChunked(RndTestPatternGenerator.generateBoolean());
    request3.setEntity(entity3);
    final Future<List<HttpResponse>> future=this.client.executePipelined(target,request1,request2,request3);
    queue.add(future);
  }
  while (!queue.isEmpty()) {
    final Future<List<HttpResponse>> future=queue.remove();
    final List<HttpResponse> responses=future.get(RESULT_TIMEOUT_SEC,TimeUnit.SECONDS);
    Assert.assertNotNull(responses);
    Assert.assertEquals(3,responses.size());
    for (    final HttpResponse response : responses) {
      Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(expectedPattern,EntityUtils.toString(response.getEntity()));
    }
  }
}
