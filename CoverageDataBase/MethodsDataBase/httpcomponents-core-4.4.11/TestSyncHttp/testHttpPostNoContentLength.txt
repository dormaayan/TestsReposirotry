@Test public void testHttpPostNoContentLength() throws Exception {
  this.server.registerHandler("*",new HttpRequestHandler(){
    @Override public void handle(    final HttpRequest request,    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      if (request instanceof HttpEntityEnclosingRequest) {
        final HttpEntity incoming=((HttpEntityEnclosingRequest)request).getEntity();
        final byte[] data=EntityUtils.toByteArray(incoming);
        final ByteArrayEntity outgoing=new ByteArrayEntity(data);
        response.setEntity(outgoing);
      }
 else {
        final StringEntity outgoing=new StringEntity("No content");
        response.setEntity(outgoing);
      }
    }
  }
);
  this.server.start();
  final DefaultBHttpClientConnection conn=client.createConnection();
  final HttpHost host=new HttpHost("localhost",this.server.getPort());
  try {
    if (!conn.isOpen()) {
      client.connect(host,conn);
    }
    final BasicHttpEntityEnclosingRequest post=new BasicHttpEntityEnclosingRequest("POST","/");
    post.setEntity(null);
    this.client=new HttpClient(new ImmutableHttpProcessor(new HttpRequestInterceptor[]{new RequestTargetHost(),new RequestConnControl(),new RequestUserAgent(),new RequestExpectContinue(true)}));
    final HttpResponse response=this.client.execute(post,host,conn);
    Assert.assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
    final byte[] received=EntityUtils.toByteArray(response.getEntity());
    Assert.assertEquals(0,received.length);
  }
  finally {
    conn.close();
    this.server.shutdown();
  }
}
