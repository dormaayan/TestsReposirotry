@Test public void testHttpContent() throws Exception {
  final String[] patterns={"0123456789ABCDEF","yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-" + "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-" + "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that-"+ "yadayada-blahblah-this-and-that-yadayada-blahblah-this-and-that"};
  this.server.registerHandler("*",new HttpRequestHandler(){
    @Override public void handle(    final HttpRequest request,    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      if (request instanceof HttpEntityEnclosingRequest) {
        int n=1;
        String s=request.getRequestLine().getUri();
        if (s.startsWith("/?n=")) {
          s=s.substring(4);
          try {
            n=Integer.parseInt(s);
            if (n <= 0) {
              throw new HttpException("Invalid request: " + "number of repetitions cannot be negative or zero");
            }
          }
 catch (          final NumberFormatException ex) {
            throw new HttpException("Invalid request: " + "number of repetitions is invalid");
          }
        }
        final HttpEntity incoming=((HttpEntityEnclosingRequest)request).getEntity();
        final String line=EntityUtils.toString(incoming);
        final ContentType contentType=ContentType.getOrDefault(incoming);
        Charset charset=contentType.getCharset();
        if (charset == null) {
          charset=HTTP.DEF_CONTENT_CHARSET;
        }
        final RepeatingEntity outgoing=new RepeatingEntity(line,charset,n);
        outgoing.setChunked(n % 2 == 0);
        response.setEntity(outgoing);
      }
 else {
        throw new HttpException("Invalid request: POST request expected");
      }
    }
  }
);
  this.server.start();
  final DefaultBHttpClientConnection conn=client.createConnection();
  final HttpHost host=new HttpHost("localhost",this.server.getPort());
  try {
    for (    final String pattern : patterns) {
      for (int n=1000; n < 1020; n++) {
        if (!conn.isOpen()) {
          client.connect(host,conn);
        }
        final BasicHttpEntityEnclosingRequest post=new BasicHttpEntityEnclosingRequest("POST","/?n=" + n);
        final StringEntity outgoing=new StringEntity(pattern);
        outgoing.setChunked(n % 2 == 0);
        post.setEntity(outgoing);
        final HttpResponse response=this.client.execute(post,host,conn);
        final HttpEntity incoming=response.getEntity();
        Assert.assertNotNull(incoming);
        final InputStream inStream=incoming.getContent();
        final ContentType contentType=ContentType.getOrDefault(incoming);
        Charset charset=contentType.getCharset();
        if (charset == null) {
          charset=HTTP.DEF_CONTENT_CHARSET;
        }
        Assert.assertNotNull(inStream);
        final BufferedReader reader=new BufferedReader(new InputStreamReader(inStream,charset));
        String line;
        int count=0;
        while ((line=reader.readLine()) != null) {
          Assert.assertEquals(pattern,line);
          count++;
        }
        Assert.assertEquals(n,count);
        if (!this.client.keepAlive(response)) {
          conn.close();
        }
      }
    }
  }
  finally {
    conn.close();
    this.server.shutdown();
  }
}
