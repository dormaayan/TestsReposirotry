@Test public void testCustomSSLContext() throws Exception {
  final SSLSetupHandler sslSetupHandler=new SSLSetupHandler(){
    @Override public void initalize(    final SSLEngine sslengine) throws SSLException {
    }
    @Override public void verify(    final IOSession ioSession,    final SSLSession sslsession) throws SSLException {
      final BigInteger sslid=new BigInteger(sslsession.getId());
      ioSession.setAttribute("ssl-id",sslid);
    }
  }
;
  final HttpRequestHandler requestHandler=new HttpRequestHandler(){
    @Override public void handle(    final HttpRequest request,    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      final NHttpConnection conn=(NHttpConnection)context.getAttribute(HttpCoreContext.HTTP_CONNECTION);
      final BigInteger sslid=(BigInteger)conn.getContext().getAttribute("ssl-id");
      Assert.assertNotNull(sslid);
    }
  }
;
  final URL keyStoreURL=getClass().getResource("/test.keystore");
  final String storePassword="nopassword";
  final SSLContext serverSSLContext=SSLContextBuilder.create().loadTrustMaterial(keyStoreURL,storePassword.toCharArray()).loadKeyMaterial(keyStoreURL,storePassword.toCharArray(),storePassword.toCharArray()).build();
  this.server=new HttpServerNio();
  this.server.setConnectionFactory(new ServerConnectionFactory(serverSSLContext,sslSetupHandler));
  this.server.setTimeout(5000);
  final SSLContext clientSSLContext=SSLContextBuilder.create().loadTrustMaterial(keyStoreURL,storePassword.toCharArray()).build();
  this.client=new HttpClientNio(new BasicNIOConnFactory(new ClientConnectionFactory(clientSSLContext),null));
  this.client.setTimeout(5000);
  this.server.registerHandler("*",new BasicAsyncRequestHandler(requestHandler));
  this.server.start();
  this.client.start();
  final ListenerEndpoint endpoint=this.server.getListenerEndpoint();
  endpoint.waitFor();
  final InetSocketAddress address=(InetSocketAddress)endpoint.getAddress();
  final HttpHost target=new HttpHost("localhost",address.getPort());
  final BasicHttpRequest request=new BasicHttpRequest("GET","/");
  final Future<HttpResponse> future=this.client.execute(target,request);
  final HttpResponse response=future.get(RESULT_TIMEOUT_SEC,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(200,response.getStatusLine().getStatusCode());
}
