@Test public void testLeaseRequestCanceledWhileConnecting() throws Exception {
  final IOSession ioSession1=Mockito.mock(IOSession.class);
  Mockito.when(ioSession1.isClosed()).thenReturn(Boolean.TRUE);
  final SessionRequest sessionRequest1=Mockito.mock(SessionRequest.class);
  Mockito.when(sessionRequest1.getAttachment()).thenReturn("somehost");
  Mockito.when(sessionRequest1.getSession()).thenReturn(ioSession1);
  final ConnectingIOReactor ioReactor=Mockito.mock(ConnectingIOReactor.class);
  Mockito.when(ioReactor.connect(Matchers.any(SocketAddress.class),Matchers.any(SocketAddress.class),Matchers.any(),Matchers.any(SessionRequestCallback.class))).thenReturn(sessionRequest1);
  Mockito.when(ioReactor.getStatus()).thenReturn(IOReactorStatus.ACTIVE);
  final LocalSessionPool pool=new LocalSessionPool(ioReactor,1,1);
  final Future<LocalPoolEntry> future1=pool.lease("somehost",null,0,TimeUnit.MILLISECONDS,null);
  pool.requestCompleted(sessionRequest1);
  Assert.assertTrue(future1.isDone());
  final LocalPoolEntry entry1=future1.get();
  Assert.assertNotNull(entry1);
  final Future<LocalPoolEntry> future2=pool.lease("somehost",null,0,TimeUnit.MILLISECONDS,null);
  future2.cancel(true);
  pool.release(entry1,true);
  final PoolStats totals=pool.getTotalStats();
  Assert.assertEquals(1,totals.getAvailable());
  Assert.assertEquals(0,totals.getLeased());
}
