@Test public void testTimeoutConnect() throws Exception {
  final IOSession ioSession=Mockito.mock(IOSession.class);
  final SessionRequest sessionRequest=Mockito.mock(SessionRequest.class);
  Mockito.when(sessionRequest.getAttachment()).thenReturn("somehost");
  Mockito.when(sessionRequest.getRemoteAddress()).thenReturn(new InetSocketAddress(InetAddress.getByAddress(new byte[]{127,0,0,1}),80));
  Mockito.when(sessionRequest.getSession()).thenReturn(ioSession);
  final ConnectingIOReactor ioReactor=Mockito.mock(ConnectingIOReactor.class);
  Mockito.when(ioReactor.connect(Matchers.any(SocketAddress.class),Matchers.any(SocketAddress.class),Matchers.any(),Matchers.any(SessionRequestCallback.class))).thenReturn(sessionRequest);
  final LocalSessionPool pool=new LocalSessionPool(ioReactor,2,10);
  final Future<LocalPoolEntry> future=pool.lease("somehost",null);
  PoolStats totals=pool.getTotalStats();
  Assert.assertEquals(0,totals.getAvailable());
  Assert.assertEquals(0,totals.getLeased());
  Assert.assertEquals(1,totals.getPending());
  pool.requestTimeout(sessionRequest);
  Assert.assertTrue(future.isDone());
  Assert.assertFalse(future.isCancelled());
  try {
    future.get();
    Assert.fail("ExecutionException should have been thrown");
  }
 catch (  final ExecutionException ex) {
    Assert.assertTrue(ex.getCause() instanceof ConnectException);
    Assert.assertEquals("Timeout connecting to [/127.0.0.1:80]",ex.getCause().getMessage());
  }
  totals=pool.getTotalStats();
  Assert.assertEquals(0,totals.getAvailable());
  Assert.assertEquals(0,totals.getLeased());
  Assert.assertEquals(0,totals.getPending());
}
