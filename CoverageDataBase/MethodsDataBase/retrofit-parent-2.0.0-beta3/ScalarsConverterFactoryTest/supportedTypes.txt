@Test public void supportedTypes() throws IOException, InterruptedException {
  RecordedRequest request;
  server.enqueue(new MockResponse());
  service.stringObject("string").execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("6");
  assertThat(request.getBody().readUtf8()).isEqualTo("string");
  server.enqueue(new MockResponse());
  service.booleanPrimitive(true).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("4");
  assertThat(request.getBody().readUtf8()).isEqualTo("true");
  server.enqueue(new MockResponse());
  service.booleanObject(false).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("5");
  assertThat(request.getBody().readUtf8()).isEqualTo("false");
  server.enqueue(new MockResponse());
  service.bytePrimitive((byte)0).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("0");
  server.enqueue(new MockResponse());
  service.byteObject((byte)1).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("1");
  server.enqueue(new MockResponse());
  service.charPrimitive('a').execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("a");
  server.enqueue(new MockResponse());
  service.charObject('b').execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("b");
  server.enqueue(new MockResponse());
  service.doublePrimitive(2.2d).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("3");
  assertThat(request.getBody().readUtf8()).isEqualTo("2.2");
  server.enqueue(new MockResponse());
  service.doubleObject(3.3d).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("3");
  assertThat(request.getBody().readUtf8()).isEqualTo("3.3");
  server.enqueue(new MockResponse());
  service.floatPrimitive(4.4f).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("3");
  assertThat(request.getBody().readUtf8()).isEqualTo("4.4");
  server.enqueue(new MockResponse());
  service.floatObject(5.5f).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("3");
  assertThat(request.getBody().readUtf8()).isEqualTo("5.5");
  server.enqueue(new MockResponse());
  service.integerPrimitive(6).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("6");
  server.enqueue(new MockResponse());
  service.integerObject(7).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("7");
  server.enqueue(new MockResponse());
  service.longPrimitive(8L).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("8");
  server.enqueue(new MockResponse());
  service.longObject(9L).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("1");
  assertThat(request.getBody().readUtf8()).isEqualTo("9");
  server.enqueue(new MockResponse());
  service.shortPrimitive((short)10).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("2");
  assertThat(request.getBody().readUtf8()).isEqualTo("10");
  server.enqueue(new MockResponse());
  service.shortObject((short)11).execute();
  request=server.takeRequest();
  assertThat(request.getHeader("Content-Type")).isEqualTo("text/plain; charset=UTF-8");
  assertThat(request.getHeader("Content-Length")).isEqualTo("2");
  assertThat(request.getBody().readUtf8()).isEqualTo("11");
}
