@Test public void conversionProblemIncomingMaskedByConverterIsUnwrapped() throws IOException {
  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(new Interceptor(){
    @Override public okhttp3.Response intercept(    Chain chain) throws IOException {
      okhttp3.Response response=chain.proceed(chain.request());
      ResponseBody body=response.body();
      BufferedSource source=Okio.buffer(new ForwardingSource(body.source()){
        @Override public long read(        Buffer sink,        long byteCount) throws IOException {
          throw new IOException("cause");
        }
      }
);
      body=ResponseBody.create(body.contentType(),body.contentLength(),source);
      return response.newBuilder().body(body).build();
    }
  }
).build();
  Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).client(client).addConverterFactory(new ToStringConverterFactory(){
    @Override public Converter<ResponseBody,?> responseBodyConverter(    Type type,    Annotation[] annotations,    Retrofit retrofit){
      return new Converter<ResponseBody,String>(){
        @Override public String convert(        ResponseBody value) throws IOException {
          try {
            return value.string();
          }
 catch (          IOException e) {
            throw new RuntimeException("wrapper",e);
          }
        }
      }
;
    }
  }
).build();
  Service example=retrofit.create(Service.class);
  server.enqueue(new MockResponse().setBody("Hi"));
  Call<String> call=example.getString();
  try {
    call.execute();
    fail();
  }
 catch (  IOException e) {
    assertThat(e).hasMessage("cause");
  }
}
