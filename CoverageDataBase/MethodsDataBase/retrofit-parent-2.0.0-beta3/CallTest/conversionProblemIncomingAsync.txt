@Test public void conversionProblemIncomingAsync() throws InterruptedException {
  Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).addConverterFactory(new ToStringConverterFactory(){
    @Override public Converter<ResponseBody,?> responseBodyConverter(    Type type,    Annotation[] annotations,    Retrofit retrofit){
      return new Converter<ResponseBody,String>(){
        @Override public String convert(        ResponseBody value) throws IOException {
          throw new UnsupportedOperationException("I am broken!");
        }
      }
;
    }
  }
).build();
  Service example=retrofit.create(Service.class);
  server.enqueue(new MockResponse().setBody("Hi"));
  final AtomicReference<Throwable> failureRef=new AtomicReference<>();
  final CountDownLatch latch=new CountDownLatch(1);
  example.postString("Hi").enqueue(new Callback<String>(){
    @Override public void onResponse(    Response<String> response){
      throw new AssertionError();
    }
    @Override public void onFailure(    Throwable t){
      failureRef.set(t);
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(2,SECONDS));
  assertThat(failureRef.get()).isInstanceOf(UnsupportedOperationException.class).hasMessage("I am broken!");
}
