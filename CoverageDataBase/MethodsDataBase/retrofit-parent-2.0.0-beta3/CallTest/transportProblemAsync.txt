@Test public void transportProblemAsync() throws InterruptedException {
  Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).addConverterFactory(new ToStringConverterFactory()).build();
  Service example=retrofit.create(Service.class);
  server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));
  final AtomicReference<Throwable> failureRef=new AtomicReference<>();
  final CountDownLatch latch=new CountDownLatch(1);
  example.getString().enqueue(new Callback<String>(){
    @Override public void onResponse(    Response<String> response){
      throw new AssertionError();
    }
    @Override public void onFailure(    Throwable t){
      failureRef.set(t);
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(2,SECONDS));
  Throwable failure=failureRef.get();
  assertThat(failure).isInstanceOf(IOException.class);
}
