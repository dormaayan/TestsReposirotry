@Test public void asyncFailureTriggersFailureAfterDelay() throws InterruptedException {
  behavior.setDelay(100,MILLISECONDS);
  behavior.setVariancePercent(0);
  behavior.setFailurePercent(100);
  Call<String> call=service.response();
  final long startNanos=System.nanoTime();
  final AtomicLong tookMs=new AtomicLong();
  final AtomicReference<Throwable> failureRef=new AtomicReference<>();
  final CountDownLatch latch=new CountDownLatch(1);
  call.enqueue(new Callback<String>(){
    @Override public void onResponse(    Response<String> response){
      throw new AssertionError();
    }
    @Override public void onFailure(    Throwable t){
      tookMs.set(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos));
      failureRef.set(t);
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(1,SECONDS));
  assertThat(failureRef.get()).isSameAs(behavior.failureException());
  assertThat(tookMs.get()).isGreaterThanOrEqualTo(100);
}
