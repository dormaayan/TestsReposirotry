@Test public void callbackExecutorUsedForFailure() throws InterruptedException {
  Executor executor=spy(new Executor(){
    @Override public void execute(    Runnable command){
      command.run();
    }
  }
);
  Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).callbackExecutor(executor).build();
  CallMethod service=retrofit.create(CallMethod.class);
  Call<ResponseBody> call=service.getResponseBody();
  server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AT_START));
  final CountDownLatch latch=new CountDownLatch(1);
  call.enqueue(new Callback<ResponseBody>(){
    @Override public void onResponse(    Response<ResponseBody> response){
      throw new AssertionError();
    }
    @Override public void onFailure(    Throwable t){
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(2,TimeUnit.SECONDS));
  verify(executor).execute(any(Runnable.class));
  verifyNoMoreInteractions(executor);
}
