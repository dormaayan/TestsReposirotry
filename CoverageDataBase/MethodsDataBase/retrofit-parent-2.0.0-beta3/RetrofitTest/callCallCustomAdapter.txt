@Test public void callCallCustomAdapter(){
  final AtomicBoolean factoryCalled=new AtomicBoolean();
  final AtomicBoolean adapterCalled=new AtomicBoolean();
class MyCallAdapterFactory implements CallAdapter.Factory {
    @Override public CallAdapter<?> get(    final Type returnType,    Annotation[] annotations,    Retrofit retrofit){
      factoryCalled.set(true);
      if (Utils.getRawType(returnType) != Call.class) {
        return null;
      }
      return new CallAdapter<Call<?>>(){
        @Override public Type responseType(){
          return Utils.getParameterUpperBound(0,(ParameterizedType)returnType);
        }
        @Override public <R>Call<R> adapt(        Call<R> call){
          adapterCalled.set(true);
          return call;
        }
      }
;
    }
  }
  Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).addCallAdapterFactory(new MyCallAdapterFactory()).build();
  CallMethod example=retrofit.create(CallMethod.class);
  assertThat(example.getResponseBody()).isNotNull();
  assertThat(factoryCalled.get()).isTrue();
  assertThat(adapterCalled.get()).isTrue();
}
