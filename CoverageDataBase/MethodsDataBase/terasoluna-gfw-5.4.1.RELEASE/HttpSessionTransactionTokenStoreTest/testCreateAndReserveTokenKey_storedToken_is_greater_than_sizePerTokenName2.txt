/** 
 * create a new Token key (stored token is as it is the same as sizePerTokenName)
 */
@Test public void testCreateAndReserveTokenKey_storedToken_is_greater_than_sizePerTokenName2() throws InterruptedException {
  store=new HttpSessionTransactionTokenStore(4,4);
  HttpSession session=new MockHttpSession();
  request.setSession(session);
  TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
  store.store(tokenA);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
  store.store(tokenB);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
  store.store(tokenC);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken tokenD=new TransactionToken("tokenName","tokenKeyD","tokenValueD");
  store.store(tokenD);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken tokenE=new TransactionToken("tokenName","tokenKeyE","tokenValueE");
  store.store(tokenE);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken tokenF=new TransactionToken("tokenName","tokenKeyF","tokenValueF");
  store.store(tokenF);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
  store.store(token1);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
  store.store(token2);
  TimeUnit.MILLISECONDS.sleep(1);
  TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
  store.store(token3);
  String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
  Enumeration<String> enumeration=session.getAttributeNames();
  while (enumeration.hasMoreElements()) {
    System.out.println(enumeration.nextElement());
  }
  assertNotNull(actual);
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(nullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(nullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(nullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenD)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenE)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenF)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
}
