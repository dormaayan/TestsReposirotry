/** 
 * create a new Token key (stored token is less than sizePerTokenName)
 */
@Test public void testCreateAndReserveTokenKey_storedToken_isLessThan_sizePerTokenName(){
  store=new HttpSessionTransactionTokenStore(5);
  HttpSession session=new MockHttpSession();
  request.setSession(session);
  TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
  store.store(tokenA);
  TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
  store.store(tokenB);
  TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
  store.store(tokenC);
  TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
  store.store(token1);
  TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
  store.store(token2);
  TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
  store.store(token3);
  String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
  assertNotNull(actual);
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
  assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
}
