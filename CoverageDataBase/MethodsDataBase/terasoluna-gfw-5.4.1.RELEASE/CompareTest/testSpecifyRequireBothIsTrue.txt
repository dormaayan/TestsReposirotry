/** 
 * specify requireBoth. expected valid if input left and right are both null.
 * @throws Throwable
 */
@Test public void testSpecifyRequireBothIsTrue() throws Throwable {
{
    form.setLeft(100);
    form.setRight(100);
    violations=validator.validate(form,RequireBoth.class);
    assertThat(violations.size(),is(0));
  }
{
    form.setLeft(100);
    form.setRight(null);
    violations=validator.validate(form,RequireBoth.class);
    assertThat(violations.size(),is(1));
    for (    ConstraintViolation<CompareTestForm> violation : violations) {
      assertThat(violation.getMessage(),is(String.format(MESSAGE_VALIDATION_ERROR,"left","right")));
      for (      javax.validation.Path.Node node : violation.getPropertyPath()) {
        assertThat(node,instanceOf(PropertyNode.class));
        assertThat(node.getName(),is("left"));
      }
    }
  }
{
    form.setLeft(null);
    form.setRight(100);
    violations=validator.validate(form,RequireBoth.class);
    assertThat(violations.size(),is(1));
    for (    ConstraintViolation<CompareTestForm> violation : violations) {
      assertThat(violation.getMessage(),is(String.format(MESSAGE_VALIDATION_ERROR,"left","right")));
      for (      javax.validation.Path.Node node : violation.getPropertyPath()) {
        assertThat(node,instanceOf(PropertyNode.class));
        assertThat(node.getName(),is("left"));
      }
    }
  }
{
    form.setLeft(null);
    form.setRight(null);
    violations=validator.validate(form,RequireBoth.class);
    assertThat(violations.size(),is(0));
  }
}
