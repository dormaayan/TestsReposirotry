@Test public void testDoResolveException_super_return_notnull() throws Exception {
  ResultMessages resultMessages=ResultMessages.error().add("code001");
  BusinessException occurException=new BusinessException(resultMessages);
  Locale locale=Locale.ITALIAN;
  mockRequest.addPreferredLocale(locale);
  FlashMap flashMap=new FlashMap();
  mockRequest.setAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE,flashMap);
  testTarget.setDefaultErrorView("defaultErrorView");
  testTarget.setDefaultStatusCode(444);
  SimpleMappingExceptionCodeResolver exceptionCodeResolver=new SimpleMappingExceptionCodeResolver();
  exceptionCodeResolver.setDefaultExceptionCode("defaultExceptionCode");
  testTarget.setExceptionCodeResolver(exceptionCodeResolver);
  ModelAndView actualModleAndView=testTarget.doResolveException(mockRequest,mockResponse,null,occurException);
  assertThat(mockResponse.getStatus(),is(444));
  assertThat((Integer)mockRequest.getAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE),is(444));
  assertSame(occurException,actualModleAndView.getModel().get(SimpleMappingExceptionResolver.DEFAULT_EXCEPTION_ATTRIBUTE));
  assertThat(mockRequest.getAttribute("exceptionCode").toString(),is("defaultExceptionCode"));
  assertThat(mockResponse.getHeader("X-Exception-Code"),is("defaultExceptionCode"));
  assertSame(resultMessages,flashMap.get(ResultMessages.DEFAULT_MESSAGES_ATTRIBUTE_NAME));
}
