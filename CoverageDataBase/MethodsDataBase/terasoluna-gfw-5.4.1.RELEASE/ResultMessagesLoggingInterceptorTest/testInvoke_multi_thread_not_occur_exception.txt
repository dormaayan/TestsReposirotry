/** 
 * [invoke] Case of not occur exception in a multit-hreaded environment. <p> [Expected Result] <ol> <li>method's return value is expected.</li> <li>log is not output.</li> </ol> </p>
 */
@Test public void testInvoke_multi_thread_not_occur_exception() throws Throwable {
  final TestFacade facade=getApplicationContext().getBean(TestFacade.class);
  final Map<Thread,String> actualMessage=new HashMap<Thread,String>();
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      facade.setSleepTime(Long.valueOf(2));
      actualMessage.put(Thread.currentThread(),facade.getMessage());
    }
  }
);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      facade.setSleepTime(Long.valueOf(0));
      actualMessage.put(Thread.currentThread(),facade.getMessage());
    }
  }
);
  thread1.start();
  TimeUnit.SECONDS.sleep(1);
  thread2.start();
  thread1.join();
  thread2.join();
  String expectedBaseMessage=getApplicationContext().getBean(TestRepository.class).toString() + ":";
  assertThat(actualMessage.get(thread1),is(expectedBaseMessage + thread1.getId()));
  assertThat(actualMessage.get(thread2),is(expectedBaseMessage + thread2.getId()));
  verify(mockExceptionLogger,never()).warn((Exception)any());
}
