/** 
 * [invoke] Case of occur BusinessException on both thread in a multit-hreaded environment. <p> [Expected Result] <ol> <li>throws BusinessException on both thread.</li> <li>BusinessException log is output & not duplicate on both thread.</li> <li>unnecessary log is not output.</li> </ol> </p>
 */
@Test public void testInvoke_multi_thread_occur_businessexception_both_thread() throws Throwable {
  final TestFacade facade=getApplicationContext().getBean(TestFacade.class);
  final TestService service=getApplicationContext().getBean(TestService.class);
  final Map<Thread,BusinessException> actualBusinessException=new HashMap<Thread,BusinessException>();
  final BusinessException occurExceptionForThread1=new BusinessException(ResultMessages.error().add("e.cm.thread1"));
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      service.setResultMessagesNotificationException(occurExceptionForThread1);
      facade.setSleepTime(Long.valueOf(2));
      try {
        facade.getMessage();
      }
 catch (      BusinessException e) {
        actualBusinessException.put(Thread.currentThread(),e);
      }
    }
  }
);
  final BusinessException occurExceptionForThread2=new BusinessException(ResultMessages.error().add("e.cm.thread2"));
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      service.setResultMessagesNotificationException(occurExceptionForThread2);
      facade.setSleepTime(Long.valueOf(0));
      try {
        facade.getMessage();
      }
 catch (      BusinessException e) {
        actualBusinessException.put(Thread.currentThread(),e);
      }
    }
  }
);
  thread1.start();
  TimeUnit.SECONDS.sleep(1);
  thread2.start();
  thread1.join();
  thread2.join();
  assertThat(actualBusinessException.get(thread1),is(occurExceptionForThread1));
  assertThat(actualBusinessException.get(thread2),is(occurExceptionForThread2));
  verify(mockExceptionLogger,times(1)).warn(occurExceptionForThread1);
  verify(mockExceptionLogger,times(1)).warn(occurExceptionForThread2);
  verify(mockExceptionLogger,times(2)).warn((Exception)anyObject());
}
