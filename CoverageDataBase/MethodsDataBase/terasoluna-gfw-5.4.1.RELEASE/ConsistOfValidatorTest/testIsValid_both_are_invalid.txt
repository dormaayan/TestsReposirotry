@Test public void testIsValid_both_are_invalid() throws Exception {
  Name_Simple name=new Name_Simple("abc","ghi");
  Validator validator=Validation.buildDefaultValidatorFactory().getValidator();
  Set<ConstraintViolation<Name_Simple>> violations=validator.validate(name);
  assertThat(violations,is(notNullValue()));
  assertThat(violations.size(),is(2));
  Iterator<ConstraintViolation<Name_Simple>> iterator=violations.iterator();
  List<ConstraintViolation<Name_Simple>> lst=new ArrayList<ConstraintViolation<Name_Simple>>(2);
  lst.add(iterator.next());
  lst.add(iterator.next());
  Collections.sort(lst,new Comparator<ConstraintViolation<Name_Simple>>(){
    @Override public int compare(    ConstraintViolation<Name_Simple> o1,    ConstraintViolation<Name_Simple> o2){
      return o1.getPropertyPath().toString().compareTo(o2.getPropertyPath().toString());
    }
  }
);
  assertThat(lst.get(0).getPropertyPath().toString(),is("firstName"));
  assertThat(lst.get(0).getMessage(),is("{org.terasoluna.gfw.common.codepoints.ConsistOf.message}"));
  assertThat(lst.get(1).getPropertyPath().toString(),is("lastName"));
  assertThat(lst.get(1).getMessage(),is("{org.terasoluna.gfw.common.codepoints.ConsistOf.message}"));
}
