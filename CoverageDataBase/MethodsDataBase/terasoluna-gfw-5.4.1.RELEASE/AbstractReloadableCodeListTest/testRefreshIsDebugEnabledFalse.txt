@Test public void testRefreshIsDebugEnabledFalse() throws Exception {
  LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
  Map<String,String> mapExpectedFirstFetch=new HashMap<String,String>();
  mapExpectedFirstFetch.put("001","firstRetrieve001");
  mapExpectedFirstFetch.put("002","firstRetrieve002");
  mapExpectedFirstFetch.put("003","firstRetrieve003");
  Map<String,String> mapExpectedSecondFetch=new HashMap<String,String>();
  mapExpectedSecondFetch.put("001","secondRetrieve001");
  mapExpectedSecondFetch.put("002","secondRetrieve002");
  mapExpectedSecondFetch.put("003","secondRetrieve003");
  AbstractReloadableCodeList reloadableCodeList=new ExtendedReloadableCodelist();
  Map<String,String> mapResult1=reloadableCodeList.asMap();
  assertThat(mapResult1.size(),is(mapExpectedFirstFetch.size()));
  for (  String key : mapResult1.keySet()) {
    assertThat(mapResult1.get(key),is(mapExpectedFirstFetch.get(key)));
  }
  assertThat(logger.isDebugEnabled(),is(false));
  reloadableCodeList.afterPropertiesSet();
  Map<String,String> mapResult2=reloadableCodeList.asMap();
  assertThat(mapResult2.size(),is(mapExpectedSecondFetch.size()));
  for (  String key : mapResult2.keySet()) {
    assertThat(mapResult2.get(key),is(mapExpectedSecondFetch.get(key)));
  }
  LogLevelChangeUtil.resetLogLevel();
}
