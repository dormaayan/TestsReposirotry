@Test public void test_invalidMultipleExistInCodeList(){
{
    Order order=new Order("1");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(2));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("2");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(1));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("4");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(1));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("5");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(2));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("7");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(2));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("8");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(1));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("9");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(1));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
  }
{
    Order order=new Order("10");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(1));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("11");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(2));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
{
    Order order=new Order("18");
    Set<ConstraintViolation<Order>> result=validator.validate(order);
    assertThat(result.size(),is(2));
    SortedSet<String> messages=new TreeSet<String>();
    for (    ConstraintViolation<Order> violation : result) {
      messages.add(violation.getMessage());
    }
    Iterator<String> iterator=messages.iterator();
    assertThat(iterator.next(),is("number must be even"));
    assertThat(iterator.next(),is("number must be multiples of 3"));
  }
}
