@Test public void appendToTrends_AppendsDataToTrends(){
  final String buildNumber="1";
  final int failedFeature=1;
  final int totalFeature=2;
  final int failedScenario=3;
  final int totalScenario=4;
  final int failedStep=5;
  final int totalStep=6;
  configuration=new Configuration(null,null);
  configuration.setBuildNumber(buildNumber);
  final Reportable reportable=new OverviewReport(){
    @Override public int getFailedFeatures(){
      return failedFeature;
    }
    @Override public int getFeatures(){
      return totalFeature;
    }
    @Override public int getFailedScenarios(){
      return failedScenario;
    }
    @Override public int getScenarios(){
      return totalScenario;
    }
    @Override public int getFailedSteps(){
      return failedStep;
    }
    @Override public int getSteps(){
      return totalStep;
    }
  }
;
  ReportResult reportResult=new ReportResult(Collections.<Feature>emptyList(),configuration){
    @Override public Reportable getFeatureReport(){
      return reportable;
    }
  }
;
  ReportBuilder reportBuilder=new ReportBuilder(null,configuration);
  Deencapsulation.setField(reportBuilder,"reportResult",reportResult);
  Trends trends=new Trends();
  Deencapsulation.invoke(reportBuilder,"appendToTrends",trends,reportable);
  assertThat(trends.getBuildNumbers()).containsExactly(buildNumber);
  assertThat(trends.getFailedFeatures()).containsExactly(failedFeature);
  assertThat(trends.getTotalFeatures()).containsExactly(totalFeature);
  assertThat(trends.getFailedScenarios()).containsExactly(failedScenario);
  assertThat(trends.getTotalScenarios()).containsExactly(totalScenario);
  assertThat(trends.getFailedSteps()).containsExactly(failedStep);
  assertThat(trends.getTotalSteps()).containsExactly(totalStep);
}
