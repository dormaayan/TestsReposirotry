/** 
 * We can do that using tail recursion as well. Again, the anonymous Function implemenation holds the "continuation" state.
 */
@Test public void testTailRecursive2(){
  chopTest(new BaseBinaryChop(){
    public int find(    final Object seeking,    final List list){
      return ((Number)new RecursiveEvaluation(new Function(){
        public Object evaluate(){
          if (sublist.isEmpty()) {
            return BaseBinaryChop.NEGATIVE_ONE;
          }
          if (sublist.size() == 1) {
            return (BaseBinaryChop.equals(sublist,0,seeking) ? new Integer(offset) : BaseBinaryChop.NEGATIVE_ONE);
          }
 else {
            int mid=sublist.size() / 2;
            if (greaterThan(sublist,mid,seeking)) {
              sublist=sublist.subList(0,mid);
            }
 else {
              sublist=sublist.subList(mid,sublist.size());
              offset+=mid;
            }
            return this;
          }
        }
        int offset=0;
        List sublist=list;
      }
).evaluate()).intValue();
    }
  }
);
}
