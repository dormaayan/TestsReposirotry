@Test public void testIterativeWithInvariants(){
  chopTest(new BaseBinaryChop(){
    public int find(    final Object seeking,    final List list){
      Loop loop=new Loop(){
        int high=list.size();
        int low=0;
        /** 
 * Our terminating condition. 
 */
        public boolean test(){
          return (high - low) <= 1;
        }
        /** 
 * Our loop body. 
 */
        public void run(){
          int mid=(high + low) / 2;
          if (greaterThan(list,mid,seeking)) {
            high=mid;
          }
 else {
            low=mid;
          }
        }
        /** 
 * A way of returning the result at the end of the loop.
 */
        public Object evaluate(){
          return new Integer(list.isEmpty() ? -1 : (BaseBinaryChop.equals(list,low,seeking) ? low : -1));
        }
      }
;
      new UntilDo(loop,loop).run();
      return ((Number)loop.evaluate()).intValue();
    }
  }
);
}
