/** 
 * A recursive version of that implementation uses method parameters to track the upper and lower bounds.
 */
@Test public void testRecursive(){
  chopTest(new BaseBinaryChop(){
    public int find(    Object seeking,    List list){
      return find(seeking,list,0,list.size());
    }
    private int find(    Object seeking,    List list,    int low,    int high){
      if (high - low > 1) {
        int mid=(high + low) / 2;
        if (greaterThan(list,mid,seeking)) {
          return find(seeking,list,low,mid);
        }
 else {
          return find(seeking,list,mid,high);
        }
      }
 else {
        return list.isEmpty() ? -1 : (equals(list,low,seeking) ? low : -1);
      }
    }
  }
);
}
