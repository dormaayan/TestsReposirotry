/** 
 * Here's a basic iterative approach. We set the lower or upper bound to the midpoint until there's only one element between the lower and upper bound.  Then the lower bound is where the element would be found if it existed in the list. We add an additional comparision at the end so that we can return -1 if the element is not yet in the list.
 */
@Test public void testIterative(){
  chopTest(new BaseBinaryChop(){
    public int find(    Object seeking,    List list){
      int high=list.size();
      int low=0;
      while (high - low > 1) {
        int mid=(high + low) / 2;
        if (greaterThan(list,mid,seeking)) {
          high=mid;
        }
 else {
          low=mid;
        }
      }
      return list.isEmpty() ? -1 : (equals(list,low,seeking) ? low : -1);
    }
  }
);
}
