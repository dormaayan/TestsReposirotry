@Test public void testRangeSubSlicesCounterQuery(){
  String cf="SuperCounter1";
  TestCleanupDescriptor cleanup=insertSuperCountColumns(cf,4,"testRangeSubSlicesCounterQuery",3,"testRangeSubSlicesCounterQuery");
  RangeSubSlicesCounterQuery<String,String,String> q=createRangeSubSlicesCounterQuery(ko,se,se,se);
  q.setColumnFamily(cf);
  q.setKeys("testRangeSubSlicesCounterQuery2","testRangeSubSlicesCounterQuery3");
  q.setSuperColumn("testRangeSubSlicesCounterQuery1");
  q.setColumnNames("c021","c111");
  QueryResult<OrderedCounterRows<String,String>> r=q.execute();
  assertNotNull(r);
  OrderedCounterRows<String,String> rows=r.get();
  assertNotNull(rows);
  assertEquals(2,rows.getCount());
  CounterRow<String,String> row=rows.getList().get(0);
  assertNotNull(row);
  assertEquals("testRangeSubSlicesCounterQuery2",row.getKey());
  CounterSlice<String> slice=row.getColumnSlice();
  assertNotNull(slice);
  assertEquals(Long.valueOf(3),slice.getColumnByName("c021").getValue());
  assertEquals(Long.valueOf(3),slice.getColumnByName("c111").getValue());
  assertNull(slice.getColumnByName("c033"));
  deleteColumns(cleanup);
}
