@Test public void testRangeSuperSlicesQuery_order(){
  String cf="Super1";
  TestCleanupDescriptor cleanup=insertSuperColumns(cf,4,"testRangeSuperSlicesQuery",3,"testRangeSuperSlicesQuery");
  RangeSuperSlicesQuery<String,String,String,String> q=createRangeSuperSlicesQuery(ko,se,se,se,se);
  q.setColumnFamily(cf);
  q.setKeys("testRangeSuperSlicesQuery0","testRangeSuperSlicesQuery1");
  q.setColumnNames("testRangeSuperSlicesQuery1","testRangeSuperSlicesQuery2");
{
    QueryResult<OrderedSuperRows<String,String,String,String>> r=q.execute();
    OrderedSuperRows<String,String,String,String> rows=r.get();
    assertEquals(2,rows.getCount());
    int i=0;
    Iterator<SuperRow<String,String,String,String>> iterator=rows.getList().iterator();
    while (iterator.hasNext()) {
      SuperRow<String,String,String,String> row=iterator.next();
      assertNotNull(row);
      assertEquals("testRangeSuperSlicesQuery" + i,row.getKey());
      i++;
    }
  }
{
    QueryResult<OrderedSuperRows<String,String,String,String>> r=q.execute();
    OrderedSuperRows<String,String,String,String> rows=r.get();
    assertEquals(2,rows.getCount());
    int i=0;
    Iterator<SuperRow<String,String,String,String>> iterator=rows.iterator();
    while (iterator.hasNext()) {
      SuperRow<String,String,String,String> row=iterator.next();
      assertNotNull(row);
      assertEquals("testRangeSuperSlicesQuery" + i,row.getKey());
      i++;
    }
  }
  deleteColumns(cleanup);
}
