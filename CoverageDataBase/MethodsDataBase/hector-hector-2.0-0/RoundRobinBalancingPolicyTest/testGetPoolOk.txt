@Test public void testGetPoolOk(){
  roundRobinBalancingPolicy=new RoundRobinBalancingPolicy();
  assertEquals(poolWith5Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith7Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith10Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith5Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith7Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith10Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith5Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith7Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  assertEquals(poolWith10Active.getNumActive(),roundRobinBalancingPolicy.getPool(pools,null).getNumActive());
  for (int x=0; x < (256 * 256); x++) {
    assert roundRobinBalancingPolicy.getPool(pools,null).getNumActive() >= 5;
  }
}
