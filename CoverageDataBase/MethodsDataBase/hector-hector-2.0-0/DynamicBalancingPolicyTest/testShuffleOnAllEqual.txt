@Test public void testShuffleOnAllEqual(){
  DynamicLoadBalancingPolicy dbp=new DynamicLoadBalancingPolicy();
  LatencyAwareHClientPool poolWithScore2_1=Mockito.mock(LatencyAwareHClientPool.class);
  Mockito.when(poolWithScore2_1.score()).thenReturn(2.0);
  Mockito.when(poolWithScore2_1.getNumActive()).thenReturn(5);
  Mockito.when(poolWithScore2_1.getCassandraHost()).thenReturn(new CassandraHost("127.0.0.4:9163"));
  LatencyAwareHClientPool poolWithScore2_2=Mockito.mock(LatencyAwareHClientPool.class);
  Mockito.when(poolWithScore2_2.score()).thenReturn(2.0);
  Mockito.when(poolWithScore2_2.getNumActive()).thenReturn(5);
  Mockito.when(poolWithScore2_2.getCassandraHost()).thenReturn(new CassandraHost("127.0.0.5:9164"));
  LatencyAwareHClientPool poolWithScore2_3=Mockito.mock(LatencyAwareHClientPool.class);
  Mockito.when(poolWithScore2_3.score()).thenReturn(2.0);
  Mockito.when(poolWithScore2_3.getNumActive()).thenReturn(5);
  Mockito.when(poolWithScore2_3.getCassandraHost()).thenReturn(new CassandraHost("127.0.0.6:9165"));
  List<HClientPool> pool=new ArrayList<HClientPool>();
  pool.add(poolWithScore2_1);
  pool.add(poolWithScore2_2);
  pool.add(poolWithScore2_3);
  dbp.add(poolWithScore2_1);
  dbp.add(poolWithScore2_2);
  dbp.add(poolWithScore2_3);
  dbp.updateScores();
  Set<CassandraHost> foundHosts=new HashSet<CassandraHost>();
  for (int i=0; i < 50; i++) {
    HClientPool foundPool=dbp.getPool(pool,null);
    CassandraHost p=foundPool.getCassandraHost();
    foundHosts.add(p);
    assert 5 == foundPool.getNumActive();
  }
  assertEquals(3,foundHosts.size());
}
