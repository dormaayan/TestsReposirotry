@Test public void should_return_most_relevant(){
  Comparator<I3> i3Comparator=newComparator();
  Comparator<I4> i4Comparator=newComparator();
  Comparator<I1> i1Comparator=newComparator();
  Comparator<I2> i2Comparator=newComparator();
  Comparator<Foo> fooComparator=newComparator();
  typeComparators.put(I3.class,i3Comparator);
  typeComparators.put(I4.class,i4Comparator);
  typeComparators.put(I1.class,i1Comparator);
  typeComparators.put(I2.class,i2Comparator);
  typeComparators.put(Foo.class,fooComparator);
  Comparator<?> foo=typeComparators.get(Foo.class);
  Comparator<?> bar=typeComparators.get(Bar.class);
  Comparator<?> i3=typeComparators.get(I3.class);
  Comparator<?> i4=typeComparators.get(I4.class);
  Comparator<?> i5=typeComparators.get(I5.class);
  assertThat(foo).isEqualTo(fooComparator);
  assertThat(bar).isEqualTo(i3Comparator);
  assertThat(i3).isEqualTo(i3Comparator);
  assertThat(i4).isEqualTo(i4Comparator);
  assertThat(i5).isEqualTo(i1Comparator);
}
