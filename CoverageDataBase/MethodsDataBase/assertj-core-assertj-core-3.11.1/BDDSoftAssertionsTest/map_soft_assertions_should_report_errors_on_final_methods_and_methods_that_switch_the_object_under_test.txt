@SuppressWarnings("unchecked") @Test public void map_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){
  Map<String,String> map=mapOf(entry("a","1"),entry("b","2"),entry("c","3"));
  softly.then(map).contains(entry("abc","ABC"),entry("def","DEF")).isEmpty();
  softly.then(map).containsAnyOf(entry("gh","GH"),entry("ij","IJ"));
  softly.then(map).containsExactly(entry("kl","KL"),entry("mn","MN"));
  softly.then(map).containsKeys("K1","K2");
  softly.then(map).containsOnly(entry("op","OP"),entry("qr","QR"));
  softly.then(map).containsOnlyKeys("K3","K4");
  softly.then(map).containsValues("V1","V2");
  softly.then(map).doesNotContain(entry("a","1"),entry("abc","ABC"));
  softly.then(map).doesNotContainKeys("a","b");
  softly.then(map).extracting("a","b").contains("456");
  softly.then(iterableMap).flatExtracting("name","job","city","rank").contains("Unexpected","Builder","Dover","Boston","Paris",1,2,3);
  List<Throwable> errors=softly.errorsCollected();
  assertThat(errors).hasSize(12);
  assertThat(errors.get(0)).hasMessageContaining("MapEntry[key=\"abc\", value=\"ABC\"]");
  assertThat(errors.get(1)).hasMessageContaining("empty");
  assertThat(errors.get(2)).hasMessageContaining("gh").hasMessageContaining("IJ");
  assertThat(errors.get(3)).hasMessageContaining("\"a\"=\"1\"");
  assertThat(errors.get(4)).hasMessageContaining("K2");
  assertThat(errors.get(5)).hasMessageContaining("OP");
  assertThat(errors.get(6)).hasMessageContaining("K4");
  assertThat(errors.get(7)).hasMessageContaining("V2");
  assertThat(errors.get(8)).hasMessageContaining("ABC");
  assertThat(errors.get(9)).hasMessageContaining("b");
  assertThat(errors.get(10)).hasMessageContaining("456");
  assertThat(errors.get(11)).hasMessageContaining("Unexpected");
}
