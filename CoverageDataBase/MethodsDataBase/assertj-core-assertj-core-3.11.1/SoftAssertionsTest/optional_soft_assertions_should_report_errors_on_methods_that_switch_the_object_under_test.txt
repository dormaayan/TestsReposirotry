@Test public void optional_soft_assertions_should_report_errors_on_methods_that_switch_the_object_under_test(){
  Optional<String> optional=Optional.of("Yoda");
  Function<String,Optional<String>> upperCaseOptional=s -> s == null ? Optional.empty() : Optional.of(s.toUpperCase());
  softly.assertThat(optional).as("map(String::length)").overridingErrorMessage("error message").map(String::length).hasValue(4).hasValue(777);
  softly.assertThat(optional).as("flatMap(upperCaseOptional)").flatMap(upperCaseOptional).contains("YODA").contains("yoda").as("map(String::length) after flatMap(upperCaseOptional)").map(String::length).hasValue(4).hasValue(888);
  List<Throwable> errorsCollected=softly.errorsCollected();
  assertThat(errorsCollected).hasSize(3);
  assertThat(errorsCollected.get(0)).hasMessage("[map(String::length)] error message");
  assertThat(errorsCollected.get(1)).hasMessageContaining("flatMap(upperCaseOptional)").hasMessageContaining("yoda");
  assertThat(errorsCollected.get(2)).hasMessageContaining("map(String::length) after flatMap(upperCaseOptional)").hasMessageContaining("888");
}
