@SuppressWarnings("unchecked") @Test public void iterable_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){
  Iterable<Name> names=asList(name("John","Doe"),name("Jane","Doe"));
  Iterable<CartoonCharacter> characters=asList(homer,fred);
  softly.assertThat(names).as("extracting(throwingFirstNameExtractor)").overridingErrorMessage("error message").extracting(throwingFirstNameExtractor).contains("gandalf").contains("frodo");
  softly.assertThat(names).as("extracting(\"last\")").overridingErrorMessage("error message").extracting("last").containsExactly("foo","bar");
  softly.assertThat(characters).as("using flatExtracting on Iterable").overridingErrorMessage("error message").flatExtracting(childrenExtractor).hasSize(1).containsAnyOf(homer,fred);
  softly.assertThat(characters).as("using flatExtracting on Iterable with exception").overridingErrorMessage("error message").flatExtracting(CartoonCharacter::getChildrenWithException).containsExactlyInAnyOrder(homer,fred);
  softly.assertThat(characters).containsOnly(bart);
  softly.assertThat(characters).containsOnlyOnce(maggie,bart);
  softly.assertThat(characters).containsSequence(homer,bart);
  softly.assertThat(characters).containsSubsequence(homer,maggie);
  softly.assertThat(characters).doesNotContain(homer,maggie);
  softly.assertThat(characters).doesNotContainSequence(fred);
  softly.assertThat(characters).doesNotContainSubsequence(homer,fred);
  softly.assertThat(characters).isSubsetOf(homer,bart);
  softly.assertThat(characters).startsWith(fred);
  softly.assertThat(characters).endsWith(bart);
  softly.assertThat(names).overridingErrorMessage("error message").as("extracting(firstNameFunction, lastNameFunction)").extracting(firstNameFunction,lastNameFunction).contains(tuple("John","Doe")).contains(tuple("Frodo","Baggins"));
  softly.assertThat(names).overridingErrorMessage("error message").as("extracting(\"first\", \"last\")").extracting("first","last").contains(tuple("John","Doe")).contains(tuple("Bilbo","Baggins"));
  softly.assertThat(names).overridingErrorMessage("error message").as("extracting(firstNameExtractor)").extracting(firstNameExtractor).contains("John").contains("sam");
  softly.assertThat(names).overridingErrorMessage("error message").as("extracting(\"first\", String.class)").extracting("first",String.class).contains("John").contains("Aragorn");
  softly.assertThat(names).as("filteredOn(name -> name.first.startsWith(\"Jo\"))").overridingErrorMessage("error message").filteredOn(name -> name.first.startsWith("Jo")).hasSize(123);
  softly.assertThat(names).as("name.first.startsWith(\"Jo\")").overridingErrorMessage("error message").filteredOn(name -> name.first.startsWith("Jo")).extracting(firstNameExtractor).contains("Sauron");
  softly.assertThat(names).overridingErrorMessage("error message").as("flatExtracting with multiple Extractors").flatExtracting(firstNameExtractor,lastNameExtractor).contains("John","Jane","Doe").contains("Sauron");
  softly.assertThat(names).overridingErrorMessage("error message").as("flatExtracting with multiple ThrowingExtractors").flatExtracting(throwingFirstNameExtractor,throwingLastNameExtractor).contains("John","Jane","Doe").contains("Sauron");
  softly.assertThat(names).overridingErrorMessage("error message").as("extractingResultOf(\"getFirst\")").extractingResultOf("getFirst").contains("John","Jane").contains("Sam","Aragorn");
  softly.assertThat(names).overridingErrorMessage("error message").as("extractingResultOf(\"getFirst\", String.class)").extractingResultOf("getFirst",String.class).contains("John","Jane").contains("Messi","Ronaldo");
  softly.assertThat(names).overridingErrorMessage("error message").as("filteredOn with condition").filteredOn(new Condition<>(name -> name.first.startsWith("Jo"),"startsWith Jo")).hasSize(5);
  softly.assertThat(names).overridingErrorMessage("error message").as("filteredOn firstName in {John, Frodo}").filteredOn("first",in("John","Frodo")).isEmpty();
  softly.assertThat(names).overridingErrorMessage("error message").as("filteredOn firstName = John").filteredOn("first","John").isEmpty();
  softly.assertThat(names).overridingErrorMessage("error message").as("filteredOn firstName = null").filteredOnNull("first").isNotEmpty();
  softly.assertThat(names).overridingErrorMessage("error message").as("using flatExtracting(String... fieldOrPropertyNames)").flatExtracting("first","last").contains("John","Jane","Doe").contains("Sauron");
  softly.assertThat(characters).as("using flatExtracting(String fieldOrPropertyName)").overridingErrorMessage("error message").flatExtracting("children").contains(bart,maggie).contains("Sauron");
  softly.assertThat(names).overridingErrorMessage("error message").filteredOnAssertions(name -> assertThat(name.first).startsWith("Jo")).as("filteredOn with consumer").hasSize(5);
  List<Throwable> errorsCollected=softly.errorsCollected();
  assertThat(errorsCollected).hasSize(33);
  assertThat(errorsCollected.get(0)).hasMessage("[extracting(throwingFirstNameExtractor)] error message");
  assertThat(errorsCollected.get(1)).hasMessage("[extracting(throwingFirstNameExtractor)] error message");
  assertThat(errorsCollected.get(2)).hasMessage("[extracting(\"last\")] error message");
  assertThat(errorsCollected.get(3)).hasMessage("[using flatExtracting on Iterable] error message");
  assertThat(errorsCollected.get(4)).hasMessage("[using flatExtracting on Iterable] error message");
  assertThat(errorsCollected.get(5)).hasMessage("[using flatExtracting on Iterable with exception] error message");
  assertThat(errorsCollected.get(6)).hasMessageContaining(bart.toString());
  assertThat(errorsCollected.get(7)).hasMessageContaining(maggie.toString());
  assertThat(errorsCollected.get(8)).hasMessageContaining(bart.toString());
  assertThat(errorsCollected.get(9)).hasMessageContaining(maggie.toString());
  assertThat(errorsCollected.get(10)).hasMessageContaining(homer.toString());
  assertThat(errorsCollected.get(11)).hasMessageContaining(fred.toString());
  assertThat(errorsCollected.get(12)).hasMessageContaining(homer.toString());
  assertThat(errorsCollected.get(13)).hasMessageContaining(bart.toString());
  assertThat(errorsCollected.get(14)).hasMessageContaining(fred.toString());
  assertThat(errorsCollected.get(15)).hasMessageContaining(bart.toString());
  assertThat(errorsCollected.get(16)).hasMessage("[extracting(firstNameFunction, lastNameFunction)] error message");
  assertThat(errorsCollected.get(17)).hasMessage("[extracting(\"first\", \"last\")] error message");
  assertThat(errorsCollected.get(18)).hasMessage("[extracting(firstNameExtractor)] error message");
  assertThat(errorsCollected.get(19)).hasMessage("[extracting(\"first\", String.class)] error message");
  assertThat(errorsCollected.get(20)).hasMessage("[filteredOn(name -> name.first.startsWith(\"Jo\"))] error message");
  assertThat(errorsCollected.get(21)).hasMessage("[name.first.startsWith(\"Jo\")] error message");
  assertThat(errorsCollected.get(22)).hasMessage("[flatExtracting with multiple Extractors] error message");
  assertThat(errorsCollected.get(23)).hasMessage("[flatExtracting with multiple ThrowingExtractors] error message");
  assertThat(errorsCollected.get(24)).hasMessage("[extractingResultOf(\"getFirst\")] error message");
  assertThat(errorsCollected.get(25)).hasMessage("[extractingResultOf(\"getFirst\", String.class)] error message");
  assertThat(errorsCollected.get(26)).hasMessage("[filteredOn with condition] error message");
  assertThat(errorsCollected.get(27)).hasMessage("[filteredOn firstName in {John, Frodo}] error message");
  assertThat(errorsCollected.get(28)).hasMessage("[filteredOn firstName = John] error message");
  assertThat(errorsCollected.get(29)).hasMessage("[filteredOn firstName = null] error message");
  assertThat(errorsCollected.get(30)).hasMessage("[using flatExtracting(String... fieldOrPropertyNames)] error message");
  assertThat(errorsCollected.get(31)).hasMessage("[using flatExtracting(String fieldOrPropertyName)] error message");
  assertThat(errorsCollected.get(32)).hasMessage("[filteredOn with consumer] error message");
}
