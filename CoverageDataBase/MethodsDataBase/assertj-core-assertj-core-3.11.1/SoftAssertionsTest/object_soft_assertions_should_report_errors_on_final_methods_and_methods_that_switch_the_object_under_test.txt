@SuppressWarnings("unchecked") @Test public void object_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){
  Name name=name("John","Doe");
  Object alphabet="abcdefghijklmnopqrstuvwxyz";
  Object vowels=asList("a","e","i","o","u");
  softly.assertThat(name).as("extracting(\"first\", \"last\")").overridingErrorMessage("error message").extracting("first","last").contains("John").contains("gandalf");
  softly.assertThat(name).as("extracting(Name::getFirst, Name::getLast)").overridingErrorMessage("error message").extracting(Name::getFirst,Name::getLast).contains("John").contains("frodo");
  softly.assertThat(alphabet).overridingErrorMessage("error message").as("asString()").asString().startsWith("abc").startsWith("123");
  softly.assertThat(vowels).as("asList()").overridingErrorMessage("error message").asList().startsWith("a","e").startsWith("1","2");
  softly.assertThat(name).as("extracting(Name::getFirst)").overridingErrorMessage("error message").extracting(Name::getFirst).isEqualTo("Jack");
  List<Throwable> errorsCollected=softly.errorsCollected();
  assertThat(errorsCollected).hasSize(5);
  assertThat(errorsCollected.get(0)).hasMessage("[extracting(\"first\", \"last\")] error message");
  assertThat(errorsCollected.get(1)).hasMessage("[extracting(Name::getFirst, Name::getLast)] error message");
  assertThat(errorsCollected.get(2)).hasMessage("[asString()] error message");
  assertThat(errorsCollected.get(3)).hasMessage("[asList()] error message");
  assertThat(errorsCollected.get(4)).hasMessage("[extracting(Name::getFirst)] error message");
}
