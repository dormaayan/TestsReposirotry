@Test public void iterable_soft_assertions_should_work_with_navigation_methods(){
  Iterable<Name> names=asList(name("John","Doe"),name("Jane","Doe"));
  softly.assertThat(names).as("size isGreaterThan(10)").overridingErrorMessage("error message").size().isGreaterThan(10);
  softly.assertThat(names).as("size isGreaterThan(22)").overridingErrorMessage("error message").size().isGreaterThan(22).returnToIterable().as("shoud not be empty").overridingErrorMessage("error message 2").isEmpty();
  softly.assertThat(names).as("first element").overridingErrorMessage("error message").first().isNull();
  softly.assertThat(names).as("element(0)").overridingErrorMessage("error message").element(0).isNull();
  softly.assertThat(names).as("last element").overridingErrorMessage("error message").last().isNull();
  List<Throwable> errorsCollected=softly.errorsCollected();
  assertThat(errorsCollected).hasSize(6);
  assertThat(errorsCollected.get(0)).hasMessage("[size isGreaterThan(10)] error message");
  assertThat(errorsCollected.get(1)).hasMessage("[size isGreaterThan(22)] error message");
  assertThat(errorsCollected.get(2)).hasMessage("[shoud not be empty] error message 2");
  assertThat(errorsCollected.get(3)).hasMessage("[first element] error message");
  assertThat(errorsCollected.get(4)).hasMessage("[element(0)] error message");
  assertThat(errorsCollected.get(5)).hasMessage("[last element] error message");
}
