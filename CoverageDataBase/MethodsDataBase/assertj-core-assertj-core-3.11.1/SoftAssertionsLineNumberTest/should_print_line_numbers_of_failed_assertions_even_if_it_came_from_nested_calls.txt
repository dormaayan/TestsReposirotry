@Test public void should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(){
  SoftAssertions softly=new SoftAssertions();
  softly.assertThat(Optional.empty()).contains("Foo");
  softly.assertThat((Predicate<String>)null).accepts("a","b","c");
  Predicate<String> lowercasePredicate=s -> s.equals(s.toLowerCase());
  softly.assertThat(lowercasePredicate).accepts("a","b","C");
  AssertionError error=catchThrowableOfType(() -> softly.assertAll(),AssertionError.class);
  assertThat(error).hasMessageContaining(format("%n" + "Expecting Optional to contain:%n" + "  <\"Foo\">%n"+ "but was empty.%n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:60)%n")).hasMessageContaining(format("%n" + "Expecting actual not to be null%n" + "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:62)%n")).hasMessageContaining(format("%n" + "Expecting all elements of:%n" + "  <[\"a\", \"b\", \"C\"]>%n"+ "to match given predicate but this element did not:%n"+ "  <\"C\">%n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:64)"));
}
