@SuppressWarnings("unchecked") @Test public void should_be_able_to_catch_exceptions_thrown_by_all_proxied_methods() throws URISyntaxException {
  softly.assertThat(BigDecimal.ZERO).isEqualTo(BigDecimal.ONE);
  softly.assertThat(Boolean.FALSE).isTrue();
  softly.assertThat(false).isTrue();
  softly.assertThat(new boolean[]{false}).isEqualTo(new boolean[]{true});
  softly.assertThat(new Byte((byte)0)).isEqualTo((byte)1);
  softly.assertThat((byte)2).inHexadecimal().isEqualTo((byte)3);
  softly.assertThat(new byte[]{4}).isEqualTo(new byte[]{5});
  softly.assertThat(new Character((char)65)).isEqualTo(new Character((char)66));
  softly.assertThat((char)67).isEqualTo((char)68);
  softly.assertThat(new char[]{69}).isEqualTo(new char[]{70});
  softly.assertThat(new StringBuilder("a")).isEqualTo(new StringBuilder("b"));
  softly.assertThat(Object.class).isEqualTo(String.class);
  softly.assertThat(parseDatetime("1999-12-31T23:59:59")).isEqualTo(parseDatetime("2000-01-01T00:00:01"));
  softly.assertThat(new Double(6.0d)).isEqualTo(new Double(7.0d));
  softly.assertThat(8.0d).isEqualTo(9.0d);
  softly.assertThat(new double[]{10.0d}).isEqualTo(new double[]{11.0d});
  softly.assertThat(new File("a")).overridingErrorMessage(format("%nExpecting:%n <File(a)>%nto be equal to:%n <File(b)>%nbut was not.")).isEqualTo(new File("b"));
  softly.assertThat(new Float(12f)).isEqualTo(new Float(13f));
  softly.assertThat(14f).isEqualTo(15f);
  softly.assertThat(new float[]{16f}).isEqualTo(new float[]{17f});
  softly.assertThat(new ByteArrayInputStream(new byte[]{(byte)65})).hasSameContentAs(new ByteArrayInputStream(new byte[]{(byte)66}));
  softly.assertThat(new Integer(20)).isEqualTo(new Integer(21));
  softly.assertThat(22).isEqualTo(23);
  softly.assertThat(new int[]{24}).isEqualTo(new int[]{25});
  softly.assertThat((Iterable<String>)Lists.newArrayList("26")).isEqualTo(Lists.newArrayList("27"));
  softly.assertThat(Lists.newArrayList("28").iterator()).contains("29");
  softly.assertThat(Lists.newArrayList("30")).isEqualTo(Lists.newArrayList("31"));
  softly.assertThat(new Long(32L)).isEqualTo(new Long(33L));
  softly.assertThat(34L).isEqualTo(35L);
  softly.assertThat(new long[]{36L}).isEqualTo(new long[]{37L});
  softly.assertThat(mapOf(MapEntry.entry("38","39"))).isEqualTo(mapOf(MapEntry.entry("40","41")));
  softly.assertThat(new Short((short)42)).isEqualTo(new Short((short)43));
  softly.assertThat((short)44).isEqualTo((short)45);
  softly.assertThat(new short[]{(short)46}).isEqualTo(new short[]{(short)47});
  softly.assertThat("48").isEqualTo("49");
  softly.assertThat(new Object(){
    @Override public String toString(){
      return "50";
    }
  }
).isEqualTo(new Object(){
    @Override public String toString(){
      return "51";
    }
  }
);
  softly.assertThat(new Object[]{new Object(){
    @Override public String toString(){
      return "52";
    }
  }
}).isEqualTo(new Object[]{new Object(){
    @Override public String toString(){
      return "53";
    }
  }
});
  final IllegalArgumentException illegalArgumentException=new IllegalArgumentException("IllegalArgumentException message");
  softly.assertThat(illegalArgumentException).hasMessage("NullPointerException message");
  softly.assertThatThrownBy(() -> {
    throw new Exception("something was wrong");
  }
).hasMessage("something was good");
  softly.assertThat(mapOf(MapEntry.entry("54","55"))).contains(MapEntry.entry("1","2"));
  softly.assertThat(LocalTime.of(12,00)).isEqualTo(LocalTime.of(13,00));
  softly.assertThat(OffsetTime.of(12,0,0,0,ZoneOffset.UTC)).isEqualTo(OffsetTime.of(13,0,0,0,ZoneOffset.UTC));
  softly.assertThat(Optional.of("not empty")).isEqualTo("empty");
  softly.assertThat(OptionalInt.of(0)).isEqualTo(1);
  softly.assertThat(OptionalDouble.of(0.0)).isEqualTo(1.0);
  softly.assertThat(OptionalLong.of(0L)).isEqualTo(1L);
  softly.assertThat(new URI("http://assertj.org")).hasPort(8888);
  softly.assertThat(CompletableFuture.completedFuture("done")).hasFailed();
  softly.assertThat((Predicate<String>)s -> s.equals("something")).accepts("something else");
  softly.assertThat((IntPredicate)s -> s == 1).accepts(2);
  softly.assertThat((LongPredicate)s -> s == 1).accepts(2);
  softly.assertThat((DoublePredicate)s -> s == 1).accepts(2);
  catchThrowable(() -> softly.assertAll());
}
