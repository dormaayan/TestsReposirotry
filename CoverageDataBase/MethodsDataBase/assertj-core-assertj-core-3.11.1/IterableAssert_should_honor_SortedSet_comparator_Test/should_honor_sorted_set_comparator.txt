@Test public void should_honor_sorted_set_comparator(){
  assertThat(sets).allSatisfy(set -> {
    assertThat(set).contains("foo");
    assertThat(set).containsAll(newLinkedHashSet("foo"));
    assertThat(set).containsAnyElementsOf(newLinkedHashSet("foo","bar"));
    assertThat(set).containsAnyOf("foo","bar");
    assertThat(set).containsExactly("foo");
    assertThat(set).containsExactlyElementsOf(newLinkedHashSet("foo"));
    assertThat(set).containsExactlyInAnyOrder("foo");
    assertThat(set).containsExactlyInAnyOrderElementsOf(newLinkedHashSet("foo"));
    assertThat(set).containsOnly("foo");
    assertThat(set).containsOnlyElementsOf(newLinkedHashSet("foo"));
    assertThat(set).containsOnlyOnce("foo");
    assertThat(set).containsSequence("foo");
    assertThat(set).containsSequence(newLinkedHashSet("foo"));
    assertThat(set).containsSubsequence("foo");
    assertThat(set).containsSubsequence(newLinkedHashSet("foo"));
  }
);
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContain("foo","FOO"));
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContainAnyElementsOf(newLinkedHashSet("foo","FOO")));
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContainSequence("foo"));
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContainSequence(newLinkedHashSet("foo")));
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContainSubsequence("foo"));
  assertThat(sets).noneSatisfy(set -> assertThat(set).doesNotContainSubsequence(newLinkedHashSet("foo")));
}
