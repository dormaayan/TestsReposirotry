@Test public void readSendsWindowUpdateHttp2() throws Exception {
  int windowSize=100;
  int windowUpdateThreshold=50;
  peer.sendFrame().settings(new Settings());
  peer.acceptFrame();
  peer.acceptFrame();
  peer.sendFrame().synReply(false,3,headerEntries("a","android"));
  for (int i=0; i < 3; i++) {
    peer.sendFrame().data(false,3,data(24),24);
    peer.sendFrame().data(false,3,data(25),25);
    peer.sendFrame().data(false,3,data(1),1);
    peer.acceptFrame();
    peer.acceptFrame();
  }
  peer.sendFrame().data(true,3,data(0),0);
  peer.play();
  Http2Connection connection=connect(peer);
  connection.okHttpSettings.set(INITIAL_WINDOW_SIZE,windowSize);
  Http2Stream stream=connection.newStream(headerEntries("b","banana"),false);
  assertEquals(0,stream.unacknowledgedBytesRead);
  assertEquals(Headers.of("a","android"),stream.takeHeaders());
  Source in=stream.getSource();
  Buffer buffer=new Buffer();
  buffer.writeAll(in);
  assertEquals(-1,in.read(buffer,1));
  assertEquals(150,buffer.size());
  InFrame synStream=peer.takeFrame();
  assertEquals(Http2.TYPE_HEADERS,synStream.type);
  for (int i=0; i < 3; i++) {
    List<Integer> windowUpdateStreamIds=new ArrayList<>(2);
    for (int j=0; j < 2; j++) {
      InFrame windowUpdate=peer.takeFrame();
      assertEquals(Http2.TYPE_WINDOW_UPDATE,windowUpdate.type);
      windowUpdateStreamIds.add(windowUpdate.streamId);
      assertEquals(windowUpdateThreshold,windowUpdate.windowSizeIncrement);
    }
    assertTrue(windowUpdateStreamIds.contains(0));
    assertTrue(windowUpdateStreamIds.contains(3));
  }
}
