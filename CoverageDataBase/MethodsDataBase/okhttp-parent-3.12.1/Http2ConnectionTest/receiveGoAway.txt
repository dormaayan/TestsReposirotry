@Test public void receiveGoAway() throws Exception {
  peer.sendFrame().settings(new Settings());
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.sendFrame().goAway(3,ErrorCode.PROTOCOL_ERROR,Util.EMPTY_BYTE_ARRAY);
  peer.sendFrame().ping(true,1,0);
  peer.acceptFrame();
  peer.play();
  Http2Connection connection=connect(peer);
  Http2Stream stream1=connection.newStream(headerEntries("a","android"),true);
  Http2Stream stream2=connection.newStream(headerEntries("b","banana"),true);
  connection.writePingAndAwaitPong();
  BufferedSink sink1=Okio.buffer(stream1.getSink());
  BufferedSink sink2=Okio.buffer(stream2.getSink());
  sink1.writeUtf8("abc");
  try {
    sink2.writeUtf8("abc");
    sink2.flush();
    fail();
  }
 catch (  IOException expected) {
    assertEquals("stream was reset: REFUSED_STREAM",expected.getMessage());
  }
  sink1.writeUtf8("def");
  sink1.close();
  try {
    connection.newStream(headerEntries("c","cola"),false);
    fail();
  }
 catch (  ConnectionShutdownException expected) {
  }
  assertTrue(stream1.isOpen());
  assertFalse(stream2.isOpen());
  assertEquals(1,connection.openStreamCount());
  InFrame synStream1=peer.takeFrame();
  assertEquals(Http2.TYPE_HEADERS,synStream1.type);
  InFrame synStream2=peer.takeFrame();
  assertEquals(Http2.TYPE_HEADERS,synStream2.type);
  InFrame ping=peer.takeFrame();
  assertEquals(Http2.TYPE_PING,ping.type);
  InFrame data1=peer.takeFrame();
  assertEquals(Http2.TYPE_DATA,data1.type);
  assertEquals(3,data1.streamId);
  assertTrue(Arrays.equals("abcdef".getBytes("UTF-8"),data1.data));
}
