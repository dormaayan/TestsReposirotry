/** 
 * Test that the client doesn't send a RST_STREAM if doing so will disrupt the output stream.
 */
@Test public void clientClosesClientInputStreamIfOutputStreamIsClosed() throws Exception {
  peer.sendFrame().settings(new Settings());
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.play();
  Http2Connection connection=connect(peer);
  Http2Stream stream=connection.newStream(headerEntries("a","android"),true);
  Source source=stream.getSource();
  BufferedSink out=Okio.buffer(stream.getSink());
  source.close();
  try {
    source.read(new Buffer(),1);
    fail();
  }
 catch (  IOException expected) {
    assertEquals("stream closed",expected.getMessage());
  }
  out.writeUtf8("square");
  out.flush();
  out.close();
  assertEquals(0,connection.openStreamCount());
  InFrame synStream=peer.takeFrame();
  assertEquals(Http2.TYPE_HEADERS,synStream.type);
  assertFalse(synStream.inFinished);
  assertFalse(synStream.outFinished);
  InFrame data=peer.takeFrame();
  assertEquals(Http2.TYPE_DATA,data.type);
  assertTrue(Arrays.equals("square".getBytes("UTF-8"),data.data));
  InFrame fin=peer.takeFrame();
  assertEquals(Http2.TYPE_DATA,fin.type);
  assertTrue(fin.inFinished);
  assertFalse(fin.outFinished);
  InFrame rstStream=peer.takeFrame();
  assertEquals(Http2.TYPE_RST_STREAM,rstStream.type);
  assertEquals(ErrorCode.CANCEL,rstStream.errorCode);
}
