@Test public void blockedStreamDoesntStarveNewStream() throws Exception {
  int framesThatFillWindow=roundUp(DEFAULT_INITIAL_WINDOW_SIZE,peer.maxOutboundDataLength());
  peer.sendFrame().settings(new Settings());
  peer.acceptFrame();
  peer.acceptFrame();
  for (int i=0; i < framesThatFillWindow; i++) {
    peer.acceptFrame();
  }
  peer.acceptFrame();
  peer.acceptFrame();
  peer.play();
  Http2Connection connection=connect(peer);
  Http2Stream stream1=connection.newStream(headerEntries("a","apple"),true);
  BufferedSink out1=Okio.buffer(stream1.getSink());
  out1.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);
  out1.flush();
  assertEquals(0,connection.bytesLeftInWriteWindow);
  assertEquals(0,connection.getStream(3).bytesLeftInWriteWindow);
  connection.readerRunnable.windowUpdate(0,3);
  assertEquals(3,connection.bytesLeftInWriteWindow);
  assertEquals(0,connection.getStream(3).bytesLeftInWriteWindow);
  Http2Stream stream2=connection.newStream(headerEntries("b","banana"),true);
  BufferedSink out2=Okio.buffer(stream2.getSink());
  out2.writeUtf8("foo");
  out2.flush();
  assertEquals(0,connection.bytesLeftInWriteWindow);
  assertEquals(0,connection.getStream(3).bytesLeftInWriteWindow);
  assertEquals(DEFAULT_INITIAL_WINDOW_SIZE - 3,connection.getStream(5).bytesLeftInWriteWindow);
}
