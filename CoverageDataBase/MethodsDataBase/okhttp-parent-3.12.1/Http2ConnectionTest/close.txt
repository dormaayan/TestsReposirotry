@Test public void close() throws Exception {
  peer.sendFrame().settings(new Settings());
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.acceptFrame();
  peer.play();
  Http2Connection connection=connect(peer);
  Http2Stream stream=connection.newStream(headerEntries("a","android"),false);
  assertEquals(1,connection.openStreamCount());
  connection.close();
  assertEquals(0,connection.openStreamCount());
  try {
    connection.newStream(headerEntries("b","banana"),false);
    fail();
  }
 catch (  ConnectionShutdownException expected) {
  }
  BufferedSink sink=Okio.buffer(stream.getSink());
  try {
    sink.writeByte(0);
    sink.flush();
    fail();
  }
 catch (  IOException expected) {
    assertEquals("stream finished",expected.getMessage());
  }
  try {
    stream.getSource().read(new Buffer(),1);
    fail();
  }
 catch (  IOException expected) {
    assertEquals("stream was reset: CANCEL",expected.getMessage());
  }
  InFrame synStream=peer.takeFrame();
  assertEquals(Http2.TYPE_HEADERS,synStream.type);
  InFrame goaway=peer.takeFrame();
  assertEquals(Http2.TYPE_GOAWAY,goaway.type);
  InFrame rstStream=peer.takeFrame();
  assertEquals(Http2.TYPE_RST_STREAM,rstStream.type);
  assertEquals(3,rstStream.streamId);
}
