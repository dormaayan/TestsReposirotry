@Test public void httpsWithClientAuth() throws Exception {
  HeldCertificate clientCa=new HeldCertificate.Builder().certificateAuthority(0).build();
  HeldCertificate serverCa=new HeldCertificate.Builder().certificateAuthority(0).build();
  HeldCertificate serverCertificate=new HeldCertificate.Builder().signedBy(serverCa).addSubjectAlternativeName(server.getHostName()).build();
  HandshakeCertificates serverHandshakeCertificates=new HandshakeCertificates.Builder().addTrustedCertificate(clientCa.certificate()).heldCertificate(serverCertificate).build();
  server.useHttps(serverHandshakeCertificates.sslSocketFactory(),false);
  server.enqueue(new MockResponse().setBody("abc"));
  server.requestClientAuth();
  HeldCertificate clientCertificate=new HeldCertificate.Builder().signedBy(clientCa).build();
  HandshakeCertificates clientHandshakeCertificates=new HandshakeCertificates.Builder().addTrustedCertificate(serverCa.certificate()).heldCertificate(clientCertificate).build();
  HttpUrl url=server.url("/");
  HttpsURLConnection connection=(HttpsURLConnection)url.url().openConnection();
  connection.setSSLSocketFactory(clientHandshakeCertificates.sslSocketFactory());
  connection.setHostnameVerifier(new RecordingHostnameVerifier());
  assertEquals(HttpURLConnection.HTTP_OK,connection.getResponseCode());
  BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
  assertEquals("abc",reader.readLine());
  RecordedRequest request=server.takeRequest();
  assertEquals("https",request.getRequestUrl().scheme());
  Handshake handshake=request.getHandshake();
  assertNotNull(handshake.tlsVersion());
  assertNotNull(handshake.cipherSuite());
  assertNotNull(handshake.localPrincipal());
  assertEquals(1,handshake.localCertificates().size());
  assertNotNull(handshake.peerPrincipal());
  assertEquals(1,handshake.peerCertificates().size());
}
