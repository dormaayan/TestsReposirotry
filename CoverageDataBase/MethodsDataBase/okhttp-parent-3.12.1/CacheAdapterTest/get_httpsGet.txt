@Test public void get_httpsGet() throws Exception {
  final URL serverUrl=configureHttpsServer(new MockResponse());
  assertEquals("https",serverUrl.getProtocol());
  ResponseCache responseCache=new AbstractResponseCache(){
    @Override public CacheResponse get(    URI uri,    String method,    Map<String,List<String>> headers) throws IOException {
      try {
        assertEquals("https",uri.getScheme());
        assertEquals(toUri(serverUrl),uri);
        assertEquals("GET",method);
        assertTrue("Arbitrary standard header not present",headers.containsKey("User-Agent"));
        assertEquals(Collections.singletonList("value1"),headers.get("key1"));
        return null;
      }
 catch (      Throwable t) {
        throw new IOException("unexpected cache failure",t);
      }
    }
  }
;
  setInternalCache(new CacheAdapter(responseCache));
  client=client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).hostnameVerifier(hostnameVerifier).build();
  connection=new OkUrlFactory(client).open(serverUrl);
  connection.setRequestProperty("key1","value1");
  executeGet(connection);
}
