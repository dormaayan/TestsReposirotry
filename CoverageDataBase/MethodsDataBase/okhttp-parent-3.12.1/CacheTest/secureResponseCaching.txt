@Test public void secureResponseCaching() throws IOException {
  server.useHttps(handshakeCertificates.sslSocketFactory(),false);
  server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-1,TimeUnit.HOURS)).addHeader("Expires: " + formatDate(1,TimeUnit.HOURS)).setBody("ABC"));
  client=client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).hostnameVerifier(NULL_HOSTNAME_VERIFIER).build();
  Request request=new Request.Builder().url(server.url("/")).build();
  Response response1=client.newCall(request).execute();
  BufferedSource in=response1.body().source();
  assertEquals("ABC",in.readUtf8());
  CipherSuite cipherSuite=response1.handshake().cipherSuite();
  List<Certificate> localCerts=response1.handshake().localCertificates();
  List<Certificate> serverCerts=response1.handshake().peerCertificates();
  Principal peerPrincipal=response1.handshake().peerPrincipal();
  Principal localPrincipal=response1.handshake().localPrincipal();
  Response response2=client.newCall(request).execute();
  assertEquals("ABC",response2.body().string());
  assertEquals(2,cache.requestCount());
  assertEquals(1,cache.networkCount());
  assertEquals(1,cache.hitCount());
  assertEquals(cipherSuite,response2.handshake().cipherSuite());
  assertEquals(localCerts,response2.handshake().localCertificates());
  assertEquals(serverCerts,response2.handshake().peerCertificates());
  assertEquals(peerPrincipal,response2.handshake().peerPrincipal());
  assertEquals(localPrincipal,response2.handshake().localPrincipal());
}
