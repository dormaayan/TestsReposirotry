@Test public void clientAndServer() throws Exception {
  HeldCertificate clientRoot=new HeldCertificate.Builder().certificateAuthority(1).build();
  HeldCertificate clientIntermediate=new HeldCertificate.Builder().certificateAuthority(0).signedBy(clientRoot).build();
  HeldCertificate clientCertificate=new HeldCertificate.Builder().signedBy(clientIntermediate).build();
  HeldCertificate serverRoot=new HeldCertificate.Builder().certificateAuthority(1).build();
  HeldCertificate serverIntermediate=new HeldCertificate.Builder().certificateAuthority(0).signedBy(serverRoot).build();
  HeldCertificate serverCertificate=new HeldCertificate.Builder().signedBy(serverIntermediate).build();
  HandshakeCertificates server=new HandshakeCertificates.Builder().addTrustedCertificate(clientRoot.certificate()).heldCertificate(serverCertificate,serverIntermediate.certificate()).build();
  HandshakeCertificates client=new HandshakeCertificates.Builder().addTrustedCertificate(serverRoot.certificate()).heldCertificate(clientCertificate,clientIntermediate.certificate()).build();
  InetSocketAddress serverAddress=startTlsServer();
  Future<Handshake> serverHandshakeFuture=doServerHandshake(server);
  Future<Handshake> clientHandshakeFuture=doClientHandshake(client,serverAddress);
  Handshake serverHandshake=serverHandshakeFuture.get();
  assertEquals(serverHandshake.peerCertificates(),Arrays.asList(clientCertificate.certificate(),clientIntermediate.certificate()));
  assertEquals(serverHandshake.localCertificates(),Arrays.asList(serverCertificate.certificate(),serverIntermediate.certificate()));
  Handshake clientHandshake=clientHandshakeFuture.get();
  assertEquals(clientHandshake.peerCertificates(),Arrays.asList(serverCertificate.certificate(),serverIntermediate.certificate()));
  assertEquals(clientHandshake.localCertificates(),Arrays.asList(clientCertificate.certificate(),clientIntermediate.certificate()));
}
