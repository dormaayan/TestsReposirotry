/** 
 * Push a setting that permits up to 2 concurrent streams, then make 3 concurrent requests and confirm that the third concurrent request prepared a new connection.
 */
@Test public void settingsLimitsMaxConcurrentStreams() throws Exception {
  Settings settings=new Settings();
  settings.set(Settings.MAX_CONCURRENT_STREAMS,2);
  server.enqueue(new MockResponse().withSettings(settings));
  Call call=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response=call.execute();
  assertEquals("",response.body().string());
  server.enqueue(new MockResponse().setBody("ABC"));
  server.enqueue(new MockResponse().setBody("DEF"));
  server.enqueue(new MockResponse().setBody("GHI"));
  Call call1=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response1=call1.execute();
  Call call2=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response2=call2.execute();
  Call call3=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response3=call3.execute();
  assertEquals("ABC",response1.body().string());
  assertEquals("DEF",response2.body().string());
  assertEquals("GHI",response3.body().string());
  assertEquals(0,server.takeRequest().getSequenceNumber());
  assertEquals(1,server.takeRequest().getSequenceNumber());
  assertEquals(2,server.takeRequest().getSequenceNumber());
  assertEquals(0,server.takeRequest().getSequenceNumber());
}
