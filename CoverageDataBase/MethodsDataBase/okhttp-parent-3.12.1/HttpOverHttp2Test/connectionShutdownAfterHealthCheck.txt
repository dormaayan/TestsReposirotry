/** 
 * This simulates a race condition where we receive a healthy HTTP/2 connection and just prior to writing our request, we get a GOAWAY frame from the server.
 */
@Test public void connectionShutdownAfterHealthCheck() throws Exception {
  server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_END).setBody("ABC"));
  server.enqueue(new MockResponse().setBody("DEF"));
  OkHttpClient client2=client.newBuilder().addNetworkInterceptor(new Interceptor(){
    boolean executedCall;
    @Override public Response intercept(    Chain chain) throws IOException {
      if (!executedCall) {
        executedCall=true;
        Call call=client.newCall(new Request.Builder().url(server.url("/")).build());
        Response response=call.execute();
        assertEquals("ABC",response.body().string());
        RealConnection connection=(RealConnection)chain.connection();
        while (connection.isHealthy(false))         ;
      }
      return chain.proceed(chain.request());
    }
  }
).build();
  Call call=client2.newCall(new Request.Builder().url(server.url("/")).build());
  Response response=call.execute();
  assertEquals("DEF",response.body().string());
  assertEquals(0,server.takeRequest().getSequenceNumber());
  assertEquals(0,server.takeRequest().getSequenceNumber());
}
