@Test public void testInvalidParse() throws Exception {
  assertInvalid("","No subtype found for: \"\"");
  assertInvalid("/","No subtype found for: \"/\"");
  assertInvalid("text","No subtype found for: \"text\"");
  assertInvalid("text/","No subtype found for: \"text/\"");
  assertInvalid("te<t/plain","No subtype found for: \"te<t/plain\"");
  assertInvalid(" text/plain","No subtype found for: \" text/plain\"");
  assertInvalid("te xt/plain","No subtype found for: \"te xt/plain\"");
  assertInvalid("text /plain","No subtype found for: \"text /plain\"");
  assertInvalid("text/ plain","No subtype found for: \"text/ plain\"");
  assertInvalid("text/pl@in","Parameter is not formatted correctly: \"@in\" for: \"text/pl@in\"");
  assertInvalid("text/plain; a","Parameter is not formatted correctly: \"a\" for: \"text/plain; a\"");
  assertInvalid("text/plain; a=","Parameter is not formatted correctly: \"a=\" for: \"text/plain; a=\"");
  assertInvalid("text/plain; a=@","Parameter is not formatted correctly: \"a=@\" for: \"text/plain; a=@\"");
  assertInvalid("text/plain; a=\"@","Parameter is not formatted correctly: \"a=\"@\" for: \"text/plain; a=\"@\"");
  assertInvalid("text/plain; a=1; b","Parameter is not formatted correctly: \"b\" for: \"text/plain; a=1; b\"");
  assertInvalid("text/plain; a=1; b=","Parameter is not formatted correctly: \"b=\" for: \"text/plain; a=1; b=\"");
  assertInvalid("text/plain; a=\u2025","Parameter is not formatted correctly: \"a=‥\" for: \"text/plain; a=‥\"");
  assertInvalid("text/pl ain","Parameter is not formatted correctly: \" ain\" for: \"text/pl ain\"");
  assertInvalid("text/plain ","Parameter is not formatted correctly: \" \" for: \"text/plain \"");
  assertInvalid("text/plain ; a=1","Parameter is not formatted correctly: \" ; a=1\" for: \"text/plain ; a=1\"");
}
