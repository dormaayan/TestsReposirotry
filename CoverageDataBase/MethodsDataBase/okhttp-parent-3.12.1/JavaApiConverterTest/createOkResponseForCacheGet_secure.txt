@Test public void createOkResponseForCacheGet_secure() throws Exception {
  final String statusLine="HTTP/1.1 200 Fantastic";
  final Principal localPrincipal=LOCAL_CERT.getSubjectX500Principal();
  final List<Certificate> localCertificates=Arrays.<Certificate>asList(LOCAL_CERT);
  final Principal serverPrincipal=SERVER_CERT.getSubjectX500Principal();
  final List<Certificate> serverCertificates=Arrays.<Certificate>asList(SERVER_CERT);
  URI uri=new URI("https://foo/bar");
  Request request=new Request.Builder().url(uri.toURL()).build();
  SecureCacheResponse cacheResponse=new SecureCacheResponse(){
    @Override public Map<String,List<String>> getHeaders() throws IOException {
      Map<String,List<String>> headers=new LinkedHashMap<>();
      headers.put(null,Collections.singletonList(statusLine));
      headers.put("xyzzy",Arrays.asList("bar","baz"));
      return headers;
    }
    @Override public InputStream getBody() throws IOException {
      return new ByteArrayInputStream("HelloWorld".getBytes(StandardCharsets.UTF_8));
    }
    @Override public String getCipherSuite(){
      return "SSL_RSA_WITH_NULL_MD5";
    }
    @Override public List<Certificate> getLocalCertificateChain(){
      return localCertificates;
    }
    @Override public List<Certificate> getServerCertificateChain() throws SSLPeerUnverifiedException {
      return serverCertificates;
    }
    @Override public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {
      return serverPrincipal;
    }
    @Override public Principal getLocalPrincipal(){
      return localPrincipal;
    }
  }
;
  Response response=JavaApiConverter.createOkResponseForCacheGet(request,cacheResponse);
  Request cacheRequest=response.request();
  assertEquals(request.url(),cacheRequest.url());
  assertEquals(request.method(),cacheRequest.method());
  assertEquals(0,request.headers().size());
  assertEquals(Protocol.HTTP_1_1,response.protocol());
  assertEquals(200,response.code());
  assertEquals("Fantastic",response.message());
  Headers okResponseHeaders=response.headers();
  assertEquals("baz",okResponseHeaders.get("xyzzy"));
  assertEquals("HelloWorld",response.body().string());
  Handshake handshake=response.handshake();
  assertNotNull(handshake);
  assertNotNullAndEquals(CipherSuite.TLS_RSA_WITH_NULL_MD5,handshake.cipherSuite());
  assertEquals(localPrincipal,handshake.localPrincipal());
  assertEquals(serverPrincipal,handshake.peerPrincipal());
  assertEquals(serverCertificates,handshake.peerCertificates());
  assertEquals(localCertificates,handshake.localCertificates());
}
