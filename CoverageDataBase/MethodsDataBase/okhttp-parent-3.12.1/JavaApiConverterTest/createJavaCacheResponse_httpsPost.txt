@Test public void createJavaCacheResponse_httpsPost() throws Exception {
  Request okRequest=createArbitraryOkRequest().newBuilder().url("https://secure/request").post(createRequestBody("RequestBody")).build();
  ResponseBody responseBody=createResponseBody("ResponseBody");
  Handshake handshake=Handshake.get(TlsVersion.SSL_3_0,CipherSuite.TLS_RSA_WITH_NULL_MD5,Arrays.<Certificate>asList(SERVER_CERT),Arrays.<Certificate>asList(LOCAL_CERT));
  Response okResponse=createArbitraryOkResponse(okRequest).newBuilder().protocol(Protocol.HTTP_1_1).code(200).message("Fantastic").addHeader("key1","value1_1").addHeader("key2","value2").addHeader("key1","value1_2").body(responseBody).handshake(handshake).build();
  SecureCacheResponse javaCacheResponse=(SecureCacheResponse)JavaApiConverter.createJavaCacheResponse(okResponse);
  Map<String,List<String>> javaHeaders=javaCacheResponse.getHeaders();
  assertEquals(Arrays.asList("value1_1","value1_2"),javaHeaders.get("key1"));
  assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"),javaHeaders.get(null));
  assertEquals("ResponseBody",readAll(javaCacheResponse.getBody()));
  assertEquals(handshake.cipherSuite().javaName(),javaCacheResponse.getCipherSuite());
  assertEquals(handshake.localCertificates(),javaCacheResponse.getLocalCertificateChain());
  assertEquals(handshake.peerCertificates(),javaCacheResponse.getServerCertificateChain());
  assertEquals(handshake.localPrincipal(),javaCacheResponse.getLocalPrincipal());
  assertEquals(handshake.peerPrincipal(),javaCacheResponse.getPeerPrincipal());
}
