/** 
 * The pinner should pull the root certificate from the trust manager. 
 */
@Test public void pinRootNotPresentInChain() throws Exception {
  HeldCertificate rootCa=new HeldCertificate.Builder().serialNumber(1L).certificateAuthority(1).commonName("root").build();
  HeldCertificate intermediateCa=new HeldCertificate.Builder().signedBy(rootCa).certificateAuthority(0).serialNumber(2L).commonName("intermediate_ca").build();
  HeldCertificate certificate=new HeldCertificate.Builder().signedBy(intermediateCa).serialNumber(3L).commonName(server.getHostName()).build();
  CertificatePinner certificatePinner=new CertificatePinner.Builder().add(server.getHostName(),CertificatePinner.pin(rootCa.certificate())).build();
  HandshakeCertificates handshakeCertificates=new HandshakeCertificates.Builder().addTrustedCertificate(rootCa.certificate()).build();
  OkHttpClient client=defaultClient().newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).hostnameVerifier(new RecordingHostnameVerifier()).certificatePinner(certificatePinner).build();
  HandshakeCertificates serverHandshakeCertificates=new HandshakeCertificates.Builder().heldCertificate(certificate,intermediateCa.certificate()).build();
  server.useHttps(serverHandshakeCertificates.sslSocketFactory(),false);
  server.enqueue(new MockResponse().setBody("abc").setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
  Call call1=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response1=call1.execute();
  assertEquals("abc",response1.body().string());
  server.enqueue(new MockResponse().setBody("def").setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
  Call call2=client.newCall(new Request.Builder().url(server.url("/")).build());
  Response response2=call2.execute();
  assertEquals("def",response2.body().string());
}
