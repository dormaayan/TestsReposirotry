@Test public void synchronousCallAccessors() throws Exception {
  final CountDownLatch ready=new CountDownLatch(2);
  final CountDownLatch waiting=new CountDownLatch(1);
  client=client.newBuilder().addInterceptor(new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      try {
        ready.countDown();
        waiting.await();
      }
 catch (      InterruptedException e) {
        throw new AssertionError();
      }
      throw new IOException();
    }
  }
).build();
  Call a1=client.newCall(newRequest("http://a/1"));
  Call a2=client.newCall(newRequest("http://a/2"));
  Call a3=client.newCall(newRequest("http://a/3"));
  Call a4=client.newCall(newRequest("http://a/4"));
  Thread t1=makeSynchronousCall(a1);
  Thread t2=makeSynchronousCall(a2);
  ready.await();
  assertEquals(2,dispatcher.runningCallsCount());
  assertEquals(0,dispatcher.queuedCallsCount());
  assertEquals(set(a1,a2),set(dispatcher.runningCalls()));
  assertEquals(Collections.emptyList(),dispatcher.queuedCalls());
  a2.cancel();
  a3.cancel();
  assertEquals(set(a1,a2),set(dispatcher.runningCalls()));
  assertEquals(Collections.emptyList(),dispatcher.queuedCalls());
  waiting.countDown();
  t1.join();
  t2.join();
  assertEquals(0,dispatcher.runningCallsCount());
  assertEquals(0,dispatcher.queuedCallsCount());
  assertEquals(Collections.emptyList(),dispatcher.runningCalls());
  assertEquals(Collections.emptyList(),dispatcher.queuedCalls());
  assertTrue(a1.isExecuted());
  assertFalse(a1.isCanceled());
  assertTrue(a2.isExecuted());
  assertTrue(a2.isCanceled());
  assertFalse(a3.isExecuted());
  assertTrue(a3.isCanceled());
  assertFalse(a4.isExecuted());
  assertFalse(a4.isCanceled());
}
