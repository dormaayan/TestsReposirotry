@Test public void idleCallbackInvokedWhenIdle() throws Exception {
  final AtomicBoolean idle=new AtomicBoolean();
  dispatcher.setIdleCallback(new Runnable(){
    @Override public void run(){
      idle.set(true);
    }
  }
);
  client.newCall(newRequest("http://a/1")).enqueue(callback);
  client.newCall(newRequest("http://a/2")).enqueue(callback);
  executor.finishJob("http://a/1");
  assertFalse(idle.get());
  final CountDownLatch ready=new CountDownLatch(1);
  final CountDownLatch proceed=new CountDownLatch(1);
  client=client.newBuilder().addInterceptor(new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      ready.countDown();
      try {
        proceed.await(5,SECONDS);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      return chain.proceed(chain.request());
    }
  }
).build();
  Thread t1=makeSynchronousCall(client.newCall(newRequest("http://a/3")));
  ready.await(5,SECONDS);
  executor.finishJob("http://a/2");
  assertFalse(idle.get());
  proceed.countDown();
  t1.join();
  assertTrue(idle.get());
}
