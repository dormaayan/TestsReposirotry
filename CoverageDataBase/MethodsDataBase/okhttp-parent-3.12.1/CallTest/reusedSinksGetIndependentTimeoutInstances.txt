@Test public void reusedSinksGetIndependentTimeoutInstances() throws Exception {
  server.enqueue(new MockResponse());
  server.enqueue(new MockResponse());
  RequestBody requestBody1=new RequestBody(){
    @Override public MediaType contentType(){
      return MediaType.get("text/plain");
    }
    @Override public void writeTo(    BufferedSink sink) throws IOException {
      sink.writeUtf8("abc");
      sink.timeout().deadline(5,TimeUnit.SECONDS);
    }
  }
;
  Request request1=new Request.Builder().url(server.url("/")).method("POST",requestBody1).build();
  Response response1=client.newCall(request1).execute();
  assertEquals(200,response1.code());
  RequestBody requestBody2=new RequestBody(){
    @Override public MediaType contentType(){
      return MediaType.get("text/plain");
    }
    @Override public void writeTo(    BufferedSink sink) throws IOException {
      assertFalse(sink.timeout().hasDeadline());
      sink.writeUtf8("def");
    }
  }
;
  Request request2=new Request.Builder().url(server.url("/")).method("POST",requestBody2).build();
  Response response2=client.newCall(request2).execute();
  assertEquals(200,response2.code());
  assertEquals(0,server.takeRequest().getSequenceNumber());
  assertEquals(1,server.takeRequest().getSequenceNumber());
}
