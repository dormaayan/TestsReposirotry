/** 
 * This test puts a request in front of one that is to be canceled, so that it is canceled before I/O takes place.
 */
@Test public void canceledBeforeIOSignalsOnFailure() throws Exception {
  okhttp3.Dispatcher dispatcher=new okhttp3.Dispatcher(client.dispatcher().executorService());
  dispatcher.setMaxRequests(1);
  client=client.newBuilder().dispatcher(dispatcher).build();
  Request requestA=new Request.Builder().url(server.url("/a")).build();
  Request requestB=new Request.Builder().url(server.url("/b")).build();
  final Call callA=client.newCall(requestA);
  final Call callB=client.newCall(requestB);
  server.setDispatcher(new Dispatcher(){
    char nextResponse='A';
    @Override public MockResponse dispatch(    RecordedRequest request){
      callB.cancel();
      return new MockResponse().setBody(Character.toString(nextResponse++));
    }
  }
);
  callA.enqueue(callback);
  callB.enqueue(callback);
  assertEquals("/a",server.takeRequest().getPath());
  callback.await(requestA.url()).assertBody("A");
  callback.await(requestB.url()).assertFailure("Canceled","Socket closed");
}
