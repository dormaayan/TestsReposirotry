/** 
 * Respond to a proxy authorization challenge. 
 */
@Test public void proxyAuthenticateOnConnect() throws Exception {
  server.useHttps(handshakeCertificates.sslSocketFactory(),true);
  server.enqueue(new MockResponse().setResponseCode(407).addHeader("Proxy-Authenticate: Basic realm=\"localhost\""));
  server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
  server.enqueue(new MockResponse().setBody("response body"));
  client=client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).proxy(server.toProxyAddress()).proxyAuthenticator(new RecordingOkAuthenticator("password","Basic")).hostnameVerifier(new RecordingHostnameVerifier()).build();
  Request request=new Request.Builder().url("https://android.com/foo").build();
  Response response=client.newCall(request).execute();
  assertEquals("response body",response.body().string());
  RecordedRequest connect1=server.takeRequest();
  assertEquals("CONNECT android.com:443 HTTP/1.1",connect1.getRequestLine());
  assertNull(connect1.getHeader("Proxy-Authorization"));
  RecordedRequest connect2=server.takeRequest();
  assertEquals("CONNECT android.com:443 HTTP/1.1",connect2.getRequestLine());
  assertEquals("password",connect2.getHeader("Proxy-Authorization"));
  RecordedRequest get=server.takeRequest();
  assertEquals("GET /foo HTTP/1.1",get.getRequestLine());
  assertNull(get.getHeader("Proxy-Authorization"));
}
