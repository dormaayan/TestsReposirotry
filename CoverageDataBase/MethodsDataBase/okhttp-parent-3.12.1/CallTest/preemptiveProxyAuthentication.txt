/** 
 * Confirm that we can send authentication information without being prompted first. 
 */
@Test public void preemptiveProxyAuthentication() throws Exception {
  server.useHttps(handshakeCertificates.sslSocketFactory(),true);
  server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
  server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
  final String credential=Credentials.basic("jesse","password1");
  client=client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).proxy(server.toProxyAddress()).hostnameVerifier(new RecordingHostnameVerifier()).proxyAuthenticator(new Authenticator(){
    @Override public Request authenticate(    Route route,    Response response){
      assertEquals("CONNECT",response.request().method());
      assertEquals(HttpURLConnection.HTTP_PROXY_AUTH,response.code());
      assertEquals("android.com",response.request().url().host());
      List<Challenge> challenges=response.challenges();
      assertEquals("OkHttp-Preemptive",challenges.get(0).scheme());
      return response.request().newBuilder().header("Proxy-Authorization",credential).build();
    }
  }
).build();
  Request request=new Request.Builder().url("https://android.com/foo").build();
  executeSynchronously(request).assertSuccessful();
  RecordedRequest connect=server.takeRequest();
  assertEquals("CONNECT",connect.getMethod());
  assertEquals(credential,connect.getHeader("Proxy-Authorization"));
  assertEquals("/",connect.getPath());
  RecordedRequest get=server.takeRequest();
  assertEquals("GET",get.getMethod());
  assertNull(get.getHeader("Proxy-Authorization"));
  assertEquals("/foo",get.getPath());
}
