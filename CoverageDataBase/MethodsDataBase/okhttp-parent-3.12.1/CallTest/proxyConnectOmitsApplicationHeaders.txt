/** 
 * Test which headers are sent unencrypted to the HTTP proxy. 
 */
@Test public void proxyConnectOmitsApplicationHeaders() throws Exception {
  server.useHttps(handshakeCertificates.sslSocketFactory(),true);
  server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
  server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
  RecordingHostnameVerifier hostnameVerifier=new RecordingHostnameVerifier();
  client=client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).proxy(server.toProxyAddress()).hostnameVerifier(hostnameVerifier).build();
  Request request=new Request.Builder().url("https://android.com/foo").header("Private","Secret").header("User-Agent","App 1.0").build();
  Response response=client.newCall(request).execute();
  assertEquals("encrypted response from the origin server",response.body().string());
  RecordedRequest connect=server.takeRequest();
  assertNull(connect.getHeader("Private"));
  assertEquals(Version.userAgent(),connect.getHeader("User-Agent"));
  assertEquals("Keep-Alive",connect.getHeader("Proxy-Connection"));
  assertEquals("android.com:443",connect.getHeader("Host"));
  RecordedRequest get=server.takeRequest();
  assertEquals("Secret",get.getHeader("Private"));
  assertEquals("App 1.0",get.getHeader("User-Agent"));
  assertEquals(Arrays.asList("verify android.com"),hostnameVerifier.calls);
}
