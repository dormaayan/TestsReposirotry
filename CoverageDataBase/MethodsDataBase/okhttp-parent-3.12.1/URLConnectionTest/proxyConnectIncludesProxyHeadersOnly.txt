/** 
 * Test which headers are sent unencrypted to the HTTP proxy. 
 */
@Test public void proxyConnectIncludesProxyHeadersOnly() throws Exception {
  RecordingHostnameVerifier hostnameVerifier=new RecordingHostnameVerifier();
  server.useHttps(handshakeCertificates.sslSocketFactory(),true);
  server.enqueue(new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
  server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
  urlFactory.setClient(urlFactory.client().newBuilder().proxy(server.toProxyAddress()).sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).hostnameVerifier(hostnameVerifier).build());
  URL url=new URL("https://android.com/foo");
  connection=urlFactory.open(url);
  connection.addRequestProperty("Private","Secret");
  connection.addRequestProperty("Proxy-Authorization","bar");
  connection.addRequestProperty("User-Agent","baz");
  assertContent("encrypted response from the origin server",connection);
  RecordedRequest connect=server.takeRequest();
  assertNull(connect.getHeader("Private"));
  assertNull(connect.getHeader("Proxy-Authorization"));
  assertEquals(Version.userAgent(),connect.getHeader("User-Agent"));
  assertEquals("android.com:443",connect.getHeader("Host"));
  assertEquals("Keep-Alive",connect.getHeader("Proxy-Connection"));
  RecordedRequest get=server.takeRequest();
  assertEquals("Secret",get.getHeader("Private"));
  assertEquals(Arrays.asList("verify android.com"),hostnameVerifier.calls);
}
