@Test public void connectViaHttpsReusingConnectionsDifferentFactories() throws Exception {
  server.useHttps(handshakeCertificates.sslSocketFactory(),false);
  server.enqueue(new MockResponse().setBody("this response comes via HTTPS"));
  server.enqueue(new MockResponse().setBody("another response via HTTPS"));
  urlFactory.setClient(urlFactory.client().newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(),handshakeCertificates.trustManager()).hostnameVerifier(new RecordingHostnameVerifier()).build());
  HttpURLConnection connection1=urlFactory.open(server.url("/").url());
  assertContent("this response comes via HTTPS",connection1);
  SSLContext sslContext2=Platform.get().getSSLContext();
  sslContext2.init(null,null,null);
  SSLSocketFactory sslSocketFactory2=sslContext2.getSocketFactory();
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init((KeyStore)null);
  X509TrustManager trustManager=(X509TrustManager)trustManagerFactory.getTrustManagers()[0];
  urlFactory.setClient(urlFactory.client().newBuilder().sslSocketFactory(sslSocketFactory2,trustManager).build());
  HttpURLConnection connection2=urlFactory.open(server.url("/").url());
  try {
    readAscii(connection2.getInputStream(),Integer.MAX_VALUE);
    fail("without an SSL socket factory, the connection should fail");
  }
 catch (  SSLException expected) {
  }
}
