@Test public void testAbandonedCloseWithExceptions() throws Exception {
  ds.setRemoveAbandonedTimeout(0);
  ds.setMaxTotal(1);
  ds.setAccessToUnderlyingConnectionAllowed(true);
  final Connection conn1=getConnection();
  assertNotNull(conn1);
  assertEquals(1,ds.getNumActive());
  final Connection conn2=getConnection();
  assertNotNull(conn2);
  assertEquals(1,ds.getNumActive());
  final TesterConnection tconn1=(TesterConnection)((DelegatingConnection<?>)conn1).getInnermostDelegate();
  tconn1.setFailure(new IOException("network error"));
  final TesterConnection tconn2=(TesterConnection)((DelegatingConnection<?>)conn2).getInnermostDelegate();
  tconn2.setFailure(new IOException("network error"));
  try {
    conn2.close();
  }
 catch (  final SQLException ex) {
  }
  assertEquals(0,ds.getNumActive());
  try {
    conn1.close();
  }
 catch (  final SQLException ex) {
  }
  assertEquals(0,ds.getNumActive());
  final String string=sw.toString();
  assertTrue(string,string.contains("testAbandonedCloseWithExceptions"));
}
