@Test public void testEquals(){
  final PStmtKey pStmtKey=new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT);
  assertTrue(pStmtKey.equals(pStmtKey));
  assertFalse(pStmtKey.equals(null));
  assertFalse(pStmtKey.equals(new Object()));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 2","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT)));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 1","anothercatalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT)));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 1","catalog","private",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT)));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_SENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT)));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_UPDATABLE,StatementType.CALLABLE_STATEMENT)));
  assertFalse(pStmtKey.equals(new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.PREPARED_STATEMENT)));
  assertTrue(pStmtKey.equals(new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT)));
  assertEquals(pStmtKey.hashCode(),new PStmtKey("SELECT 1","catalog","public",java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY,StatementType.CALLABLE_STATEMENT).hashCode());
}
