/** 
 * Tests constructors with different schemas.
 */
@Test public void testCtorDifferentSchema(){
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1"),new PStmtKey("sql","catalog1","schema2"));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0),new PStmtKey("sql","catalog1","schema2",0));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0),new PStmtKey("sql","catalog1","schema2",0,0));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0,0),new PStmtKey("sql","catalog1","schema2",0,0,0));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0,0,null),new PStmtKey("sql","catalog1","schema2",0,0,0,null));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0,0,StatementType.PREPARED_STATEMENT),new PStmtKey("sql","catalog1","schema2",0,0,0,StatementType.PREPARED_STATEMENT));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0,null),new PStmtKey("sql","catalog1","schema2",0,0,null));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",0,0,StatementType.PREPARED_STATEMENT),new PStmtKey("sql","catalog1","schema2",0,0,StatementType.PREPARED_STATEMENT));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",(int[])null),new PStmtKey("sql","catalog1","schema2",(int[])null));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",new int[1]),new PStmtKey("sql","catalog1","schema2",new int[1]));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",(String[])null),new PStmtKey("sql","catalog1","schema2",(String[])null));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",new String[]{"A"}),new PStmtKey("sql","catalog1","schema2",new String[]{"A"}));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",StatementType.PREPARED_STATEMENT),new PStmtKey("sql","catalog1","schema2",StatementType.PREPARED_STATEMENT));
  Assert.assertNotEquals(new PStmtKey("sql","catalog1","schema1",StatementType.PREPARED_STATEMENT,Integer.MAX_VALUE),new PStmtKey("sql","catalog1","schema2",StatementType.PREPARED_STATEMENT,Integer.MAX_VALUE));
}
