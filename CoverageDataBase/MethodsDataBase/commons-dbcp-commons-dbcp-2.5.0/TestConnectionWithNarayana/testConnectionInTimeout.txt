@Test public void testConnectionInTimeout() throws Exception {
  Connection conn=null;
  PreparedStatement ps=null;
  for (int i=0; i < 5; i++) {
    try {
      mds.getTransactionManager().setTransactionTimeout(1);
      mds.getTransactionManager().begin();
      conn=mds.getConnection();
      ps=conn.prepareStatement(INSERT_STMT);
      ps.setString(1,Thread.currentThread().getName());
      ps.setLong(2,i);
      ps.setDouble(3,new java.util.Random().nextDouble());
      ps.setString(4,PAYLOAD);
      ps.setTimestamp(5,new Timestamp(System.currentTimeMillis()));
      ps.execute();
      int n=0;
      do {
        if (mds.getTransactionManager().getTransaction().getStatus() != Status.STATUS_ACTIVE) {
          n++;
        }
        Connection c=null;
        PreparedStatement ps2=null;
        ResultSet rs=null;
        try {
          c=mds.getConnection();
          ps2=c.prepareStatement(SELECT_STMT);
          rs=ps2.executeQuery();
        }
  finally {
          if (rs != null) {
            rs.close();
          }
          if (ps2 != null) {
            ps2.close();
          }
          if (c != null) {
            c.close();
          }
        }
      }
 while (n < 2);
      ps.close();
      ps=null;
      conn.close();
      conn=null;
      try {
        mds.getTransactionManager().commit();
        fail("Should not have been able to commit");
      }
 catch (      final RollbackException e) {
        if (mds.getTransactionManager().getTransaction() != null) {
          mds.getTransactionManager().rollback();
        }
      }
    }
 catch (    final Exception e) {
      if (mds.getTransactionManager().getTransaction() != null) {
        mds.getTransactionManager().rollback();
      }
    }
 finally {
      if (ps != null) {
        ps.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
    Assert.assertEquals(0,mds.getNumActive());
  }
}
