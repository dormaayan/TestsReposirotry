@Test public void testClosePool() throws Exception {
  DriverManager.registerDriver(new TesterDriver());
  final ConnectionFactory connFactory=new DriverManagerConnectionFactory("jdbc:apache:commons:testdriver","u1","p1");
  final PoolableConnectionFactory pcf=new PoolableConnectionFactory(connFactory,null);
  pcf.setPoolStatements(true);
  pcf.setDefaultReadOnly(Boolean.FALSE);
  pcf.setDefaultAutoCommit(Boolean.TRUE);
  final ObjectPool<PoolableConnection> connPool=new GenericObjectPool<>(pcf);
  pcf.setPool(connPool);
  final PoolingDataSource<?> ds=new PoolingDataSource<>(connPool);
  ((PoolingDataSource<?>)ds).setAccessToUnderlyingConnectionAllowed(true);
  final Connection conn=ds.getConnection();
  try (Statement s=conn.prepareStatement("select 1 from dual")){
  }
   final Connection poolableConnection=((DelegatingConnection<?>)conn).getDelegate();
  final Connection poolingConnection=((DelegatingConnection<?>)poolableConnection).getDelegate();
  poolingConnection.close();
  try (PreparedStatement ps=conn.prepareStatement("select 1 from dual")){
    fail("Expecting SQLException");
  }
 catch (  final SQLException ex) {
    assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
  }
  ds.close();
}
