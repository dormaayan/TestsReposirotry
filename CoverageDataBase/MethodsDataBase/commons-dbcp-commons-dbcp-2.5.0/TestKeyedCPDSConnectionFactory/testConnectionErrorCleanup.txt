/** 
 * JIRA DBCP-216 Verify that pool counters are maintained properly and listeners are cleaned up when a PooledConnection throws a connectionError event.
 */
@Test public void testConnectionErrorCleanup() throws Exception {
  final UserPassKey key=new UserPassKey("userName","password");
  final KeyedCPDSConnectionFactory factory=new KeyedCPDSConnectionFactory(cpds,null,-1,false);
  final KeyedObjectPool<UserPassKey,PooledConnectionAndInfo> pool=new GenericKeyedObjectPool<>(factory);
  factory.setPool(pool);
  final PooledConnection pcon1=pool.borrowObject(key).getPooledConnection();
  final Connection con1=pcon1.getConnection();
  final PooledConnection pcon2=pool.borrowObject(key).getPooledConnection();
  assertEquals(2,pool.getNumActive(key));
  assertEquals(0,pool.getNumIdle(key));
  final PooledConnectionProxy pc=(PooledConnectionProxy)pcon1;
  assertTrue(pc.getListeners().contains(factory));
  pc.throwConnectionError();
  assertEquals(1,pool.getNumActive(key));
  assertEquals(0,pool.getNumIdle(key));
  pc.throwConnectionError();
  assertEquals(1,pool.getNumActive(key));
  assertEquals(0,pool.getNumIdle(key));
  final PooledConnection pcon3=pool.borrowObject(key).getPooledConnection();
  assertTrue(!pcon3.equals(pcon1));
  assertTrue(!pc.getListeners().contains(factory));
  assertEquals(2,pool.getNumActive(key));
  assertEquals(0,pool.getNumIdle(key));
  pcon2.getConnection().close();
  pcon3.getConnection().close();
  assertEquals(2,pool.getNumIdle(key));
  assertEquals(0,pool.getNumActive(key));
  try {
    pc.getConnection();
    fail("Expecting SQLException using closed PooledConnection");
  }
 catch (  final SQLException ex) {
  }
  con1.close();
  assertEquals(2,pool.getNumIdle(key));
  assertEquals(0,pool.getNumActive(key));
  factory.getPool().clear();
  assertEquals(0,pool.getNumIdle(key));
}
