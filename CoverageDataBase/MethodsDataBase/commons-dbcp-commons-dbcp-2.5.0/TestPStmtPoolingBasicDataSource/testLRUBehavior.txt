/** 
 * Verifies that the prepared statement pool behaves as an LRU cache, closing least-recently-used statements idle in the pool to make room for new ones if necessary.
 */
@Test public void testLRUBehavior() throws Exception {
  ds.setMaxOpenPreparedStatements(3);
  final Connection conn=getConnection();
  assertNotNull(conn);
  final PreparedStatement stmt1=conn.prepareStatement("select 'a' from dual");
  final PreparedStatement inner1=(PreparedStatement)((DelegatingPreparedStatement)stmt1).getInnermostDelegate();
  final PreparedStatement stmt2=conn.prepareStatement("select 'b' from dual");
  final PreparedStatement inner2=(PreparedStatement)((DelegatingPreparedStatement)stmt2).getInnermostDelegate();
  final PreparedStatement stmt3=conn.prepareStatement("select 'c' from dual");
  final PreparedStatement inner3=(PreparedStatement)((DelegatingPreparedStatement)stmt3).getInnermostDelegate();
  stmt1.close();
  Thread.sleep(100);
  stmt2.close();
  Thread.sleep(100);
  stmt3.close();
  final PreparedStatement stmt4=conn.prepareStatement("select 'd' from dual");
  assertNotNull(stmt4);
  try {
    inner1.clearParameters();
    fail("expecting SQLExcption - statement should be closed");
  }
 catch (  final SQLException ex) {
  }
  inner2.clearParameters();
  inner3.clearParameters();
  final PreparedStatement stmt5=conn.prepareStatement("select 'a' from dual");
  final PreparedStatement inner5=(PreparedStatement)((DelegatingPreparedStatement)stmt5).getInnermostDelegate();
  assertNotSame(inner5,inner1);
  try {
    inner2.clearParameters();
    fail("expecting SQLExcption - statement should be closed");
  }
 catch (  final SQLException ex) {
  }
  inner3.clearParameters();
}
