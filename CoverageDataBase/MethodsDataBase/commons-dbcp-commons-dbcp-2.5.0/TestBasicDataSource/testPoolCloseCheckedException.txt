/** 
 * Verifies correct handling of exceptions generated by the underlying pool as it closes connections in response to BDS#close. Exceptions have to be either swallowed by the underlying pool and logged, or propagated and wrapped.
 */
@Test public void testPoolCloseCheckedException() throws Exception {
  ds.setAccessToUnderlyingConnectionAllowed(true);
  final Connection conn=ds.getConnection();
  final TesterConnection tc=(TesterConnection)((DelegatingConnection<?>)conn).getInnermostDelegate();
  conn.close();
  tc.setFailure(new SQLException("bang"));
  try {
    StackMessageLog.lock();
    StackMessageLog.clear();
    ds.close();
    final String message=StackMessageLog.popMessage();
    Assert.assertNotNull(message);
    assertTrue(message.indexOf("bang") > 0);
  }
 catch (  final SQLException ex) {
    assertTrue(ex.getMessage().indexOf("Cannot close") > 0);
    assertTrue(ex.getCause().getMessage().indexOf("bang") > 0);
  }
 finally {
    StackMessageLog.unLock();
  }
}
