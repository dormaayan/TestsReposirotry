@Test public void testNonDefaultFileSystem() throws Exception {
  Path zipFile=Files.createTempFile("undertow",".zip");
  try {
    String expectedText="Hello, world!";
    byte[] expectedBytes=expectedText.getBytes(StandardCharsets.UTF_8);
    try (OutputStream os=Files.newOutputStream(zipFile);BufferedOutputStream bos=new BufferedOutputStream(os);ZipOutputStream zos=new ZipOutputStream(bos)){
      zos.putNextEntry(new ZipEntry("dir/"));
      zos.closeEntry();
      zos.putNextEntry(new ZipEntry("dir/resource.txt"));
      zos.write(expectedBytes);
      zos.closeEntry();
      zos.putNextEntry(new ZipEntry("root_resource.txt"));
      zos.write(expectedBytes);
      zos.closeEntry();
    }
     try (FileSystem zipFileSystem=FileSystems.newFileSystem(zipFile,null)){
      PathResourceManager resourceManager=new PathResourceManager(zipFileSystem.getPath("/dir"));
      Resource resource=resourceManager.getResource("resource.txt");
      Assert.assertArrayEquals(expectedBytes,Files.readAllBytes(resource.getFilePath()));
      try {
        resourceManager.registerResourceChangeListener(changes -> {
        }
);
        Assert.fail("registerResourceChangeListener should have failed");
      }
 catch (      IllegalStateException expected) {
      }
      try {
        resource.getFile();
        Assert.fail("getFile should have failed");
      }
 catch (      UnsupportedOperationException expected) {
      }
      Resource dir=resourceManager.getResource(".");
      Assert.assertTrue(dir.isDirectory());
      List<Resource> list=dir.list();
      Assert.assertEquals(1,list.size());
      Assert.assertEquals(resource.getFilePath(),list.get(0).getFilePath());
      Resource outside=resourceManager.getResource("../root_resource.txt");
      Assert.assertNull(outside);
      Resource doesNotExist=resourceManager.getResource("does_not_exist.txt");
      Assert.assertNull(doesNotExist);
      resourceManager.setBase(Paths.get(getClass().getResource("page.html").toURI()).getParent());
      Assert.assertNotNull(resourceManager.getResource("page.html"));
      resourceManager.setBase(zipFileSystem.getPath("/"));
      Assert.assertNotNull(resourceManager.getResource("root_resource.txt"));
      resourceManager.setBase(new File(getClass().getResource("page.html").toURI()).getParentFile());
      Assert.assertNotNull(resourceManager.getResource("page.html"));
    }
   }
  finally {
    Files.deleteIfExists(zipFile);
  }
}
