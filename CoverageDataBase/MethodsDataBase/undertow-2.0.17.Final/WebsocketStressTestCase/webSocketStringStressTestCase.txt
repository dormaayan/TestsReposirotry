@Test public void webSocketStringStressTestCase() throws Exception {
  List<CountDownLatch> latches=new ArrayList<>();
  for (int i=0; i < NUM_THREADS; ++i) {
    final CountDownLatch latch=new CountDownLatch(1);
    latches.add(latch);
    final Session session=deployment.connectToServer(new Endpoint(){
      @Override public void onOpen(      Session session,      EndpointConfig config){
      }
      @Override public void onClose(      Session session,      CloseReason closeReason){
        latch.countDown();
      }
      @Override public void onError(      Session session,      Throwable thr){
        latch.countDown();
      }
    }
,null,new URI("ws://" + DefaultServer.getHostAddress("default") + ":"+ DefaultServer.getHostPort("default")+ "/ws/stress"));
    final int thread=i;
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          executor.submit(new SendRunnable(session,thread,executor));
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  for (  CountDownLatch future : latches) {
    future.await(40,TimeUnit.SECONDS);
  }
  for (int t=0; t < NUM_THREADS; ++t) {
    for (int i=0; i < NUM_REQUESTS; ++i) {
      String msg="t-" + t + "-m-"+ i;
      Assert.assertTrue(msg,StressEndpoint.MESSAGES.remove(msg));
    }
  }
  Assert.assertEquals(0,StressEndpoint.MESSAGES.size());
}
