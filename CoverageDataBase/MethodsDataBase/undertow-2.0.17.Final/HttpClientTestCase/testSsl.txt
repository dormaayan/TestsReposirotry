@Test public void testSsl() throws Exception {
  final UndertowClient client=createClient();
  final List<ClientResponse> responses=new CopyOnWriteArrayList<>();
  final CountDownLatch latch=new CountDownLatch(10);
  DefaultServer.startSSLServer();
  SSLContext context=DefaultServer.getClientSSLContext();
  XnioSsl ssl=new UndertowXnioSsl(DefaultServer.getWorker().getXnio(),OptionMap.EMPTY,DefaultServer.SSL_BUFFER_POOL,context);
  final ClientConnection connection=client.connect(new URI(DefaultServer.getDefaultServerSSLAddress()),worker,ssl,DefaultServer.getBufferPool(),OptionMap.EMPTY).get();
  try {
    connection.getIoThread().execute(new Runnable(){
      @Override public void run(){
        for (int i=0; i < 10; i++) {
          final ClientRequest request=new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
          request.getRequestHeaders().put(Headers.HOST,DefaultServer.getHostAddress());
          connection.sendRequest(request,createClientCallback(responses,latch));
        }
      }
    }
);
    latch.await(10,TimeUnit.SECONDS);
    Assert.assertEquals(10,responses.size());
    for (    final ClientResponse response : responses) {
      Assert.assertEquals(message,response.getAttachment(RESPONSE_BODY));
    }
  }
  finally {
    connection.getIoThread().execute(new Runnable(){
      @Override public void run(){
        IoUtils.safeClose(connection);
      }
    }
);
    DefaultServer.stopSSLServer();
  }
}
