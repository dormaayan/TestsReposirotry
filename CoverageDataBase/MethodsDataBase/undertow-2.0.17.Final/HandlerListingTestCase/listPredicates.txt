@Test public void listPredicates(){
  out.println();
  out.println();
  out.println();
  out.println("predicates");
  ArrayList<PredicateBuilder> builds=new ArrayList<PredicateBuilder>();
  for (  PredicateBuilder i : ServiceLoader.load(PredicateBuilder.class,getClass().getClassLoader())) {
    builds.add(i);
  }
  Collections.sort(builds,new Comparator<PredicateBuilder>(){
    @Override public int compare(    PredicateBuilder o1,    PredicateBuilder o2){
      return o1.name().compareTo(o2.name());
    }
  }
);
  for (  PredicateBuilder handler : builds) {
    out.print("|" + handler.name());
    out.print("\t|");
    List<String> parms=new ArrayList<>(handler.parameters().keySet());
    Collections.sort(parms);
    Iterator<String> it=parms.iterator();
    while (it.hasNext()) {
      String paramName=it.next();
      out.print(paramName + ": ");
      Class<?> obj=handler.parameters().get(paramName);
      if (obj == ExchangeAttribute.class) {
        out.print("attribute");
      }
 else       if (obj.equals(ExchangeAttribute[].class)) {
        out.print("attribute[]");
      }
 else       if (obj.equals(String.class)) {
        out.print("String");
      }
 else       if (obj.equals(String[].class)) {
        out.print("String[]");
      }
 else       if (obj.equals(Long.class)) {
        out.print("Long");
      }
 else       if (obj.equals(Long[].class)) {
        out.print("Long[]");
      }
 else       if (obj.equals(Boolean.class)) {
        out.print("Boolean");
      }
 else {
        out.print(obj);
      }
      if (handler.requiredParameters().contains(paramName)) {
        out.print(" (required)");
      }
      if (it.hasNext()) {
        out.print(", ");
      }
    }
    out.print("\t|");
    if (handler.defaultParameter() != null) {
      out.print(handler.defaultParameter());
    }
    out.print("\t|\n");
  }
}
