@Test public void testMetrics() throws Exception {
  final TestMetricsCollector metricsCollector=new TestMetricsCollector();
  CompletionLatchHandler completionLatchHandler;
  final PathHandler root=new PathHandler();
  final ServletContainer container=ServletContainer.Factory.newInstance();
  DeploymentInfo builder=new DeploymentInfo().setClassIntrospecter(TestClassIntrospector.INSTANCE).setClassLoader(ServletPathMappingTestCase.class.getClassLoader()).setContextPath("/servletContext").setDeploymentName("servletContext.war").setResourceManager(new TestResourceLoader(DefaultServletTestCase.class));
  builder.addServlet(new ServletInfo("MetricTestServlet",MetricTestServlet.class).addMapping("/path/default"));
  builder.addFilter(new FilterInfo("Filter",HelloFilter.class));
  builder.addFilterUrlMapping("Filter","/filterpath/*",DispatcherType.REQUEST);
  builder.setMetricsCollector(metricsCollector);
  DeploymentManager manager=container.addDeployment(builder);
  manager.deploy();
  root.addPrefixPath(builder.getContextPath(),manager.start());
  DefaultServer.setRootHandler(completionLatchHandler=new CompletionLatchHandler(root));
  HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/path/default");
  TestHttpClient client=new TestHttpClient();
  try {
    HttpResponse result=client.execute(get);
    Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Assert.assertTrue(HttpClientUtils.readResponse(result).contains("metric"));
    completionLatchHandler.await();
    completionLatchHandler.reset();
    MetricsHandler.MetricResult metrics=metricsCollector.getMetrics("MetricTestServlet");
    Assert.assertEquals(1,metrics.getTotalRequests());
    Assert.assertTrue(metrics.getMaxRequestTime() > 0);
    Assert.assertEquals(metrics.getMinRequestTime(),metrics.getMaxRequestTime());
    Assert.assertEquals(metrics.getMaxRequestTime(),metrics.getTotalRequestTime());
    result=client.execute(get);
    Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Assert.assertTrue(HttpClientUtils.readResponse(result).contains("metric"));
    completionLatchHandler.await();
    completionLatchHandler.reset();
    metrics=metricsCollector.getMetrics("MetricTestServlet");
    Assert.assertEquals(2,metrics.getTotalRequests());
  }
  finally {
    client.getConnectionManager().shutdown();
  }
}
