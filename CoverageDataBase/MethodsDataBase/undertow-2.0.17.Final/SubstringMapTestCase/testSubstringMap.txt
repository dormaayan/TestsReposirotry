@Test public void testSubstringMap(){
  SubstringMap<Integer> paths=new SubstringMap<>();
  for (int count=0; count < 10; ++count) {
    int seed=new Random().nextInt();
    Random random=new Random(seed);
    System.out.println("Using Seed " + seed);
    List<String> parts=new ArrayList<>();
    Set<String> keys=new HashSet<>();
    for (int i=0; i < NUM_TEST_VALUES; ++i) {
      String s=null;
      do {
        byte[] bytes=new byte[random.nextInt(30) + 5];
        random.nextBytes(bytes);
        s=FlexBase64.encodeString(bytes,false);
      }
 while (keys.contains(s));
      keys.add(s);
      parts.add(s);
      paths.put(s,i);
      Assert.assertEquals(Integer.valueOf(i),paths.get(s,s.length()).getValue());
      Assert.assertEquals(Integer.valueOf(i),paths.get(s + "fooosdf",s.length()).getValue());
      String missing=s + "asdfdasfasf";
      Assert.assertNull(paths.get(missing,missing.length()));
    }
    for (    String k : paths.keys()) {
      Assert.assertTrue(keys.remove(k));
    }
    Assert.assertEquals(0,keys.size());
    for (int i=0; i < NUM_TEST_VALUES; ++i) {
      String p=parts.get(i);
      Assert.assertEquals(Integer.valueOf(i),paths.get(p,p.length()).getValue());
      Assert.assertEquals(Integer.valueOf(i),paths.get(p + "asdfdsafasfw",p.length()).getValue());
    }
    for (int i=0; i < NUM_TEST_VALUES; ++i) {
      Integer p=paths.remove(parts.get(i));
      Assert.assertEquals(Integer.valueOf(i),p);
    }
  }
}
