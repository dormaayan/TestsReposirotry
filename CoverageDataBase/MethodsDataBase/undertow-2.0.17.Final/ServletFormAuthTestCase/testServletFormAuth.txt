@Test public void testServletFormAuth() throws IOException {
  TestHttpClient client=new TestHttpClient();
  client.setRedirectStrategy(new DefaultRedirectStrategy(){
    @Override public boolean isRedirected(    final HttpRequest request,    final HttpResponse response,    final HttpContext context) throws ProtocolException {
      if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
        return true;
      }
      return super.isRedirected(request,response,context);
    }
  }
);
  try {
    final String uri=DefaultServer.getDefaultServerURL() + "/servletContext/secured/test";
    HttpGet get=new HttpGet(uri);
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    String response=HttpClientUtils.readResponse(result);
    Assert.assertTrue(response.startsWith("j_security_check"));
    BasicNameValuePair[] pairs=new BasicNameValuePair[]{new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1")};
    final List<NameValuePair> data=new ArrayList<>();
    data.addAll(Arrays.asList(pairs));
    HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/j_security_check;jsessionid=dsjahfklsahdfjklsa");
    post.setEntity(new UrlEncodedFormEntity(data));
    result=client.execute(post);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    response=HttpClientUtils.readResponse(result);
    Assert.assertEquals("user1",response);
  }
  finally {
    client.getConnectionManager().shutdown();
  }
}
