@Test public void testPostRequest() throws Exception {
  final UndertowClient client=createClient();
  final String postMessage="This is a post request";
  final List<String> responses=new CopyOnWriteArrayList<>();
  final CountDownLatch latch=new CountDownLatch(10);
  final ClientConnection connection=client.connect(ADDRESS,worker,new UndertowXnioSsl(worker.getXnio(),OptionMap.EMPTY,DefaultServer.getClientSSLContext()),DefaultServer.getBufferPool(),OptionMap.create(UndertowOptions.ENABLE_HTTP2,true)).get();
  try {
    connection.getIoThread().execute(new Runnable(){
      @Override public void run(){
        for (int i=0; i < 10; i++) {
          final ClientRequest request=new ClientRequest().setMethod(Methods.POST).setPath(POST);
          request.getRequestHeaders().put(Headers.HOST,DefaultServer.getHostAddress());
          request.getRequestHeaders().put(Headers.TRANSFER_ENCODING,"chunked");
          connection.sendRequest(request,new ClientCallback<ClientExchange>(){
            @Override public void completed(            ClientExchange result){
              new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
              result.setResponseListener(new ClientCallback<ClientExchange>(){
                @Override public void completed(                ClientExchange result){
                  new StringReadChannelListener(DefaultServer.getBufferPool()){
                    @Override protected void stringDone(                    String string){
                      responses.add(string);
                      latch.countDown();
                    }
                    @Override protected void error(                    IOException e){
                      e.printStackTrace();
                      latch.countDown();
                    }
                  }
.setup(result.getResponseChannel());
                }
                @Override public void failed(                IOException e){
                  e.printStackTrace();
                  latch.countDown();
                }
              }
);
            }
            @Override public void failed(            IOException e){
              e.printStackTrace();
              latch.countDown();
            }
          }
);
        }
      }
    }
);
    latch.await(10,TimeUnit.SECONDS);
    Assert.assertEquals(10,responses.size());
    for (    final String response : responses) {
      Assert.assertEquals(postMessage,response);
    }
  }
  finally {
    IoUtils.safeClose(connection);
  }
}
