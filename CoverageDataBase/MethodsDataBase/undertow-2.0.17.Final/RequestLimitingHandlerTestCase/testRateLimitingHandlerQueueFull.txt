@Test public void testRateLimitingHandlerQueueFull() throws ExecutionException, InterruptedException {
  latch.countDown();
  latch=new CountDownLatch(1);
  ExecutorService executor=Executors.newFixedThreadPool(N_THREADS * 2);
  try {
    final List<Future<?>> futures=new ArrayList<>();
    for (int i=0; i < N_THREADS * 2; ++i) {
      futures.add(executor.submit(new Callable<String>(){
        @Override public String call(){
          TestHttpClient client=new TestHttpClient();
          try {
            HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
            HttpResponse result=client.execute(get);
            if (result.getStatusLine().getStatusCode() == 513) {
              return "513";
            }
            Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
            return HttpClientUtils.readResponse(result);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
 finally {
            client.getConnectionManager().shutdown();
          }
        }
      }
));
    }
    Thread.sleep(300);
    latch.countDown();
    for (    Future<?> future : futures) {
      String res=(String)future.get();
      Assert.assertTrue(res,res.equals("1") || res.equals("2") || res.equals("513"));
    }
    futures.clear();
    for (int i=0; i < 2; ++i) {
      futures.add(executor.submit(new Callable<String>(){
        @Override public String call(){
          TestHttpClient client=new TestHttpClient();
          try {
            HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
            HttpResponse result=client.execute(get);
            Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
            return HttpClientUtils.readResponse(result);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
 finally {
            client.getConnectionManager().shutdown();
          }
        }
      }
));
    }
    for (    Future<?> future : futures) {
      String res=(String)future.get();
      Assert.assertTrue(res,res.equals("1") || res.equals("2"));
    }
  }
  finally {
    executor.shutdown();
  }
}
