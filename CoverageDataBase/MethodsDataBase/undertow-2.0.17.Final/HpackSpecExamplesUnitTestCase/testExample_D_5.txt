@Test public void testExample_D_5() throws HpackException {
  byte[] data={0x48,0x03,0x33,0x30,0x32,0x58,0x07,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x61,0x1d,0x4d,0x6f,0x6e,0x2c,0x20,0x32,0x31,0x20,0x4f,0x63,0x74,0x20,0x32,0x30,0x31,0x33,0x20,0x32,0x30,0x3a,0x31,0x33,0x3a,0x32,0x31,0x20,0x47,0x4d,0x54,0x6e,0x17,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x77,0x77,0x77,0x2e,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63,0x6f,0x6d};
  HpackDecoder decoder=new HpackDecoder(256);
  HeaderMapEmitter emitter=new HeaderMapEmitter();
  decoder.setHeaderEmitter(emitter);
  decoder.decode(ByteBuffer.wrap(data),false);
  Assert.assertEquals(4,emitter.map.size());
  Assert.assertEquals("302",emitter.map.getFirst(new HttpString(":status")));
  Assert.assertEquals("private",emitter.map.getFirst(new HttpString("cache-control")));
  Assert.assertEquals("Mon, 21 Oct 2013 20:13:21 GMT",emitter.map.getFirst(new HttpString("date")));
  Assert.assertEquals("https://www.example.com",emitter.map.getFirst(new HttpString("location")));
  Assert.assertEquals(4,decoder.getFilledTableSlots());
  Assert.assertEquals(222,decoder.getCurrentMemorySize());
  assertTableState(decoder,1,"location","https://www.example.com");
  assertTableState(decoder,2,"date","Mon, 21 Oct 2013 20:13:21 GMT");
  assertTableState(decoder,3,"cache-control","private");
  assertTableState(decoder,4,":status","302");
  data=new byte[]{(byte)0x48,0x03,0x33,0x30,0x37,(byte)0xc1,(byte)0xc0,(byte)0xbf};
  emitter=new HeaderMapEmitter();
  decoder.setHeaderEmitter(emitter);
  decoder.decode(ByteBuffer.wrap(data),false);
  Assert.assertEquals(4,emitter.map.size());
  Assert.assertEquals("307",emitter.map.getFirst(new HttpString(":status")));
  Assert.assertEquals("private",emitter.map.getFirst(new HttpString("cache-control")));
  Assert.assertEquals("Mon, 21 Oct 2013 20:13:21 GMT",emitter.map.getFirst(new HttpString("date")));
  Assert.assertEquals("https://www.example.com",emitter.map.getFirst(new HttpString("location")));
  Assert.assertEquals(4,decoder.getFilledTableSlots());
  Assert.assertEquals(222,decoder.getCurrentMemorySize());
  assertTableState(decoder,1,":status","307");
  assertTableState(decoder,2,"location","https://www.example.com");
  assertTableState(decoder,3,"date","Mon, 21 Oct 2013 20:13:21 GMT");
  assertTableState(decoder,4,"cache-control","private");
  data=new byte[]{(byte)0x88,(byte)0xc1,0x61,0x1d,0x4d,0x6f,0x6e,0x2c,0x20,0x32,0x31,0x20,0x4f,0x63,0x74,0x20,0x32,0x30,0x31,0x33,0x20,0x32,0x30,0x3a,0x31,0x33,0x3a,0x32,0x32,0x20,0x47,0x4d,0x54,(byte)0xc0,0x5a,0x04,0x67,0x7a,0x69,0x70,0x77,0x38,0x66,0x6f,0x6f,0x3d,0x41,0x53,0x44,0x4a,0x4b,0x48,0x51,0x4b,0x42,0x5a,0x58,0x4f,0x51,0x57,0x45,0x4f,0x50,0x49,0x55,0x41,0x58,0x51,0x57,0x45,0x4f,0x49,0x55,0x3b,0x20,0x6d,0x61,0x78,0x2d,0x61,0x67,0x65,0x3d,0x33,0x36,0x30,0x30,0x3b,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x31};
  emitter=new HeaderMapEmitter();
  decoder.setHeaderEmitter(emitter);
  decoder.decode(ByteBuffer.wrap(data),false);
  Assert.assertEquals(6,emitter.map.size());
  Assert.assertEquals("200",emitter.map.getFirst(new HttpString(":status")));
  Assert.assertEquals("private",emitter.map.getFirst(new HttpString("cache-control")));
  Assert.assertEquals("Mon, 21 Oct 2013 20:13:22 GMT",emitter.map.getFirst(new HttpString("date")));
  Assert.assertEquals("https://www.example.com",emitter.map.getFirst(new HttpString("location")));
  Assert.assertEquals("foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1",emitter.map.getFirst(new HttpString("set-cookie")));
  Assert.assertEquals("gzip",emitter.map.getFirst(new HttpString("content-encoding")));
  Assert.assertEquals(3,decoder.getFilledTableSlots());
  Assert.assertEquals(215,decoder.getCurrentMemorySize());
  assertTableState(decoder,1,"set-cookie","foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1");
  assertTableState(decoder,2,"content-encoding","gzip");
  assertTableState(decoder,3,"date","Mon, 21 Oct 2013 20:13:22 GMT");
}
