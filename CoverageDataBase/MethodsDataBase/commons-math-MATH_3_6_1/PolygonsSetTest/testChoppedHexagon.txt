@Test public void testChoppedHexagon(){
  double pi6=FastMath.PI / 6.0;
  double sqrt3=FastMath.sqrt(3.0);
  SubLine[] hyp={new Line(new Vector2D(0.0,1.0),5 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(-sqrt3,1.0),7 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(-sqrt3,1.0),9 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(-sqrt3,0.0),11 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(0.0,0.0),13 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(0.0,1.0),3 * pi6,1.0e-10).wholeHyperplane(),new Line(new Vector2D(-5.0 * sqrt3 / 6.0,0.0),9 * pi6,1.0e-10).wholeHyperplane()};
  hyp[1]=(SubLine)hyp[1].split(hyp[0].getHyperplane()).getMinus();
  hyp[2]=(SubLine)hyp[2].split(hyp[1].getHyperplane()).getMinus();
  hyp[3]=(SubLine)hyp[3].split(hyp[2].getHyperplane()).getMinus();
  hyp[4]=(SubLine)hyp[4].split(hyp[3].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
  hyp[5]=(SubLine)hyp[5].split(hyp[4].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
  hyp[6]=(SubLine)hyp[6].split(hyp[3].getHyperplane()).getMinus().split(hyp[1].getHyperplane()).getMinus();
  BSPTree<Euclidean2D> tree=new BSPTree<Euclidean2D>(Boolean.TRUE);
  for (int i=hyp.length - 1; i >= 0; --i) {
    tree=new BSPTree<Euclidean2D>(hyp[i],new BSPTree<Euclidean2D>(Boolean.FALSE),tree,null);
  }
  PolygonsSet set=new PolygonsSet(tree,1.0e-10);
  SubLine splitter=new Line(new Vector2D(-2.0 * sqrt3 / 3.0,0.0),9 * pi6,1.0e-10).wholeHyperplane();
  PolygonsSet slice=new PolygonsSet(new BSPTree<Euclidean2D>(splitter,set.getTree(false).split(splitter).getPlus(),new BSPTree<Euclidean2D>(Boolean.FALSE),null),1.0e-10);
  Assert.assertEquals(Region.Location.OUTSIDE,slice.checkPoint(new Vector2D(0.1,0.5)));
  Assert.assertEquals(11.0 / 3.0,slice.getBoundarySize(),1.0e-10);
}
