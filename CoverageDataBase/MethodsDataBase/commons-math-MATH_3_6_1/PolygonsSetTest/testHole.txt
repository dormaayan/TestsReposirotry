@Test public void testHole(){
  Vector2D[][] vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(3.0,0.0),new Vector2D(3.0,3.0),new Vector2D(0.0,3.0)},new Vector2D[]{new Vector2D(1.0,2.0),new Vector2D(2.0,2.0),new Vector2D(2.0,1.0),new Vector2D(1.0,1.0)}};
  PolygonsSet set=buildSet(vertices);
  checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(0.5,0.5),new Vector2D(1.5,0.5),new Vector2D(2.5,0.5),new Vector2D(0.5,1.5),new Vector2D(2.5,1.5),new Vector2D(0.5,2.5),new Vector2D(1.5,2.5),new Vector2D(2.5,2.5),new Vector2D(0.5,1.0)});
  checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(1.5,1.5),new Vector2D(3.5,1.0),new Vector2D(4.0,1.5),new Vector2D(6.0,6.0)});
  checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(1.5,0.0),new Vector2D(1.5,1.0),new Vector2D(1.5,2.0),new Vector2D(1.5,3.0),new Vector2D(3.0,3.0)});
  checkVertices(set.getVertices(),vertices);
  for (double x=-0.999; x < 3.999; x+=0.11) {
    Vector2D v=new Vector2D(x,x + 0.5);
    BoundaryProjection<Euclidean2D> projection=set.projectToBoundary(v);
    Assert.assertTrue(projection.getOriginal() == v);
    Vector2D p=(Vector2D)projection.getProjected();
    if (x < -0.5) {
      Assert.assertEquals(0.0,p.getX(),1.0e-10);
      Assert.assertEquals(0.0,p.getY(),1.0e-10);
      Assert.assertEquals(+v.distance(Vector2D.ZERO),projection.getOffset(),1.0e-10);
    }
 else     if (x < 0.5) {
      Assert.assertEquals(0.0,p.getX(),1.0e-10);
      Assert.assertEquals(v.getY(),p.getY(),1.0e-10);
      Assert.assertEquals(-v.getX(),projection.getOffset(),1.0e-10);
    }
 else     if (x < 1.25) {
      Assert.assertEquals(1.0,p.getX(),1.0e-10);
      Assert.assertEquals(v.getY(),p.getY(),1.0e-10);
      Assert.assertEquals(v.getX() - 1.0,projection.getOffset(),1.0e-10);
    }
 else     if (x < 2.0) {
      Assert.assertEquals(v.getX(),p.getX(),1.0e-10);
      Assert.assertEquals(2.0,p.getY(),1.0e-10);
      Assert.assertEquals(2.0 - v.getY(),projection.getOffset(),1.0e-10);
    }
 else     if (x < 3.0) {
      Assert.assertEquals(v.getX(),p.getX(),1.0e-10);
      Assert.assertEquals(3.0,p.getY(),1.0e-10);
      Assert.assertEquals(v.getY() - 3.0,projection.getOffset(),1.0e-10);
    }
 else {
      Assert.assertEquals(3.0,p.getX(),1.0e-10);
      Assert.assertEquals(3.0,p.getY(),1.0e-10);
      Assert.assertEquals(+v.distance(new Vector2D(3,3)),projection.getOffset(),1.0e-10);
    }
  }
}
