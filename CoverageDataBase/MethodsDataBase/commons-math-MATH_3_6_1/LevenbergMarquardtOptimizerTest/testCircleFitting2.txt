@Test public void testCircleFitting2(){
  final double xCenter=123.456;
  final double yCenter=654.321;
  final double xSigma=10;
  final double ySigma=15;
  final double radius=111.111;
  final long seed=59421061L;
  final RandomCirclePointGenerator factory=new RandomCirclePointGenerator(xCenter,yCenter,radius,xSigma,ySigma,seed);
  final CircleProblem circle=new CircleProblem(xSigma,ySigma);
  final int numPoints=10;
  for (  Vector2D p : factory.generate(numPoints)) {
    circle.addPoint(p.getX(),p.getY());
  }
  final double[] init={90,659,115};
  final LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();
  final PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(circle.target()),new Weight(circle.weight()),new InitialGuess(init));
  final double[] paramFound=optimum.getPoint();
  final double[] asymptoticStandardErrorFound=optimizer.computeSigma(paramFound,1e-14);
  Assert.assertEquals(xCenter,paramFound[0],asymptoticStandardErrorFound[0]);
  Assert.assertEquals(yCenter,paramFound[1],asymptoticStandardErrorFound[1]);
  Assert.assertEquals(radius,paramFound[2],asymptoticStandardErrorFound[2]);
}
