@Test public void testRoundFloat(){
  float x=1.234567890f;
  Assert.assertEquals(1.23f,Precision.round(x,2),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4),0.0);
  Assert.assertEquals(30.1f,Precision.round(30.095f,2),0.0f);
  Assert.assertEquals(30.1f,Precision.round(30.095f,1),0.0f);
  Assert.assertEquals(50.09f,Precision.round(50.085f,2),0.0f);
  Assert.assertEquals(50.19f,Precision.round(50.185f,2),0.0f);
  Assert.assertEquals(50.01f,Precision.round(50.005f,2),0.0f);
  Assert.assertEquals(30.01f,Precision.round(30.005f,2),0.0f);
  Assert.assertEquals(30.65f,Precision.round(30.645f,2),0.0f);
  Assert.assertEquals(1.24f,Precision.round(x,2,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(-1.234f,Precision.round(-x,3,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(-1.2345f,Precision.round(-x,4,BigDecimal.ROUND_CEILING),0.0);
  Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(1.234f,Precision.round(x,3,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(1.2345f,Precision.round(x,4,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(-1.234f,Precision.round(-x,3,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(-1.2345f,Precision.round(-x,4,BigDecimal.ROUND_DOWN),0.0);
  Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(1.234f,Precision.round(x,3,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(1.2345f,Precision.round(x,4,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(-1.24f,Precision.round(-x,2,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_FLOOR),0.0);
  Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(1.234f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(-1.234f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);
  Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(1.234f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(-1.234f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(1.236f,Precision.round(1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(-1.236f,Precision.round(-1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);
  Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(1.235f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);
  Assert.assertEquals(-1.23f,Precision.round(-1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);
  Assert.assertEquals(1.23f,Precision.round(1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);
  try {
    Precision.round(1.234f,2,BigDecimal.ROUND_UNNECESSARY);
    Assert.fail();
  }
 catch (  MathArithmeticException ex) {
  }
  Assert.assertEquals(1.24f,Precision.round(x,2,BigDecimal.ROUND_UP),0.0);
  Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_UP),0.0);
  Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_UP),0.0);
  Assert.assertEquals(-1.24f,Precision.round(-x,2,BigDecimal.ROUND_UP),0.0);
  Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_UP),0.0);
  Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_UP),0.0);
  try {
    Precision.round(1.234f,2,1923);
    Assert.fail();
  }
 catch (  MathIllegalArgumentException ex) {
  }
  TestUtils.assertEquals(Float.NaN,Precision.round(Float.NaN,2),0.0f);
  Assert.assertEquals(0.0f,Precision.round(0.0f,2),0.0f);
  Assert.assertEquals(Float.POSITIVE_INFINITY,Precision.round(Float.POSITIVE_INFINITY,2),0.0f);
  Assert.assertEquals(Float.NEGATIVE_INFINITY,Precision.round(Float.NEGATIVE_INFINITY,2),0.0f);
  Assert.assertEquals("-0.0",Float.toString(Precision.round(-0.0f,0)));
  Assert.assertEquals("-0.0",Float.toString(Precision.round(-1e-10f,0)));
  Assert.assertEquals(0.0f,Precision.round(0f,2,BigDecimal.ROUND_UP),0.0f);
  Assert.assertEquals(0.05f,Precision.round(0.05f,2,BigDecimal.ROUND_UP),0.0f);
  Assert.assertEquals(0.06f,Precision.round(0.051f,2,BigDecimal.ROUND_UP),0.0f);
  Assert.assertEquals(0.06f,Precision.round(0.0505f,2,BigDecimal.ROUND_UP),0.0f);
  Assert.assertEquals(0.06f,Precision.round(0.059f,2,BigDecimal.ROUND_UP),0.0f);
}
