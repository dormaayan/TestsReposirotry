@Test public void testEqualsWithRelativeTolerance(){
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d,0d,0d));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d,1 / Double.NEGATIVE_INFINITY,0d));
  final double eps=1e-14;
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654988,eps));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654987,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654948,eps));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654949,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Precision.SAFE_MIN,0.0,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.0000000000001e-300,1e-300,eps));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.00000000000001e-300,1e-300,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,1.23,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY,1.23,eps));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,eps));
  Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN,1.23,eps));
  Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN,Double.NaN,eps));
}
