@Test public void testEqualsIncludingNaNWithAllowedUlps(){
  Assert.assertTrue(Precision.equalsIncludingNaN(0.0,-0.0,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(1.0,1 + FastMath.ulp(1d),1));
  Assert.assertFalse(Precision.equalsIncludingNaN(1.0,1 + 2 * FastMath.ulp(1d),1));
  final double nUp1=FastMath.nextAfter(1d,Double.POSITIVE_INFINITY);
  final double nnUp1=FastMath.nextAfter(nUp1,Double.POSITIVE_INFINITY);
  Assert.assertTrue(Precision.equalsIncludingNaN(1.0,nUp1,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(nUp1,nnUp1,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(1.0,nnUp1,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(0.0,FastMath.ulp(0d),1));
  Assert.assertTrue(Precision.equalsIncludingNaN(0.0,-FastMath.ulp(0d),1));
  Assert.assertTrue(Precision.equalsIncludingNaN(153.0,153.0,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(153.0,153.00000000000003,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(153.0,153.00000000000006,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(153.0,152.99999999999997,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(153,152.99999999999994,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(-128.0,-127.99999999999999,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(-128.0,-127.99999999999997,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(-128.0,-128.00000000000003,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(-128.0,-128.00000000000006,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(Double.MAX_VALUE,Double.POSITIVE_INFINITY,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY,1));
  Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN,Double.NaN,1));
  Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,100000));
}
