@Test public void testCertainSpace(){
  KMeansPlusPlusClusterer.EmptyClusterStrategy[] strategies={KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT};
  for (  KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies) {
    int numberOfVariables=27;
    int position1=1;
    int position2=position1 + numberOfVariables;
    int position3=position2 + numberOfVariables;
    int position4=position3 + numberOfVariables;
    int multiplier=1000000;
    DoublePoint[] breakingPoints=new DoublePoint[numberOfVariables];
    for (int i=0; i < numberOfVariables; i++) {
      int points[]={position1,position2,position3,position4};
      for (int j=0; j < points.length; j++) {
        points[j]*=multiplier;
      }
      DoublePoint DoublePoint=new DoublePoint(points);
      breakingPoints[i]=DoublePoint;
      position1+=numberOfVariables;
      position2+=numberOfVariables;
      position3+=numberOfVariables;
      position4+=numberOfVariables;
    }
    for (int n=2; n < 27; ++n) {
      KMeansPlusPlusClusterer<DoublePoint> transformer=new KMeansPlusPlusClusterer<DoublePoint>(n,100,new EuclideanDistance(),random,strategy);
      List<? extends Cluster<DoublePoint>> clusters=transformer.cluster(Arrays.asList(breakingPoints));
      Assert.assertEquals(n,clusters.size());
      int sum=0;
      for (      Cluster<DoublePoint> cluster : clusters) {
        sum+=cluster.getPoints().size();
      }
      Assert.assertEquals(numberOfVariables,sum);
    }
  }
}
