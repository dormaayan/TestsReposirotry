/** 
 * Using a Monte-Carlo procedure, this test checks the error estimations as provided by the square-root of the diagonal elements of the covariance matrix. <br/> The test generates sets of observations, each sampled from a Gaussian distribution. <br/> The optimization problem solved is defined in class {@link StraightLineProblem}. <br/> The output (on stdout) will be a table summarizing the distribution of parameters generated by the Monte-Carlo process and by the direct estimation provided by the diagonal elements of the covariance matrix.
 */
@Test public void testParametersErrorMonteCarloObservations(){
  final double yError=15;
  final double slope=123.456;
  final double offset=-98.765;
  final RandomStraightLinePointGenerator lineGenerator=new RandomStraightLinePointGenerator(slope,offset,yError,-1e3,1e4,138577L);
  final int numObs=100;
  final int numParams=2;
  final SummaryStatistics[] paramsFoundByDirectSolution=new SummaryStatistics[numParams];
  final SummaryStatistics[] sigmaEstimate=new SummaryStatistics[numParams];
  for (int i=0; i < numParams; i++) {
    paramsFoundByDirectSolution[i]=new SummaryStatistics();
    sigmaEstimate[i]=new SummaryStatistics();
  }
  final RealVector init=new ArrayRealVector(new double[]{slope,offset},false);
  final int mcRepeat=MONTE_CARLO_RUNS;
  int mcCount=0;
  while (mcCount < mcRepeat) {
    final Point2D.Double[] obs=lineGenerator.generate(numObs);
    final StraightLineProblem problem=new StraightLineProblem(yError);
    for (int i=0; i < numObs; i++) {
      final Point2D.Double p=obs[i];
      problem.addPoint(p.x,p.y);
    }
    final double[] regress=problem.solve();
    final LeastSquaresProblem lsp=builder(problem).build();
    final RealVector sigma=lsp.evaluate(init).getSigma(1e-14);
    for (int i=0; i < numParams; i++) {
      paramsFoundByDirectSolution[i].addValue(regress[i]);
      sigmaEstimate[i].addValue(sigma.getEntry(i));
    }
    ++mcCount;
  }
  final String line="--------------------------------------------------------------";
  System.out.println("                 True value       Mean        Std deviation");
  for (int i=0; i < numParams; i++) {
    System.out.println(line);
    System.out.println("Parameter #" + i);
    StatisticalSummary s=paramsFoundByDirectSolution[i].getSummary();
    System.out.printf("              %+.6e   %+.6e   %+.6e\n",init.getEntry(i),s.getMean(),s.getStandardDeviation());
    s=sigmaEstimate[i].getSummary();
    System.out.printf("sigma: %+.6e (%+.6e)\n",s.getMean(),s.getStandardDeviation());
  }
  System.out.println(line);
  for (int i=0; i < numParams; i++) {
    Assert.assertEquals(paramsFoundByDirectSolution[i].getSummary().getStandardDeviation(),sigmaEstimate[i].getSummary().getMean(),8e-2);
  }
}
