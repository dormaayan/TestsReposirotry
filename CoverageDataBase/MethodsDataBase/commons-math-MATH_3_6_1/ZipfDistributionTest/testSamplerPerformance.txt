@Ignore @Test public void testSamplerPerformance(){
  int[] numPointsValues={1,2,5,10,100,1000,10000};
  double[] exponentValues={1e-3,1e-2,1e-1,1.,2.,5.,10.};
  int numGeneratedSamples=1000000;
  long sum=0;
  for (  int numPoints : numPointsValues) {
    for (    double exponent : exponentValues) {
      long start=System.currentTimeMillis();
      final int[] randomNumberCounter=new int[1];
      RandomGenerator randomGenerator=new AbstractRandomGenerator(){
        private final RandomGenerator r=new Well1024a(0L);
        @Override public void setSeed(        long seed){
        }
        @Override public double nextDouble(){
          randomNumberCounter[0]+=1;
          return r.nextDouble();
        }
      }
;
      final ZipfDistribution distribution=new ZipfDistribution(randomGenerator,numPoints,exponent);
      for (int i=0; i < numGeneratedSamples; ++i) {
        sum+=distribution.sample();
      }
      long end=System.currentTimeMillis();
      System.out.println("n = " + numPoints + ", exponent = "+ exponent+ ", avg number consumed random values = "+ (double)(randomNumberCounter[0]) / numGeneratedSamples + ", measured time = " + (end - start) / 1000. + "s");
    }
  }
  System.out.println(sum);
}
