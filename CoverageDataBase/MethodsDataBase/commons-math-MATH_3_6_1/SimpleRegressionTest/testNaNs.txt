@Test public void testNaNs(){
  SimpleRegression regression=new SimpleRegression();
  Assert.assertTrue("intercept not NaN",Double.isNaN(regression.getIntercept()));
  Assert.assertTrue("slope not NaN",Double.isNaN(regression.getSlope()));
  Assert.assertTrue("slope std err not NaN",Double.isNaN(regression.getSlopeStdErr()));
  Assert.assertTrue("intercept std err not NaN",Double.isNaN(regression.getInterceptStdErr()));
  Assert.assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
  Assert.assertTrue("e not NaN",Double.isNaN(regression.getR()));
  Assert.assertTrue("r-square not NaN",Double.isNaN(regression.getRSquare()));
  Assert.assertTrue("RSS not NaN",Double.isNaN(regression.getRegressionSumSquares()));
  Assert.assertTrue("SSE not NaN",Double.isNaN(regression.getSumSquaredErrors()));
  Assert.assertTrue("SSTO not NaN",Double.isNaN(regression.getTotalSumSquares()));
  Assert.assertTrue("predict not NaN",Double.isNaN(regression.predict(0)));
  regression.addData(1,2);
  regression.addData(1,3);
  Assert.assertTrue("intercept not NaN",Double.isNaN(regression.getIntercept()));
  Assert.assertTrue("slope not NaN",Double.isNaN(regression.getSlope()));
  Assert.assertTrue("slope std err not NaN",Double.isNaN(regression.getSlopeStdErr()));
  Assert.assertTrue("intercept std err not NaN",Double.isNaN(regression.getInterceptStdErr()));
  Assert.assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
  Assert.assertTrue("e not NaN",Double.isNaN(regression.getR()));
  Assert.assertTrue("r-square not NaN",Double.isNaN(regression.getRSquare()));
  Assert.assertTrue("RSS not NaN",Double.isNaN(regression.getRegressionSumSquares()));
  Assert.assertTrue("SSE not NaN",Double.isNaN(regression.getSumSquaredErrors()));
  Assert.assertTrue("predict not NaN",Double.isNaN(regression.predict(0)));
  Assert.assertTrue("SSTO NaN",!Double.isNaN(regression.getTotalSumSquares()));
  regression=new SimpleRegression();
  regression.addData(1,2);
  regression.addData(3,3);
  Assert.assertTrue("interceptNaN",!Double.isNaN(regression.getIntercept()));
  Assert.assertTrue("slope NaN",!Double.isNaN(regression.getSlope()));
  Assert.assertTrue("slope std err not NaN",Double.isNaN(regression.getSlopeStdErr()));
  Assert.assertTrue("intercept std err not NaN",Double.isNaN(regression.getInterceptStdErr()));
  Assert.assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
  Assert.assertTrue("r NaN",!Double.isNaN(regression.getR()));
  Assert.assertTrue("r-square NaN",!Double.isNaN(regression.getRSquare()));
  Assert.assertTrue("RSS NaN",!Double.isNaN(regression.getRegressionSumSquares()));
  Assert.assertTrue("SSE NaN",!Double.isNaN(regression.getSumSquaredErrors()));
  Assert.assertTrue("SSTO NaN",!Double.isNaN(regression.getTotalSumSquares()));
  Assert.assertTrue("predict NaN",!Double.isNaN(regression.predict(0)));
  regression.addData(1,4);
  Assert.assertTrue("MSE NaN",!Double.isNaN(regression.getMeanSquareError()));
  Assert.assertTrue("slope std err NaN",!Double.isNaN(regression.getSlopeStdErr()));
  Assert.assertTrue("intercept std err NaN",!Double.isNaN(regression.getInterceptStdErr()));
}
