/** 
 * Verify that regress generates exceptions as advertised for bad model specifications.
 */
@Test public void testRegressExceptions(){
  final SimpleRegression noIntRegression=new SimpleRegression(false);
  noIntRegression.addData(noint2[0][1],noint2[0][0]);
  noIntRegression.addData(noint2[1][1],noint2[1][0]);
  noIntRegression.addData(noint2[2][1],noint2[2][0]);
  try {
    noIntRegression.regress(null);
    Assert.fail("Expecting MathIllegalArgumentException for null array");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    noIntRegression.regress(new int[]{});
    Assert.fail("Expecting MathIllegalArgumentException for empty array");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    noIntRegression.regress(new int[]{0,1});
    Assert.fail("Expecting ModelSpecificationException - too many regressors");
  }
 catch (  ModelSpecificationException ex) {
  }
  try {
    noIntRegression.regress(new int[]{1});
    Assert.fail("Expecting OutOfRangeException - invalid regression");
  }
 catch (  OutOfRangeException ex) {
  }
  final SimpleRegression regression=new SimpleRegression(true);
  regression.addData(noint2[0][1],noint2[0][0]);
  regression.addData(noint2[1][1],noint2[1][0]);
  regression.addData(noint2[2][1],noint2[2][0]);
  try {
    regression.regress(null);
    Assert.fail("Expecting MathIllegalArgumentException for null array");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    regression.regress(new int[]{});
    Assert.fail("Expecting MathIllegalArgumentException for empty array");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    regression.regress(new int[]{0,1,2});
    Assert.fail("Expecting ModelSpecificationException - too many regressors");
  }
 catch (  ModelSpecificationException ex) {
  }
  try {
    regression.regress(new int[]{1,0});
    Assert.fail("Expecting ModelSpecificationException - invalid regression");
  }
 catch (  ModelSpecificationException ex) {
  }
  try {
    regression.regress(new int[]{3,4});
    Assert.fail("Expecting OutOfRangeException");
  }
 catch (  OutOfRangeException ex) {
  }
  try {
    regression.regress(new int[]{0,2});
    Assert.fail("Expecting OutOfRangeException");
  }
 catch (  OutOfRangeException ex) {
  }
  try {
    regression.regress(new int[]{2});
    Assert.fail("Expecting OutOfRangeException");
  }
 catch (  OutOfRangeException ex) {
  }
}
