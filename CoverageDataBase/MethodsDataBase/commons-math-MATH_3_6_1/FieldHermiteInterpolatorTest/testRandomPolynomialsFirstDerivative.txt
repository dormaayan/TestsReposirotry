@Test public void testRandomPolynomialsFirstDerivative(){
  Random random=new Random(0x570803c982ca5d3bl);
  for (int i=0; i < 100; ++i) {
    int maxDegree=0;
    PolynomialFunction[] p=new PolynomialFunction[5];
    PolynomialFunction[] pPrime=new PolynomialFunction[5];
    for (int k=0; k < p.length; ++k) {
      int degree=random.nextInt(7);
      p[k]=randomPolynomial(degree,random);
      pPrime[k]=p[k].polynomialDerivative();
      maxDegree=FastMath.max(maxDegree,degree);
    }
    DfpField field=new DfpField(30);
    Dfp step=field.getOne().divide(field.newDfp(10));
    FieldHermiteInterpolator<Dfp> interpolator=new FieldHermiteInterpolator<Dfp>();
    for (int j=0; j < 1 + maxDegree / 2; ++j) {
      Dfp x=field.newDfp(j).multiply(step);
      Dfp[] values=new Dfp[p.length];
      Dfp[] derivatives=new Dfp[p.length];
      for (int k=0; k < p.length; ++k) {
        values[k]=field.newDfp(p[k].value(x.getReal()));
        derivatives[k]=field.newDfp(pPrime[k].value(x.getReal()));
      }
      interpolator.addSamplePoint(x,values,derivatives);
    }
    Dfp h=step.divide(field.newDfp(100000));
    for (int j=0; j < 20; ++j) {
      Dfp x=field.newDfp(j).multiply(step);
      Dfp[] y=interpolator.value(x);
      Dfp[] yP=interpolator.value(x.add(h));
      Dfp[] yM=interpolator.value(x.subtract(h));
      Assert.assertEquals(p.length,y.length);
      for (int k=0; k < p.length; ++k) {
        Assert.assertEquals(p[k].value(x.getReal()),y[k].getReal(),1.0e-8 * FastMath.abs(p[k].value(x.getReal())));
        Assert.assertEquals(pPrime[k].value(x.getReal()),yP[k].subtract(yM[k]).divide(h.multiply(2)).getReal(),4.0e-8 * FastMath.abs(p[k].value(x.getReal())));
      }
    }
  }
}
