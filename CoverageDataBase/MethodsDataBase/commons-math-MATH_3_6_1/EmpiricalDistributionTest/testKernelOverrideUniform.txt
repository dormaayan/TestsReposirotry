@Test public void testKernelOverrideUniform(){
  final EmpiricalDistribution dist=new UniformKernelEmpiricalDistribution(5);
  final double[] data={1d,2d,3d,4d,5d,6d,7d,8d,9d,10d,11d,12d,13d,14d,15d};
  dist.load(data);
  final double bounds[]={3d,6d,9d,12d};
  final double tol=10E-12;
  for (int i=0; i < 20; i++) {
    final double v=dist.sample();
    for (int j=0; j < bounds.length; j++) {
      Assert.assertFalse(v > bounds[j] + tol && v < bounds[j] + 1 - tol);
    }
  }
  Assert.assertEquals(0.0,dist.cumulativeProbability(1),tol);
  Assert.assertEquals(0.1,dist.cumulativeProbability(2),tol);
  Assert.assertEquals(0.6,dist.cumulativeProbability(10),tol);
  Assert.assertEquals(0.8,dist.cumulativeProbability(12),tol);
  Assert.assertEquals(0.8,dist.cumulativeProbability(13),tol);
  Assert.assertEquals(1.0,dist.cumulativeProbability(15),tol);
  Assert.assertEquals(2.0,dist.inverseCumulativeProbability(0.1),tol);
  Assert.assertEquals(3.0,dist.inverseCumulativeProbability(0.2),tol);
  Assert.assertEquals(5.0,dist.inverseCumulativeProbability(0.3),tol);
  Assert.assertEquals(6.0,dist.inverseCumulativeProbability(0.4),tol);
  Assert.assertEquals(8.0,dist.inverseCumulativeProbability(0.5),tol);
  Assert.assertEquals(9.0,dist.inverseCumulativeProbability(0.6),tol);
}
