/** 
 * Generate an error covariance matrix and sample data representing models with this error structure. Then verify that GLS estimated coefficients, on average, perform better than OLS.
 */
@Test public void testGLSEfficiency(){
  RandomGenerator rg=new JDKRandomGenerator();
  rg.setSeed(200);
  final int nObs=16;
  double[] sigma=new double[nObs];
  for (int i=0; i < nObs; i++) {
    sigma[i]=10 * rg.nextDouble();
  }
  final int numSeeds=1000;
  RealMatrix errorSeeds=MatrixUtils.createRealMatrix(numSeeds,nObs);
  for (int i=0; i < numSeeds; i++) {
    for (int j=0; j < nObs; j++) {
      errorSeeds.setEntry(i,j,rg.nextGaussian() * sigma[j]);
    }
  }
  RealMatrix cov=(new Covariance(errorSeeds)).getCovarianceMatrix();
  GaussianRandomGenerator rawGenerator=new GaussianRandomGenerator(rg);
  double[] errorMeans=new double[nObs];
  CorrelatedRandomVectorGenerator gen=new CorrelatedRandomVectorGenerator(errorMeans,cov,1.0e-12 * cov.getNorm(),rawGenerator);
  OLSMultipleLinearRegression ols=new OLSMultipleLinearRegression();
  ols.newSampleData(longley,nObs,6);
  final RealVector b=ols.calculateBeta().copy();
  final RealMatrix x=ols.getX().copy();
  GLSMultipleLinearRegression gls=new GLSMultipleLinearRegression();
  gls.newSampleData(longley,nObs,6);
  gls.newCovarianceData(cov.getData());
  DescriptiveStatistics olsBetaStats=new DescriptiveStatistics();
  DescriptiveStatistics glsBetaStats=new DescriptiveStatistics();
  final int nModels=10000;
  for (int i=0; i < nModels; i++) {
    RealVector u=MatrixUtils.createRealVector(gen.nextVector());
    double[] y=u.add(x.operate(b)).toArray();
    ols.newYSampleData(y);
    RealVector olsBeta=ols.calculateBeta();
    gls.newYSampleData(y);
    RealVector glsBeta=gls.calculateBeta();
    double dist=olsBeta.getDistance(b);
    olsBetaStats.addValue(dist * dist);
    dist=glsBeta.getDistance(b);
    glsBetaStats.addValue(dist * dist);
  }
  assert (olsBetaStats.getMean() > 1.5 * glsBetaStats.getMean());
  assert (olsBetaStats.getStandardDeviation() > glsBetaStats.getStandardDeviation());
}
