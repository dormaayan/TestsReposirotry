@Test public void testDecreasingSteps() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
  for (  TestProblemAbstract pb : new TestProblemAbstract[]{new TestProblem1(),new TestProblem2(),new TestProblem3(),new TestProblem4(),new TestProblem5(),new TestProblem6()}) {
    double previousValueError=Double.NaN;
    double previousTimeError=Double.NaN;
    for (int i=5; i < 10; ++i) {
      double step=(pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0,-i);
      FirstOrderIntegrator integ=new GillIntegrator(step);
      TestProblemHandler handler=new TestProblemHandler(pb,integ);
      integ.addStepHandler(handler);
      EventHandler[] functions=pb.getEventsHandlers();
      for (int l=0; l < functions.length; ++l) {
        integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);
      }
      double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
      if (functions.length == 0) {
        Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);
      }
      double valueError=handler.getMaximalValueError();
      if (i > 5) {
        Assert.assertTrue(valueError < 1.01 * FastMath.abs(previousValueError));
      }
      previousValueError=valueError;
      double timeError=handler.getMaximalTimeError();
      if (i > 5) {
        Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
      }
      previousTimeError=timeError;
    }
  }
}
