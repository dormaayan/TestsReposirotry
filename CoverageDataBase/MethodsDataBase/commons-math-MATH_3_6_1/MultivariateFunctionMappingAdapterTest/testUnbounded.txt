@Test public void testUnbounded(){
  final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
  final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());
  SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);
  final AbstractSimplex simplex=new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})});
  final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(wrapped.boundedToUnbounded(new double[]{1.5,2.25})));
  final double[] bounded=wrapped.unboundedToBounded(optimum.getPoint());
  Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);
  Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);
}
