@Test public void testLazyEvaluationPrecondition(){
  final RealVector dummy=new ArrayRealVector(new double[]{0});
  final MultivariateJacobianFunction m1=new MultivariateJacobianFunction(){
    public Pair<RealVector,RealMatrix> value(    RealVector notUsed){
      return new Pair<RealVector,RealMatrix>(null,null);
    }
  }
;
  try {
    LeastSquaresFactory.create(m1,dummy,dummy,null,null,0,0,true,null);
    Assert.fail("Expecting MathIllegalStateException");
  }
 catch (  MathIllegalStateException e) {
  }
  final MultivariateJacobianFunction m2=new ValueAndJacobianFunction(){
    public Pair<RealVector,RealMatrix> value(    RealVector notUsed){
      return new Pair<RealVector,RealMatrix>(null,null);
    }
    public RealVector computeValue(    final double[] params){
      return null;
    }
    public RealMatrix computeJacobian(    final double[] params){
      return null;
    }
  }
;
  LeastSquaresFactory.create(m2,dummy,dummy,null,null,0,0,true,null);
}
