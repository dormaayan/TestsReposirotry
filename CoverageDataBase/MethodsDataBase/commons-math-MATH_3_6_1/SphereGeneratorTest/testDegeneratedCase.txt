@Test public void testDegeneratedCase(){
  final List<Vector3D> support=Arrays.asList(new Vector3D(FastMath.scalb(-8039905610797991.0,-50),FastMath.scalb(-4663475464714142.0,-48),FastMath.scalb(6592658872616184.0,-49)),new Vector3D(FastMath.scalb(-8036658568968473.0,-50),FastMath.scalb(-4664256346424880.0,-48),FastMath.scalb(6591357011730307.0,-49)),new Vector3D(FastMath.scalb(-8037820142977230.0,-50),FastMath.scalb(-4665280434237813.0,-48),FastMath.scalb(6592435966112099.0,-49)),new Vector3D(FastMath.scalb(-8038007803611611.0,-50),FastMath.scalb(-4664291215918380.0,-48),FastMath.scalb(6595270610894208.0,-49)));
  EnclosingBall<Euclidean3D,Vector3D> sphere=new SphereGenerator().ballOnSupport(support);
  Assert.assertEquals(0.003616820213530053297575846168,sphere.getRadius(),1.0e-20);
  Assert.assertEquals(-7.139325643360503322823511839511,sphere.getCenter().getX(),1.0e-20);
  Assert.assertEquals(-16.571096474251747245361467833760,sphere.getCenter().getY(),1.0e-20);
  Assert.assertEquals(11.711945804096960876521111630800,sphere.getCenter().getZ(),1.0e-20);
  for (  Vector3D v : support) {
    Assert.assertTrue(sphere.contains(v,1.0e-14));
  }
}
