@Test public void testCannonball(){
  final int iterations=144;
  final double dt=0.1d;
  final double measurementNoise=30d;
  final double initialVelocity=100;
  final double angle=45;
  final Cannonball cannonball=new Cannonball(dt,angle,initialVelocity);
  final double speedX=cannonball.getXVelocity();
  final double speedY=cannonball.getYVelocity();
  final RealMatrix A=MatrixUtils.createRealMatrix(new double[][]{{1,dt,0,0},{0,1,0,0},{0,0,1,dt},{0,0,0,1}});
  final RealVector controlVector=MatrixUtils.createRealVector(new double[]{0,0,0.5 * -9.81 * dt* dt,-9.81 * dt});
  final RealMatrix B=MatrixUtils.createRealMatrix(new double[][]{{0,0,0,0},{0,0,0,0},{0,0,1,0},{0,0,0,1}});
  final RealMatrix H=MatrixUtils.createRealMatrix(new double[][]{{1,0,0,0},{0,0,0,0},{0,0,1,0},{0,0,0,0}});
  final RealVector initialState=MatrixUtils.createRealVector(new double[]{0,speedX,0,speedY});
  final double var=measurementNoise * measurementNoise;
  final RealMatrix initialErrorCovariance=MatrixUtils.createRealMatrix(new double[][]{{var,0,0,0},{0,1e-3,0,0},{0,0,var,0},{0,0,0,1e-3}});
  final RealMatrix Q=MatrixUtils.createRealMatrix(4,4);
  final RealMatrix R=MatrixUtils.createRealMatrix(new double[][]{{var,0,0,0},{0,1e-3,0,0},{0,0,var,0},{0,0,0,1e-3}});
  final ProcessModel pm=new DefaultProcessModel(A,B,Q,initialState,initialErrorCovariance);
  final MeasurementModel mm=new DefaultMeasurementModel(H,R);
  final KalmanFilter filter=new KalmanFilter(pm,mm);
  final RandomGenerator rng=new Well19937c(1000);
  final NormalDistribution dist=new NormalDistribution(rng,0,measurementNoise);
  for (int i=0; i < iterations; i++) {
    double x=cannonball.getX();
    double y=cannonball.getY();
    double nx=x + dist.sample();
    double ny=y + dist.sample();
    cannonball.step();
    filter.predict(controlVector);
    filter.correct(new double[]{nx,0,ny,0});
    double diff=FastMath.abs(cannonball.getY() - filter.getStateEstimation()[2]);
    Assert.assertTrue(Precision.compareTo(diff,measurementNoise,1e-6) < 0);
  }
  Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[0][0],9,1e-6) < 0);
  Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[2][2],9,1e-6) < 0);
}
