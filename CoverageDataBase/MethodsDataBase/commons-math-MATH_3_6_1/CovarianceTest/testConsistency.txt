/** 
 * Verify that diagonal entries are consistent with Variance computation and matrix matches column-by-column covariances
 */
@Test public void testConsistency(){
  final RealMatrix matrix=createRealMatrix(swissData,47,5);
  final RealMatrix covarianceMatrix=new Covariance(matrix).getCovarianceMatrix();
  Variance variance=new Variance();
  for (int i=0; i < 5; i++) {
    Assert.assertEquals(variance.evaluate(matrix.getColumn(i)),covarianceMatrix.getEntry(i,i),10E-14);
  }
  Assert.assertEquals(covarianceMatrix.getEntry(2,3),new Covariance().covariance(matrix.getColumn(2),matrix.getColumn(3),true),10E-14);
  Assert.assertEquals(covarianceMatrix.getEntry(2,3),covarianceMatrix.getEntry(3,2),Double.MIN_VALUE);
  RealMatrix repeatedColumns=new Array2DRowRealMatrix(47,3);
  for (int i=0; i < 3; i++) {
    repeatedColumns.setColumnMatrix(i,matrix.getColumnMatrix(0));
  }
  RealMatrix repeatedCovarianceMatrix=new Covariance(repeatedColumns).getCovarianceMatrix();
  double columnVariance=variance.evaluate(matrix.getColumn(0));
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 3; j++) {
      Assert.assertEquals(columnVariance,repeatedCovarianceMatrix.getEntry(i,j),10E-14);
    }
  }
  double[][] data=matrix.getData();
  TestUtils.assertEquals("Covariances",covarianceMatrix,new Covariance().computeCovarianceMatrix(data),Double.MIN_VALUE);
  TestUtils.assertEquals("Covariances",covarianceMatrix,new Covariance().computeCovarianceMatrix(data,true),Double.MIN_VALUE);
  double[] x=data[0];
  double[] y=data[1];
  Assert.assertEquals(new Covariance().covariance(x,y),new Covariance().covariance(x,y,true),Double.MIN_VALUE);
}
