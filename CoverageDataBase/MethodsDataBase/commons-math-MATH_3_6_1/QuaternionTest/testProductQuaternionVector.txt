@Test public final void testProductQuaternionVector(){
  final Quaternion quaternion=new Quaternion(4,7,-1,2);
  final double[] vector={2.0,1.0,3.0};
  final Quaternion qResultQxV=Quaternion.multiply(quaternion,new Quaternion(vector));
  Assert.assertEquals(-19,qResultQxV.getQ0(),EPS);
  Assert.assertEquals(3,qResultQxV.getQ1(),EPS);
  Assert.assertEquals(-13,qResultQxV.getQ2(),EPS);
  Assert.assertEquals(21,qResultQxV.getQ3(),EPS);
  final double[] vectorQ=quaternion.getVectorPart();
  final double[] vectorResultQxV=qResultQxV.getVectorPart();
  final double scalarPartRefQxV=-Vector3D.dotProduct(new Vector3D(vectorQ),new Vector3D(vector));
  Assert.assertEquals(scalarPartRefQxV,qResultQxV.getScalarPart(),EPS);
  final Vector3D vectorPartRefQxV=(new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vectorQ),new Vector3D(vector)));
  final double normQxV=(new Vector3D(vectorResultQxV).subtract(vectorPartRefQxV)).getNorm();
  Assert.assertEquals(0,normQxV,EPS);
  final Quaternion qResultVxQ=Quaternion.multiply(new Quaternion(vector),quaternion);
  Assert.assertEquals(-19,qResultVxQ.getQ0(),EPS);
  Assert.assertEquals(13,qResultVxQ.getQ1(),EPS);
  Assert.assertEquals(21,qResultVxQ.getQ2(),EPS);
  Assert.assertEquals(3,qResultVxQ.getQ3(),EPS);
  final double[] vectorResultVxQ=qResultVxQ.getVectorPart();
  final double scalarPartRefVxQ=-Vector3D.dotProduct(new Vector3D(vectorQ),new Vector3D(vector));
  Assert.assertEquals(scalarPartRefVxQ,qResultVxQ.getScalarPart(),EPS);
  final Vector3D vectorPartRefVxQ=(new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vector),new Vector3D(vectorQ)));
  final double normVxQ=(new Vector3D(vectorResultVxQ).subtract(vectorPartRefVxQ)).getNorm();
  Assert.assertEquals(0,normVxQ,EPS);
}
