@Test public void testGradient(){
  for (double r=0.2; r < 10; r+=0.5) {
    for (double theta=0; theta < 2 * FastMath.PI; theta+=0.1) {
      for (double phi=0.1; phi < FastMath.PI; phi+=0.1) {
        SphericalCoordinates sc=new SphericalCoordinates(r,theta,phi);
        DerivativeStructure svalue=valueSpherical(new DerivativeStructure(3,1,0,r),new DerivativeStructure(3,1,1,theta),new DerivativeStructure(3,1,2,phi));
        double[] sGradient=new double[]{svalue.getPartialDerivative(1,0,0),svalue.getPartialDerivative(0,1,0),svalue.getPartialDerivative(0,0,1)};
        DerivativeStructure cvalue=valueCartesian(new DerivativeStructure(3,1,0,sc.getCartesian().getX()),new DerivativeStructure(3,1,1,sc.getCartesian().getY()),new DerivativeStructure(3,1,2,sc.getCartesian().getZ()));
        Vector3D refCGradient=new Vector3D(cvalue.getPartialDerivative(1,0,0),cvalue.getPartialDerivative(0,1,0),cvalue.getPartialDerivative(0,0,1));
        Vector3D testCGradient=new Vector3D(sc.toCartesianGradient(sGradient));
        Assert.assertEquals(0,testCGradient.distance(refCGradient) / refCGradient.getNorm(),5.0e-14);
      }
    }
  }
}
