@Test public void testMultiply(){
  Decimal64 expected, actual;
  expected=new Decimal64(X * Y);
  actual=PLUS_X.multiply(PLUS_Y);
  Assert.assertEquals(expected,actual);
  actual=PLUS_Y.multiply(PLUS_X);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64(X * (-Y));
  actual=PLUS_X.multiply(MINUS_Y);
  Assert.assertEquals(expected,actual);
  actual=MINUS_Y.multiply(PLUS_X);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64((-X) * (-Y));
  actual=MINUS_X.multiply(MINUS_Y);
  Assert.assertEquals(expected,actual);
  actual=MINUS_Y.multiply(MINUS_X);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.POSITIVE_INFINITY;
  actual=PLUS_X.multiply(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.multiply(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.multiply(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.multiply(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NEGATIVE_INFINITY;
  actual=PLUS_X.multiply(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.multiply(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.multiply(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.multiply(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NAN;
  actual=PLUS_X.multiply(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.multiply(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.multiply(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.multiply(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.multiply(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.multiply(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.multiply(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
}
