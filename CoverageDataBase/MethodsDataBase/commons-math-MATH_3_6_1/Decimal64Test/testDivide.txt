@Test public void testDivide(){
  Decimal64 expected, actual;
  expected=new Decimal64(X / Y);
  actual=PLUS_X.divide(PLUS_Y);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64(X / (-Y));
  actual=PLUS_X.divide(MINUS_Y);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64((-X) / Y);
  actual=MINUS_X.divide(PLUS_Y);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64((-X) / (-Y));
  actual=MINUS_X.divide(MINUS_Y);
  Assert.assertEquals(expected,actual);
  expected=PLUS_ZERO;
  actual=PLUS_X.divide(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.divide(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  expected=MINUS_ZERO;
  actual=MINUS_X.divide(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=PLUS_X.divide(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.POSITIVE_INFINITY;
  actual=Decimal64.POSITIVE_INFINITY.divide(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.divide(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=PLUS_X.divide(PLUS_ZERO);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.divide(MINUS_ZERO);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NEGATIVE_INFINITY;
  actual=Decimal64.POSITIVE_INFINITY.divide(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.divide(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=PLUS_X.divide(MINUS_ZERO);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.divide(PLUS_ZERO);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NAN;
  actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=PLUS_X.divide(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.divide(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.divide(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.divide(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.divide(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.divide(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.divide(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=PLUS_ZERO.divide(PLUS_ZERO);
  Assert.assertEquals(expected,actual);
  actual=PLUS_ZERO.divide(MINUS_ZERO);
  Assert.assertEquals(expected,actual);
  actual=MINUS_ZERO.divide(PLUS_ZERO);
  Assert.assertEquals(expected,actual);
  actual=MINUS_ZERO.divide(MINUS_ZERO);
  Assert.assertEquals(expected,actual);
}
