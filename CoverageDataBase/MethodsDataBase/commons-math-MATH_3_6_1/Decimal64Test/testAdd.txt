@Test public void testAdd(){
  Decimal64 expected, actual;
  expected=new Decimal64(X + Y);
  actual=PLUS_X.add(PLUS_Y);
  Assert.assertEquals(expected,actual);
  actual=PLUS_Y.add(PLUS_X);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64(X + (-Y));
  actual=PLUS_X.add(MINUS_Y);
  Assert.assertEquals(expected,actual);
  actual=MINUS_Y.add(PLUS_X);
  Assert.assertEquals(expected,actual);
  expected=new Decimal64((-X) + (-Y));
  actual=MINUS_X.add(MINUS_Y);
  Assert.assertEquals(expected,actual);
  actual=MINUS_Y.add(MINUS_X);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.POSITIVE_INFINITY;
  actual=PLUS_X.add(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.add(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.add(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.add(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NEGATIVE_INFINITY;
  actual=PLUS_X.add(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.add(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.add(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.add(MINUS_X);
  Assert.assertEquals(expected,actual);
  expected=Decimal64.NAN;
  actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=PLUS_X.add(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.add(PLUS_X);
  Assert.assertEquals(expected,actual);
  actual=MINUS_X.add(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.add(MINUS_X);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.add(Decimal64.POSITIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.add(Decimal64.NEGATIVE_INFINITY);
  Assert.assertEquals(expected,actual);
  actual=Decimal64.NAN.add(Decimal64.NAN);
  Assert.assertEquals(expected,actual);
}
