@Test(expected=TestException.class) public void testNoOptimum(){
  MultivariateDifferentiableVectorOptimizer underlyingOptimizer=new MultivariateDifferentiableVectorOptimizer(){
    private GaussNewtonOptimizer gn=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1.0e-6,1.0e-6));
    public PointVectorValuePair optimize(    int maxEval,    MultivariateDifferentiableVectorFunction f,    double[] target,    double[] weight,    double[] startPoint){
      return gn.optimize(maxEval,f,target,weight,startPoint);
    }
    public int getMaxEvaluations(){
      return gn.getMaxEvaluations();
    }
    public int getEvaluations(){
      return gn.getEvaluations();
    }
    public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker(){
      return gn.getConvergenceChecker();
    }
  }
;
  JDKRandomGenerator g=new JDKRandomGenerator();
  g.setSeed(12373523445l);
  RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));
  MultivariateDifferentiableVectorMultiStartOptimizer optimizer=new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,10,generator);
  optimizer.optimize(100,new MultivariateDifferentiableVectorFunction(){
    public double[] value(    double[] point){
      throw new TestException();
    }
    public DerivativeStructure[] value(    DerivativeStructure[] point){
      return point;
    }
  }
,new double[]{2},new double[]{1},new double[]{0});
}
