@Test public void testTrivial(){
  LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});
  MultivariateDifferentiableVectorOptimizer underlyingOptimizer=new MultivariateDifferentiableVectorOptimizer(){
    private GaussNewtonOptimizer gn=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1.0e-6,1.0e-6));
    public PointVectorValuePair optimize(    int maxEval,    MultivariateDifferentiableVectorFunction f,    double[] target,    double[] weight,    double[] startPoint){
      return gn.optimize(maxEval,f,target,weight,startPoint);
    }
    public int getMaxEvaluations(){
      return gn.getMaxEvaluations();
    }
    public int getEvaluations(){
      return gn.getEvaluations();
    }
    public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker(){
      return gn.getConvergenceChecker();
    }
  }
;
  JDKRandomGenerator g=new JDKRandomGenerator();
  g.setSeed(16069223052l);
  RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));
  MultivariateDifferentiableVectorMultiStartOptimizer optimizer=new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,10,generator);
  try {
    optimizer.getOptima();
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalStateException ise) {
  }
  PointVectorValuePair optimum=optimizer.optimize(100,problem,problem.target,new double[]{1},new double[]{0});
  Assert.assertEquals(1.5,optimum.getPoint()[0],1.0e-10);
  Assert.assertEquals(3.0,optimum.getValue()[0],1.0e-10);
  PointVectorValuePair[] optima=optimizer.getOptima();
  Assert.assertEquals(10,optima.length);
  for (int i=0; i < optima.length; ++i) {
    Assert.assertEquals(1.5,optima[i].getPoint()[0],1.0e-10);
    Assert.assertEquals(3.0,optima[i].getValue()[0],1.0e-10);
  }
  Assert.assertTrue(optimizer.getEvaluations() > 20);
  Assert.assertTrue(optimizer.getEvaluations() < 50);
  Assert.assertEquals(100,optimizer.getMaxEvaluations());
}
