/** 
 * Tests if the  {@link EnumeratedRealDistribution} constructor throwsexceptions for invalid data.
 */
@Test public void testExceptions(){
  EnumeratedRealDistribution invalid=null;
  try {
    invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0});
    Assert.fail("Expected DimensionMismatchException");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,-1.0});
    Assert.fail("Expected NotPositiveException");
  }
 catch (  NotPositiveException e) {
  }
  try {
    invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,0.0});
    Assert.fail("Expected MathArithmeticException");
  }
 catch (  MathArithmeticException e) {
  }
  try {
    invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,Double.NaN});
    Assert.fail("Expected NotANumberException");
  }
 catch (  NotANumberException e) {
  }
  try {
    invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,Double.POSITIVE_INFINITY});
    Assert.fail("Expected NotFiniteNumberException");
  }
 catch (  NotFiniteNumberException e) {
  }
  Assert.assertNull("Expected non-initialized DiscreteRealDistribution",invalid);
}
