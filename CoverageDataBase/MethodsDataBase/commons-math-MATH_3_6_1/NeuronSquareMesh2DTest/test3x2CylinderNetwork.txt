@Test public void test3x2CylinderNetwork(){
  final FeatureInitializer[] initArray={init};
  final Network net=new NeuronSquareMesh2D(2,false,3,true,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
  Collection<Neuron> neighbours;
  neighbours=net.getNeighbours(net.getNeuron(0));
  for (  long nId : new long[]{1,2,3}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
  neighbours=net.getNeighbours(net.getNeuron(1));
  for (  long nId : new long[]{0,2,4}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
  neighbours=net.getNeighbours(net.getNeuron(2));
  for (  long nId : new long[]{0,1,5}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
  neighbours=net.getNeighbours(net.getNeuron(3));
  for (  long nId : new long[]{0,4,5}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
  neighbours=net.getNeighbours(net.getNeuron(4));
  for (  long nId : new long[]{1,3,5}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
  neighbours=net.getNeighbours(net.getNeuron(5));
  for (  long nId : new long[]{2,3,4}) {
    Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
  }
  Assert.assertEquals(3,neighbours.size());
}
