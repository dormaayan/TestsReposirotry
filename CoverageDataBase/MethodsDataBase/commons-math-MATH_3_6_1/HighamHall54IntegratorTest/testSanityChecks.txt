@Test public void testSanityChecks() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
  final TestProblem3 pb=new TestProblem3(0.9);
  double minStep=0;
  double maxStep=pb.getFinalTime() - pb.getInitialTime();
  try {
    FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);
    integ.integrate(pb,pb.getInitialTime(),new double[6],pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException ie) {
  }
  try {
    FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[6]);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException ie) {
  }
  try {
    FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[2],new double[4]);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException ie) {
  }
  try {
    FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[2]);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException ie) {
  }
  try {
    FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getInitialTime(),new double[pb.getDimension()]);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NumberIsTooSmallException ie) {
  }
}
