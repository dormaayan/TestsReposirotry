@Test(expected=LocalException.class) public void testEventsErrors() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
  final TestProblem1 pb=new TestProblem1();
  double minStep=0;
  double maxStep=pb.getFinalTime() - pb.getInitialTime();
  double scalAbsoluteTolerance=1.0e-8;
  double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;
  FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);
  TestProblemHandler handler=new TestProblemHandler(pb,integ);
  integ.addStepHandler(handler);
  integ.addEventHandler(new EventHandler(){
    public void init(    double t0,    double[] y0,    double t){
    }
    public Action eventOccurred(    double t,    double[] y,    boolean increasing){
      return Action.CONTINUE;
    }
    public double g(    double t,    double[] y){
      double middle=(pb.getInitialTime() + pb.getFinalTime()) / 2;
      double offset=t - middle;
      if (offset > 0) {
        throw new LocalException();
      }
      return offset;
    }
    public void resetState(    double t,    double[] y){
    }
  }
,Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);
  integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
}
