@Test public void interpolationAtBounds() throws MaxCountExceededException {
  double t0=0;
  double[] y0={0.0,1.0,-2.0};
  double[] y=y0.clone();
  double[][] yDot={new double[y0.length]};
  EulerStepInterpolator interpolator=new EulerStepInterpolator();
  interpolator.reinitialize(new DummyIntegrator(interpolator),y,yDot,true,new EquationsMapper(0,y.length),new EquationsMapper[0]);
  interpolator.storeTime(t0);
  double dt=1.0;
  interpolator.shift();
  y[0]=1.0;
  y[1]=3.0;
  y[2]=-4.0;
  yDot[0][0]=(y[0] - y0[0]) / dt;
  yDot[0][1]=(y[1] - y0[1]) / dt;
  yDot[0][2]=(y[2] - y0[2]) / dt;
  interpolator.storeTime(t0 + dt);
  interpolator.setInterpolatedTime(interpolator.getPreviousTime());
  double[] result=interpolator.getInterpolatedState();
  for (int i=0; i < result.length; ++i) {
    Assert.assertTrue(FastMath.abs(result[i] - y0[i]) < 1.0e-10);
  }
  interpolator.setInterpolatedTime(interpolator.getCurrentTime());
  result=interpolator.getInterpolatedState();
  for (int i=0; i < result.length; ++i) {
    Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
  }
}
