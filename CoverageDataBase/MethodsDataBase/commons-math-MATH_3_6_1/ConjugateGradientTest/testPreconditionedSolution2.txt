@Test public void testPreconditionedSolution2(){
  final int n=100;
  final int maxIterations=100000;
  final Array2DRowRealMatrix a=new Array2DRowRealMatrix(n,n);
  double daux=1.;
  for (int i=0; i < n; i++) {
    a.setEntry(i,i,daux);
    daux*=1.2;
    for (int j=i + 1; j < n; j++) {
      if (i == j) {
      }
 else {
        final double value=1.0;
        a.setEntry(i,j,value);
        a.setEntry(j,i,value);
      }
    }
  }
  final RealLinearOperator m=JacobiPreconditioner.create(a);
  final PreconditionedIterativeLinearSolver pcg;
  final IterativeLinearSolver cg;
  pcg=new ConjugateGradient(maxIterations,1E-6,true);
  cg=new ConjugateGradient(maxIterations,1E-6,true);
  final RealVector b=new ArrayRealVector(n);
  final String pattern="preconditioned gradient (%d iterations) should" + " have been faster than unpreconditioned (%d iterations)";
  String msg;
  for (int j=0; j < 1; j++) {
    b.set(0.);
    b.setEntry(j,1.);
    final RealVector px=pcg.solve(a,m,b);
    final RealVector x=cg.solve(a,b);
    final int npcg=pcg.getIterationManager().getIterations();
    final int ncg=cg.getIterationManager().getIterations();
    msg=String.format(pattern,npcg,ncg);
    Assert.assertTrue(msg,npcg < ncg);
    for (int i=0; i < n; i++) {
      msg=String.format("row %d, column %d",i,j);
      final double expected=x.getEntry(i);
      final double actual=px.getEntry(i);
      final double delta=1E-6 * FastMath.abs(expected);
      Assert.assertEquals(msg,expected,actual,delta);
    }
  }
}
