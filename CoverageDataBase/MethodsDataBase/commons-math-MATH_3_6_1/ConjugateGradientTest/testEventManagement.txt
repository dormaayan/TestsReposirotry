@Test public void testEventManagement(){
  final int n=5;
  final int maxIterations=100;
  final RealLinearOperator a=new HilbertMatrix(n);
  final IterativeLinearSolver solver;
  final int[] count=new int[]{0,0,0,0};
  final IterationListener listener=new IterationListener(){
    private void doTestVectorsAreUnmodifiable(    final IterationEvent e){
      final IterativeLinearSolverEvent evt;
      evt=(IterativeLinearSolverEvent)e;
      try {
        evt.getResidual().set(0.0);
        Assert.fail("r is modifiable");
      }
 catch (      MathUnsupportedOperationException exc) {
      }
      try {
        evt.getRightHandSideVector().set(0.0);
        Assert.fail("b is modifiable");
      }
 catch (      MathUnsupportedOperationException exc) {
      }
      try {
        evt.getSolution().set(0.0);
        Assert.fail("x is modifiable");
      }
 catch (      MathUnsupportedOperationException exc) {
      }
    }
    public void initializationPerformed(    final IterationEvent e){
      ++count[0];
      doTestVectorsAreUnmodifiable(e);
    }
    public void iterationPerformed(    final IterationEvent e){
      ++count[2];
      Assert.assertEquals("iteration performed",count[2],e.getIterations() - 1);
      doTestVectorsAreUnmodifiable(e);
    }
    public void iterationStarted(    final IterationEvent e){
      ++count[1];
      Assert.assertEquals("iteration started",count[1],e.getIterations() - 1);
      doTestVectorsAreUnmodifiable(e);
    }
    public void terminationPerformed(    final IterationEvent e){
      ++count[3];
      doTestVectorsAreUnmodifiable(e);
    }
  }
;
  solver=new ConjugateGradient(maxIterations,1E-10,true);
  solver.getIterationManager().addIterationListener(listener);
  final RealVector b=new ArrayRealVector(n);
  for (int j=0; j < n; j++) {
    Arrays.fill(count,0);
    b.set(0.);
    b.setEntry(j,1.);
    solver.solve(a,b);
    String msg=String.format("column %d (initialization)",j);
    Assert.assertEquals(msg,1,count[0]);
    msg=String.format("column %d (finalization)",j);
    Assert.assertEquals(msg,1,count[3]);
  }
}
