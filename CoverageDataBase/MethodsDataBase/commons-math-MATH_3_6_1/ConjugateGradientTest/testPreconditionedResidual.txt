@Test public void testPreconditionedResidual(){
  final int n=10;
  final int maxIterations=n;
  final RealLinearOperator a=new HilbertMatrix(n);
  final RealLinearOperator m=JacobiPreconditioner.create(a);
  final ConjugateGradient solver;
  solver=new ConjugateGradient(maxIterations,1E-15,true);
  final RealVector r=new ArrayRealVector(n);
  final RealVector x=new ArrayRealVector(n);
  final IterationListener listener=new IterationListener(){
    public void terminationPerformed(    final IterationEvent e){
    }
    public void iterationStarted(    final IterationEvent e){
    }
    public void iterationPerformed(    final IterationEvent e){
      final IterativeLinearSolverEvent evt;
      evt=(IterativeLinearSolverEvent)e;
      RealVector v=evt.getResidual();
      r.setSubVector(0,v);
      v=evt.getSolution();
      x.setSubVector(0,v);
    }
    public void initializationPerformed(    final IterationEvent e){
    }
  }
;
  solver.getIterationManager().addIterationListener(listener);
  final RealVector b=new ArrayRealVector(n);
  for (int j=0; j < n; j++) {
    b.set(0.);
    b.setEntry(j,1.);
    boolean caught=false;
    try {
      solver.solve(a,m,b);
    }
 catch (    MaxCountExceededException e) {
      caught=true;
      final RealVector y=a.operate(x);
      for (int i=0; i < n; i++) {
        final double actual=b.getEntry(i) - y.getEntry(i);
        final double expected=r.getEntry(i);
        final double delta=1E-6 * FastMath.abs(expected);
        final String msg=String.format("column %d, residual %d",i,j);
        Assert.assertEquals(msg,expected,actual,delta);
      }
    }
    Assert.assertTrue("MaxCountExceededException should have been caught",caught);
  }
}
