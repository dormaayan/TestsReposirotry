@Test public void testInitialMixture(){
  final double[] correctWeights=new double[]{0.5,0.5};
  final double[][] correctMeans=new double[][]{{-0.0021722935000328823,3.5432892936887908},{5.090902706507635,8.68540656355283}};
  final RealMatrix[] correctCovMats=new Array2DRowRealMatrix[2];
  correctCovMats[0]=new Array2DRowRealMatrix(new double[][]{{4.537422569229048,3.5266152281729304},{3.5266152281729304,6.175448814169779}});
  correctCovMats[1]=new Array2DRowRealMatrix(new double[][]{{2.886778573963039,1.5257474543463154},{1.5257474543463154,3.3794567673616918}});
  final MultivariateNormalDistribution[] correctMVNs=new MultivariateNormalDistribution[2];
  correctMVNs[0]=new MultivariateNormalDistribution(correctMeans[0],correctCovMats[0].getData());
  correctMVNs[1]=new MultivariateNormalDistribution(correctMeans[1],correctCovMats[1].getData());
  final MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(getTestSamples(),2);
  int i=0;
  for (  Pair<Double,MultivariateNormalDistribution> component : initialMix.getComponents()) {
    Assert.assertEquals(correctWeights[i],component.getFirst(),Math.ulp(1d));
    final double[] means=component.getValue().getMeans();
    Assert.assertTrue(Arrays.equals(correctMeans[i],means));
    final RealMatrix covMat=component.getValue().getCovariances();
    Assert.assertEquals(correctCovMats[i],covMat);
    i++;
  }
}
