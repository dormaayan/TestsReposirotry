@Test public void testComposeDifferentiable(){
  UnivariateDifferentiableFunction id=new Identity();
  Assert.assertEquals(1,FunctionUtils.compose(id,id,id).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  UnivariateDifferentiableFunction c=new Constant(4);
  Assert.assertEquals(0,FunctionUtils.compose(id,c).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  Assert.assertEquals(0,FunctionUtils.compose(c,id).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  UnivariateDifferentiableFunction m=new Minus();
  Assert.assertEquals(-1,FunctionUtils.compose(m).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  Assert.assertEquals(1,FunctionUtils.compose(m,m).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  UnivariateDifferentiableFunction inv=new Inverse();
  Assert.assertEquals(0.25,FunctionUtils.compose(inv,m,id).value(new DerivativeStructure(1,1,0,2)).getPartialDerivative(1),EPS);
  UnivariateDifferentiableFunction pow=new Power(2);
  Assert.assertEquals(108,FunctionUtils.compose(pow,pow).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);
  UnivariateDifferentiableFunction log=new Log();
  double a=9876.54321;
  Assert.assertEquals(pow.value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1) / pow.value(a),FunctionUtils.compose(log,pow).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),EPS);
}
