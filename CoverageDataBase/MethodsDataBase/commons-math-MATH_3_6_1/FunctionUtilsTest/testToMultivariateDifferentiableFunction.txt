@Test @Deprecated public void testToMultivariateDifferentiableFunction(){
  DifferentiableMultivariateFunction hypot=new DifferentiableMultivariateFunction(){
    public double value(    double[] point){
      return FastMath.hypot(point[0],point[1]);
    }
    public MultivariateFunction partialDerivative(    final int k){
      return new MultivariateFunction(){
        public double value(        double[] point){
          return point[k] / FastMath.hypot(point[0],point[1]);
        }
      }
;
    }
    public MultivariateVectorFunction gradient(){
      return new MultivariateVectorFunction(){
        public double[] value(        double[] point){
          final double h=FastMath.hypot(point[0],point[1]);
          return new double[]{point[0] / h,point[1] / h};
        }
      }
;
    }
  }
;
  MultivariateDifferentiableFunction converted=FunctionUtils.toMultivariateDifferentiableFunction(hypot);
  for (double x=0.1; x < 0.5; x+=0.01) {
    for (double y=0.1; y < 0.5; y+=0.01) {
      DerivativeStructure[] t=new DerivativeStructure[]{new DerivativeStructure(3,1,x,1.0,2.0,3.0),new DerivativeStructure(3,1,y,4.0,5.0,6.0)};
      DerivativeStructure h=DerivativeStructure.hypot(t[0],t[1]);
      Assert.assertEquals(h.getValue(),converted.value(t).getValue(),1.0e-10);
      Assert.assertEquals(h.getPartialDerivative(1,0,0),converted.value(t).getPartialDerivative(1,0,0),1.0e-10);
      Assert.assertEquals(h.getPartialDerivative(0,1,0),converted.value(t).getPartialDerivative(0,1,0),1.0e-10);
      Assert.assertEquals(h.getPartialDerivative(0,0,1),converted.value(t).getPartialDerivative(0,0,1),1.0e-10);
    }
  }
}
