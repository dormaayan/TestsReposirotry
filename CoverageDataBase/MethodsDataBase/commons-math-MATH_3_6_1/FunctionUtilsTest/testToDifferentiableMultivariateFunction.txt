@Test @Deprecated public void testToDifferentiableMultivariateFunction(){
  MultivariateDifferentiableFunction hypot=new MultivariateDifferentiableFunction(){
    public double value(    double[] point){
      return FastMath.hypot(point[0],point[1]);
    }
    public DerivativeStructure value(    DerivativeStructure[] point){
      return DerivativeStructure.hypot(point[0],point[1]);
    }
  }
;
  DifferentiableMultivariateFunction converted=FunctionUtils.toDifferentiableMultivariateFunction(hypot);
  for (double x=0.1; x < 0.5; x+=0.01) {
    for (double y=0.1; y < 0.5; y+=0.01) {
      double[] point=new double[]{x,y};
      Assert.assertEquals(hypot.value(point),converted.value(point),1.0e-10);
      Assert.assertEquals(x / hypot.value(point),converted.gradient().value(point)[0],1.0e-10);
      Assert.assertEquals(y / hypot.value(point),converted.gradient().value(point)[1],1.0e-10);
    }
  }
}
