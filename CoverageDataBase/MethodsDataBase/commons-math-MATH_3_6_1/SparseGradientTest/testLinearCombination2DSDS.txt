@Test public void testLinearCombination2DSDS(){
  Well1024a random=new Well1024a(0xc6af886975069f11l);
  for (int i=0; i < 10000; ++i) {
    final SparseGradient[] u=new SparseGradient[4];
    final SparseGradient[] v=new SparseGradient[4];
    for (int j=0; j < u.length; ++j) {
      u[j]=SparseGradient.createVariable(j,1e17 * random.nextDouble());
      v[j]=SparseGradient.createConstant(1e17 * random.nextDouble());
    }
    SparseGradient lin=u[0].linearCombination(u[0],v[0],u[1],v[1]);
    double ref=u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(v[0].getValue(),lin.getDerivative(0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(v[1].getValue(),lin.getDerivative(1),1.0e-15 * FastMath.abs(v[1].getValue()));
    lin=u[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2]);
    ref=u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue() + u[2].getValue() * v[2].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(v[0].getValue(),lin.getDerivative(0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(v[1].getValue(),lin.getDerivative(1),1.0e-15 * FastMath.abs(v[1].getValue()));
    Assert.assertEquals(v[2].getValue(),lin.getDerivative(2),1.0e-15 * FastMath.abs(v[2].getValue()));
    lin=u[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2],u[3],v[3]);
    ref=u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue() + u[2].getValue() * v[2].getValue() + u[3].getValue() * v[3].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(v[0].getValue(),lin.getDerivative(0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(v[1].getValue(),lin.getDerivative(1),1.0e-15 * FastMath.abs(v[1].getValue()));
    Assert.assertEquals(v[2].getValue(),lin.getDerivative(2),1.0e-15 * FastMath.abs(v[2].getValue()));
    Assert.assertEquals(v[3].getValue(),lin.getDerivative(3),1.0e-15 * FastMath.abs(v[3].getValue()));
  }
}
