@Test public void testNanStrategySpecific(){
  double[] specialValues=new double[]{0d,1d,2d,3d,4d,Double.NaN};
  Assert.assertTrue(Double.isNaN(new Percentile(50d).withEstimationType(Percentile.EstimationType.LEGACY).withNaNStrategy(NaNStrategy.MAXIMAL).evaluate(specialValues,3,3)));
  Assert.assertEquals(2d,new Percentile(50d).withEstimationType(Percentile.EstimationType.R_1).withNaNStrategy(NaNStrategy.REMOVED).evaluate(specialValues),0d);
  Assert.assertEquals(Double.NaN,new Percentile(50d).withEstimationType(Percentile.EstimationType.R_5).withNaNStrategy(NaNStrategy.REMOVED).evaluate(new double[]{Double.NaN,Double.NaN,Double.NaN}),0d);
  Assert.assertEquals(50d,new Percentile(50d).withEstimationType(Percentile.EstimationType.R_7).withNaNStrategy(NaNStrategy.MINIMAL).evaluate(new double[]{50d,50d,50d},1,2),0d);
  specialValues=new double[]{0d,1d,2d,3d,4d,Double.NaN,Double.NaN};
  Assert.assertEquals(3.5,new Percentile().evaluate(specialValues,3,4),0d);
  Assert.assertEquals(4d,new Percentile().evaluate(specialValues,4,3),0d);
  Assert.assertTrue(Double.isNaN(new Percentile().evaluate(specialValues,5,2)));
  specialValues=new double[]{0d,1d,2d,3d,4d,Double.NaN,Double.NaN,5d,6d};
  Assert.assertEquals(4.5,new Percentile().evaluate(specialValues,3,6),0d);
  Assert.assertEquals(5d,new Percentile().evaluate(specialValues,4,5),0d);
  Assert.assertTrue(Double.isNaN(new Percentile().evaluate(specialValues,5,2)));
  Assert.assertTrue(Double.isNaN(new Percentile().evaluate(specialValues,5,1)));
  Assert.assertEquals(5.5,new Percentile().evaluate(specialValues,5,4),0d);
}
