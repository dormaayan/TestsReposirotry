/** 
 * test freq counts 
 */
@Test public void testCounts(){
  Assert.assertEquals("total count",0,f.getSumFreq());
  f.addValue(ONE_LONG);
  f.addValue(TWO_LONG);
  f.addValue(1);
  f.addValue(ONE);
  Assert.assertEquals("one frequency count",3,f.getCount(1));
  Assert.assertEquals("two frequency count",1,f.getCount(2));
  Assert.assertEquals("three frequency count",0,f.getCount(3));
  Assert.assertEquals("total count",4,f.getSumFreq());
  Assert.assertEquals("zero cumulative frequency",0,f.getCumFreq(0));
  Assert.assertEquals("one cumulative frequency",3,f.getCumFreq(1));
  Assert.assertEquals("two cumulative frequency",4,f.getCumFreq(2));
  Assert.assertEquals("Integer argument cum freq",4,f.getCumFreq(Integer.valueOf(2)));
  Assert.assertEquals("five cumulative frequency",4,f.getCumFreq(5));
  Assert.assertEquals("foo cumulative frequency",0,f.getCumFreq("foo"));
  f.clear();
  Assert.assertEquals("total count",0,f.getSumFreq());
  f.addValue("one");
  f.addValue("One");
  f.addValue("oNe");
  f.addValue("Z");
  Assert.assertEquals("one cumulative frequency",1,f.getCount("one"));
  Assert.assertEquals("Z cumulative pct",0.5,f.getCumPct("Z"),TOLERANCE);
  Assert.assertEquals("z cumulative pct",1.0,f.getCumPct("z"),TOLERANCE);
  Assert.assertEquals("Ot cumulative pct",0.25,f.getCumPct("Ot"),TOLERANCE);
  f.clear();
  f=null;
  Frequency f=new Frequency();
  f.addValue(1);
  f.addValue(Integer.valueOf(1));
  f.addValue(Long.valueOf(1));
  f.addValue(2);
  f.addValue(Integer.valueOf(-1));
  Assert.assertEquals("1 count",3,f.getCount(1));
  Assert.assertEquals("1 count",3,f.getCount(Integer.valueOf(1)));
  Assert.assertEquals("0 cum pct",0.2,f.getCumPct(0),TOLERANCE);
  Assert.assertEquals("1 pct",0.6,f.getPct(Integer.valueOf(1)),TOLERANCE);
  Assert.assertEquals("-2 cum pct",0,f.getCumPct(-2),TOLERANCE);
  Assert.assertEquals("10 cum pct",1,f.getCumPct(10),TOLERANCE);
  f=null;
  f=new Frequency(String.CASE_INSENSITIVE_ORDER);
  f.addValue("one");
  f.addValue("One");
  f.addValue("oNe");
  f.addValue("Z");
  Assert.assertEquals("one count",3,f.getCount("one"));
  Assert.assertEquals("Z cumulative pct -- case insensitive",1,f.getCumPct("Z"),TOLERANCE);
  Assert.assertEquals("z cumulative pct -- case insensitive",1,f.getCumPct("z"),TOLERANCE);
  f=null;
  f=new Frequency();
  Assert.assertEquals(0L,f.getCount('a'));
  Assert.assertEquals(0L,f.getCumFreq('b'));
  TestUtils.assertEquals(Double.NaN,f.getPct('a'),0.0);
  TestUtils.assertEquals(Double.NaN,f.getCumPct('b'),0.0);
  f.addValue('a');
  f.addValue('b');
  f.addValue('c');
  f.addValue('d');
  Assert.assertEquals(1L,f.getCount('a'));
  Assert.assertEquals(2L,f.getCumFreq('b'));
  Assert.assertEquals(0.25,f.getPct('a'),0.0);
  Assert.assertEquals(0.5,f.getCumPct('b'),0.0);
  Assert.assertEquals(1.0,f.getCumPct('e'),0.0);
}
