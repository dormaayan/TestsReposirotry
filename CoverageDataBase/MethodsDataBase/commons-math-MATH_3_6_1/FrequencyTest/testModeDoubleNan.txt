@Test public void testModeDoubleNan(){
  List<Comparable<?>> mode;
  f.addValue(Double.valueOf(Double.NaN));
  f.addValue(Double.valueOf(Double.NaN));
  f.addValue(Double.valueOf(Double.NaN));
  f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));
  f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));
  f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));
  f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));
  f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));
  f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));
  mode=f.getMode();
  Assert.assertEquals(3,mode.size());
  Assert.assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY),mode.get(0));
  Assert.assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),mode.get(1));
  Assert.assertEquals(Double.valueOf(Double.NaN),mode.get(2));
  try {
    f.addValue(Float.valueOf(Float.NaN));
    Assert.fail("Expected MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
}
