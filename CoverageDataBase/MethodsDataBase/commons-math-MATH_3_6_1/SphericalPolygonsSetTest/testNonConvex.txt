@Test public void testNonConvex(){
  double tol=0.01;
  double sinTol=FastMath.sin(tol);
  RegionFactory<Sphere2D> factory=new RegionFactory<Sphere2D>();
  SphericalPolygonsSet plusX=new SphericalPolygonsSet(Vector3D.PLUS_I,tol);
  SphericalPolygonsSet plusY=new SphericalPolygonsSet(Vector3D.PLUS_J,tol);
  SphericalPolygonsSet plusZ=new SphericalPolygonsSet(Vector3D.PLUS_K,tol);
  SphericalPolygonsSet threeOctants=(SphericalPolygonsSet)factory.difference(plusZ,factory.intersection(plusX,plusY));
  UnitSphereRandomVectorGenerator random=new UnitSphereRandomVectorGenerator(3,new Well1024a(0x9c9802fde3cbcf25l));
  for (int i=0; i < 1000; ++i) {
    Vector3D v=new Vector3D(random.nextVector());
    if (((v.getX() < -sinTol) || (v.getY() < -sinTol)) && (v.getZ() > sinTol)) {
      Assert.assertEquals(Location.INSIDE,threeOctants.checkPoint(new S2Point(v)));
    }
 else     if (((v.getX() > sinTol) && (v.getY() > sinTol)) || (v.getZ() < -sinTol)) {
      Assert.assertEquals(Location.OUTSIDE,threeOctants.checkPoint(new S2Point(v)));
    }
 else {
      Assert.assertEquals(Location.BOUNDARY,threeOctants.checkPoint(new S2Point(v)));
    }
  }
  List<Vertex> loops=threeOctants.getBoundaryLoops();
  Assert.assertEquals(1,loops.size());
  boolean xPFound=false;
  boolean yPFound=false;
  boolean zPFound=false;
  boolean xVFound=false;
  boolean yVFound=false;
  boolean zVFound=false;
  Vertex first=loops.get(0);
  int count=0;
  double sumPoleX=0;
  double sumPoleY=0;
  double sumPoleZ=0;
  for (Vertex v=first; count == 0 || v != first; v=v.getOutgoing().getEnd()) {
    ++count;
    Edge e=v.getIncoming();
    Assert.assertTrue(v == e.getStart().getOutgoing().getEnd());
    if (e.getCircle().getPole().distance(Vector3D.MINUS_I) < 1.0e-10) {
      xPFound=true;
      sumPoleX+=e.getLength();
    }
 else     if (e.getCircle().getPole().distance(Vector3D.MINUS_J) < 1.0e-10) {
      yPFound=true;
      sumPoleY+=e.getLength();
    }
 else {
      Assert.assertEquals(0.0,e.getCircle().getPole().distance(Vector3D.PLUS_K),1.0e-10);
      zPFound=true;
      sumPoleZ+=e.getLength();
    }
    xVFound=xVFound || v.getLocation().getVector().distance(Vector3D.PLUS_I) < 1.0e-10;
    yVFound=yVFound || v.getLocation().getVector().distance(Vector3D.PLUS_J) < 1.0e-10;
    zVFound=zVFound || v.getLocation().getVector().distance(Vector3D.PLUS_K) < 1.0e-10;
  }
  Assert.assertTrue(xPFound);
  Assert.assertTrue(yPFound);
  Assert.assertTrue(zPFound);
  Assert.assertTrue(xVFound);
  Assert.assertTrue(yVFound);
  Assert.assertTrue(zVFound);
  Assert.assertEquals(0.5 * FastMath.PI,sumPoleX,1.0e-10);
  Assert.assertEquals(0.5 * FastMath.PI,sumPoleY,1.0e-10);
  Assert.assertEquals(1.5 * FastMath.PI,sumPoleZ,1.0e-10);
  Assert.assertEquals(1.5 * FastMath.PI,threeOctants.getSize(),1.0e-10);
}
