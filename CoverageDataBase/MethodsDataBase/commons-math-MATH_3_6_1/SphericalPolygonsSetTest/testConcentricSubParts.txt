@Test public void testConcentricSubParts(){
  double tol=0.001;
  Vector3D center=new Vector3D(1,1,1);
  SphericalPolygonsSet hexaOut=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.9,6,tol);
  SphericalPolygonsSet hexaIn=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.8,6,tol);
  SphericalPolygonsSet pentaOut=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.7,5,tol);
  SphericalPolygonsSet pentaIn=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.6,5,tol);
  SphericalPolygonsSet quadriOut=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.5,4,tol);
  SphericalPolygonsSet quadriIn=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.4,4,tol);
  SphericalPolygonsSet triOut=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.25,3,tol);
  SphericalPolygonsSet triIn=new SphericalPolygonsSet(center,Vector3D.PLUS_K,0.15,3,tol);
  RegionFactory<Sphere2D> factory=new RegionFactory<Sphere2D>();
  SphericalPolygonsSet hexa=(SphericalPolygonsSet)factory.difference(hexaOut,hexaIn);
  SphericalPolygonsSet penta=(SphericalPolygonsSet)factory.difference(pentaOut,pentaIn);
  SphericalPolygonsSet quadri=(SphericalPolygonsSet)factory.difference(quadriOut,quadriIn);
  SphericalPolygonsSet tri=(SphericalPolygonsSet)factory.difference(triOut,triIn);
  SphericalPolygonsSet concentric=(SphericalPolygonsSet)factory.union(factory.union(hexa,penta),factory.union(quadri,tri));
  Assert.assertEquals(8,concentric.getBoundaryLoops().size());
  Assert.assertEquals(hexaOut.getBoundarySize() + hexaIn.getBoundarySize() + pentaOut.getBoundarySize()+ pentaIn.getBoundarySize()+ quadriOut.getBoundarySize()+ quadriIn.getBoundarySize()+ triOut.getBoundarySize()+ triIn.getBoundarySize(),concentric.getBoundarySize(),1.0e-10);
  Assert.assertEquals(hexaOut.getSize() - hexaIn.getSize() + pentaOut.getSize() - pentaIn.getSize() + quadriOut.getSize() - quadriIn.getSize() + triOut.getSize() - triIn.getSize(),concentric.getSize(),1.0e-10);
  double phi=new S2Point(center).getPhi();
  Assert.assertEquals(+0.207,concentric.projectToBoundary(new S2Point(-0.60,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.048,concentric.projectToBoundary(new S2Point(-0.21,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.027,concentric.projectToBoundary(new S2Point(-0.10,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.041,concentric.projectToBoundary(new S2Point(0.01,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.049,concentric.projectToBoundary(new S2Point(0.16,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.038,concentric.projectToBoundary(new S2Point(0.29,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.097,concentric.projectToBoundary(new S2Point(0.48,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.022,concentric.projectToBoundary(new S2Point(0.64,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.072,concentric.projectToBoundary(new S2Point(0.79,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.022,concentric.projectToBoundary(new S2Point(0.93,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.091,concentric.projectToBoundary(new S2Point(1.08,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.037,concentric.projectToBoundary(new S2Point(1.28,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.051,concentric.projectToBoundary(new S2Point(1.40,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.041,concentric.projectToBoundary(new S2Point(1.55,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.027,concentric.projectToBoundary(new S2Point(1.67,phi)).getOffset(),0.01);
  Assert.assertEquals(-0.044,concentric.projectToBoundary(new S2Point(1.79,phi)).getOffset(),0.01);
  Assert.assertEquals(+0.201,concentric.projectToBoundary(new S2Point(2.16,phi)).getOffset(),0.01);
}
