@Test public void testGeographicalMap(){
  SphericalPolygonsSet continental=buildSimpleZone(new double[][]{{51.14850,2.51357},{50.94660,1.63900},{50.12717,1.33876},{49.34737,-0.98946},{49.77634,-1.93349},{48.64442,-1.61651},{48.90169,-3.29581},{48.68416,-4.59234},{47.95495,-4.49155},{47.57032,-2.96327},{46.01491,-1.19379},{44.02261,-1.38422},{43.42280,-1.90135},{43.03401,-1.50277},{42.34338,1.82679},{42.47301,2.98599},{43.07520,3.10041},{43.39965,4.55696},{43.12889,6.52924},{43.69384,7.43518},{44.12790,7.54959},{45.02851,6.74995},{45.33309,7.09665},{46.42967,6.50009},{46.27298,6.02260},{46.72577,6.03738},{47.62058,7.46675},{49.01778,8.09927},{49.20195,6.65822},{49.44266,5.89775},{49.98537,4.79922}});
  SphericalPolygonsSet corsica=buildSimpleZone(new double[][]{{42.15249,9.56001},{43.00998,9.39000},{42.62812,8.74600},{42.25651,8.54421},{41.58361,8.77572},{41.38000,9.22975}});
  RegionFactory<Sphere2D> factory=new RegionFactory<Sphere2D>();
  SphericalPolygonsSet zone=(SphericalPolygonsSet)factory.union(continental,corsica);
  EnclosingBall<Sphere2D,S2Point> enclosing=zone.getEnclosingCap();
  Vector3D enclosingCenter=((S2Point)enclosing.getCenter()).getVector();
  double step=FastMath.toRadians(0.1);
  for (  Vertex loopStart : zone.getBoundaryLoops()) {
    int count=0;
    for (Vertex v=loopStart; count == 0 || v != loopStart; v=v.getOutgoing().getEnd()) {
      ++count;
      for (int i=0; i < FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
        Vector3D p=v.getOutgoing().getPointAt(i * step);
        Assert.assertTrue(Vector3D.angle(p,enclosingCenter) <= enclosing.getRadius());
      }
    }
  }
  S2Point supportPointA=s2Point(48.68416,-4.59234);
  S2Point supportPointB=s2Point(41.38000,9.22975);
  Assert.assertEquals(enclosing.getRadius(),supportPointA.distance(enclosing.getCenter()),1.0e-10);
  Assert.assertEquals(enclosing.getRadius(),supportPointB.distance(enclosing.getCenter()),1.0e-10);
  Assert.assertEquals(0.5 * supportPointA.distance(supportPointB),enclosing.getRadius(),1.0e-10);
  Assert.assertEquals(2,enclosing.getSupportSize());
  EnclosingBall<Sphere2D,S2Point> continentalInscribed=((SphericalPolygonsSet)factory.getComplement(continental)).getEnclosingCap();
  Vector3D continentalCenter=((S2Point)continentalInscribed.getCenter()).getVector();
  Assert.assertEquals(2.2,FastMath.toDegrees(FastMath.PI - continentalInscribed.getRadius()),0.1);
  for (  Vertex loopStart : continental.getBoundaryLoops()) {
    int count=0;
    for (Vertex v=loopStart; count == 0 || v != loopStart; v=v.getOutgoing().getEnd()) {
      ++count;
      for (int i=0; i < FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
        Vector3D p=v.getOutgoing().getPointAt(i * step);
        Assert.assertTrue(Vector3D.angle(p,continentalCenter) <= continentalInscribed.getRadius());
      }
    }
  }
  EnclosingBall<Sphere2D,S2Point> corsicaInscribed=((SphericalPolygonsSet)factory.getComplement(corsica)).getEnclosingCap();
  Vector3D corsicaCenter=((S2Point)corsicaInscribed.getCenter()).getVector();
  Assert.assertEquals(0.34,FastMath.toDegrees(FastMath.PI - corsicaInscribed.getRadius()),0.01);
  for (  Vertex loopStart : corsica.getBoundaryLoops()) {
    int count=0;
    for (Vertex v=loopStart; count == 0 || v != loopStart; v=v.getOutgoing().getEnd()) {
      ++count;
      for (int i=0; i < FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
        Vector3D p=v.getOutgoing().getPointAt(i * step);
        Assert.assertTrue(Vector3D.angle(p,corsicaCenter) <= corsicaInscribed.getRadius());
      }
    }
  }
}
