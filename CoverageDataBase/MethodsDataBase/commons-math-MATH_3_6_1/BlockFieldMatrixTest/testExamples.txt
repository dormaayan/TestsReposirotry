/** 
 * test examples in user guide 
 */
@Test public void testExamples(){
  Fraction[][] matrixData={{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(5),new Fraction(3)}};
  FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(matrixData);
  Fraction[][] matrixData2={{new Fraction(1),new Fraction(2)},{new Fraction(2),new Fraction(5)},{new Fraction(1),new Fraction(7)}};
  FieldMatrix<Fraction> n=new BlockFieldMatrix<Fraction>(matrixData2);
  FieldMatrix<Fraction> p=m.multiply(n);
  Assert.assertEquals(2,p.getRowDimension());
  Assert.assertEquals(2,p.getColumnDimension());
  FieldMatrix<Fraction> pInverse=new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();
  Assert.assertEquals(2,pInverse.getRowDimension());
  Assert.assertEquals(2,pInverse.getColumnDimension());
  Fraction[][] coefficientsData={{new Fraction(2),new Fraction(3),new Fraction(-2)},{new Fraction(-1),new Fraction(7),new Fraction(6)},{new Fraction(4),new Fraction(-3),new Fraction(-5)}};
  FieldMatrix<Fraction> coefficients=new BlockFieldMatrix<Fraction>(coefficientsData);
  Fraction[] constants={new Fraction(1),new Fraction(-2),new Fraction(1)};
  Fraction[] solution;
  solution=new FieldLUDecomposition<Fraction>(coefficients).getSolver().solve(new ArrayFieldVector<Fraction>(constants,false)).toArray();
  Assert.assertEquals(new Fraction(2).multiply(solution[0]).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2])),constants[0]);
  Assert.assertEquals(new Fraction(-1).multiply(solution[0]).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2])),constants[1]);
  Assert.assertEquals(new Fraction(4).multiply(solution[0]).subtract(new Fraction(3).multiply(solution[1])).subtract(new Fraction(5).multiply(solution[2])),constants[2]);
}
