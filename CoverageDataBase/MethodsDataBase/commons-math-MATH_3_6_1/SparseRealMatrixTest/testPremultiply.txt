@Test public void testPremultiply(){
  RealMatrix m3=createSparseMatrix(d3);
  RealMatrix m4=createSparseMatrix(d4);
  RealMatrix m5=createSparseMatrix(d5);
  assertClose("m3*m4=m5",m4.preMultiply(m3),m5,entryTolerance);
  OpenMapRealMatrix m=createSparseMatrix(testData);
  OpenMapRealMatrix mInv=createSparseMatrix(testDataInv);
  OpenMapRealMatrix identity=createSparseMatrix(id);
  assertClose("inverse multiply",m.preMultiply(mInv),identity,entryTolerance);
  assertClose("inverse multiply",mInv.preMultiply(m),identity,entryTolerance);
  assertClose("identity multiply",m.preMultiply(identity),m,entryTolerance);
  assertClose("identity multiply",identity.preMultiply(mInv),mInv,entryTolerance);
  try {
    m.preMultiply(createSparseMatrix(bigSingular));
    Assert.fail("Expecting illegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
}
