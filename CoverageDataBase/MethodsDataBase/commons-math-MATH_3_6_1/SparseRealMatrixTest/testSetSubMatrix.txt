@Test public void testSetSubMatrix(){
  OpenMapRealMatrix m=createSparseMatrix(testData);
  m.setSubMatrix(detData2,1,1);
  RealMatrix expected=createSparseMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});
  Assert.assertEquals(expected,m);
  m.setSubMatrix(detData2,0,0);
  expected=createSparseMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});
  Assert.assertEquals(expected,m);
  m.setSubMatrix(testDataPlus2,0,0);
  expected=createSparseMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});
  Assert.assertEquals(expected,m);
  OpenMapRealMatrix matrix=createSparseMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});
  matrix.setSubMatrix(new double[][]{{3,4},{5,6}},1,1);
  expected=createSparseMatrix(new double[][]{{1,2,3,4},{5,3,4,8},{9,5,6,2}});
  Assert.assertEquals(expected,matrix);
  try {
    m.setSubMatrix(testData,1,1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(testData,-1,1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(testData,1,-1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(null,1,1);
    Assert.fail("expecting NullArgumentException");
  }
 catch (  NullArgumentException e) {
  }
  try {
    new OpenMapRealMatrix(0,0);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
  try {
    m.setSubMatrix(new double[][]{{1},{2,3}},0,0);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
  try {
    m.setSubMatrix(new double[][]{{}},0,0);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
}
