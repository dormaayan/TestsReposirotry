/** 
 * test multiply 
 */
@Test public void testMultiply(){
  OpenMapRealMatrix m=createSparseMatrix(testData);
  OpenMapRealMatrix mInv=createSparseMatrix(testDataInv);
  OpenMapRealMatrix identity=createSparseMatrix(id);
  OpenMapRealMatrix m2=createSparseMatrix(testData2);
  assertClose("inverse multiply",m.multiply(mInv),identity,entryTolerance);
  assertClose("inverse multiply",m.multiply(new BlockRealMatrix(testDataInv)),identity,entryTolerance);
  assertClose("inverse multiply",mInv.multiply(m),identity,entryTolerance);
  assertClose("identity multiply",m.multiply(identity),m,entryTolerance);
  assertClose("identity multiply",identity.multiply(mInv),mInv,entryTolerance);
  assertClose("identity multiply",m2.multiply(identity),m2,entryTolerance);
  try {
    m.multiply(createSparseMatrix(bigSingular));
    Assert.fail("Expecting illegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
}
