/** 
 * test examples in user guide 
 */
@Test public void testExamples(){
  double[][] matrixData={{1d,2d,3d},{2d,5d,3d}};
  RealMatrix m=createSparseMatrix(matrixData);
  double[][] matrixData2={{1d,2d},{2d,5d},{1d,7d}};
  RealMatrix n=createSparseMatrix(matrixData2);
  RealMatrix p=m.multiply(n);
  Assert.assertEquals(2,p.getRowDimension());
  Assert.assertEquals(2,p.getColumnDimension());
  RealMatrix pInverse=new LUDecomposition(p).getSolver().getInverse();
  Assert.assertEquals(2,pInverse.getRowDimension());
  Assert.assertEquals(2,pInverse.getColumnDimension());
  double[][] coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};
  RealMatrix coefficients=createSparseMatrix(coefficientsData);
  RealVector constants=new ArrayRealVector(new double[]{1,-2,1},false);
  RealVector solution=new LUDecomposition(coefficients).getSolver().solve(constants);
  final double cst0=constants.getEntry(0);
  final double cst1=constants.getEntry(1);
  final double cst2=constants.getEntry(2);
  final double sol0=solution.getEntry(0);
  final double sol1=solution.getEntry(1);
  final double sol2=solution.getEntry(2);
  Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2,cst0,1E-12);
  Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2,cst1,1E-12);
  Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2,cst2,1E-12);
}
