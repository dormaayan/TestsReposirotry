@Test public void testTwoSampleTHeterscedastic(){
  double[] sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};
  double[] sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};
  SummaryStatistics sampleStats1=new SummaryStatistics();
  for (int i=0; i < sample1.length; i++) {
    sampleStats1.addValue(sample1[i]);
  }
  SummaryStatistics sampleStats2=new SummaryStatistics();
  for (int i=0; i < sample2.length; i++) {
    sampleStats2.addValue(sample2[i]);
  }
  Assert.assertEquals("two sample heteroscedastic t stat",1.60371728768,testStatistic.t(sample1,sample2),1E-10);
  Assert.assertEquals("two sample heteroscedastic t stat",1.60371728768,testStatistic.t(sampleStats1,sampleStats2),1E-10);
  Assert.assertEquals("two sample heteroscedastic p value",0.128839369622,testStatistic.tTest(sample1,sample2),1E-10);
  Assert.assertEquals("two sample heteroscedastic p value",0.128839369622,testStatistic.tTest(sampleStats1,sampleStats2),1E-10);
  Assert.assertTrue("two sample heteroscedastic t-test reject",testStatistic.tTest(sample1,sample2,0.2));
  Assert.assertTrue("two sample heteroscedastic t-test reject",testStatistic.tTest(sampleStats1,sampleStats2,0.2));
  Assert.assertTrue("two sample heteroscedastic t-test accept",!testStatistic.tTest(sample1,sample2,0.1));
  Assert.assertTrue("two sample heteroscedastic t-test accept",!testStatistic.tTest(sampleStats1,sampleStats2,0.1));
  try {
    testStatistic.tTest(sample1,sample2,.95);
    Assert.fail("alpha out of range, OutOfRangeException expected");
  }
 catch (  OutOfRangeException ex) {
  }
  try {
    testStatistic.tTest(sampleStats1,sampleStats2,.95);
    Assert.fail("alpha out of range, OutOfRangeException expected");
  }
 catch (  OutOfRangeException ex) {
  }
  try {
    testStatistic.tTest(sample1,tooShortObs,.01);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
  try {
    testStatistic.tTest(sampleStats1,tooShortStats,.01);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
  try {
    testStatistic.tTest(sample1,tooShortObs);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
  try {
    testStatistic.tTest(sampleStats1,tooShortStats);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
  try {
    testStatistic.t(sample1,tooShortObs);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
  try {
    testStatistic.t(sampleStats1,tooShortStats);
    Assert.fail("insufficient data, NumberIsTooSmallException expected");
  }
 catch (  NumberIsTooSmallException ex) {
  }
}
