@Test public void testPCorr(){
  MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);
  double[][] x=new double[airdata[0].length][];
  double[] y=new double[airdata[0].length];
  double[] cp=new double[10];
  double[] yxcorr=new double[4];
  double[] diag=new double[4];
  double sumysq=0.0;
  int off=0;
  for (int i=0; i < airdata[0].length; i++) {
    x[i]=new double[4];
    x[i][0]=1.0;
    x[i][1]=FastMath.log(airdata[3][i]);
    x[i][2]=FastMath.log(airdata[4][i]);
    x[i][3]=airdata[5][i];
    y[i]=FastMath.log(airdata[2][i]);
    off=0;
    for (int j=0; j < 4; j++) {
      double tmp=x[i][j];
      for (int k=0; k <= j; k++, off++) {
        cp[off]+=tmp * x[i][k];
      }
      yxcorr[j]+=tmp * y[i];
    }
    sumysq+=y[i] * y[i];
  }
  PearsonsCorrelation pearson=new PearsonsCorrelation(x);
  RealMatrix corr=pearson.getCorrelationMatrix();
  off=0;
  for (int i=0; i < 4; i++, off+=(i + 1)) {
    diag[i]=FastMath.sqrt(cp[off]);
  }
  instance.addObservations(x,y);
  double[] pc=instance.getPartialCorrelations(0);
  int idx=0;
  off=0;
  int off2=6;
  for (int i=0; i < 4; i++) {
    for (int j=0; j < i; j++) {
      if (FastMath.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {
        Assert.fail("Failed cross products... i = " + i + " j = "+ j);
      }
      ++idx;
      ++off;
    }
    ++off;
    if (FastMath.abs(pc[i + off2] - yxcorr[i] / (FastMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {
      Assert.fail("Assert.failed cross product i = " + i + " y");
    }
  }
  double[] pc2=instance.getPartialCorrelations(1);
  idx=0;
  for (int i=1; i < 4; i++) {
    for (int j=1; j < i; j++) {
      if (FastMath.abs(pc2[idx] - corr.getEntry(j,i)) > 1.0e-8) {
        Assert.fail("Failed cross products... i = " + i + " j = "+ j);
      }
      ++idx;
    }
  }
  double[] pc3=instance.getPartialCorrelations(2);
  if (pc3 == null) {
    Assert.fail("Should not be null");
  }
  return;
}
