@Test public void testThreeRedundantColumn(){
  MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);
  MillerUpdatingRegression instance2=new MillerUpdatingRegression(7,false);
  double[][] x=new double[airdata[0].length][];
  double[][] x2=new double[airdata[0].length][];
  double[] y=new double[airdata[0].length];
  for (int i=0; i < airdata[0].length; i++) {
    x[i]=new double[4];
    x2[i]=new double[7];
    x[i][0]=1.0;
    x[i][1]=FastMath.log(airdata[3][i]);
    x[i][2]=FastMath.log(airdata[4][i]);
    x[i][3]=airdata[5][i];
    x2[i][0]=x[i][0];
    x2[i][1]=x[i][0];
    x2[i][2]=x[i][1];
    x2[i][3]=x[i][2];
    x2[i][4]=x[i][1];
    x2[i][5]=x[i][3];
    x2[i][6]=x[i][2];
    y[i]=FastMath.log(airdata[2][i]);
  }
  instance.addObservations(x,y);
  RegressionResults result=instance.regress();
  Assert.assertNotNull("Could not estimate initial regression",result);
  instance2.addObservations(x2,y);
  RegressionResults resultRedundant=instance2.regress();
  Assert.assertNotNull("Could not estimate redundant regression",resultRedundant);
  double[] beta=result.getParameterEstimates();
  double[] betar=resultRedundant.getParameterEstimates();
  double[] se=result.getStdErrorOfEstimates();
  double[] ser=resultRedundant.getStdErrorOfEstimates();
  if (FastMath.abs(beta[0] - betar[0]) > 1.0e-8) {
    Assert.fail("Parameters not correct after reorder (0,3)");
  }
  if (FastMath.abs(beta[1] - betar[2]) > 1.0e-8) {
    Assert.fail("Parameters not correct after reorder (1,2)");
  }
  if (FastMath.abs(beta[2] - betar[3]) > 1.0e-8) {
    Assert.fail("Parameters not correct after reorder (2,1)");
  }
  if (FastMath.abs(beta[3] - betar[5]) > 1.0e-8) {
    Assert.fail("Parameters not correct after reorder (3,0)");
  }
  if (FastMath.abs(se[0] - ser[0]) > 1.0e-8) {
    Assert.fail("Se not correct after reorder (0,3)");
  }
  if (FastMath.abs(se[1] - ser[2]) > 1.0e-8) {
    Assert.fail("Se not correct after reorder (1,2)");
  }
  if (FastMath.abs(se[2] - ser[3]) > 1.0e-8) {
    Assert.fail("Se not correct after reorder (2,1)");
  }
  if (FastMath.abs(se[3] - ser[5]) > 1.0e-8) {
    Assert.fail("Se not correct after reorder (3,0)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(0,0) - resultRedundant.getCovarianceOfParameters(0,0)) > 1.0e-8) {
    Assert.fail("VCV not correct after reorder (0,0)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(0,1) - resultRedundant.getCovarianceOfParameters(0,2)) > 1.0e-8) {
    Assert.fail("VCV not correct after reorder (0,1)<->(0,2)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(0,2) - resultRedundant.getCovarianceOfParameters(0,3)) > 1.0e-8) {
    Assert.fail("VCV not correct after reorder (0,2)<->(0,1)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(0,3) - resultRedundant.getCovarianceOfParameters(0,5)) > 1.0e-8) {
    Assert.fail("VCV not correct after reorder (0,3)<->(0,3)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(1,0) - resultRedundant.getCovarianceOfParameters(2,0)) > 1.0e-8) {
    Assert.fail("VCV not correct after reorder (1,0)<->(2,0)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(1,1) - resultRedundant.getCovarianceOfParameters(2,2)) > 1.0e-8) {
    Assert.fail("VCV not correct  (1,1)<->(2,1)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(1,2) - resultRedundant.getCovarianceOfParameters(2,3)) > 1.0e-8) {
    Assert.fail("VCV not correct  (1,2)<->(2,2)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(2,0) - resultRedundant.getCovarianceOfParameters(3,0)) > 1.0e-8) {
    Assert.fail("VCV not correct  (2,0)<->(1,0)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(2,1) - resultRedundant.getCovarianceOfParameters(3,2)) > 1.0e-8) {
    Assert.fail("VCV not correct  (2,1)<->(1,2)");
  }
  if (FastMath.abs(result.getCovarianceOfParameters(3,3) - resultRedundant.getCovarianceOfParameters(5,5)) > 1.0e-8) {
    Assert.fail("VCV not correct  (3,3)<->(3,2)");
  }
  TestUtils.assertEquals(result.getAdjustedRSquared(),resultRedundant.getAdjustedRSquared(),1.0e-8);
  TestUtils.assertEquals(result.getErrorSumSquares(),resultRedundant.getErrorSumSquares(),1.0e-8);
  TestUtils.assertEquals(result.getMeanSquareError(),resultRedundant.getMeanSquareError(),1.0e-8);
  TestUtils.assertEquals(result.getRSquared(),resultRedundant.getRSquared(),1.0e-8);
  return;
}
