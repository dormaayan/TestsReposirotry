/** 
 * Test Longley dataset against certified values provided by NIST. Data Source: J. Longley (1967) "An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User" Journal of the American Statistical Association, vol. 62. September, pp. 819-841. Certified values (and data) are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat
 */
@Test public void testLongly(){
  double[] design=new double[]{60323,83.0,234289,2356,1590,107608,1947,61122,88.5,259426,2325,1456,108632,1948,60171,88.2,258054,3682,1616,109773,1949,61187,89.5,284599,3351,1650,110929,1950,63221,96.2,328975,2099,3099,112075,1951,63639,98.1,346999,1932,3594,113270,1952,64989,99.0,365385,1870,3547,115094,1953,63761,100.0,363112,3578,3350,116219,1954,66019,101.2,397469,2904,3048,117388,1955,67857,104.6,419180,2822,2857,118734,1956,68169,108.4,442769,2936,2798,120445,1957,66513,110.8,444546,4681,2637,121950,1958,68655,112.6,482704,3813,2552,123366,1959,69564,114.2,502601,3931,2514,125368,1960,69331,115.7,518173,4806,2572,127852,1961,70551,116.9,554894,4007,2827,130081,1962};
  final int nobs=16;
  final int nvars=6;
  MillerUpdatingRegression model=new MillerUpdatingRegression(6,true);
  int off=0;
  double[] tmp=new double[6];
  for (int i=0; i < nobs; i++) {
    System.arraycopy(design,off + 1,tmp,0,nvars);
    model.addObservation(tmp,design[off]);
    off+=nvars + 1;
  }
  RegressionResults result=model.regress();
  double[] betaHat=result.getParameterEstimates();
  TestUtils.assertEquals(betaHat,new double[]{-3482258.63459582,15.0618722713733,-0.358191792925910E-01,-2.02022980381683,-1.03322686717359,-0.511041056535807E-01,1829.15146461355},1E-8);
  double[] errors=result.getStdErrorOfEstimates();
  TestUtils.assertEquals(new double[]{890420.383607373,84.9149257747669,0.334910077722432E-01,0.488399681651699,0.214274163161675,0.226073200069370,455.478499142212},errors,1E-6);
  TestUtils.assertEquals(0.995479004577296,result.getRSquared(),1E-12);
  TestUtils.assertEquals(0.992465007628826,result.getAdjustedRSquared(),1E-12);
  model=new MillerUpdatingRegression(6,false);
  off=0;
  for (int i=0; i < nobs; i++) {
    System.arraycopy(design,off + 1,tmp,0,nvars);
    model.addObservation(tmp,design[off]);
    off+=nvars + 1;
  }
  result=model.regress();
  betaHat=result.getParameterEstimates();
  TestUtils.assertEquals(betaHat,new double[]{-52.99357013868291,0.07107319907358,-0.42346585566399,-0.57256866841929,-0.41420358884978,48.41786562001326},1E-11);
  errors=result.getStdErrorOfEstimates();
  TestUtils.assertEquals(new double[]{129.54486693117232,0.03016640003786,0.41773654056612,0.27899087467676,0.32128496193363,17.68948737819961},errors,1E-11);
  TestUtils.assertEquals(0.9999670130706,result.getRSquared(),1E-12);
  TestUtils.assertEquals(0.999947220913,result.getAdjustedRSquared(),1E-12);
}
