@Test public void testOneRedundantColumn(){
  MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);
  MillerUpdatingRegression instance2=new MillerUpdatingRegression(5,false);
  double[][] x=new double[airdata[0].length][];
  double[][] x2=new double[airdata[0].length][];
  double[] y=new double[airdata[0].length];
  for (int i=0; i < airdata[0].length; i++) {
    x[i]=new double[4];
    x2[i]=new double[5];
    x[i][0]=1.0;
    x[i][1]=FastMath.log(airdata[3][i]);
    x[i][2]=FastMath.log(airdata[4][i]);
    x[i][3]=airdata[5][i];
    x2[i][0]=x[i][0];
    x2[i][1]=x[i][1];
    x2[i][2]=x[i][2];
    x2[i][3]=x[i][3];
    x2[i][4]=x[i][3];
    y[i]=FastMath.log(airdata[2][i]);
  }
  instance.addObservations(x,y);
  RegressionResults result=instance.regress();
  Assert.assertNotNull("Could not estimate initial regression",result);
  instance2.addObservations(x2,y);
  RegressionResults resultRedundant=instance2.regress();
  Assert.assertNotNull("Could not estimate redundant regression",resultRedundant);
  double[] beta=result.getParameterEstimates();
  double[] betar=resultRedundant.getParameterEstimates();
  double[] se=result.getStdErrorOfEstimates();
  double[] ser=resultRedundant.getStdErrorOfEstimates();
  for (int i=0; i < beta.length; i++) {
    if (FastMath.abs(beta[i] - betar[i]) > 1.0e-8) {
      Assert.fail("Parameters not correctly estimated");
    }
    if (FastMath.abs(se[i] - ser[i]) > 1.0e-8) {
      Assert.fail("Standard errors not correctly estimated");
    }
    for (int j=0; j < i; j++) {
      if (FastMath.abs(result.getCovarianceOfParameters(i,j) - resultRedundant.getCovarianceOfParameters(i,j)) > 1.0e-8) {
        Assert.fail("Variance Covariance not correct");
      }
    }
  }
  TestUtils.assertEquals(result.getAdjustedRSquared(),resultRedundant.getAdjustedRSquared(),1.0e-8);
  TestUtils.assertEquals(result.getErrorSumSquares(),resultRedundant.getErrorSumSquares(),1.0e-8);
  TestUtils.assertEquals(result.getMeanSquareError(),resultRedundant.getMeanSquareError(),1.0e-8);
  TestUtils.assertEquals(result.getRSquared(),resultRedundant.getRSquared(),1.0e-8);
  return;
}
