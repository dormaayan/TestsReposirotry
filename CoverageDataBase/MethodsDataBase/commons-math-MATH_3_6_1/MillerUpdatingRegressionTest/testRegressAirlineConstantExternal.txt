@Test public void testRegressAirlineConstantExternal(){
  MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);
  double[][] x=new double[airdata[0].length][];
  double[] y=new double[airdata[0].length];
  for (int i=0; i < airdata[0].length; i++) {
    x[i]=new double[4];
    x[i][0]=1.0;
    x[i][1]=FastMath.log(airdata[3][i]);
    x[i][2]=FastMath.log(airdata[4][i]);
    x[i][3]=airdata[5][i];
    y[i]=FastMath.log(airdata[2][i]);
  }
  instance.addObservations(x,y);
  try {
    RegressionResults result=instance.regress();
    Assert.assertNotNull("The test case is a prototype.",result);
    TestUtils.assertEquals(new double[]{9.5169,0.8827,0.4540,-1.6275},result.getParameterEstimates(),1e-4);
    TestUtils.assertEquals(new double[]{.2292445,.0132545,.0203042,.345302},result.getStdErrorOfEstimates(),1.0e-4);
    TestUtils.assertEquals(0.01552839,result.getMeanSquareError(),1.0e-8);
  }
 catch (  Exception e) {
    Assert.fail("Should not throw exception but does");
  }
}
