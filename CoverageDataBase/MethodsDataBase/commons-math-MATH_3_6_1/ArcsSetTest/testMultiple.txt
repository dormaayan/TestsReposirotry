@Test public void testMultiple(){
  RegionFactory<Sphere1D> factory=new RegionFactory<Sphere1D>();
  ArcsSet set=(ArcsSet)factory.intersection(factory.union(factory.difference(new ArcsSet(1.0,6.0,1.0e-10),new ArcsSet(3.0,5.0,1.0e-10)),new ArcsSet(0.5,2.0,1.0e-10)),new ArcsSet(0.0,5.5,1.0e-10));
  Assert.assertEquals(3.0,set.getSize(),1.0e-10);
  Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new S1Point(0.0)));
  Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new S1Point(4.0)));
  Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new S1Point(6.0)));
  Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new S1Point(1.2)));
  Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new S1Point(5.25)));
  Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new S1Point(0.5)));
  Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new S1Point(3.0)));
  Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new S1Point(5.0)));
  Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new S1Point(5.5)));
  List<Arc> list=set.asList();
  Assert.assertEquals(2,list.size());
  Assert.assertEquals(0.5,list.get(0).getInf(),1.0e-10);
  Assert.assertEquals(3.0,list.get(0).getSup(),1.0e-10);
  Assert.assertEquals(5.0,list.get(1).getInf(),1.0e-10);
  Assert.assertEquals(5.5,list.get(1).getSup(),1.0e-10);
}
