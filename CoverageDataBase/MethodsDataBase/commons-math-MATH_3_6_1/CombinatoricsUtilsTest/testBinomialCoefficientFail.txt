@Test public void testBinomialCoefficientFail(){
  try {
    CombinatoricsUtils.binomialCoefficient(4,5);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficientDouble(4,5);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficientLog(4,5);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficient(-1,-2);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficientDouble(-1,-2);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficientLog(-1,-2);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficient(67,30);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  try {
    CombinatoricsUtils.binomialCoefficient(67,34);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  double x=CombinatoricsUtils.binomialCoefficientDouble(1030,515);
  Assert.assertTrue("expecting infinite binomial coefficient",Double.isInfinite(x));
}
