@Test public void testBinomialCoefficient(){
  long[] bcoef5={1,5,10,10,5,1};
  long[] bcoef6={1,6,15,20,15,6,1};
  for (int i=0; i < 6; i++) {
    Assert.assertEquals("5 choose " + i,bcoef5[i],CombinatoricsUtils.binomialCoefficient(5,i));
  }
  for (int i=0; i < 7; i++) {
    Assert.assertEquals("6 choose " + i,bcoef6[i],CombinatoricsUtils.binomialCoefficient(6,i));
  }
  for (int n=1; n < 10; n++) {
    for (int k=0; k <= n; k++) {
      Assert.assertEquals(n + " choose " + k,binomialCoefficient(n,k),CombinatoricsUtils.binomialCoefficient(n,k));
      Assert.assertEquals(n + " choose " + k,binomialCoefficient(n,k),CombinatoricsUtils.binomialCoefficientDouble(n,k),Double.MIN_VALUE);
      Assert.assertEquals(n + " choose " + k,FastMath.log(binomialCoefficient(n,k)),CombinatoricsUtils.binomialCoefficientLog(n,k),10E-12);
    }
  }
  int[] n={34,66,100,1500,1500};
  int[] k={17,33,10,1500 - 4,4};
  for (int i=0; i < n.length; i++) {
    long expected=binomialCoefficient(n[i],k[i]);
    Assert.assertEquals(n[i] + " choose " + k[i],expected,CombinatoricsUtils.binomialCoefficient(n[i],k[i]));
    Assert.assertEquals(n[i] + " choose " + k[i],expected,CombinatoricsUtils.binomialCoefficientDouble(n[i],k[i]),0.0);
    Assert.assertEquals("log(" + n[i] + " choose "+ k[i]+ ")",FastMath.log(expected),CombinatoricsUtils.binomialCoefficientLog(n[i],k[i]),0.0);
  }
}
