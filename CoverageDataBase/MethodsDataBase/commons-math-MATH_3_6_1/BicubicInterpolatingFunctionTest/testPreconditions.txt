/** 
 * Test preconditions.
 */
@Test public void testPreconditions(){
  double[] xval=new double[]{3,4,5,6.5};
  double[] yval=new double[]{-4,-3,-1,2.5};
  double[][] zval=new double[xval.length][yval.length];
  @SuppressWarnings("unused") BivariateFunction bcf=new BicubicInterpolatingFunction(xval,yval,zval,zval,zval,zval);
  double[] wxval=new double[]{3,2,5,6.5};
  try {
    bcf=new BicubicInterpolatingFunction(wxval,yval,zval,zval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalArgumentException e) {
  }
  double[] wyval=new double[]{-4,-1,-1,2.5};
  try {
    bcf=new BicubicInterpolatingFunction(xval,wyval,zval,zval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalArgumentException e) {
  }
  double[][] wzval=new double[xval.length][yval.length - 1];
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,wzval,zval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,wzval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,zval,wzval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,zval,zval,wzval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  wzval=new double[xval.length - 1][yval.length];
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,wzval,zval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,wzval,zval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,zval,wzval,zval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  try {
    bcf=new BicubicInterpolatingFunction(xval,yval,zval,zval,zval,wzval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
}
