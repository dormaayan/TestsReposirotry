@Test public void testNextPrime(){
  Assert.assertEquals(2,Primes.nextPrime(0));
  Assert.assertEquals(2,Primes.nextPrime(1));
  Assert.assertEquals(2,Primes.nextPrime(2));
  Assert.assertEquals(3,Primes.nextPrime(3));
  Assert.assertEquals(5,Primes.nextPrime(4));
  Assert.assertEquals(5,Primes.nextPrime(5));
  for (int i=0; i < SmallPrimes.PRIMES.length - 1; i++) {
    for (int j=SmallPrimes.PRIMES[i] + 1; j <= SmallPrimes.PRIMES[i + 1]; j++) {
      Assert.assertEquals(SmallPrimes.PRIMES[i + 1],Primes.nextPrime(j));
    }
  }
  Assert.assertEquals(25325981,Primes.nextPrime(25325981));
  for (int i=25325981 + 1; i <= 25326023; i++) {
    Assert.assertEquals(25326023,Primes.nextPrime(i));
  }
  Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE - 10));
  Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE - 1));
  Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE));
  assertNextPrimeException(Integer.MIN_VALUE,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,Integer.MIN_VALUE,0));
  assertNextPrimeException(-1,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-1,0));
  assertNextPrimeException(-13,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-13,0));
}
