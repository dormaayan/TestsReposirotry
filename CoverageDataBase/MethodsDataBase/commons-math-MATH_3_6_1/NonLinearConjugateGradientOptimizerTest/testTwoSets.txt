@Test public void testTwoSets(){
  final double epsilon=1.0e-7;
  LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});
  final Preconditioner preconditioner=new Preconditioner(){
    public double[] precondition(    double[] point,    double[] r){
      double[] d=r.clone();
      d[0]/=72.0;
      d[1]/=30.0;
      d[2]/=314.0;
      d[3]/=260.0;
      d[4]/=2 * (1 + epsilon * epsilon);
      d[5]/=4.0;
      return d;
    }
  }
;
  NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-13,1e-13),1e-7,1e-7,1,preconditioner);
  PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0,0,0,0,0}));
  final double[] result=optimum.getPoint();
  final double[] expected={3,4,-1,-2,1 + epsilon,1 - epsilon};
  Assert.assertEquals(expected[0],result[0],1.0e-7);
  Assert.assertEquals(expected[1],result[1],1.0e-7);
  Assert.assertEquals(expected[2],result[2],1.0e-9);
  Assert.assertEquals(expected[3],result[3],1.0e-8);
  Assert.assertEquals(expected[4] + epsilon,result[4],1.0e-6);
  Assert.assertEquals(expected[5] - epsilon,result[5],1.0e-6);
}
