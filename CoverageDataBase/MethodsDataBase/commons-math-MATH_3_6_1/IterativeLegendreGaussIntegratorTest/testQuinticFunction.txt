@Test public void testQuinticFunction(){
  UnivariateFunction f=new QuinticFunction();
  UnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(3,BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,64);
  double min, max, expected, result;
  min=0;
  max=1;
  expected=-1.0 / 48;
  result=integrator.integrate(10000,f,min,max);
  Assert.assertEquals(expected,result,1.0e-16);
  min=0;
  max=0.5;
  expected=11.0 / 768;
  result=integrator.integrate(10000,f,min,max);
  Assert.assertEquals(expected,result,1.0e-16);
  min=-1;
  max=4;
  expected=2048 / 3.0 - 78 + 1.0 / 48;
  result=integrator.integrate(10000,f,min,max);
  Assert.assertEquals(expected,result,1.0e-16);
}
