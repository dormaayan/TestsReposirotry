@Test public void testAdd(){
  BigFraction a=new BigFraction(1,2);
  BigFraction b=new BigFraction(2,3);
  assertFraction(1,1,a.add(a));
  assertFraction(7,6,a.add(b));
  assertFraction(7,6,b.add(a));
  assertFraction(4,3,b.add(b));
  BigFraction f1=new BigFraction(Integer.MAX_VALUE - 1,1);
  BigFraction f2=BigFraction.ONE;
  BigFraction f=f1.add(f2);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f1=new BigFraction(-1,13 * 13 * 2* 2);
  f2=new BigFraction(-2,13 * 17 * 2);
  f=f1.add(f2);
  Assert.assertEquals(13 * 13 * 17* 2* 2,f.getDenominatorAsInt());
  Assert.assertEquals(-17 - 2 * 13 * 2,f.getNumeratorAsInt());
  try {
    f.add((BigFraction)null);
    Assert.fail("expecting NullArgumentException");
  }
 catch (  NullArgumentException ex) {
  }
  f1=new BigFraction(1,32768 * 3);
  f2=new BigFraction(1,59049);
  f=f1.add(f2);
  Assert.assertEquals(52451,f.getNumeratorAsInt());
  Assert.assertEquals(1934917632,f.getDenominatorAsInt());
  f1=new BigFraction(Integer.MIN_VALUE,3);
  f2=new BigFraction(1,3);
  f=f1.add(f2);
  Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumeratorAsInt());
  Assert.assertEquals(3,f.getDenominatorAsInt());
  f1=new BigFraction(Integer.MAX_VALUE - 1,1);
  f=f1.add(BigInteger.ONE);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f=f.add(BigInteger.ZERO);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f1=new BigFraction(Integer.MAX_VALUE - 1,1);
  f=f1.add(1);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f=f.add(0);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f1=new BigFraction(Integer.MAX_VALUE - 1,1);
  f=f1.add(1l);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f=f.add(0l);
  Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
}
