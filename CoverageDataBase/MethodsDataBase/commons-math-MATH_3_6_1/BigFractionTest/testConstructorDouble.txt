@Test public void testConstructorDouble(){
  assertFraction(1,2,new BigFraction(0.5));
  assertFraction(6004799503160661l,18014398509481984l,new BigFraction(1.0 / 3.0));
  assertFraction(6124895493223875l,36028797018963968l,new BigFraction(17.0 / 100.0));
  assertFraction(1784551352345559l,562949953421312l,new BigFraction(317.0 / 100.0));
  assertFraction(-1,2,new BigFraction(-0.5));
  assertFraction(-6004799503160661l,18014398509481984l,new BigFraction(-1.0 / 3.0));
  assertFraction(-6124895493223875l,36028797018963968l,new BigFraction(17.0 / -100.0));
  assertFraction(-1784551352345559l,562949953421312l,new BigFraction(-317.0 / 100.0));
  for (  double v : new double[]{Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY}) {
    try {
      new BigFraction(v);
      Assert.fail("Expecting IllegalArgumentException");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  Assert.assertEquals(1l,new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());
  Assert.assertEquals(1l,new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());
  Assert.assertEquals(1l,new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());
}
