@Test public void testConstructor(){
  assertFraction(0,1,new BigFraction(0,1));
  assertFraction(0,1,new BigFraction(0l,2l));
  assertFraction(0,1,new BigFraction(0,-1));
  assertFraction(1,2,new BigFraction(1,2));
  assertFraction(1,2,new BigFraction(2,4));
  assertFraction(-1,2,new BigFraction(-1,2));
  assertFraction(-1,2,new BigFraction(1,-2));
  assertFraction(-1,2,new BigFraction(-2,4));
  assertFraction(-1,2,new BigFraction(2,-4));
  assertFraction(11,1,new BigFraction(11));
  assertFraction(11,1,new BigFraction(11l));
  assertFraction(11,1,new BigFraction(new BigInteger("11")));
  assertFraction(0,1,new BigFraction(0.00000000000001,1.0e-5,100));
  assertFraction(2,5,new BigFraction(0.40000000000001,1.0e-5,100));
  assertFraction(15,1,new BigFraction(15.0000000000001,1.0e-5,100));
  Assert.assertEquals(0.00000000000001,new BigFraction(0.00000000000001).doubleValue(),0.0);
  Assert.assertEquals(0.40000000000001,new BigFraction(0.40000000000001).doubleValue(),0.0);
  Assert.assertEquals(15.0000000000001,new BigFraction(15.0000000000001).doubleValue(),0.0);
  assertFraction(3602879701896487l,9007199254740992l,new BigFraction(0.40000000000001));
  assertFraction(1055531162664967l,70368744177664l,new BigFraction(15.0000000000001));
  try {
    new BigFraction(null,BigInteger.ONE);
    Assert.fail("Expecting NullArgumentException");
  }
 catch (  NullArgumentException npe) {
  }
  try {
    new BigFraction(BigInteger.ONE,null);
    Assert.fail("Expecting NullArgumentException");
  }
 catch (  NullArgumentException npe) {
  }
  try {
    new BigFraction(BigInteger.ONE,BigInteger.ZERO);
    Assert.fail("Expecting ZeroException");
  }
 catch (  ZeroException npe) {
  }
  try {
    new BigFraction(2.0 * Integer.MAX_VALUE,1.0e-5,100000);
    Assert.fail("Expecting FractionConversionException");
  }
 catch (  FractionConversionException fce) {
  }
}
