@Test public void testDivide(){
  BigFraction a=new BigFraction(1,2);
  BigFraction b=new BigFraction(2,3);
  assertFraction(1,1,a.divide(a));
  assertFraction(3,4,a.divide(b));
  assertFraction(4,3,b.divide(a));
  assertFraction(1,1,b.divide(b));
  BigFraction f1=new BigFraction(3,5);
  BigFraction f2=BigFraction.ZERO;
  try {
    f1.divide(f2);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  f1=new BigFraction(0,5);
  f2=new BigFraction(2,7);
  BigFraction f=f1.divide(f2);
  Assert.assertSame(BigFraction.ZERO,f);
  f1=new BigFraction(2,7);
  f2=BigFraction.ONE;
  f=f1.divide(f2);
  Assert.assertEquals(2,f.getNumeratorAsInt());
  Assert.assertEquals(7,f.getDenominatorAsInt());
  f1=new BigFraction(1,Integer.MAX_VALUE);
  f=f1.divide(f1);
  Assert.assertEquals(1,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);
  f2=new BigFraction(1,Integer.MAX_VALUE);
  f=f1.divide(f2);
  Assert.assertEquals(Integer.MIN_VALUE,f.getNumeratorAsInt());
  Assert.assertEquals(1,f.getDenominatorAsInt());
  try {
    f.divide((BigFraction)null);
    Assert.fail("expecting NullArgumentException");
  }
 catch (  NullArgumentException ex) {
  }
  f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);
  f=f1.divide(BigInteger.valueOf(Integer.MIN_VALUE));
  Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());
  Assert.assertEquals(1,f.getNumeratorAsInt());
  f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);
  f=f1.divide(Integer.MIN_VALUE);
  Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());
  Assert.assertEquals(1,f.getNumeratorAsInt());
  f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);
  f=f1.divide((long)Integer.MIN_VALUE);
  Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());
  Assert.assertEquals(1,f.getNumeratorAsInt());
}
