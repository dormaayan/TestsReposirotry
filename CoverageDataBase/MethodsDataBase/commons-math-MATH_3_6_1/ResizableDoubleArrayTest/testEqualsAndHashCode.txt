@Test public void testEqualsAndHashCode() throws Exception {
  ResizableDoubleArray first=new ResizableDoubleArray();
  Double other=new Double(2);
  Assert.assertFalse(first.equals(other));
  other=null;
  Assert.assertFalse(first.equals(other));
  Assert.assertTrue(first.equals(first));
  ResizableDoubleArray second=new ResizableDoubleArray();
  verifyEquality(first,second);
  ResizableDoubleArray third=new ResizableDoubleArray(3,2.0,2.0);
  verifyInequality(third,first);
  ResizableDoubleArray fourth=new ResizableDoubleArray(3,2.0,2.0);
  ResizableDoubleArray fifth=new ResizableDoubleArray(2,2.0,2.0);
  verifyEquality(third,fourth);
  verifyInequality(third,fifth);
  third.addElement(4.1);
  third.addElement(4.2);
  third.addElement(4.3);
  fourth.addElement(4.1);
  fourth.addElement(4.2);
  fourth.addElement(4.3);
  verifyEquality(third,fourth);
  fourth.addElement(4.4);
  verifyInequality(third,fourth);
  third.addElement(4.4);
  verifyEquality(third,fourth);
  fourth.addElement(4.4);
  verifyInequality(third,fourth);
  third.addElement(4.4);
  verifyEquality(third,fourth);
  fourth.addElementRolling(4.5);
  third.addElementRolling(4.5);
  verifyEquality(third,fourth);
  third.discardFrontElements(1);
  verifyInequality(third,fourth);
  fourth.discardFrontElements(1);
  verifyEquality(third,fourth);
  third.discardMostRecentElements(2);
  fourth.discardMostRecentElements(2);
  verifyEquality(third,fourth);
  third.addElement(18);
  fourth.addElement(17);
  third.addElement(17);
  fourth.addElement(18);
  verifyInequality(third,fourth);
  ResizableDoubleArray.copy(fourth,fifth);
  verifyEquality(fourth,fifth);
  verifyEquality(fourth,new ResizableDoubleArray(fourth));
  verifyEquality(fourth,fourth.copy());
}
