@Test public void testDiscard(){
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  Assert.assertEquals("Number of elements should be 11",11,da.getNumElements());
  ((ResizableDoubleArray)da).discardFrontElements(5);
  Assert.assertEquals("Number of elements should be 6",6,da.getNumElements());
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  Assert.assertEquals("Number of elements should be 10",10,da.getNumElements());
  ((ResizableDoubleArray)da).discardMostRecentElements(2);
  Assert.assertEquals("Number of elements should be 8",8,da.getNumElements());
  try {
    ((ResizableDoubleArray)da).discardFrontElements(-1);
    Assert.fail("Trying to discard a negative number of element is not allowed");
  }
 catch (  Exception e) {
  }
  try {
    ((ResizableDoubleArray)da).discardMostRecentElements(-1);
    Assert.fail("Trying to discard a negative number of element is not allowed");
  }
 catch (  Exception e) {
  }
  try {
    ((ResizableDoubleArray)da).discardFrontElements(10000);
    Assert.fail("You can't discard more elements than the array contains");
  }
 catch (  Exception e) {
  }
  try {
    ((ResizableDoubleArray)da).discardMostRecentElements(10000);
    Assert.fail("You can't discard more elements than the array contains");
  }
 catch (  Exception e) {
  }
}
