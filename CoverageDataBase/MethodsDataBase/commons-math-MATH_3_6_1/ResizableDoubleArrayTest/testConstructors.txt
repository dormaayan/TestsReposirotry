@SuppressWarnings("deprecation") @Test public void testConstructors(){
  float defaultExpansionFactor=2.0f;
  double defaultContractionCriteria=2.5;
  int defaultMode=ResizableDoubleArray.MULTIPLICATIVE_MODE;
  ResizableDoubleArray testDa=new ResizableDoubleArray(2);
  Assert.assertEquals(0,testDa.getNumElements());
  Assert.assertEquals(2,testDa.getCapacity());
  Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);
  Assert.assertEquals(defaultContractionCriteria,testDa.getContractionCriterion(),0);
  Assert.assertEquals(defaultMode,testDa.getExpansionMode());
  try {
    da=new ResizableDoubleArray(-1);
    Assert.fail("Expecting IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
  }
  testDa=new ResizableDoubleArray((double[])null);
  Assert.assertEquals(0,testDa.getNumElements());
  double[] initialArray=new double[]{0,1,2};
  testDa=new ResizableDoubleArray(initialArray);
  Assert.assertEquals(3,testDa.getNumElements());
  testDa=new ResizableDoubleArray(2,2.0);
  Assert.assertEquals(0,testDa.getNumElements());
  Assert.assertEquals(2,testDa.getCapacity());
  Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);
  Assert.assertEquals(defaultContractionCriteria,testDa.getContractionCriterion(),0);
  Assert.assertEquals(defaultMode,testDa.getExpansionMode());
  try {
    da=new ResizableDoubleArray(2,0.5);
    Assert.fail("Expecting IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
  }
  testDa=new ResizableDoubleArray(2,3.0);
  Assert.assertEquals(3.0f,testDa.getExpansionFactor(),0);
  Assert.assertEquals(3.5f,testDa.getContractionCriterion(),0);
  testDa=new ResizableDoubleArray(2,2.0,3.0);
  Assert.assertEquals(0,testDa.getNumElements());
  Assert.assertEquals(2,testDa.getCapacity());
  Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);
  Assert.assertEquals(3.0f,testDa.getContractionCriterion(),0);
  Assert.assertEquals(defaultMode,testDa.getExpansionMode());
  try {
    da=new ResizableDoubleArray(2,2.0,1.5);
    Assert.fail("Expecting IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
  }
  testDa=new ResizableDoubleArray(2,2.0,3.0,ResizableDoubleArray.ExpansionMode.ADDITIVE);
  Assert.assertEquals(0,testDa.getNumElements());
  Assert.assertEquals(2,testDa.getCapacity());
  Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);
  Assert.assertEquals(3.0f,testDa.getContractionCriterion(),0);
  Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,testDa.getExpansionMode());
  try {
    da=new ResizableDoubleArray(2,2.0f,2.5f,-1);
    Assert.fail("Expecting IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
  }
  testDa=new ResizableDoubleArray(2,2.0,3.0,ResizableDoubleArray.ExpansionMode.ADDITIVE);
  testDa.addElement(2.0);
  testDa.addElement(3.2);
  ResizableDoubleArray copyDa=new ResizableDoubleArray(testDa);
  Assert.assertEquals(copyDa,testDa);
  Assert.assertEquals(testDa,copyDa);
  final double[] values={1};
  testDa=new ResizableDoubleArray(values);
  Assert.assertArrayEquals(values,testDa.getElements(),0);
  Assert.assertEquals(1,testDa.getNumElements());
  Assert.assertEquals(1,testDa.getElement(0),0);
}
