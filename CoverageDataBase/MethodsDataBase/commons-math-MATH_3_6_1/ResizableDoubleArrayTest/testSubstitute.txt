@Test public void testSubstitute(){
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  da.addElement(2.0);
  Assert.assertEquals("Number of elements should be 11",11,da.getNumElements());
  ((ResizableDoubleArray)da).substituteMostRecentElement(24);
  Assert.assertEquals("Number of elements should be 11",11,da.getNumElements());
  try {
    ((ResizableDoubleArray)da).discardMostRecentElements(10);
  }
 catch (  Exception e) {
    Assert.fail("Trying to discard a negative number of element is not allowed");
  }
  ((ResizableDoubleArray)da).substituteMostRecentElement(24);
  Assert.assertEquals("Number of elements should be 1",1,da.getNumElements());
}
