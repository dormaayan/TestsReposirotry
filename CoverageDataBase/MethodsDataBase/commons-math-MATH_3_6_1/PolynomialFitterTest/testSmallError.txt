@Test public void testSmallError(){
  Random randomizer=new Random(53882150042l);
  double maxError=0;
  for (int degree=0; degree < 10; ++degree) {
    PolynomialFunction p=buildRandomPolynomial(degree,randomizer);
    PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());
    for (double x=-1.0; x < 1.0; x+=0.01) {
      fitter.addObservedPoint(1.0,x,p.value(x) + 0.1 * randomizer.nextGaussian());
    }
    final double[] init=new double[degree + 1];
    PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));
    for (double x=-1.0; x < 1.0; x+=0.01) {
      double error=FastMath.abs(p.value(x) - fitted.value(x)) / (1.0 + FastMath.abs(p.value(x)));
      maxError=FastMath.max(maxError,error);
      Assert.assertTrue(FastMath.abs(error) < 0.1);
    }
  }
  Assert.assertTrue(maxError > 0.01);
}
