@Test public void testWampler2(){
  double[] data=new double[]{1.00000,0,1.11111,1,1.24992,2,1.42753,3,1.65984,4,1.96875,5,2.38336,6,2.94117,7,3.68928,8,4.68559,9,6.00000,10,7.71561,11,9.92992,12,12.75603,13,16.32384,14,20.78125,15,26.29536,16,33.05367,17,41.26528,18,51.16209,19,63.00000,20};
  OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();
  final int nvars=5;
  final int nobs=21;
  double[] tmp=new double[(nvars + 1) * nobs];
  int off=0;
  int off2=0;
  for (int i=0; i < nobs; i++) {
    tmp[off2]=data[off];
    tmp[off2 + 1]=data[off + 1];
    tmp[off2 + 2]=tmp[off2 + 1] * tmp[off2 + 1];
    tmp[off2 + 3]=tmp[off2 + 1] * tmp[off2 + 2];
    tmp[off2 + 4]=tmp[off2 + 1] * tmp[off2 + 3];
    tmp[off2 + 5]=tmp[off2 + 1] * tmp[off2 + 4];
    off2+=(nvars + 1);
    off+=2;
  }
  model.newSampleData(tmp,nobs,nvars);
  double[] betaHat=model.estimateRegressionParameters();
  TestUtils.assertEquals(betaHat,new double[]{1.0,1.0e-1,1.0e-2,1.0e-3,1.0e-4,1.0e-5},1E-8);
  double[] se=model.estimateRegressionParametersStandardErrors();
  TestUtils.assertEquals(se,new double[]{0.0,0.0,0.0,0.0,0.0,0.0},1E-8);
  TestUtils.assertEquals(1.0,model.calculateRSquared(),1.0e-10);
  TestUtils.assertEquals(0,model.estimateErrorVariance(),1.0e-7);
  TestUtils.assertEquals(0.00,model.calculateResidualSumOfSquares(),1.0e-6);
  return;
}
