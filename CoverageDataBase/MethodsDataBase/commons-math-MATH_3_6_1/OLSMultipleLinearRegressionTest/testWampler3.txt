@Test public void testWampler3(){
  double[] data=new double[]{760,0,-2042,1,2111,2,-1684,3,3888,4,1858,5,11379,6,17560,7,39287,8,64382,9,113159,10,175108,11,273291,12,400186,13,581243,14,811568,15,1121004,16,1506550,17,2002767,18,2611612,19,3369180,20};
  OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();
  final int nvars=5;
  final int nobs=21;
  double[] tmp=new double[(nvars + 1) * nobs];
  int off=0;
  int off2=0;
  for (int i=0; i < nobs; i++) {
    tmp[off2]=data[off];
    tmp[off2 + 1]=data[off + 1];
    tmp[off2 + 2]=tmp[off2 + 1] * tmp[off2 + 1];
    tmp[off2 + 3]=tmp[off2 + 1] * tmp[off2 + 2];
    tmp[off2 + 4]=tmp[off2 + 1] * tmp[off2 + 3];
    tmp[off2 + 5]=tmp[off2 + 1] * tmp[off2 + 4];
    off2+=(nvars + 1);
    off+=2;
  }
  model.newSampleData(tmp,nobs,nvars);
  double[] betaHat=model.estimateRegressionParameters();
  TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);
  double[] se=model.estimateRegressionParametersStandardErrors();
  TestUtils.assertEquals(se,new double[]{2152.32624678170,2363.55173469681,779.343524331583,101.475507550350,5.64566512170752,0.112324854679312},1E-8);
  TestUtils.assertEquals(.999995559025820,model.calculateRSquared(),1.0e-10);
  TestUtils.assertEquals(5570284.53333333,model.estimateErrorVariance(),1.0e-6);
  TestUtils.assertEquals(83554268.0000000,model.calculateResidualSumOfSquares(),1.0e-5);
  return;
}
