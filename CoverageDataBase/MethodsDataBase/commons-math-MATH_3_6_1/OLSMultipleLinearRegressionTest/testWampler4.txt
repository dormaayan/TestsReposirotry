@Test public void testWampler4(){
  double[] data=new double[]{75901,0,-204794,1,204863,2,-204436,3,253665,4,-200894,5,214131,6,-185192,7,221249,8,-138370,9,315911,10,-27644,11,455253,12,197434,13,783995,14,608816,15,1370781,16,1303798,17,2205519,18,2408860,19,3444321,20};
  OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();
  final int nvars=5;
  final int nobs=21;
  double[] tmp=new double[(nvars + 1) * nobs];
  int off=0;
  int off2=0;
  for (int i=0; i < nobs; i++) {
    tmp[off2]=data[off];
    tmp[off2 + 1]=data[off + 1];
    tmp[off2 + 2]=tmp[off2 + 1] * tmp[off2 + 1];
    tmp[off2 + 3]=tmp[off2 + 1] * tmp[off2 + 2];
    tmp[off2 + 4]=tmp[off2 + 1] * tmp[off2 + 3];
    tmp[off2 + 5]=tmp[off2 + 1] * tmp[off2 + 4];
    off2+=(nvars + 1);
    off+=2;
  }
  model.newSampleData(tmp,nobs,nvars);
  double[] betaHat=model.estimateRegressionParameters();
  TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-6);
  double[] se=model.estimateRegressionParametersStandardErrors();
  TestUtils.assertEquals(se,new double[]{215232.624678170,236355.173469681,77934.3524331583,10147.5507550350,564.566512170752,11.2324854679312},1E-8);
  TestUtils.assertEquals(.957478440825662,model.calculateRSquared(),1.0e-10);
  TestUtils.assertEquals(55702845333.3333,model.estimateErrorVariance(),1.0e-4);
  TestUtils.assertEquals(835542680000.000,model.calculateResidualSumOfSquares(),1.0e-3);
  return;
}
