@Test public void testApplyInverseTo() throws MathIllegalArgumentException {
  Rotation r=new Rotation(new Vector3D(2,-3,5),1.7,RotationConvention.VECTOR_OPERATOR);
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      Vector3D u=new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      r.applyInverseTo(r.applyTo(u));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
    }
  }
  r=Rotation.IDENTITY;
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      Vector3D u=new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
    }
  }
  r=new Rotation(Vector3D.PLUS_K,FastMath.PI,RotationConvention.VECTOR_OPERATOR);
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      Vector3D u=new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
    }
  }
}
