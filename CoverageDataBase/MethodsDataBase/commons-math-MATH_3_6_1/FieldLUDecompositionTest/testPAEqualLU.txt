/** 
 * test PA = LU 
 */
@Test public void testPAEqualLU(){
  FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);
  FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(matrix);
  FieldMatrix<Fraction> l=lu.getL();
  FieldMatrix<Fraction> u=lu.getU();
  FieldMatrix<Fraction> p=lu.getP();
  TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));
  matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testDataMinus);
  lu=new FieldLUDecomposition<Fraction>(matrix);
  l=lu.getL();
  u=lu.getU();
  p=lu.getP();
  TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));
  matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),17,17);
  for (int i=0; i < matrix.getRowDimension(); ++i) {
    matrix.setEntry(i,i,Fraction.ONE);
  }
  lu=new FieldLUDecomposition<Fraction>(matrix);
  l=lu.getL();
  u=lu.getU();
  p=lu.getP();
  TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));
  matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),singular);
  lu=new FieldLUDecomposition<Fraction>(matrix);
  Assert.assertFalse(lu.getSolver().isNonSingular());
  Assert.assertNull(lu.getL());
  Assert.assertNull(lu.getU());
  Assert.assertNull(lu.getP());
  matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),bigSingular);
  lu=new FieldLUDecomposition<Fraction>(matrix);
  Assert.assertFalse(lu.getSolver().isNonSingular());
  Assert.assertNull(lu.getL());
  Assert.assertNull(lu.getU());
  Assert.assertNull(lu.getP());
}
