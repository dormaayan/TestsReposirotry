/** 
 * test matrices values 
 */
@Test public void testMatricesValues2(){
  FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),luData));
  FieldMatrix<Fraction> lRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(3),new Fraction(1),new Fraction(0)},{new Fraction(1),new Fraction(0),new Fraction(1)}});
  FieldMatrix<Fraction> uRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(2),new Fraction(3),new Fraction(3)},{new Fraction(0),new Fraction(-3),new Fraction(-1)},{new Fraction(0),new Fraction(0),new Fraction(4)}});
  FieldMatrix<Fraction> pRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(0),new Fraction(0),new Fraction(1)},{new Fraction(0),new Fraction(1),new Fraction(0)}});
  int[] pivotRef={0,2,1};
  FieldMatrix<Fraction> l=lu.getL();
  TestUtils.assertEquals(lRef,l);
  FieldMatrix<Fraction> u=lu.getU();
  TestUtils.assertEquals(uRef,u);
  FieldMatrix<Fraction> p=lu.getP();
  TestUtils.assertEquals(pRef,p);
  int[] pivot=lu.getPivot();
  for (int i=0; i < pivotRef.length; ++i) {
    Assert.assertEquals(pivotRef[i],pivot[i]);
  }
  Assert.assertTrue(l == lu.getL());
  Assert.assertTrue(u == lu.getU());
  Assert.assertTrue(p == lu.getP());
}
