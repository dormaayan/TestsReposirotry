@Test public void testScalarPowInf(){
  TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,infOne.pow(1.0));
  TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0));
  TestUtils.assertSame(Complex.NaN,infInf.pow(1.0));
  TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0));
  TestUtils.assertSame(Complex.NaN,negInfInf.pow(10));
  TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0));
  TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY));
  TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY));
}
