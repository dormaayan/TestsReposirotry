@Test public void testMath308(){
  double[] mainTridiagonal={22.330154644539597,46.65485522478641,17.393672330044705,54.46687435351116,80.17800767709437};
  double[] secondaryTridiagonal={13.04450406501361,-5.977590941539671,2.9040909856707517,7.1570352792841225};
  double[] refEigenValues={82.044413207204002,53.456697699894512,52.536278520113882,18.847969733754262,14.138204224043099};
  RealVector[] refEigenVectors={new ArrayRealVector(new double[]{-0.000462690386766,-0.002118073109055,0.011530080757413,0.252322434584915,0.967572088232592}),new ArrayRealVector(new double[]{0.314647769490148,0.750806415553905,-0.167700312025760,-0.537092972407375,0.143854968127780}),new ArrayRealVector(new double[]{0.222368839324646,0.514921891363332,-0.021377019336614,0.801196801016305,-0.207446991247740}),new ArrayRealVector(new double[]{-0.713933751051495,0.190582113553930,-0.671410443368332,0.056056055955050,-0.006541576993581}),new ArrayRealVector(new double[]{-0.584677060845929,0.367177264979103,0.721453187784497,-0.052971054621812,0.005740715188257})};
  EigenDecomposition decomposition;
  decomposition=new EigenDecomposition(mainTridiagonal,secondaryTridiagonal);
  double[] eigenValues=decomposition.getRealEigenvalues();
  for (int i=0; i < refEigenValues.length; ++i) {
    Assert.assertEquals(refEigenValues[i],eigenValues[i],1.0e-5);
    Assert.assertEquals(0,refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(),2.0e-7);
  }
}
