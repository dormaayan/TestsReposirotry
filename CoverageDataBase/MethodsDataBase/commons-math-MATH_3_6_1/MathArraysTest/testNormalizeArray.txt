@Test public void testNormalizeArray(){
  double[] testValues1=new double[]{1,1,2};
  TestUtils.assertEquals(new double[]{.25,.25,.5},MathArrays.normalizeArray(testValues1,1),Double.MIN_VALUE);
  double[] testValues2=new double[]{-1,-1,1};
  TestUtils.assertEquals(new double[]{1,1,-1},MathArrays.normalizeArray(testValues2,1),Double.MIN_VALUE);
  double[] testValues3=new double[]{-1,-1,Double.NaN,1,Double.NaN};
  TestUtils.assertEquals(new double[]{1,1,Double.NaN,-1,Double.NaN},MathArrays.normalizeArray(testValues3,1),Double.MIN_VALUE);
  double[] zeroSum=new double[]{-1,1};
  try {
    MathArrays.normalizeArray(zeroSum,1);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  double[] hasInf=new double[]{1,2,1,Double.NEGATIVE_INFINITY};
  try {
    MathArrays.normalizeArray(hasInf,1);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    MathArrays.normalizeArray(testValues1,Double.POSITIVE_INFINITY);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    MathArrays.normalizeArray(testValues1,Double.NaN);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
}
