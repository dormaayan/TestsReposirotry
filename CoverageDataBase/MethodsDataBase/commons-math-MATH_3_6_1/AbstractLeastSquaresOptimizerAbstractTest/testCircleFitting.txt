@Test public void testCircleFitting(){
  CircleVectorial circle=new CircleVectorial();
  circle.addPoint(30,68);
  circle.addPoint(50,-6);
  circle.addPoint(110,-20);
  circle.addPoint(35,15);
  circle.addPoint(45,97);
  AbstractLeastSquaresOptimizer optimizer=createOptimizer();
  PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));
  Assert.assertTrue(optimizer.getEvaluations() < 10);
  double rms=optimizer.getRMS();
  Assert.assertEquals(1.768262623567235,FastMath.sqrt(circle.getN()) * rms,1e-10);
  Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);
  Assert.assertEquals(69.96016176931406,circle.getRadius(center),1e-6);
  Assert.assertEquals(96.07590211815305,center.getX(),1e-6);
  Assert.assertEquals(48.13516790438953,center.getY(),1e-6);
  double[][] cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);
  Assert.assertEquals(1.839,cov[0][0],0.001);
  Assert.assertEquals(0.731,cov[0][1],0.001);
  Assert.assertEquals(cov[0][1],cov[1][0],1e-14);
  Assert.assertEquals(0.786,cov[1][1],0.001);
  double r=circle.getRadius(center);
  for (double d=0; d < 2 * FastMath.PI; d+=0.01) {
    circle.addPoint(center.getX() + r * FastMath.cos(d),center.getY() + r * FastMath.sin(d));
  }
  double[] target=new double[circle.getN()];
  Arrays.fill(target,0);
  double[] weights=new double[circle.getN()];
  Arrays.fill(weights,2);
  optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{98.680,47.345}));
  cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);
  Assert.assertEquals(0.0016,cov[0][0],0.001);
  Assert.assertEquals(3.2e-7,cov[0][1],1e-9);
  Assert.assertEquals(cov[0][1],cov[1][0],1e-14);
  Assert.assertEquals(0.0016,cov[1][1],0.001);
}
