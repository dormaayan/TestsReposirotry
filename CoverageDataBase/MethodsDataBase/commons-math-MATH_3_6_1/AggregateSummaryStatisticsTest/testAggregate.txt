/** 
 * Test aggregate function by randomly generating a dataset of 10-100 values from [-100, 100], dividing it into 2-5 partitions, computing stats for each partition and comparing the result of aggregate(...) applied to the collection of per-partition SummaryStatistics with a single SummaryStatistics computed over the full sample.
 */
@Test public void testAggregate(){
  double[] totalSample=generateSample();
  double[][] subSamples=generatePartition(totalSample);
  int nSamples=subSamples.length;
  SummaryStatistics totalStats=new SummaryStatistics();
  for (int i=0; i < totalSample.length; i++) {
    totalStats.addValue(totalSample[i]);
  }
  SummaryStatistics[] subSampleStats=new SummaryStatistics[nSamples];
  for (int i=0; i < nSamples; i++) {
    subSampleStats[i]=new SummaryStatistics();
  }
  Collection<SummaryStatistics> aggregate=new ArrayList<SummaryStatistics>();
  for (int i=0; i < nSamples; i++) {
    for (int j=0; j < subSamples[i].length; j++) {
      subSampleStats[i].addValue(subSamples[i][j]);
    }
    aggregate.add(subSampleStats[i]);
  }
  StatisticalSummary aggregatedStats=AggregateSummaryStatistics.aggregate(aggregate);
  assertEquals(totalStats.getSummary(),aggregatedStats,10E-12);
}
