@Test public void testDerivatives(){
  double eps=5.0e-16;
  double kx=2;
  double ky=-3;
  double kz=5;
  double n2=kx * kx + ky * ky + kz * kz;
  double n=FastMath.sqrt(n2);
  double theta=1.7;
  double cosTheta=FastMath.cos(theta);
  double sinTheta=FastMath.sin(theta);
  FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createAxis(kx,ky,kz),createAngle(theta),RotationConvention.VECTOR_OPERATOR);
  Vector3D a=new Vector3D(kx / n,ky / n,kz / n);
  RealMatrix dadk=MatrixUtils.createRealMatrix(new double[][]{{(ky * ky + kz * kz) / (n * n2),-kx * ky / (n * n2),-kx * kz / (n * n2)},{-kx * ky / (n * n2),(kx * kx + kz * kz) / (n * n2),-ky * kz / (n * n2)},{-kx * kz / (n * n2),-ky * kz / (n * n2),(kx * kx + ky * ky) / (n * n2)}});
  for (double x=-0.9; x < 0.9; x+=0.2) {
    for (double y=-0.9; y < 0.9; y+=0.2) {
      for (double z=-0.9; z < 0.9; z+=0.2) {
        Vector3D u=new Vector3D(x,y,z);
        FieldVector3D<DerivativeStructure> v=r.applyTo(createVector(x,y,z));
        double dot=Vector3D.dotProduct(u,a);
        Vector3D cross=Vector3D.crossProduct(a,u);
        double c1=1 - cosTheta;
        double c2=c1 * dot;
        Vector3D rt=new Vector3D(cosTheta,u,c2,a,sinTheta,cross);
        Assert.assertEquals(rt.getX(),v.getX().getReal(),eps);
        Assert.assertEquals(rt.getY(),v.getY().getReal(),eps);
        Assert.assertEquals(rt.getZ(),v.getZ().getReal(),eps);
        RealMatrix dvda=MatrixUtils.createRealMatrix(new double[][]{{c1 * x * a.getX() + c2,c1 * y * a.getX() + sinTheta * z,c1 * z * a.getX() - sinTheta * y},{c1 * x * a.getY() - sinTheta * z,c1 * y * a.getY() + c2,c1 * z * a.getY() + sinTheta * x},{c1 * x * a.getZ() + sinTheta * y,c1 * y * a.getZ() - sinTheta * x,c1 * z * a.getZ() + c2}});
        RealMatrix dvdk=dvda.multiply(dadk);
        Assert.assertEquals(dvdk.getEntry(0,0),v.getX().getPartialDerivative(1,0,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(0,1),v.getX().getPartialDerivative(0,1,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(0,2),v.getX().getPartialDerivative(0,0,1,0),eps);
        Assert.assertEquals(dvdk.getEntry(1,0),v.getY().getPartialDerivative(1,0,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(1,1),v.getY().getPartialDerivative(0,1,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(1,2),v.getY().getPartialDerivative(0,0,1,0),eps);
        Assert.assertEquals(dvdk.getEntry(2,0),v.getZ().getPartialDerivative(1,0,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(2,1),v.getZ().getPartialDerivative(0,1,0,0),eps);
        Assert.assertEquals(dvdk.getEntry(2,2),v.getZ().getPartialDerivative(0,0,1,0),eps);
        Vector3D dvdTheta=new Vector3D(-sinTheta,u,sinTheta * dot,a,cosTheta,cross);
        Assert.assertEquals(dvdTheta.getX(),v.getX().getPartialDerivative(0,0,0,1),eps);
        Assert.assertEquals(dvdTheta.getY(),v.getY().getPartialDerivative(0,0,0,1),eps);
        Assert.assertEquals(dvdTheta.getZ(),v.getZ().getPartialDerivative(0,0,0,1),eps);
      }
    }
  }
}
