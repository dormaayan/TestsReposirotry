@Test public void testSingularities(){
  for (  RotationConvention convention : RotationConvention.values()) {
    RotationOrder[] CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};
    double[] singularCardanAngle={FastMath.PI / 2,-FastMath.PI / 2};
    for (int i=0; i < CardanOrders.length; ++i) {
      for (int j=0; j < singularCardanAngle.length; ++j) {
        FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(CardanOrders[i],convention,new DerivativeStructure(3,1,0,0.1),new DerivativeStructure(3,1,1,singularCardanAngle[j]),new DerivativeStructure(3,1,2,0.3));
        try {
          r.getAngles(CardanOrders[i],convention);
          Assert.fail("an exception should have been caught");
        }
 catch (        CardanEulerSingularityException cese) {
        }
      }
    }
    RotationOrder[] EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};
    double[] singularEulerAngle={0,FastMath.PI};
    for (int i=0; i < EulerOrders.length; ++i) {
      for (int j=0; j < singularEulerAngle.length; ++j) {
        FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(EulerOrders[i],convention,new DerivativeStructure(3,1,0,0.1),new DerivativeStructure(3,1,1,singularEulerAngle[j]),new DerivativeStructure(3,1,2,0.3));
        try {
          r.getAngles(EulerOrders[i],convention);
          Assert.fail("an exception should have been caught");
        }
 catch (        CardanEulerSingularityException cese) {
        }
      }
    }
  }
}
