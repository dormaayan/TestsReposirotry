@Test public void testAngles() throws CardanEulerSingularityException {
  for (  RotationConvention convention : RotationConvention.values()) {
    RotationOrder[] CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};
    for (int i=0; i < CardanOrders.length; ++i) {
      for (double alpha1=0.1; alpha1 < 6.2; alpha1+=0.3) {
        for (double alpha2=-1.55; alpha2 < 1.55; alpha2+=0.3) {
          for (double alpha3=0.1; alpha3 < 6.2; alpha3+=0.3) {
            FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(CardanOrders[i],convention,new DerivativeStructure(3,1,0,alpha1),new DerivativeStructure(3,1,1,alpha2),new DerivativeStructure(3,1,2,alpha3));
            DerivativeStructure[] angles=r.getAngles(CardanOrders[i],convention);
            checkAngle(angles[0],alpha1);
            checkAngle(angles[1],alpha2);
            checkAngle(angles[2],alpha3);
          }
        }
      }
    }
    RotationOrder[] EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};
    for (int i=0; i < EulerOrders.length; ++i) {
      for (double alpha1=0.1; alpha1 < 6.2; alpha1+=0.3) {
        for (double alpha2=0.05; alpha2 < 3.1; alpha2+=0.3) {
          for (double alpha3=0.1; alpha3 < 6.2; alpha3+=0.3) {
            FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(EulerOrders[i],convention,new DerivativeStructure(3,1,0,alpha1),new DerivativeStructure(3,1,1,alpha2),new DerivativeStructure(3,1,2,alpha3));
            DerivativeStructure[] angles=r.getAngles(EulerOrders[i],convention);
            checkAngle(angles[0],alpha1);
            checkAngle(angles[1],alpha2);
            checkAngle(angles[2],alpha3);
          }
        }
      }
    }
  }
}
