@Test public void testVectorTwoPairs() throws MathArithmeticException {
  FieldVector3D<DerivativeStructure> u1=createVector(3,0,0);
  FieldVector3D<DerivativeStructure> u2=createVector(0,5,0);
  FieldVector3D<DerivativeStructure> v1=createVector(0,0,2);
  FieldVector3D<DerivativeStructure> v2=createVector(-2,0,2);
  FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(u1,u2,v1,v2);
  checkVector(r.applyTo(createVector(1,0,0)),createVector(0,0,1));
  checkVector(r.applyTo(createVector(0,1,0)),createVector(-1,0,0));
  r=new FieldRotation<DerivativeStructure>(u1,u2,u1.negate(),u2.negate());
  FieldVector3D<DerivativeStructure> axis=r.getAxis(RotationConvention.VECTOR_OPERATOR);
  if (FieldVector3D.dotProduct(axis,createVector(0,0,1)).getReal() > 0) {
    checkVector(axis,createVector(0,0,1));
  }
 else {
    checkVector(axis,createVector(0,0,-1));
  }
  checkAngle(r.getAngle(),FastMath.PI);
  double sqrt=FastMath.sqrt(2) / 2;
  r=new FieldRotation<DerivativeStructure>(createVector(1,0,0),createVector(0,1,0),createVector(0.5,0.5,sqrt),createVector(0.5,0.5,-sqrt));
  checkRotationDS(r,sqrt,0.5,0.5,0);
  r=new FieldRotation<DerivativeStructure>(u1,u2,u1,FieldVector3D.crossProduct(u1,u2));
  checkRotationDS(r,sqrt,-sqrt,0,0);
  checkRotationDS(new FieldRotation<DerivativeStructure>(u1,u2,u1,u2),1,0,0,0);
  try {
    new FieldRotation<DerivativeStructure>(u1,u2,createVector(0,0,0),v2);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathArithmeticException e) {
  }
}
