@Test public void testComparatorPermutation(){
  List<String> data=Arrays.asList(new String[]{"x","b","c","z","b"});
  List<Double> permutation=RandomKey.comparatorPermutation(data,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o1.compareTo(o2);
    }
  }
);
  Double[] permArr=new Double[data.size()];
  permArr=permutation.toArray(permArr);
  Assert.assertArrayEquals(new Double[]{0.6,0.0,0.4,0.8,0.2},permArr);
  List<String> decodedData=new DummyRandomKey(permutation).decode(data);
  Assert.assertEquals("b",decodedData.get(0));
  Assert.assertEquals("b",decodedData.get(1));
  Assert.assertEquals("c",decodedData.get(2));
  Assert.assertEquals("x",decodedData.get(3));
  Assert.assertEquals("z",decodedData.get(4));
  permutation=RandomKey.comparatorPermutation(data,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o2.compareTo(o1);
    }
  }
);
  permArr=new Double[data.size()];
  permArr=permutation.toArray(permArr);
  Assert.assertArrayEquals(new Double[]{0.2,0.6,0.4,0.0,0.8},permArr);
  decodedData=new DummyRandomKey(permutation).decode(data);
  Assert.assertEquals("z",decodedData.get(0));
  Assert.assertEquals("x",decodedData.get(1));
  Assert.assertEquals("c",decodedData.get(2));
  Assert.assertEquals("b",decodedData.get(3));
  Assert.assertEquals("b",decodedData.get(4));
}
