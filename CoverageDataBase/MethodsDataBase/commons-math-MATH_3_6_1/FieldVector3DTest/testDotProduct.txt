@Test public void testDotProduct(){
  Well1024a random=new Well1024a(553267312521321234l);
  for (int i=0; i < 10000; ++i) {
    double ux=10000 * random.nextDouble();
    double uy=10000 * random.nextDouble();
    double uz=10000 * random.nextDouble();
    double vx=10000 * random.nextDouble();
    double vy=10000 * random.nextDouble();
    double vz=10000 * random.nextDouble();
    double sNaive=ux * vx + uy * vy + uz * vz;
    FieldVector3D<DerivativeStructure> uds=createVector(ux,uy,uz,3);
    FieldVector3D<DerivativeStructure> vds=createVector(vx,vy,vz,3);
    Vector3D v=new Vector3D(vx,vy,vz);
    DerivativeStructure sAccurate=FieldVector3D.dotProduct(uds,vds);
    Assert.assertEquals(sNaive,sAccurate.getReal(),2.5e-16 * sNaive);
    Assert.assertEquals(ux + vx,sAccurate.getPartialDerivative(1,0,0),2.5e-16 * sNaive);
    Assert.assertEquals(uy + vy,sAccurate.getPartialDerivative(0,1,0),2.5e-16 * sNaive);
    Assert.assertEquals(uz + vz,sAccurate.getPartialDerivative(0,0,1),2.5e-16 * sNaive);
    sAccurate=FieldVector3D.dotProduct(uds,v);
    Assert.assertEquals(sNaive,sAccurate.getReal(),2.5e-16 * sNaive);
    Assert.assertEquals(vx,sAccurate.getPartialDerivative(1,0,0),2.5e-16 * sNaive);
    Assert.assertEquals(vy,sAccurate.getPartialDerivative(0,1,0),2.5e-16 * sNaive);
    Assert.assertEquals(vz,sAccurate.getPartialDerivative(0,0,1),2.5e-16 * sNaive);
  }
}
