@Test public void testAccurateCrossProduct(){
  final FieldVector3D<DerivativeStructure> u1=createVector(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0,3);
  final FieldVector3D<DerivativeStructure> u2=createVector(1796571811118507.0 / 2147483648.0,7853468008299307.0 / 2147483648.0,2599586637357461.0 / 17179869184.0,3);
  final FieldVector3D<DerivativeStructure> u3=createVector(12753243807587107.0 / 18446744073709551616.0,-2313766922703915.0 / 18446744073709551616.0,-227970081415313.0 / 288230376151711744.0,3);
  FieldVector3D<DerivativeStructure> cNaive=new FieldVector3D<DerivativeStructure>(u1.getY().multiply(u2.getZ()).subtract(u1.getZ().multiply(u2.getY())),u1.getZ().multiply(u2.getX()).subtract(u1.getX().multiply(u2.getZ())),u1.getX().multiply(u2.getY()).subtract(u1.getY().multiply(u2.getX())));
  FieldVector3D<DerivativeStructure> cAccurate=FieldVector3D.crossProduct(u1,u2);
  Assert.assertTrue(FieldVector3D.distance(u3,cNaive).getReal() > 2.9 * u3.getNorm().getReal());
  Assert.assertEquals(0.0,FieldVector3D.distance(u3,cAccurate).getReal(),1.0e-30 * cAccurate.getNorm().getReal());
}
