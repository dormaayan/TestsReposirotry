@Test public void testMath372(){
  LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();
  CurveFitter<ParametricUnivariateFunction> curveFitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);
  curveFitter.addObservedPoint(15,4443);
  curveFitter.addObservedPoint(31,8493);
  curveFitter.addObservedPoint(62,17586);
  curveFitter.addObservedPoint(125,30582);
  curveFitter.addObservedPoint(250,45087);
  curveFitter.addObservedPoint(500,50683);
  ParametricUnivariateFunction f=new ParametricUnivariateFunction(){
    public double value(    double x,    double... parameters){
      double a=parameters[0];
      double b=parameters[1];
      double c=parameters[2];
      double d=parameters[3];
      return d + ((a - d) / (1 + FastMath.pow(x / c,b)));
    }
    public double[] gradient(    double x,    double... parameters){
      double a=parameters[0];
      double b=parameters[1];
      double c=parameters[2];
      double d=parameters[3];
      double[] gradients=new double[4];
      double den=1 + FastMath.pow(x / c,b);
      gradients[0]=1 / den;
      gradients[1]=-((a - d) * FastMath.pow(x / c,b) * FastMath.log(x / c)) / (den * den);
      gradients[2]=(b * FastMath.pow(x / c,b - 1) * (x / (c * c))* (a - d)) / (den * den);
      gradients[3]=1 - (1 / den);
      return gradients;
    }
  }
;
  double[] initialGuess=new double[]{1500,0.95,65,35000};
  double[] estimatedParameters=curveFitter.fit(f,initialGuess);
  Assert.assertEquals(2411.00,estimatedParameters[0],500.00);
  Assert.assertEquals(1.62,estimatedParameters[1],0.04);
  Assert.assertEquals(111.22,estimatedParameters[2],0.30);
  Assert.assertEquals(55347.47,estimatedParameters[3],300.00);
  Assert.assertTrue(optimizer.getRMS() < 600.0);
}
