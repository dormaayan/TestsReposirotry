@Test public void testSubtract(){
  Fraction a=new Fraction(1,2);
  Fraction b=new Fraction(2,3);
  assertFraction(0,1,a.subtract(a));
  assertFraction(-1,6,a.subtract(b));
  assertFraction(1,6,b.subtract(a));
  assertFraction(0,1,b.subtract(b));
  Fraction f=new Fraction(1,1);
  try {
    f.subtract(null);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  Fraction f1=new Fraction(1,32768 * 3);
  Fraction f2=new Fraction(1,59049);
  f=f1.subtract(f2);
  Assert.assertEquals(-13085,f.getNumerator());
  Assert.assertEquals(1934917632,f.getDenominator());
  f1=new Fraction(Integer.MIN_VALUE,3);
  f2=new Fraction(1,3).negate();
  f=f1.subtract(f2);
  Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());
  Assert.assertEquals(3,f.getDenominator());
  f1=new Fraction(Integer.MAX_VALUE,1);
  f2=Fraction.ONE;
  f=f1.subtract(f2);
  Assert.assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());
  Assert.assertEquals(1,f.getDenominator());
  f=f1.subtract(1);
  Assert.assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());
  Assert.assertEquals(1,f.getDenominator());
  try {
    f1=new Fraction(1,Integer.MAX_VALUE);
    f2=new Fraction(1,Integer.MAX_VALUE - 1);
    f=f1.subtract(f2);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  f1=new Fraction(Integer.MIN_VALUE,5);
  f2=new Fraction(1,5);
  try {
    f=f1.subtract(f2);
    Assert.fail("expecting MathArithmeticException but got: " + f.toString());
  }
 catch (  MathArithmeticException ex) {
  }
  try {
    f=new Fraction(Integer.MIN_VALUE,1);
    f=f.subtract(Fraction.ONE);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  try {
    f=new Fraction(Integer.MAX_VALUE,1);
    f=f.subtract(Fraction.ONE.negate());
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  f1=new Fraction(3,327680);
  f2=new Fraction(2,59049);
  try {
    f=f1.subtract(f2);
    Assert.fail("expecting MathArithmeticException but got: " + f.toString());
  }
 catch (  MathArithmeticException ex) {
  }
}
