@Test public void testDivide(){
  Fraction a=new Fraction(1,2);
  Fraction b=new Fraction(2,3);
  assertFraction(1,1,a.divide(a));
  assertFraction(3,4,a.divide(b));
  assertFraction(4,3,b.divide(a));
  assertFraction(1,1,b.divide(b));
  Fraction f1=new Fraction(3,5);
  Fraction f2=Fraction.ZERO;
  try {
    f1.divide(f2);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  f1=new Fraction(0,5);
  f2=new Fraction(2,7);
  Fraction f=f1.divide(f2);
  Assert.assertSame(Fraction.ZERO,f);
  f1=new Fraction(2,7);
  f2=Fraction.ONE;
  f=f1.divide(f2);
  Assert.assertEquals(2,f.getNumerator());
  Assert.assertEquals(7,f.getDenominator());
  f1=new Fraction(1,Integer.MAX_VALUE);
  f=f1.divide(f1);
  Assert.assertEquals(1,f.getNumerator());
  Assert.assertEquals(1,f.getDenominator());
  f1=new Fraction(Integer.MIN_VALUE,Integer.MAX_VALUE);
  f2=new Fraction(1,Integer.MAX_VALUE);
  f=f1.divide(f2);
  Assert.assertEquals(Integer.MIN_VALUE,f.getNumerator());
  Assert.assertEquals(1,f.getDenominator());
  try {
    f.divide(null);
    Assert.fail("MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    f1=new Fraction(1,Integer.MAX_VALUE);
    f=f1.divide(f1.reciprocal());
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  try {
    f1=new Fraction(1,-Integer.MAX_VALUE);
    f=f1.divide(f1.reciprocal());
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException ex) {
  }
  f1=new Fraction(6,35);
  f=f1.divide(15);
  Assert.assertEquals(2,f.getNumerator());
  Assert.assertEquals(175,f.getDenominator());
}
