@Test public void testNextIntDirect(){
  int[] testValues=new int[]{4,10,12,32,100,10000,0,0,0,0};
  for (int i=6; i < 10; i++) {
    final int val=generator.nextInt();
    testValues[i]=val < 0 ? -val : val + 1;
  }
  final int numTests=1000;
  for (int i=0; i < testValues.length; i++) {
    final int n=testValues[i];
    int[] binUpperBounds;
    if (n < 32) {
      binUpperBounds=new int[n];
      for (int k=0; k < n; k++) {
        binUpperBounds[k]=k;
      }
    }
 else {
      binUpperBounds=new int[10];
      final int step=n / 10;
      for (int k=0; k < 9; k++) {
        binUpperBounds[k]=(k + 1) * step;
      }
      binUpperBounds[9]=n - 1;
    }
    int numFailures=0;
    final int binCount=binUpperBounds.length;
    final long[] observed=new long[binCount];
    final double[] expected=new double[binCount];
    expected[0]=binUpperBounds[0] == 0 ? (double)smallSampleSize / (double)n : (double)((binUpperBounds[0] + 1) * smallSampleSize) / (double)n;
    for (int k=1; k < binCount; k++) {
      expected[k]=(double)smallSampleSize * (double)(binUpperBounds[k] - binUpperBounds[k - 1]) / n;
    }
    for (int j=0; j < numTests; j++) {
      Arrays.fill(observed,0);
      for (int k=0; k < smallSampleSize; k++) {
        final int value=generator.nextInt(n);
        Assert.assertTrue("nextInt range",(value >= 0) && (value < n));
        for (int l=0; l < binCount; l++) {
          if (binUpperBounds[l] >= value) {
            observed[l]++;
            break;
          }
        }
      }
      if (testStatistic.chiSquareTest(expected,observed) < 0.01) {
        numFailures++;
      }
    }
    if ((double)numFailures / (double)numTests > 0.02) {
      Assert.fail("Too many failures for n = " + n + " "+ numFailures+ " out of "+ numTests+ " tests failed.");
    }
  }
}
