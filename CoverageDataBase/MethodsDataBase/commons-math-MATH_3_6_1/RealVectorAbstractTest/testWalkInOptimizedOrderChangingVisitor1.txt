/** 
 * The whole vector is visited. 
 */
@Test public void testWalkInOptimizedOrderChangingVisitor1(){
  final double[] data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};
  final RealVector v=create(data);
  final RealVectorChangingVisitor visitor;
  visitor=new RealVectorChangingVisitor(){
    private final boolean[] visited=new boolean[data.length];
    public double visit(    final int actualIndex,    final double actualValue){
      visited[actualIndex]=true;
      Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);
      return actualIndex + actualValue;
    }
    public void start(    final int actualSize,    final int actualStart,    final int actualEnd){
      Assert.assertEquals(data.length,actualSize);
      Assert.assertEquals(0,actualStart);
      Assert.assertEquals(data.length - 1,actualEnd);
      Arrays.fill(visited,false);
    }
    public double end(){
      for (int i=0; i < data.length; i++) {
        Assert.assertTrue("entry " + i + "has not been visited",visited[i]);
      }
      return 0.0;
    }
  }
;
  v.walkInOptimizedOrder(visitor);
  for (int i=0; i < data.length; i++) {
    Assert.assertEquals("entry " + i,i + data[i],v.getEntry(i),0.0);
  }
}
