/** 
 * Visiting a valid subvector. 
 */
@Test public void testWalkInDefaultOrderPreservingVisitor3(){
  final double[] data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};
  final int expectedStart=2;
  final int expectedEnd=7;
  final RealVector v=create(data);
  final RealVectorPreservingVisitor visitor;
  visitor=new RealVectorPreservingVisitor(){
    private int expectedIndex;
    public void visit(    final int actualIndex,    final double actualValue){
      Assert.assertEquals(expectedIndex,actualIndex);
      Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);
      ++expectedIndex;
    }
    public void start(    final int actualSize,    final int actualStart,    final int actualEnd){
      Assert.assertEquals(data.length,actualSize);
      Assert.assertEquals(expectedStart,actualStart);
      Assert.assertEquals(expectedEnd,actualEnd);
      expectedIndex=expectedStart;
    }
    public double end(){
      return 0.0;
    }
  }
;
  v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);
}
