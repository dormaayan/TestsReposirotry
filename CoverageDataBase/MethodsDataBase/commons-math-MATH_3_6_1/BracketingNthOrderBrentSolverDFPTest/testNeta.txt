@Test public void testNeta(){
  for (  AllowedSolution allowed : AllowedSolution.values()) {
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return DfpMath.sin(x).subtract(x.divide(2));
      }
    }
,200,-2.0,2.0,allowed);
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return DfpMath.pow(x,5).add(x).subtract(field.newDfp(10000));
      }
    }
,200,-5.0,10.0,allowed);
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3));
      }
    }
,200,0.001,10.0,allowed);
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return DfpMath.exp(x).add(x).subtract(field.newDfp(20));
      }
    }
,200,-5.0,5.0,allowed);
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5));
      }
    }
,200,0.001,10.0,allowed);
    check(new UnivariateDfpFunction(){
      public Dfp value(      Dfp x){
        return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne());
      }
    }
,200,-0.5,1.5,allowed);
  }
}
