@Test public void testEqualsAndHashCode(){
  SummaryStatistics u=createSummaryStatistics();
  SummaryStatistics t=null;
  int emptyHash=u.hashCode();
  Assert.assertTrue("reflexive",u.equals(u));
  Assert.assertFalse("non-null compared to null",u.equals(t));
  Assert.assertFalse("wrong type",u.equals(Double.valueOf(0)));
  t=createSummaryStatistics();
  Assert.assertTrue("empty instances should be equal",t.equals(u));
  Assert.assertTrue("empty instances should be equal",u.equals(t));
  Assert.assertEquals("empty hash code",emptyHash,t.hashCode());
  u.addValue(2d);
  u.addValue(1d);
  u.addValue(3d);
  u.addValue(4d);
  Assert.assertFalse("different n's should make instances not equal",t.equals(u));
  Assert.assertFalse("different n's should make instances not equal",u.equals(t));
  Assert.assertTrue("different n's should make hashcodes different",u.hashCode() != t.hashCode());
  t.addValue(2d);
  t.addValue(1d);
  t.addValue(3d);
  t.addValue(4d);
  Assert.assertTrue("summaries based on same data should be equal",t.equals(u));
  Assert.assertTrue("summaries based on same data should be equal",u.equals(t));
  Assert.assertEquals("summaries based on same data should have same hashcodes",u.hashCode(),t.hashCode());
  u.clear();
  t.clear();
  Assert.assertTrue("empty instances should be equal",t.equals(u));
  Assert.assertTrue("empty instances should be equal",u.equals(t));
  Assert.assertEquals("empty hash code",emptyHash,t.hashCode());
  Assert.assertEquals("empty hash code",emptyHash,u.hashCode());
}
