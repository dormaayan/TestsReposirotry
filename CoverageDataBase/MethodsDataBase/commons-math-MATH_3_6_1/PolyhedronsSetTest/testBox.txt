@Test public void testBox(){
  PolyhedronsSet tree=new PolyhedronsSet(0,1,0,1,0,1,1.0e-10);
  Assert.assertEquals(1.0,tree.getSize(),1.0e-10);
  Assert.assertEquals(6.0,tree.getBoundarySize(),1.0e-10);
  Vector3D barycenter=(Vector3D)tree.getBarycenter();
  Assert.assertEquals(0.5,barycenter.getX(),1.0e-10);
  Assert.assertEquals(0.5,barycenter.getY(),1.0e-10);
  Assert.assertEquals(0.5,barycenter.getZ(),1.0e-10);
  for (double x=-0.25; x < 1.25; x+=0.1) {
    boolean xOK=(x >= 0.0) && (x <= 1.0);
    for (double y=-0.25; y < 1.25; y+=0.1) {
      boolean yOK=(y >= 0.0) && (y <= 1.0);
      for (double z=-0.25; z < 1.25; z+=0.1) {
        boolean zOK=(z >= 0.0) && (z <= 1.0);
        Region.Location expected=(xOK && yOK && zOK) ? Region.Location.INSIDE : Region.Location.OUTSIDE;
        Assert.assertEquals(expected,tree.checkPoint(new Vector3D(x,y,z)));
      }
    }
  }
  checkPoints(Region.Location.BOUNDARY,tree,new Vector3D[]{new Vector3D(0.0,0.5,0.5),new Vector3D(1.0,0.5,0.5),new Vector3D(0.5,0.0,0.5),new Vector3D(0.5,1.0,0.5),new Vector3D(0.5,0.5,0.0),new Vector3D(0.5,0.5,1.0)});
  checkPoints(Region.Location.OUTSIDE,tree,new Vector3D[]{new Vector3D(0.0,1.2,1.2),new Vector3D(1.0,1.2,1.2),new Vector3D(1.2,0.0,1.2),new Vector3D(1.2,1.0,1.2),new Vector3D(1.2,1.2,0.0),new Vector3D(1.2,1.2,1.0)});
}
