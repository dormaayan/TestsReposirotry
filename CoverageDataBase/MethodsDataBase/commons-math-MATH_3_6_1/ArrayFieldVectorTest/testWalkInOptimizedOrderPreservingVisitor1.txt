/** 
 * The whole vector is visited. 
 */
@Test public void testWalkInOptimizedOrderPreservingVisitor1(){
  final Fraction[] data=new Fraction[]{Fraction.ZERO,Fraction.ONE,Fraction.ZERO,Fraction.ZERO,Fraction.TWO,Fraction.ZERO,Fraction.ZERO,Fraction.ZERO,new Fraction(3)};
  final ArrayFieldVector<Fraction> v=new ArrayFieldVector<Fraction>(data);
  final FieldVectorPreservingVisitor<Fraction> visitor;
  visitor=new FieldVectorPreservingVisitor<Fraction>(){
    private final boolean[] visited=new boolean[data.length];
    public void visit(    final int actualIndex,    final Fraction actualValue){
      visited[actualIndex]=true;
      Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue);
    }
    public void start(    final int actualSize,    final int actualStart,    final int actualEnd){
      Assert.assertEquals(data.length,actualSize);
      Assert.assertEquals(0,actualStart);
      Assert.assertEquals(data.length - 1,actualEnd);
      Arrays.fill(visited,false);
    }
    public Fraction end(){
      for (int i=0; i < data.length; i++) {
        Assert.assertTrue("entry " + i + "has not been visited",visited[i]);
      }
      return Fraction.ZERO;
    }
  }
;
  v.walkInOptimizedOrder(visitor);
}
