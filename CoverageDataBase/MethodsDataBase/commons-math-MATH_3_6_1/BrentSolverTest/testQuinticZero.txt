@Test public void testQuinticZero(){
  UnivariateFunction f=new QuinticFunction();
  double result;
  UnivariateSolver solver=new BrentSolver();
  result=solver.solve(100,f,-0.2,0.2);
  Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 3);
  result=solver.solve(100,f,-0.1,0.3);
  Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 7);
  result=solver.solve(100,f,-0.3,0.45);
  Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 8);
  result=solver.solve(100,f,0.3,0.7);
  Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 9);
  result=solver.solve(100,f,0.2,0.6);
  Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 10);
  result=solver.solve(100,f,0.05,0.95);
  Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 11);
  result=solver.solve(100,f,0.85,1.25);
  Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 11);
  result=solver.solve(100,f,0.8,1.2);
  Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 11);
  result=solver.solve(100,f,0.85,1.75);
  Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 13);
  result=solver.solve(100,f,0.55,1.45);
  Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 10);
  result=solver.solve(100,f,0.85,5);
  Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());
  Assert.assertTrue(solver.getEvaluations() <= 15);
  try {
    result=solver.solve(5,f,0.85,5);
    Assert.fail("Expected TooManyEvaluationsException");
  }
 catch (  TooManyEvaluationsException e) {
  }
}
