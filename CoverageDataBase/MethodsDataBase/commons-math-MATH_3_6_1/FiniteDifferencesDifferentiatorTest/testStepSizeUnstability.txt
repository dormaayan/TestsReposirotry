@Test public void testStepSizeUnstability(){
  UnivariateDifferentiableFunction quintic=new QuinticFunction();
  UnivariateDifferentiableFunction goodStep=new FiniteDifferencesDifferentiator(7,0.25).differentiate(quintic);
  UnivariateDifferentiableFunction badStep=new FiniteDifferencesDifferentiator(7,1.0e-6).differentiate(quintic);
  double[] maxErrorGood=new double[7];
  double[] maxErrorBad=new double[7];
  for (double x=-10; x < 10; x+=0.1) {
    DerivativeStructure dsX=new DerivativeStructure(1,6,0,x);
    DerivativeStructure yRef=quintic.value(dsX);
    DerivativeStructure yGood=goodStep.value(dsX);
    DerivativeStructure yBad=badStep.value(dsX);
    for (int order=0; order <= 6; ++order) {
      maxErrorGood[order]=FastMath.max(maxErrorGood[order],FastMath.abs(yRef.getPartialDerivative(order) - yGood.getPartialDerivative(order)));
      maxErrorBad[order]=FastMath.max(maxErrorBad[order],FastMath.abs(yRef.getPartialDerivative(order) - yBad.getPartialDerivative(order)));
    }
  }
  final double[] expectedGood=new double[]{7.276e-12,7.276e-11,9.968e-10,3.092e-9,5.432e-8,8.196e-8,1.818e-6};
  final double[] expectedBad=new double[]{2.910e-11,2.087e-5,147.7,3.820e7,6.354e14,6.548e19,1.543e27};
  for (int i=0; i < maxErrorGood.length; ++i) {
    Assert.assertEquals(expectedGood[i],maxErrorGood[i],0.01 * expectedGood[i]);
    Assert.assertEquals(expectedBad[i],maxErrorBad[i],0.01 * expectedBad[i]);
  }
}
