@Test public void testBounds(){
  final double slope=2.5;
  UnivariateFunction f=new UnivariateFunction(){
    public double value(    double x){
      if (x < 0) {
        throw new NumberIsTooSmallException(x,0,true);
      }
 else       if (x > 1) {
        throw new NumberIsTooLargeException(x,1,true);
      }
 else {
        return slope * x;
      }
    }
  }
;
  UnivariateDifferentiableFunction missingBounds=new FiniteDifferencesDifferentiator(3,0.1).differentiate(f);
  UnivariateDifferentiableFunction properlyBounded=new FiniteDifferencesDifferentiator(3,0.1,0.0,1.0).differentiate(f);
  DerivativeStructure tLow=new DerivativeStructure(1,1,0,0.05);
  DerivativeStructure tHigh=new DerivativeStructure(1,1,0,0.95);
  try {
    missingBounds.value(tLow);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NumberIsTooSmallException nse) {
    Assert.assertEquals(-0.05,nse.getArgument().doubleValue(),1.0e-10);
  }
catch (  Exception e) {
    Assert.fail("wrong exception caught: " + e.getClass().getName());
  }
  try {
    missingBounds.value(tHigh);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NumberIsTooLargeException nle) {
    Assert.assertEquals(1.05,nle.getArgument().doubleValue(),1.0e-10);
  }
catch (  Exception e) {
    Assert.fail("wrong exception caught: " + e.getClass().getName());
  }
  Assert.assertEquals(slope,properlyBounded.value(tLow).getPartialDerivative(1),1.0e-10);
  Assert.assertEquals(slope,properlyBounded.value(tHigh).getPartialDerivative(1),1.0e-10);
}
