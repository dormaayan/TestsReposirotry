/** 
 * Tests consistency of weighted statistic computation. For statistics that support weighted evaluation, this test case compares the result of direct computation on an array with repeated values with a weighted computation on the corresponding (shorter) array with each value appearing only once but with a weight value equal to its multiplicity in the repeating array.
 */
@Test public void testWeightedConsistency(){
  UnivariateStatistic statistic=getUnivariateStatistic();
  if (!(statistic instanceof WeightedEvaluation)) {
    return;
  }
  final int len=10;
  final double mu=0;
  final double sigma=5;
  double[] values=new double[len];
  double[] weights=new double[len];
  int[] intWeights=new int[len];
  final IntegerDistribution weightDist=new UniformIntegerDistribution(1,5);
  for (int i=0; i < len; i++) {
    intWeights[i]=weightDist.sample();
    weights[i]=intWeights[i];
  }
  final RealDistribution valueDist=new NormalDistribution(mu,sigma);
  List<Double> valuesList=new ArrayList<Double>();
  for (int i=0; i < len; i++) {
    double value=valueDist.sample();
    values[i]=value;
    for (int j=0; j < intWeights[i]; j++) {
      valuesList.add(new Double(value));
    }
  }
  int sumWeights=valuesList.size();
  double[] repeatedValues=new double[sumWeights];
  for (int i=0; i < sumWeights; i++) {
    repeatedValues[i]=valuesList.get(i);
  }
  WeightedEvaluation weightedStatistic=(WeightedEvaluation)statistic;
  TestUtils.assertRelativelyEquals(statistic.evaluate(repeatedValues),weightedStatistic.evaluate(values,weights,0,values.length),10E-12);
  Assert.assertEquals(weightedStatistic.evaluate(values,weights,0,values.length),weightedStatistic.evaluate(values,weights),Double.MIN_VALUE);
}
