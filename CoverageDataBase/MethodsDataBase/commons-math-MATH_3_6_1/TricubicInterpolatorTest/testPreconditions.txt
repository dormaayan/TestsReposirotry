/** 
 * Test preconditions.
 */
@Test public void testPreconditions(){
  double[] xval=new double[]{3,4,5,6.5};
  double[] yval=new double[]{-4,-3,-1,2.5};
  double[] zval=new double[]{-12,-8,-5.5,-3,0,2.5};
  double[][][] fval=new double[xval.length][yval.length][zval.length];
  @SuppressWarnings("unused") TrivariateFunction tcf=new TricubicInterpolator().interpolate(xval,yval,zval,fval);
  double[] wxval=new double[]{3,2,5,6.5};
  try {
    tcf=new TricubicInterpolator().interpolate(wxval,yval,zval,fval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalArgumentException e) {
  }
  double[] wyval=new double[]{-4,-1,-1,2.5};
  try {
    tcf=new TricubicInterpolator().interpolate(xval,wyval,zval,fval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalArgumentException e) {
  }
  double[] wzval=new double[]{-12,-8,-9,-3,0,2.5};
  try {
    tcf=new TricubicInterpolator().interpolate(xval,yval,wzval,fval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  MathIllegalArgumentException e) {
  }
  double[][][] wfval=new double[xval.length - 1][yval.length][zval.length];
  try {
    tcf=new TricubicInterpolator().interpolate(xval,yval,zval,wfval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  wfval=new double[xval.length][yval.length - 1][zval.length];
  try {
    tcf=new TricubicInterpolator().interpolate(xval,yval,zval,wfval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
  wfval=new double[xval.length][yval.length][zval.length - 1];
  try {
    tcf=new TricubicInterpolator().interpolate(xval,yval,zval,wfval);
    Assert.fail("an exception should have been thrown");
  }
 catch (  DimensionMismatchException e) {
  }
}
