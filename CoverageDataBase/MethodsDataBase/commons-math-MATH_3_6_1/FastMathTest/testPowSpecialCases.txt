@Test public void testPowSpecialCases(){
  final double EXACT=-1.0;
  Assert.assertEquals("pow(-1, 0) should be 1.0",1.0,FastMath.pow(-1.0,0.0),Precision.EPSILON);
  Assert.assertEquals("pow(-1, -0) should be 1.0",1.0,FastMath.pow(-1.0,-0.0),Precision.EPSILON);
  Assert.assertEquals("pow(PI, 1.0) should be PI",FastMath.PI,FastMath.pow(FastMath.PI,1.0),Precision.EPSILON);
  Assert.assertEquals("pow(-PI, 1.0) should be -PI",-FastMath.PI,FastMath.pow(-FastMath.PI,1.0),Precision.EPSILON);
  Assert.assertTrue("pow(PI, NaN) should be NaN",Double.isNaN(FastMath.pow(Math.PI,Double.NaN)));
  Assert.assertTrue("pow(NaN, PI) should be NaN",Double.isNaN(FastMath.pow(Double.NaN,Math.PI)));
  Assert.assertEquals("pow(2.0, Infinity) should be Infinity",Double.POSITIVE_INFINITY,FastMath.pow(2.0,Double.POSITIVE_INFINITY),1.0);
  Assert.assertEquals("pow(0.5, -Infinity) should be Infinity",Double.POSITIVE_INFINITY,FastMath.pow(0.5,Double.NEGATIVE_INFINITY),1.0);
  Assert.assertEquals("pow(0.5, Infinity) should be 0.0",0.0,FastMath.pow(0.5,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("pow(2.0, -Infinity) should be 0.0",0.0,FastMath.pow(2.0,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("pow(0.0, 0.5) should be 0.0",0.0,FastMath.pow(0.0,0.5),Precision.EPSILON);
  Assert.assertEquals("pow(Infinity, -0.5) should be 0.0",0.0,FastMath.pow(Double.POSITIVE_INFINITY,-0.5),Precision.EPSILON);
  Assert.assertEquals("pow(0.0, -0.5) should be Inf",Double.POSITIVE_INFINITY,FastMath.pow(0.0,-0.5),1.0);
  Assert.assertEquals("pow(Inf, 0.5) should be Inf",Double.POSITIVE_INFINITY,FastMath.pow(Double.POSITIVE_INFINITY,0.5),1.0);
  Assert.assertEquals("pow(-0.0, -3.0) should be -Inf",Double.NEGATIVE_INFINITY,FastMath.pow(-0.0,-3.0),1.0);
  Assert.assertEquals("pow(-0.0, Infinity) should be 0.0",0.0,FastMath.pow(-0.0,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertTrue("pow(-0.0, NaN) should be NaN",Double.isNaN(FastMath.pow(-0.0,Double.NaN)));
  Assert.assertEquals("pow(-0.0, -tiny) should be Infinity",Double.POSITIVE_INFINITY,FastMath.pow(-0.0,-Double.MIN_VALUE),1.0);
  Assert.assertEquals("pow(-0.0, -huge) should be Infinity",Double.POSITIVE_INFINITY,FastMath.pow(-0.0,-Double.MAX_VALUE),1.0);
  Assert.assertEquals("pow(-Inf, 3.0) should be -Inf",Double.NEGATIVE_INFINITY,FastMath.pow(Double.NEGATIVE_INFINITY,3.0),1.0);
  Assert.assertEquals("pow(-Inf, -3.0) should be -0.0",-0.0,FastMath.pow(Double.NEGATIVE_INFINITY,-3.0),EXACT);
  Assert.assertEquals("pow(-0.0, -3.5) should be Inf",Double.POSITIVE_INFINITY,FastMath.pow(-0.0,-3.5),1.0);
  Assert.assertEquals("pow(Inf, 3.5) should be Inf",Double.POSITIVE_INFINITY,FastMath.pow(Double.POSITIVE_INFINITY,3.5),1.0);
  Assert.assertEquals("pow(-2.0, 3.0) should be -8.0",-8.0,FastMath.pow(-2.0,3.0),Precision.EPSILON);
  Assert.assertTrue("pow(-2.0, 3.5) should be NaN",Double.isNaN(FastMath.pow(-2.0,3.5)));
  Assert.assertTrue("pow(NaN, -Infinity) should be NaN",Double.isNaN(FastMath.pow(Double.NaN,Double.NEGATIVE_INFINITY)));
  Assert.assertEquals("pow(NaN, 0.0) should be 1.0",1.0,FastMath.pow(Double.NaN,0.0),Precision.EPSILON);
  Assert.assertEquals("pow(-Infinity, -Infinity) should be 0.0",0.0,FastMath.pow(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("pow(-huge, -huge) should be 0.0",0.0,FastMath.pow(-Double.MAX_VALUE,-Double.MAX_VALUE),Precision.EPSILON);
  Assert.assertTrue("pow(-huge,  huge) should be +Inf",Double.isInfinite(FastMath.pow(-Double.MAX_VALUE,Double.MAX_VALUE)));
  Assert.assertTrue("pow(NaN, -Infinity) should be NaN",Double.isNaN(FastMath.pow(Double.NaN,Double.NEGATIVE_INFINITY)));
  Assert.assertEquals("pow(NaN, -0.0) should be 1.0",1.0,FastMath.pow(Double.NaN,-0.0),Precision.EPSILON);
  Assert.assertEquals("pow(-Infinity, -Infinity) should be 0.0",0.0,FastMath.pow(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("pow(-huge, -huge) should be 0.0",0.0,FastMath.pow(-Double.MAX_VALUE,-Double.MAX_VALUE),Precision.EPSILON);
  Assert.assertEquals("pow(-huge,  huge) should be +Inf",Double.POSITIVE_INFINITY,FastMath.pow(-Double.MAX_VALUE,Double.MAX_VALUE),1.0);
  Assert.assertTrue("pow(+Inf, NaN) should be NaN",Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY,Double.NaN)));
  Assert.assertTrue("pow(1.0, +Inf) should be NaN",Double.isNaN(FastMath.pow(1.0,Double.POSITIVE_INFINITY)));
  Assert.assertTrue("pow(-Inf, NaN) should be NaN",Double.isNaN(FastMath.pow(Double.NEGATIVE_INFINITY,Double.NaN)));
  Assert.assertEquals("pow(-Inf, -1.0) should be -0.0",-0.0,FastMath.pow(Double.NEGATIVE_INFINITY,-1.0),EXACT);
  Assert.assertEquals("pow(-Inf, -2.0) should be 0.0",0.0,FastMath.pow(Double.NEGATIVE_INFINITY,-2.0),EXACT);
  Assert.assertEquals("pow(-Inf, 1.0) should be -Inf",Double.NEGATIVE_INFINITY,FastMath.pow(Double.NEGATIVE_INFINITY,1.0),1.0);
  Assert.assertEquals("pow(-Inf, 2.0) should be +Inf",Double.POSITIVE_INFINITY,FastMath.pow(Double.NEGATIVE_INFINITY,2.0),1.0);
  Assert.assertTrue("pow(1.0, -Inf) should be NaN",Double.isNaN(FastMath.pow(1.0,Double.NEGATIVE_INFINITY)));
  Assert.assertEquals("pow(-0.0, 1.0) should be -0.0",-0.0,FastMath.pow(-0.0,1.0),EXACT);
  Assert.assertEquals("pow(0.0, 1.0) should be 0.0",0.0,FastMath.pow(0.0,1.0),EXACT);
  Assert.assertEquals("pow(0.0, +Inf) should be 0.0",0.0,FastMath.pow(0.0,Double.POSITIVE_INFINITY),EXACT);
  Assert.assertEquals("pow(-0.0, even) should be 0.0",0.0,FastMath.pow(-0.0,6.0),EXACT);
  Assert.assertEquals("pow(-0.0, odd) should be -0.0",-0.0,FastMath.pow(-0.0,13.0),EXACT);
  Assert.assertEquals("pow(-0.0, -even) should be +Inf",Double.POSITIVE_INFINITY,FastMath.pow(-0.0,-6.0),EXACT);
  Assert.assertEquals("pow(-0.0, -odd) should be -Inf",Double.NEGATIVE_INFINITY,FastMath.pow(-0.0,-13.0),EXACT);
  Assert.assertEquals("pow(-2.0, 4.0) should be 16.0",16.0,FastMath.pow(-2.0,4.0),EXACT);
  Assert.assertEquals("pow(-2.0, 4.5) should be NaN",Double.NaN,FastMath.pow(-2.0,4.5),EXACT);
  Assert.assertEquals("pow(-0.0, -0.0) should be 1.0",1.0,FastMath.pow(-0.0,-0.0),EXACT);
  Assert.assertEquals("pow(-0.0, 0.0) should be 1.0",1.0,FastMath.pow(-0.0,0.0),EXACT);
  Assert.assertEquals("pow(0.0, -0.0) should be 1.0",1.0,FastMath.pow(0.0,-0.0),EXACT);
  Assert.assertEquals("pow(0.0, 0.0) should be 1.0",1.0,FastMath.pow(0.0,0.0),EXACT);
}
