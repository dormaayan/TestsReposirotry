@Test(timeout=5000L) public void testIntPowSpecialCases(){
  final double EXACT=-1.0;
  final double DOUBLES[]=new double[]{Double.NEGATIVE_INFINITY,-0.0,Double.NaN,0.0,Double.POSITIVE_INFINITY,Long.MIN_VALUE,Integer.MIN_VALUE,Short.MIN_VALUE,Byte.MIN_VALUE,-(double)Long.MIN_VALUE,-(double)Integer.MIN_VALUE,-(double)Short.MIN_VALUE,-(double)Byte.MIN_VALUE,Byte.MAX_VALUE,Short.MAX_VALUE,Integer.MAX_VALUE,Long.MAX_VALUE,-Byte.MAX_VALUE,-Short.MAX_VALUE,-Integer.MAX_VALUE,-Long.MAX_VALUE,Float.MAX_VALUE,Double.MAX_VALUE,Double.MIN_VALUE,Float.MIN_VALUE,-Float.MAX_VALUE,-Double.MAX_VALUE,-Double.MIN_VALUE,-Float.MIN_VALUE,0.5,0.1,0.2,0.8,1.1,1.2,1.5,1.8,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,1.3,2.2,2.5,2.8,33.0,33.1,33.5,33.8,10.0,300.0,400.0,500.0,-0.5,-0.1,-0.2,-0.8,-1.1,-1.2,-1.5,-1.8,-1.0,-2.0,-3.0,-4.0,-5.0,-6.0,-7.0,-8.0,-9.0,-1.3,-2.2,-2.5,-2.8,-33.0,-33.1,-33.5,-33.8,-10.0,-300.0,-400.0,-500.0};
  final long INTS[]=new long[]{Long.MAX_VALUE,Long.MAX_VALUE - 1,Long.MIN_VALUE,Long.MIN_VALUE + 1,Long.MIN_VALUE + 2,Integer.MAX_VALUE,Integer.MAX_VALUE - 1,Integer.MIN_VALUE,Integer.MIN_VALUE + 1,Integer.MIN_VALUE + 2,0,1,2,3,5,8,10,20,100,300,500,-1,-2,-3,-5,-8,-10,-20,-100,-300,-500};
  for (  double d : DOUBLES) {
    Assert.assertEquals(1.0,FastMath.pow(d,0L),EXACT);
  }
  for (  double d : DOUBLES) {
    Assert.assertEquals(d,FastMath.pow(d,1L),EXACT);
  }
  for (  long i : INTS) {
    if (i != 0L) {
      Assert.assertEquals(Double.NaN,FastMath.pow(Double.NaN,i),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) > 1.0) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(d,Long.MAX_VALUE - 1L),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) < 1.0) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(d,Long.MIN_VALUE),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) > 1.0) {
      Assert.assertTrue(Double.isInfinite(FastMath.pow(d,Long.MAX_VALUE)));
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) < 1.0) {
      Assert.assertTrue(Double.isInfinite(FastMath.pow(d,Long.MIN_VALUE + 1L)));
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) > 1.0) {
      Assert.assertEquals(0.0,FastMath.pow(d,Long.MIN_VALUE),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) < 1.0) {
      Assert.assertEquals(0.0,FastMath.pow(d,Long.MAX_VALUE - 1L),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) > 1.0) {
      Assert.assertTrue(FastMath.pow(d,Long.MIN_VALUE + 1L) == 0.0);
    }
  }
  for (  double d : DOUBLES) {
    if (Math.abs(d) < 1.0) {
      Assert.assertTrue(FastMath.pow(d,Long.MAX_VALUE) == 0.0);
    }
  }
  for (  long i : INTS) {
    if (i > 0L) {
      Assert.assertEquals(0.0,FastMath.pow(0.0,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L) {
      Assert.assertEquals(0.0,FastMath.pow(Double.POSITIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(0.0,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i > 0L) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(Double.POSITIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i > 0L && (i & 1L) == 0L) {
      Assert.assertEquals(0.0,FastMath.pow(-0.0,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L && (i & 1L) == 0L) {
      Assert.assertEquals(0.0,FastMath.pow(Double.NEGATIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i > 0L && (i & 1L) == 1L) {
      Assert.assertEquals(-0.0,FastMath.pow(-0.0,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L && (i & 1L) == 1L) {
      Assert.assertEquals(-0.0,FastMath.pow(Double.NEGATIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i > 0L && (i & 1L) == 0L) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(Double.NEGATIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L && (i & 1L) == 0L) {
      Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.pow(-0.0,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i > 0L && (i & 1L) == 1L) {
      Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.pow(Double.NEGATIVE_INFINITY,i),EXACT);
    }
  }
  for (  long i : INTS) {
    if (i < 0L && (i & 1L) == 1L) {
      Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.pow(-0.0,i),EXACT);
    }
  }
  for (  double d : DOUBLES) {
    if (d < 0.0 && Math.abs(d) <= Double.MAX_VALUE) {
      for (      long i : INTS) {
        if ((i & 1L) == 0L)         Assert.assertEquals(FastMath.pow(-d,i),FastMath.pow(d,i),EXACT);
 else         Assert.assertEquals(-FastMath.pow(-d,i),FastMath.pow(d,i),EXACT);
      }
    }
  }
}
