@Test public void testMultiplyExactInt(){
  int[] specialValues=new int[]{Integer.MIN_VALUE,Integer.MIN_VALUE + 1,Integer.MIN_VALUE + 2,Integer.MAX_VALUE,Integer.MAX_VALUE - 1,Integer.MAX_VALUE - 2,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,-1 - (Integer.MIN_VALUE / 2),0 - (Integer.MIN_VALUE / 2),1 - (Integer.MIN_VALUE / 2),-1 + (Integer.MAX_VALUE / 2),0 + (Integer.MAX_VALUE / 2),1 + (Integer.MAX_VALUE / 2)};
  for (  int a : specialValues) {
    for (    int b : specialValues) {
      BigInteger bdA=BigInteger.valueOf(a);
      BigInteger bdB=BigInteger.valueOf(b);
      BigInteger bdMul=bdA.multiply(bdB);
      if (bdMul.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) < 0 || bdMul.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0) {
        try {
          FastMath.multiplyExact(a,b);
          Assert.fail("an exception should have been thrown " + a + b);
        }
 catch (        MathArithmeticException mae) {
        }
      }
 else {
        Assert.assertEquals(bdMul,BigInteger.valueOf(FastMath.multiplyExact(a,b)));
      }
    }
  }
}
