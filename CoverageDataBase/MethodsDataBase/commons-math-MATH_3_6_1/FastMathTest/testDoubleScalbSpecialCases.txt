@Test public void testDoubleScalbSpecialCases(){
  Assert.assertEquals(2.5269841324701218E-175,FastMath.scalb(2.2250738585072014E-308,442),0D);
  Assert.assertEquals(1.307993905256674E297,FastMath.scalb(1.1102230246251565E-16,1040),0D);
  Assert.assertEquals(7.2520887996488946E-217,FastMath.scalb(Double.MIN_VALUE,356),0D);
  Assert.assertEquals(8.98846567431158E307,FastMath.scalb(Double.MIN_VALUE,2097),0D);
  Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(Double.MIN_VALUE,2098),0D);
  Assert.assertEquals(1.1125369292536007E-308,FastMath.scalb(2.225073858507201E-308,-1),0D);
  Assert.assertEquals(1.0E-323,FastMath.scalb(Double.MAX_VALUE,-2097),0D);
  Assert.assertEquals(Double.MIN_VALUE,FastMath.scalb(Double.MAX_VALUE,-2098),0D);
  Assert.assertEquals(0,FastMath.scalb(Double.MAX_VALUE,-2099),0D);
  Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(Double.POSITIVE_INFINITY,-1000000),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,1078),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,1079),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2047),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2048),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.7976931348623157E308,2147483647),0D);
  Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(1.7976931348623157E308,2147483647),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,2147483647),0D);
  Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(1.1102230246251565E-16,2147483647),0D);
  Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2147483647),0D);
  Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(2.2250738585072014E-308,2147483647),0D);
}
