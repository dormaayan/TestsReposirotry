@Test public void testAtan2SpecialCases(){
  Assert.assertTrue("atan2(NaN, 0.0) should be NaN",Double.isNaN(FastMath.atan2(Double.NaN,0.0)));
  Assert.assertTrue("atan2(0.0, NaN) should be NaN",Double.isNaN(FastMath.atan2(0.0,Double.NaN)));
  Assert.assertEquals("atan2(0.0, 0.0) should be 0.0",0.0,FastMath.atan2(0.0,0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(0.0, 0.001) should be 0.0",0.0,FastMath.atan2(0.0,0.001),Precision.EPSILON);
  Assert.assertEquals("atan2(0.1, +Inf) should be 0.0",0.0,FastMath.atan2(0.1,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.0, 0.0) should be -0.0",-0.0,FastMath.atan2(-0.0,0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.0, 0.001) should be -0.0",-0.0,FastMath.atan2(-0.0,0.001),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.0, +Inf) should be -0.0",-0.0,FastMath.atan2(-0.1,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(0.0, -0.0) should be PI",FastMath.PI,FastMath.atan2(0.0,-0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(0.1, -Inf) should be PI",FastMath.PI,FastMath.atan2(0.1,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.0, -0.0) should be -PI",-FastMath.PI,FastMath.atan2(-0.0,-0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(0.1, -Inf) should be -PI",-FastMath.PI,FastMath.atan2(-0.1,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(0.1, 0.0) should be PI/2",FastMath.PI / 2.0,FastMath.atan2(0.1,0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(0.1, -0.0) should be PI/2",FastMath.PI / 2.0,FastMath.atan2(0.1,-0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(Inf, 0.1) should be PI/2",FastMath.PI / 2.0,FastMath.atan2(Double.POSITIVE_INFINITY,0.1),Precision.EPSILON);
  Assert.assertEquals("atan2(Inf, -0.1) should be PI/2",FastMath.PI / 2.0,FastMath.atan2(Double.POSITIVE_INFINITY,-0.1),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.1, 0.0) should be -PI/2",-FastMath.PI / 2.0,FastMath.atan2(-0.1,0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(-0.1, -0.0) should be -PI/2",-FastMath.PI / 2.0,FastMath.atan2(-0.1,-0.0),Precision.EPSILON);
  Assert.assertEquals("atan2(-Inf, 0.1) should be -PI/2",-FastMath.PI / 2.0,FastMath.atan2(Double.NEGATIVE_INFINITY,0.1),Precision.EPSILON);
  Assert.assertEquals("atan2(-Inf, -0.1) should be -PI/2",-FastMath.PI / 2.0,FastMath.atan2(Double.NEGATIVE_INFINITY,-0.1),Precision.EPSILON);
  Assert.assertEquals("atan2(Inf, Inf) should be PI/4",FastMath.PI / 4.0,FastMath.atan2(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(Inf, -Inf) should be PI * 3/4",FastMath.PI * 3.0 / 4.0,FastMath.atan2(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(-Inf, Inf) should be -PI/4",-FastMath.PI / 4.0,FastMath.atan2(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY),Precision.EPSILON);
  Assert.assertEquals("atan2(-Inf, -Inf) should be -PI * 3/4",-FastMath.PI * 3.0 / 4.0,FastMath.atan2(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);
}
