@Test public void testIssue914(){
  LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});
  JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6)){
    @Override public PointVectorValuePair optimize(    OptimizationData... optData){
      OptimizationData[] filtered=optData.clone();
      for (int i=0; i < filtered.length; ++i) {
        if (filtered[i] instanceof SimpleBounds) {
          filtered[i]=null;
        }
      }
      return super.optimize(filtered);
    }
  }
;
  JDKRandomGenerator g=new JDKRandomGenerator();
  g.setSeed(16069223052l);
  RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));
  MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);
  optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}),new SimpleBounds(new double[]{-1.0e-10},new double[]{1.0e-10}));
  PointVectorValuePair[] optima=optimizer.getOptima();
  Assert.assertEquals(1,optima.length);
}
