@Test public void testTrivial(){
  LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});
  JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6));
  JDKRandomGenerator g=new JDKRandomGenerator();
  g.setSeed(16069223052l);
  RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));
  MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);
  PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));
  Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);
  Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);
  PointVectorValuePair[] optima=optimizer.getOptima();
  Assert.assertEquals(10,optima.length);
  for (int i=0; i < optima.length; i++) {
    Assert.assertEquals(1.5,optima[i].getPoint()[0],1e-10);
    Assert.assertEquals(3.0,optima[i].getValue()[0],1e-10);
  }
  Assert.assertTrue(optimizer.getEvaluations() > 20);
  Assert.assertTrue(optimizer.getEvaluations() < 50);
  Assert.assertEquals(100,optimizer.getMaxEvaluations());
}
