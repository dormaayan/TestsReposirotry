@Test public void testRootNSingularity(){
  for (int n=2; n < 10; ++n) {
    for (int maxOrder=0; maxOrder < 12; ++maxOrder) {
      DerivativeStructure dsZero=new DerivativeStructure(1,maxOrder,0,0.0);
      DerivativeStructure rootN=dsZero.rootN(n);
      Assert.assertEquals(0.0,rootN.getValue(),1.0e-20);
      if (maxOrder > 0) {
        Assert.assertTrue(Double.isInfinite(rootN.getPartialDerivative(1)));
        Assert.assertTrue(rootN.getPartialDerivative(1) > 0);
        for (int order=2; order <= maxOrder; ++order) {
          Assert.assertTrue(Double.isNaN(rootN.getPartialDerivative(order)));
        }
      }
      double[] gDerivatives=new double[1 + maxOrder];
      gDerivatives[0]=0.0;
      for (int k=1; k <= maxOrder; ++k) {
        gDerivatives[k]=FastMath.pow(-1.0,k + 1);
      }
      DerivativeStructure correctRoot=new DerivativeStructure(1,maxOrder,gDerivatives).rootN(n);
      Assert.assertEquals(0.0,correctRoot.getValue(),1.0e-20);
      if (maxOrder > 0) {
        Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(1)));
        Assert.assertTrue(correctRoot.getPartialDerivative(1) > 0);
        for (int order=2; order <= maxOrder; ++order) {
          Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(order)));
          if ((order % 2) == 0) {
            Assert.assertTrue(correctRoot.getPartialDerivative(order) < 0);
          }
 else {
            Assert.assertTrue(correctRoot.getPartialDerivative(order) > 0);
          }
        }
      }
    }
  }
}
