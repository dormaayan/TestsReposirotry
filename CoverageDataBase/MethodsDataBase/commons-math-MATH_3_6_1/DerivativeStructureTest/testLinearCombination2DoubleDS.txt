@Test public void testLinearCombination2DoubleDS(){
  Well1024a random=new Well1024a(0xc6af886975069f11l);
  for (int i=0; i < 10000; ++i) {
    final double[] u=new double[4];
    final DerivativeStructure[] v=new DerivativeStructure[4];
    for (int j=0; j < u.length; ++j) {
      u[j]=1e17 * random.nextDouble();
      v[j]=new DerivativeStructure(u.length,1,j,1e17 * random.nextDouble());
    }
    DerivativeStructure lin=v[0].linearCombination(u[0],v[0],u[1],v[1]);
    double ref=u[0] * v[0].getValue() + u[1] * v[1].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));
    lin=v[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2]);
    ref=u[0] * v[0].getValue() + u[1] * v[1].getValue() + u[2] * v[2].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));
    Assert.assertEquals(u[2],lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));
    lin=v[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2],u[3],v[3]);
    ref=u[0] * v[0].getValue() + u[1] * v[1].getValue() + u[2] * v[2].getValue() + u[3] * v[3].getValue();
    Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));
    Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));
    Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));
    Assert.assertEquals(u[2],lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));
    Assert.assertEquals(u[3],lin.getPartialDerivative(0,0,0,1),1.0e-15 * FastMath.abs(v[3].getValue()));
  }
}
