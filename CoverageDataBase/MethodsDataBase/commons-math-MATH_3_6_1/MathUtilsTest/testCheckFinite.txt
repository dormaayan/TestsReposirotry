@Test public void testCheckFinite(){
  try {
    MathUtils.checkFinite(Double.POSITIVE_INFINITY);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
  try {
    MathUtils.checkFinite(Double.NEGATIVE_INFINITY);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
  try {
    MathUtils.checkFinite(Double.NaN);
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
  try {
    MathUtils.checkFinite(new double[]{0,-1,Double.POSITIVE_INFINITY,-2,3});
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
  try {
    MathUtils.checkFinite(new double[]{1,Double.NEGATIVE_INFINITY,-2,3});
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
  try {
    MathUtils.checkFinite(new double[]{4,3,-1,Double.NaN,-2,1});
    Assert.fail("an exception should have been thrown");
  }
 catch (  NotFiniteNumberException e) {
  }
}
