@Test public void testApplyInverseTo() throws MathIllegalArgumentException {
  Dfp[] in=new Dfp[3];
  Dfp[] out=new Dfp[3];
  Dfp[] rebuilt=new Dfp[3];
  FieldRotation<Dfp> r=new FieldRotation<Dfp>(createVector(2,-3,5),createAngle(1.7),RotationConvention.VECTOR_OPERATOR);
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      r.applyInverseTo(r.applyTo(u));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
      in[0]=u.getX();
      in[1]=u.getY();
      in[2]=u.getZ();
      r.applyTo(in,out);
      r.applyInverseTo(out,rebuilt);
      Assert.assertEquals(in[0].getReal(),rebuilt[0].getReal(),1.0e-12);
      Assert.assertEquals(in[1].getReal(),rebuilt[1].getReal(),1.0e-12);
      Assert.assertEquals(in[2].getReal(),rebuilt[2].getReal(),1.0e-12);
    }
  }
  r=createRotation(1,0,0,0,false);
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
    }
  }
  r=new FieldRotation<Dfp>(createVector(0,0,1),createAngle(FastMath.PI),RotationConvention.VECTOR_OPERATOR);
  for (double lambda=0; lambda < 6.2; lambda+=0.2) {
    for (double phi=-1.55; phi < 1.55; phi+=0.2) {
      FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda) * FastMath.cos(phi),FastMath.sin(lambda) * FastMath.cos(phi),FastMath.sin(phi));
      checkVector(u,r.applyInverseTo(r.applyTo(u)));
      checkVector(u,r.applyTo(r.applyInverseTo(u)));
    }
  }
}
