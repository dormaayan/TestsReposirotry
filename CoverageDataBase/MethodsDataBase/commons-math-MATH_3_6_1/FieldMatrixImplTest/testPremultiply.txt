@Test public void testPremultiply(){
  FieldMatrix<Fraction> m3=new Array2DRowFieldMatrix<Fraction>(d3);
  FieldMatrix<Fraction> m4=new Array2DRowFieldMatrix<Fraction>(d4);
  FieldMatrix<Fraction> m5=new Array2DRowFieldMatrix<Fraction>(d5);
  TestUtils.assertEquals(m4.preMultiply(m3),m5);
  Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);
  Array2DRowFieldMatrix<Fraction> mInv=new Array2DRowFieldMatrix<Fraction>(testDataInv);
  Array2DRowFieldMatrix<Fraction> identity=new Array2DRowFieldMatrix<Fraction>(id);
  TestUtils.assertEquals(m.preMultiply(mInv),identity);
  TestUtils.assertEquals(mInv.preMultiply(m),identity);
  TestUtils.assertEquals(m.preMultiply(identity),m);
  TestUtils.assertEquals(identity.preMultiply(mInv),mInv);
  try {
    m.preMultiply(new Array2DRowFieldMatrix<Fraction>(bigSingular));
    Assert.fail("Expecting illegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
}
