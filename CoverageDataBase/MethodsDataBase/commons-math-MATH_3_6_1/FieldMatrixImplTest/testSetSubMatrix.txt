@Test public void testSetSubMatrix(){
  Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);
  m.setSubMatrix(detData2,1,1);
  FieldMatrix<Fraction> expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});
  Assert.assertEquals(expected,m);
  m.setSubMatrix(detData2,0,0);
  expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});
  Assert.assertEquals(expected,m);
  m.setSubMatrix(testDataPlus2,0,0);
  expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});
  Assert.assertEquals(expected,m);
  try {
    m.setSubMatrix(testData,1,1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(testData,-1,1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(testData,1,-1);
    Assert.fail("expecting OutOfRangeException");
  }
 catch (  OutOfRangeException e) {
  }
  try {
    m.setSubMatrix(null,1,1);
    Assert.fail("expecting NullArgumentException");
  }
 catch (  NullArgumentException e) {
  }
  Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance());
  try {
    m2.setSubMatrix(testData,0,1);
    Assert.fail("expecting MathIllegalStateException");
  }
 catch (  MathIllegalStateException e) {
  }
  try {
    m2.setSubMatrix(testData,1,0);
    Assert.fail("expecting MathIllegalStateException");
  }
 catch (  MathIllegalStateException e) {
  }
  try {
    m.setSubMatrix(new Fraction[][]{{new Fraction(1)},{new Fraction(2),new Fraction(3)}},0,0);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
  try {
    m.setSubMatrix(new Fraction[][]{{}},0,0);
    Assert.fail("expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException e) {
  }
}
