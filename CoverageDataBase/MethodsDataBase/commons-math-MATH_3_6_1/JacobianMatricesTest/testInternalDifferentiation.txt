@Test public void testInternalDifferentiation() throws NumberIsTooSmallException, DimensionMismatchException, MaxCountExceededException, NoBracketingException, UnknownParameterException, MismatchedEquations {
  AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-4,1.0e-4},new double[]{1.0e-4,1.0e-4});
  double hP=1.0e-12;
  double hY=1.0e-12;
  SummaryStatistics residualsP0=new SummaryStatistics();
  SummaryStatistics residualsP1=new SummaryStatistics();
  for (double b=2.88; b < 3.08; b+=0.001) {
    ParamBrusselator brusselator=new ParamBrusselator(b);
    brusselator.setParameter(ParamBrusselator.B,b);
    double[] z={1.3,b};
    double[][] dZdZ0=new double[2][2];
    double[] dZdP=new double[2];
    JacobianMatrices jacob=new JacobianMatrices(brusselator,new double[]{hY,hY},ParamBrusselator.B);
    jacob.setParameterizedODE(brusselator);
    jacob.setParameterStep(ParamBrusselator.B,hP);
    jacob.setInitialParameterJacobian(ParamBrusselator.B,new double[]{0.0,1.0});
    ExpandableStatefulODE efode=new ExpandableStatefulODE(brusselator);
    efode.setTime(0);
    efode.setPrimaryState(z);
    jacob.registerVariationalEquations(efode);
    integ.setMaxEvaluations(5000);
    integ.integrate(efode,20.0);
    jacob.getCurrentMainSetJacobian(dZdZ0);
    jacob.getCurrentParameterJacobian(ParamBrusselator.B,dZdP);
    residualsP0.addValue(dZdP[0] - brusselator.dYdP0());
    residualsP1.addValue(dZdP[1] - brusselator.dYdP1());
  }
  Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.02);
  Assert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
  Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
  Assert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
}
