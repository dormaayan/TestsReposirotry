@Test public void testFinalResult() throws MaxCountExceededException, DimensionMismatchException, NumberIsTooSmallException, NoBracketingException, UnknownParameterException, MismatchedEquations {
  AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-10,1.0e-10},new double[]{1.0e-10,1.0e-10});
  double[] y=new double[]{0.0,1.0};
  Circle circle=new Circle(y,1.0,1.0,0.1);
  JacobianMatrices jacob=new JacobianMatrices(circle,Circle.CX,Circle.CY,Circle.OMEGA);
  jacob.addParameterJacobianProvider(circle);
  jacob.setInitialMainStateJacobian(circle.exactDyDy0(0));
  jacob.setInitialParameterJacobian(Circle.CX,circle.exactDyDcx(0));
  jacob.setInitialParameterJacobian(Circle.CY,circle.exactDyDcy(0));
  jacob.setInitialParameterJacobian(Circle.OMEGA,circle.exactDyDom(0));
  ExpandableStatefulODE efode=new ExpandableStatefulODE(circle);
  efode.setTime(0);
  efode.setPrimaryState(y);
  jacob.registerVariationalEquations(efode);
  integ.setMaxEvaluations(5000);
  double t=18 * FastMath.PI;
  integ.integrate(efode,t);
  y=efode.getPrimaryState();
  for (int i=0; i < y.length; ++i) {
    Assert.assertEquals(circle.exactY(t)[i],y[i],1.0e-9);
  }
  double[][] dydy0=new double[2][2];
  jacob.getCurrentMainSetJacobian(dydy0);
  for (int i=0; i < dydy0.length; ++i) {
    for (int j=0; j < dydy0[i].length; ++j) {
      Assert.assertEquals(circle.exactDyDy0(t)[i][j],dydy0[i][j],1.0e-9);
    }
  }
  double[] dydcx=new double[2];
  jacob.getCurrentParameterJacobian(Circle.CX,dydcx);
  for (int i=0; i < dydcx.length; ++i) {
    Assert.assertEquals(circle.exactDyDcx(t)[i],dydcx[i],1.0e-7);
  }
  double[] dydcy=new double[2];
  jacob.getCurrentParameterJacobian(Circle.CY,dydcy);
  for (int i=0; i < dydcy.length; ++i) {
    Assert.assertEquals(circle.exactDyDcy(t)[i],dydcy[i],1.0e-7);
  }
  double[] dydom=new double[2];
  jacob.getCurrentParameterJacobian(Circle.OMEGA,dydom);
  for (int i=0; i < dydom.length; ++i) {
    Assert.assertEquals(circle.exactDyDom(t)[i],dydom[i],1.0e-7);
  }
}
