@Test public void testQuinticMinStatistics(){
  UnivariateFunction f=new QuinticFunction();
  UnivariateOptimizer optimizer=new BrentOptimizer(1e-11,1e-14);
  final DescriptiveStatistics[] stat=new DescriptiveStatistics[2];
  for (int i=0; i < stat.length; i++) {
    stat[i]=new DescriptiveStatistics();
  }
  final double min=-0.75;
  final double max=0.25;
  final int nSamples=200;
  final double delta=(max - min) / nSamples;
  for (int i=0; i < nSamples; i++) {
    final double start=min + i * delta;
    stat[0].addValue(optimizer.optimize(new MaxEval(40),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(min,max,start)).getPoint());
    stat[1].addValue(optimizer.getEvaluations());
  }
  final double meanOptValue=stat[0].getMean();
  final double medianEval=stat[1].getPercentile(50);
  Assert.assertTrue(meanOptValue > -0.2719561281);
  Assert.assertTrue(meanOptValue < -0.2719561280);
  Assert.assertEquals(23,(int)medianEval);
  Assert.assertTrue(optimizer.getIterations() > 0);
}
