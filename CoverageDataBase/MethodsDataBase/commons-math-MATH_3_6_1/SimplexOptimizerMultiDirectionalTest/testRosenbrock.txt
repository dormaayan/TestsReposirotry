@Test public void testRosenbrock(){
  MultivariateFunction rosenbrock=new MultivariateFunction(){
    public double value(    double[] x){
      ++count;
      double a=x[1] - x[0] * x[0];
      double b=1.0 - x[0];
      return 100 * a * a + b * b;
    }
  }
;
  count=0;
  SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);
  PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(rosenbrock),GoalType.MINIMIZE,new InitialGuess(new double[]{-1.2,1}),new MultiDirectionalSimplex(new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}}));
  Assert.assertEquals(count,optimizer.getEvaluations());
  Assert.assertTrue(optimizer.getEvaluations() > 50);
  Assert.assertTrue(optimizer.getEvaluations() < 100);
  Assert.assertTrue(optimum.getValue() > 1e-2);
}
