@Test public void testIncreasingTolerance() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
  int previousCalls=Integer.MAX_VALUE;
  for (int i=-12; i < -2; ++i) {
    TestProblem1 pb=new TestProblem1();
    double minStep=0;
    double maxStep=pb.getFinalTime() - pb.getInitialTime();
    double scalAbsoluteTolerance=FastMath.pow(10.0,i);
    double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;
    FirstOrderIntegrator integ=new AdamsBashforthIntegrator(4,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);
    TestProblemHandler handler=new TestProblemHandler(pb,integ);
    integ.addStepHandler(handler);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.assertTrue(handler.getMaximalValueError() > (2.6 * scalAbsoluteTolerance));
    Assert.assertTrue(handler.getMaximalValueError() < (122 * scalAbsoluteTolerance));
    int calls=pb.getCalls();
    Assert.assertEquals(integ.getEvaluations(),calls);
    Assert.assertTrue(calls <= previousCalls);
    previousCalls=calls;
  }
}
