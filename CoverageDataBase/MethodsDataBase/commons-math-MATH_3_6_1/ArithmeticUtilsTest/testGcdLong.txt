@Test public void testGcdLong(){
  long a=30;
  long b=50;
  long c=77;
  Assert.assertEquals(0,ArithmeticUtils.gcd(0L,0));
  Assert.assertEquals(b,ArithmeticUtils.gcd(0,b));
  Assert.assertEquals(a,ArithmeticUtils.gcd(a,0));
  Assert.assertEquals(b,ArithmeticUtils.gcd(0,-b));
  Assert.assertEquals(a,ArithmeticUtils.gcd(-a,0));
  Assert.assertEquals(10,ArithmeticUtils.gcd(a,b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(-a,b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(a,-b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(-a,-b));
  Assert.assertEquals(1,ArithmeticUtils.gcd(a,c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(-a,c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(a,-c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(-a,-c));
  Assert.assertEquals(3L * (1L << 45),ArithmeticUtils.gcd(3L * (1L << 50),9L * (1L << 45)));
  Assert.assertEquals(1L << 45,ArithmeticUtils.gcd(1L << 45,Long.MIN_VALUE));
  Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.gcd(Long.MAX_VALUE,0L));
  Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.gcd(-Long.MAX_VALUE,0L));
  Assert.assertEquals(1,ArithmeticUtils.gcd(60247241209L,153092023L));
  try {
    ArithmeticUtils.gcd(Long.MIN_VALUE,0);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  try {
    ArithmeticUtils.gcd(0,Long.MIN_VALUE);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  try {
    ArithmeticUtils.gcd(Long.MIN_VALUE,Long.MIN_VALUE);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
}
