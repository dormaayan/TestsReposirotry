@Test public void testGcd(){
  int a=30;
  int b=50;
  int c=77;
  Assert.assertEquals(0,ArithmeticUtils.gcd(0,0));
  Assert.assertEquals(b,ArithmeticUtils.gcd(0,b));
  Assert.assertEquals(a,ArithmeticUtils.gcd(a,0));
  Assert.assertEquals(b,ArithmeticUtils.gcd(0,-b));
  Assert.assertEquals(a,ArithmeticUtils.gcd(-a,0));
  Assert.assertEquals(10,ArithmeticUtils.gcd(a,b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(-a,b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(a,-b));
  Assert.assertEquals(10,ArithmeticUtils.gcd(-a,-b));
  Assert.assertEquals(1,ArithmeticUtils.gcd(a,c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(-a,c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(a,-c));
  Assert.assertEquals(1,ArithmeticUtils.gcd(-a,-c));
  Assert.assertEquals(3 * (1 << 15),ArithmeticUtils.gcd(3 * (1 << 20),9 * (1 << 15)));
  Assert.assertEquals(Integer.MAX_VALUE,ArithmeticUtils.gcd(Integer.MAX_VALUE,0));
  Assert.assertEquals(Integer.MAX_VALUE,ArithmeticUtils.gcd(-Integer.MAX_VALUE,0));
  Assert.assertEquals(1 << 30,ArithmeticUtils.gcd(1 << 30,-Integer.MIN_VALUE));
  try {
    ArithmeticUtils.gcd(Integer.MIN_VALUE,0);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  try {
    ArithmeticUtils.gcd(0,Integer.MIN_VALUE);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  try {
    ArithmeticUtils.gcd(Integer.MIN_VALUE,Integer.MIN_VALUE);
    Assert.fail("expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
}
