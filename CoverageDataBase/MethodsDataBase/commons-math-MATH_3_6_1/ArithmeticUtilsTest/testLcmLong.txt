@Test public void testLcmLong(){
  long a=30;
  long b=50;
  long c=77;
  Assert.assertEquals(0,ArithmeticUtils.lcm(0,b));
  Assert.assertEquals(0,ArithmeticUtils.lcm(a,0));
  Assert.assertEquals(b,ArithmeticUtils.lcm(1,b));
  Assert.assertEquals(a,ArithmeticUtils.lcm(a,1));
  Assert.assertEquals(150,ArithmeticUtils.lcm(a,b));
  Assert.assertEquals(150,ArithmeticUtils.lcm(-a,b));
  Assert.assertEquals(150,ArithmeticUtils.lcm(a,-b));
  Assert.assertEquals(150,ArithmeticUtils.lcm(-a,-b));
  Assert.assertEquals(2310,ArithmeticUtils.lcm(a,c));
  Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.lcm(60247241209L,153092023L));
  Assert.assertEquals((1L << 50) * 15,ArithmeticUtils.lcm((1L << 45) * 3,(1L << 50) * 5));
  Assert.assertEquals(0L,ArithmeticUtils.lcm(0L,0L));
  try {
    ArithmeticUtils.lcm(Long.MIN_VALUE,1);
    Assert.fail("Expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  try {
    ArithmeticUtils.lcm(Long.MIN_VALUE,1 << 20);
    Assert.fail("Expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
  Assert.assertEquals((long)Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),ArithmeticUtils.lcm((long)Integer.MAX_VALUE,Integer.MAX_VALUE - 1));
  try {
    ArithmeticUtils.lcm(Long.MAX_VALUE,Long.MAX_VALUE - 1);
    Assert.fail("Expecting MathArithmeticException");
  }
 catch (  MathArithmeticException expected) {
  }
}
