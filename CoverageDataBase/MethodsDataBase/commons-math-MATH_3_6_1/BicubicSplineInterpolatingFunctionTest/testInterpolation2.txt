/** 
 * Interpolating a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
 */
@Test public void testInterpolation2(){
  final int sz=21;
  double[] xval=new double[sz];
  double[] yval=new double[sz];
  final double delta=1d / (sz - 1);
  for (int i=0; i < sz; i++) {
    xval[i]=-1 + 15 * i * delta;
    yval[i]=-20 + 30 * i * delta;
  }
  BivariateFunction f=new BivariateFunction(){
    public double value(    double x,    double y){
      return 2 * x * x - 3 * y * y + 4 * x * y - 5;
    }
  }
;
  double[][] zval=new double[xval.length][yval.length];
  for (int i=0; i < xval.length; i++) {
    for (int j=0; j < yval.length; j++) {
      zval[i][j]=f.value(xval[i],yval[j]);
    }
  }
  double[][] dZdX=new double[xval.length][yval.length];
  BivariateFunction dfdX=new BivariateFunction(){
    public double value(    double x,    double y){
      return 4 * (x + y);
    }
  }
;
  for (int i=0; i < xval.length; i++) {
    for (int j=0; j < yval.length; j++) {
      dZdX[i][j]=dfdX.value(xval[i],yval[j]);
    }
  }
  double[][] dZdY=new double[xval.length][yval.length];
  BivariateFunction dfdY=new BivariateFunction(){
    public double value(    double x,    double y){
      return 4 * x - 6 * y;
    }
  }
;
  for (int i=0; i < xval.length; i++) {
    for (int j=0; j < yval.length; j++) {
      dZdY[i][j]=dfdY.value(xval[i],yval[j]);
    }
  }
  double[][] dZdXdY=new double[xval.length][yval.length];
  for (int i=0; i < xval.length; i++) {
    for (int j=0; j < yval.length; j++) {
      dZdXdY[i][j]=4;
    }
  }
  BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,dZdX,dZdY,dZdXdY);
  double x, y;
  final RandomGenerator rng=new Well19937c(1234567L);
  final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);
  final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);
  final double tol=224;
  for (int i=0; i < sz; i++) {
    x=distX.sample();
    for (int j=0; j < sz; j++) {
      y=distY.sample();
      Assert.assertEquals(f.value(x,y),bcf.value(x,y),tol);
    }
  }
}
