/** 
 * Test for partial derivatives of  {@link BicubicSplineFunction}. <p> f(x, y) = &Sigma;<sub>i</sub>&Sigma;<sub>j</sub> (i+1) (j+2) x<sup>i</sup> y<sup>j</sup>
 */
@Ignore @Test public void testSplinePartialDerivatives(){
  final int N=4;
  final double[] coeff=new double[16];
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      coeff[i + N * j]=(i + 1) * (j + 2);
    }
  }
  final BicubicSplineFunction f=new BicubicSplineFunction(coeff);
  BivariateFunction derivative;
  final double x=0.435;
  final double y=0.776;
  final double tol=1e-13;
  derivative=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double y2=y * y;
      final double y3=y2 * y;
      final double yFactor=2 + 3 * y + 4 * y2 + 5 * y3;
      return yFactor * (2 + 6 * x + 12 * x2);
    }
  }
;
  Assert.assertEquals("dFdX",derivative.value(x,y),f.partialDerivativeX().value(x,y),tol);
  derivative=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double x3=x2 * x;
      final double y2=y * y;
      final double xFactor=1 + 2 * x + 3 * x2 + 4 * x3;
      return xFactor * (3 + 8 * y + 15 * y2);
    }
  }
;
  Assert.assertEquals("dFdY",derivative.value(x,y),f.partialDerivativeY().value(x,y),tol);
  derivative=new BivariateFunction(){
    public double value(    double x,    double y){
      final double y2=y * y;
      final double y3=y2 * y;
      final double yFactor=2 + 3 * y + 4 * y2 + 5 * y3;
      return yFactor * (6 + 24 * x);
    }
  }
;
  Assert.assertEquals("d2FdX2",derivative.value(x,y),f.partialDerivativeXX().value(x,y),tol);
  derivative=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double x3=x2 * x;
      final double xFactor=1 + 2 * x + 3 * x2 + 4 * x3;
      return xFactor * (8 + 30 * y);
    }
  }
;
  Assert.assertEquals("d2FdY2",derivative.value(x,y),f.partialDerivativeYY().value(x,y),tol);
  derivative=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double y2=y * y;
      final double yFactor=3 + 8 * y + 15 * y2;
      return yFactor * (2 + 6 * x + 12 * x2);
    }
  }
;
  Assert.assertEquals("d2FdXdY",derivative.value(x,y),f.partialDerivativeXY().value(x,y),tol);
}
