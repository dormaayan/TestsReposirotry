/** 
 * Test that the partial derivatives computed from a {@link BicubicSplineInterpolatingFunction} match the input data.<p> f(x, y) = 5 - 3 x + 2 y - x y + 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x<sup>2</sup> y - x y<sup>2</sup> - 3 x<sup>3</sup> + y<sup>3</sup>
 */
@Ignore @Test public void testMatchingPartialDerivatives(){
  final int sz=21;
  double[] val=new double[sz];
  final double delta=1d / (sz - 1);
  for (int i=0; i < sz; i++) {
    val[i]=i * delta;
  }
  BivariateFunction f=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double x3=x2 * x;
      final double y2=y * y;
      final double y3=y2 * y;
      return 5 - 3 * x + 2 * y - x * y + 2 * x2 - 3 * y2 + 4 * x2 * y - x * y2 - 3 * x3 + y3;
    }
  }
;
  double[][] fval=new double[sz][sz];
  for (int i=0; i < sz; i++) {
    for (int j=0; j < sz; j++) {
      fval[i][j]=f.value(val[i],val[j]);
    }
  }
  double[][] dFdX=new double[sz][sz];
  BivariateFunction dfdX=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double y2=y * y;
      return -3 - y + 4 * x + 8 * x * y - y2 - 9 * x2;
    }
  }
;
  for (int i=0; i < sz; i++) {
    for (int j=0; j < sz; j++) {
      dFdX[i][j]=dfdX.value(val[i],val[j]);
    }
  }
  double[][] dFdY=new double[sz][sz];
  BivariateFunction dfdY=new BivariateFunction(){
    public double value(    double x,    double y){
      final double x2=x * x;
      final double y2=y * y;
      return 2 - x - 6 * y + 4 * x2 - 2 * x * y + 3 * y2;
    }
  }
;
  for (int i=0; i < sz; i++) {
    for (int j=0; j < sz; j++) {
      dFdY[i][j]=dfdY.value(val[i],val[j]);
    }
  }
  double[][] d2FdXdY=new double[sz][sz];
  BivariateFunction d2fdXdY=new BivariateFunction(){
    public double value(    double x,    double y){
      return -1 + 8 * x - 2 * y;
    }
  }
;
  for (int i=0; i < sz; i++) {
    for (int j=0; j < sz; j++) {
      d2FdXdY[i][j]=d2fdXdY.value(val[i],val[j]);
    }
  }
  BicubicSplineInterpolatingFunction bcf=new BicubicSplineInterpolatingFunction(val,val,fval,dFdX,dFdY,d2FdXdY);
  double x, y;
  double expected, result;
  final double tol=1e-12;
  for (int i=0; i < sz; i++) {
    x=val[i];
    for (int j=0; j < sz; j++) {
      y=val[j];
      expected=dfdX.value(x,y);
      result=bcf.partialDerivativeX(x,y);
      Assert.assertEquals(x + " " + y+ " dFdX",expected,result,tol);
      expected=dfdY.value(x,y);
      result=bcf.partialDerivativeY(x,y);
      Assert.assertEquals(x + " " + y+ " dFdY",expected,result,tol);
      expected=d2fdXdY.value(x,y);
      result=bcf.partialDerivativeXY(x,y);
      Assert.assertEquals(x + " " + y+ " d2FdXdY",expected,result,tol);
    }
  }
}
