@Test public void testContinuous(){
  final double x0=0.0;
  final double x1=1.0;
  final double x2=2.0;
  final double x3=3.0;
  final double p12=0.5;
  final AbstractRealDistribution distribution;
  distribution=new AbstractRealDistribution(null){
    private static final long serialVersionUID=1L;
    public double cumulativeProbability(    final double x){
      if ((x < x0) || (x > x3)) {
        throw new OutOfRangeException(x,x0,x3);
      }
      if (x <= x1) {
        return p12 * (x - x0) / (x1 - x0);
      }
 else       if (x <= x2) {
        return p12;
      }
 else       if (x <= x3) {
        return p12 + (1.0 - p12) * (x - x2) / (x3 - x2);
      }
      return 0.0;
    }
    public double density(    final double x){
      if ((x < x0) || (x > x3)) {
        throw new OutOfRangeException(x,x0,x3);
      }
      if (x <= x1) {
        return p12 / (x1 - x0);
      }
 else       if (x <= x2) {
        return 0.0;
      }
 else       if (x <= x3) {
        return (1.0 - p12) / (x3 - x2);
      }
      return 0.0;
    }
    public double getNumericalMean(){
      return ((x0 + x1) * p12 + (x2 + x3) * (1.0 - p12)) / 2.0;
    }
    public double getNumericalVariance(){
      final double meanX=getNumericalMean();
      final double meanX2;
      meanX2=((x0 * x0 + x0 * x1 + x1 * x1) * p12 + (x2 * x2 + x2 * x3 + x3 * x3) * (1.0 - p12)) / 3.0;
      return meanX2 - meanX * meanX;
    }
    public double getSupportLowerBound(){
      return x0;
    }
    public double getSupportUpperBound(){
      return x3;
    }
    public boolean isSupportConnected(){
      return false;
    }
    public boolean isSupportLowerBoundInclusive(){
      return true;
    }
    public boolean isSupportUpperBoundInclusive(){
      return true;
    }
    @Override public double probability(    final double x){
      throw new UnsupportedOperationException();
    }
  }
;
  final double expected=x1;
  final double actual=distribution.inverseCumulativeProbability(p12);
  Assert.assertEquals("",expected,actual,distribution.getSolverAbsoluteAccuracy());
}
