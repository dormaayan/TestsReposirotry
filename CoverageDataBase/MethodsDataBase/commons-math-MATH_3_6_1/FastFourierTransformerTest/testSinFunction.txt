/** 
 * Test of transformer for the sine function.
 */
@Test public void testSinFunction(){
  UnivariateFunction f=new Sin();
  FastFourierTransformer transformer;
  transformer=new FastFourierTransformer(DftNormalization.STANDARD);
  Complex result[];
  int N=1 << 8;
  double min, max, tolerance=1E-12;
  min=0.0;
  max=2.0 * FastMath.PI;
  result=transformer.transform(f,min,max,N,TransformType.FORWARD);
  Assert.assertEquals(0.0,result[1].getReal(),tolerance);
  Assert.assertEquals(-(N >> 1),result[1].getImaginary(),tolerance);
  Assert.assertEquals(0.0,result[N - 1].getReal(),tolerance);
  Assert.assertEquals(N >> 1,result[N - 1].getImaginary(),tolerance);
  for (int i=0; i < N - 1; i+=(i == 0 ? 2 : 1)) {
    Assert.assertEquals(0.0,result[i].getReal(),tolerance);
    Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);
  }
  min=-FastMath.PI;
  max=FastMath.PI;
  result=transformer.transform(f,min,max,N,TransformType.INVERSE);
  Assert.assertEquals(0.0,result[1].getReal(),tolerance);
  Assert.assertEquals(-0.5,result[1].getImaginary(),tolerance);
  Assert.assertEquals(0.0,result[N - 1].getReal(),tolerance);
  Assert.assertEquals(0.5,result[N - 1].getImaginary(),tolerance);
  for (int i=0; i < N - 1; i+=(i == 0 ? 2 : 1)) {
    Assert.assertEquals(0.0,result[i].getReal(),tolerance);
    Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);
  }
}
