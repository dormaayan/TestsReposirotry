@Test public void testRandomPolynomialsValuesOnly(){
  Random random=new Random(0x42b1e7dbd361a932l);
  for (int i=0; i < 100; ++i) {
    int maxDegree=0;
    PolynomialFunction[] p=new PolynomialFunction[5];
    for (int k=0; k < p.length; ++k) {
      int degree=random.nextInt(7);
      p[k]=randomPolynomial(degree,random);
      maxDegree=FastMath.max(maxDegree,degree);
    }
    HermiteInterpolator interpolator=new HermiteInterpolator();
    for (int j=0; j < 1 + maxDegree; ++j) {
      double x=0.1 * j;
      double[] values=new double[p.length];
      for (int k=0; k < p.length; ++k) {
        values[k]=p[k].value(x);
      }
      interpolator.addSamplePoint(x,values);
    }
    for (double x=0; x < 2; x+=0.1) {
      double[] values=interpolator.value(x);
      Assert.assertEquals(p.length,values.length);
      for (int k=0; k < p.length; ++k) {
        Assert.assertEquals(p[k].value(x),values[k],1.0e-8 * FastMath.abs(p[k].value(x)));
      }
    }
    PolynomialFunction[] result=interpolator.getPolynomials();
    for (int k=0; k < p.length; ++k) {
      checkPolynomial(p[k],result[k]);
    }
  }
}
