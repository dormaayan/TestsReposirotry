@Test public void testRandomPolynomialsFirstDerivative(){
  Random random=new Random(0x570803c982ca5d3bl);
  for (int i=0; i < 100; ++i) {
    int maxDegree=0;
    PolynomialFunction[] p=new PolynomialFunction[5];
    PolynomialFunction[] pPrime=new PolynomialFunction[5];
    for (int k=0; k < p.length; ++k) {
      int degree=random.nextInt(7);
      p[k]=randomPolynomial(degree,random);
      pPrime[k]=p[k].polynomialDerivative();
      maxDegree=FastMath.max(maxDegree,degree);
    }
    HermiteInterpolator interpolator=new HermiteInterpolator();
    for (int j=0; j < 1 + maxDegree / 2; ++j) {
      double x=0.1 * j;
      double[] values=new double[p.length];
      double[] derivatives=new double[p.length];
      for (int k=0; k < p.length; ++k) {
        values[k]=p[k].value(x);
        derivatives[k]=pPrime[k].value(x);
      }
      interpolator.addSamplePoint(x,values,derivatives);
    }
    for (double x=0; x < 2; x+=0.1) {
      DerivativeStructure[] y=interpolator.value(new DerivativeStructure(1,1,0,x));
      Assert.assertEquals(p.length,y.length);
      for (int k=0; k < p.length; ++k) {
        Assert.assertEquals(p[k].value(x),y[k].getValue(),1.0e-8 * FastMath.abs(p[k].value(x)));
        Assert.assertEquals(pPrime[k].value(x),y[k].getPartialDerivative(1),4.0e-8 * FastMath.abs(p[k].value(x)));
      }
    }
    PolynomialFunction[] result=interpolator.getPolynomials();
    for (int k=0; k < p.length; ++k) {
      checkPolynomial(p[k],result[k]);
    }
  }
}
