@Test public void testModelsMerging() throws MaxCountExceededException, MathIllegalArgumentException {
  FirstOrderDifferentialEquations problem=new FirstOrderDifferentialEquations(){
    public void computeDerivatives(    double t,    double[] y,    double[] dot){
      dot[0]=-y[1];
      dot[1]=y[0];
    }
    public int getDimension(){
      return 2;
    }
  }
;
  ContinuousOutputModel cm1=new ContinuousOutputModel();
  FirstOrderIntegrator integ1=new DormandPrince853Integrator(0,1.0,1.0e-8,1.0e-8);
  integ1.addStepHandler(cm1);
  integ1.integrate(problem,FastMath.PI,new double[]{-1.0,0.0},0,new double[2]);
  ContinuousOutputModel cm2=new ContinuousOutputModel();
  FirstOrderIntegrator integ2=new DormandPrince853Integrator(0,0.1,1.0e-12,1.0e-12);
  integ2.addStepHandler(cm2);
  integ2.integrate(problem,2.0 * FastMath.PI,new double[]{1.0,0.0},FastMath.PI,new double[2]);
  ContinuousOutputModel cm=new ContinuousOutputModel();
  cm.append(cm2);
  cm.append(new ContinuousOutputModel());
  cm.append(cm1);
  Assert.assertEquals(2.0 * FastMath.PI,cm.getInitialTime(),1.0e-12);
  Assert.assertEquals(0,cm.getFinalTime(),1.0e-12);
  Assert.assertEquals(cm.getFinalTime(),cm.getInterpolatedTime(),1.0e-12);
  for (double t=0; t < 2.0 * FastMath.PI; t+=0.1) {
    cm.setInterpolatedTime(t);
    double[] y=cm.getInterpolatedState();
    Assert.assertEquals(FastMath.cos(t),y[0],1.0e-7);
    Assert.assertEquals(FastMath.sin(t),y[1],1.0e-7);
  }
}
