/** 
 * Make sure that empirical distribution of random Poisson(4)'s has P(X <= 5) close to actual cumulative Poisson probability and that nextPoisson fails when mean is non-positive.
 */
@Test public void testNextPoisson(){
  try {
    randomData.nextPoisson(0);
    Assert.fail("zero mean -- expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    randomData.nextPoisson(-1);
    Assert.fail("negative mean supplied -- MathIllegalArgumentException expected");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    randomData.nextPoisson(0);
    Assert.fail("0 mean supplied -- MathIllegalArgumentException expected");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  final double mean=4.0d;
  final int len=5;
  PoissonDistribution poissonDistribution=new PoissonDistribution(mean);
  Frequency f=new Frequency();
  randomData.reSeed(1000);
  for (int i=0; i < largeSampleSize; i++) {
    f.addValue(randomData.nextPoisson(mean));
  }
  final long[] observed=new long[len];
  for (int i=0; i < len; i++) {
    observed[i]=f.getCount(i + 1);
  }
  final double[] expected=new double[len];
  for (int i=0; i < len; i++) {
    expected[i]=poissonDistribution.probability(i + 1) * largeSampleSize;
  }
  TestUtils.assertChiSquareAccept(expected,observed,0.0001);
}
