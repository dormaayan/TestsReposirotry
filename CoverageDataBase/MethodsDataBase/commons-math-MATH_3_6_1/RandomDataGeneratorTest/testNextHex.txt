/** 
 * test dispersion and failure modes for nextHex() 
 */
@Test public void testNextHex(){
  try {
    randomData.nextHexString(-1);
    Assert.fail("negative length supplied -- MathIllegalArgumentException expected");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  try {
    randomData.nextHexString(0);
    Assert.fail("zero length supplied -- MathIllegalArgumentException expected");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  String hexString=randomData.nextHexString(3);
  if (hexString.length() != 3) {
    Assert.fail("incorrect length for generated string");
  }
  hexString=randomData.nextHexString(1);
  if (hexString.length() != 1) {
    Assert.fail("incorrect length for generated string");
  }
  try {
    hexString=randomData.nextHexString(0);
    Assert.fail("zero length requested -- expecting MathIllegalArgumentException");
  }
 catch (  MathIllegalArgumentException ex) {
  }
  Frequency f=new Frequency();
  for (int i=0; i < smallSampleSize; i++) {
    hexString=randomData.nextHexString(100);
    if (hexString.length() != 100) {
      Assert.fail("incorrect length for generated string");
    }
    for (int j=0; j < hexString.length(); j++) {
      f.addValue(hexString.substring(j,j + 1));
    }
  }
  double[] expected=new double[16];
  long[] observed=new long[16];
  for (int i=0; i < 16; i++) {
    expected[i]=(double)smallSampleSize * 100 / 16;
    observed[i]=f.getCount(hex[i]);
  }
  TestUtils.assertChiSquareAccept(expected,observed,0.001);
}
