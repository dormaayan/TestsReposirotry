/** 
 * tests for nextPermutation 
 */
@Test public void testNextPermutation(){
  int[][] p={{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};
  long[] observed={0,0,0,0,0,0};
  double[] expected={100,100,100,100,100,100};
  for (int i=0; i < 600; i++) {
    int[] perm=randomData.nextPermutation(3,3);
    observed[findPerm(p,perm)]++;
  }
  String[] labels={"{0, 1, 2}","{ 0, 2, 1 }","{ 1, 0, 2 }","{ 1, 2, 0 }","{ 2, 0, 1 }","{ 2, 1, 0 }"};
  TestUtils.assertChiSquareAccept(labels,expected,observed,0.001);
  int[] perm=randomData.nextPermutation(1,1);
  if ((perm.length != 1) || (perm[0] != 0)) {
    Assert.fail("bad permutation for n = 1, sample k = 1");
    try {
      perm=randomData.nextPermutation(2,3);
      Assert.fail("permutation k > n, expecting MathIllegalArgumentException");
    }
 catch (    MathIllegalArgumentException ex) {
    }
    try {
      perm=randomData.nextPermutation(0,0);
      Assert.fail("permutation k = n = 0, expecting MathIllegalArgumentException");
    }
 catch (    MathIllegalArgumentException ex) {
    }
    try {
      perm=randomData.nextPermutation(-1,-3);
      Assert.fail("permutation k < n < 0, expecting MathIllegalArgumentException");
    }
 catch (    MathIllegalArgumentException ex) {
    }
  }
}
