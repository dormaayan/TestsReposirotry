@Test public void testOneSampleTTest(){
  double[] oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};
  SummaryStatistics oneSidedPStats=new SummaryStatistics();
  for (int i=0; i < oneSidedP.length; i++) {
    oneSidedPStats.addValue(oneSidedP[i]);
  }
  Assert.assertEquals("one sample t stat",3.86485535541,TestUtils.t(0d,oneSidedP),10E-10);
  Assert.assertEquals("one sample t stat",3.86485535541,TestUtils.t(0d,oneSidedPStats),1E-10);
  Assert.assertEquals("one sample p value",0.000521637019637,TestUtils.tTest(0d,oneSidedP) / 2d,10E-10);
  Assert.assertEquals("one sample p value",0.000521637019637,TestUtils.tTest(0d,oneSidedPStats) / 2d,10E-5);
  Assert.assertTrue("one sample t-test reject",TestUtils.tTest(0d,oneSidedP,0.01));
  Assert.assertTrue("one sample t-test reject",TestUtils.tTest(0d,oneSidedPStats,0.01));
  Assert.assertTrue("one sample t-test accept",!TestUtils.tTest(0d,oneSidedP,0.0001));
  Assert.assertTrue("one sample t-test accept",!TestUtils.tTest(0d,oneSidedPStats,0.0001));
  try {
    TestUtils.tTest(0d,oneSidedP,95);
    Assert.fail("alpha out of range, OutOfRangeException expected");
  }
 catch (  OutOfRangeException ex) {
  }
  try {
    TestUtils.tTest(0d,oneSidedPStats,95);
    Assert.fail("alpha out of range, OutOfRangeException expected");
  }
 catch (  OutOfRangeException ex) {
  }
}
