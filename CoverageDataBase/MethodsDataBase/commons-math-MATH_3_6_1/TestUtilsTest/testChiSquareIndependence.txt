@Test public void testChiSquareIndependence(){
  long[][] counts={{40,22,43},{91,21,28},{60,10,22}};
  Assert.assertEquals("chi-square test statistic",22.709027688,TestUtils.chiSquare(counts),1E-9);
  Assert.assertEquals("chi-square p-value",0.000144751460134,TestUtils.chiSquareTest(counts),1E-9);
  Assert.assertTrue("chi-square test reject",TestUtils.chiSquareTest(counts,0.0002));
  Assert.assertTrue("chi-square test accept",!TestUtils.chiSquareTest(counts,0.0001));
  long[][] counts2={{10,15},{30,40},{60,90}};
  Assert.assertEquals("chi-square test statistic",0.168965517241,TestUtils.chiSquare(counts2),1E-9);
  Assert.assertEquals("chi-square p-value",0.918987499852,TestUtils.chiSquareTest(counts2),1E-9);
  Assert.assertTrue("chi-square test accept",!TestUtils.chiSquareTest(counts2,0.1));
  long[][] counts3={{40,22,43},{91,21,28},{60,10}};
  try {
    TestUtils.chiSquare(counts3);
    Assert.fail("Expecting DimensionMismatchException");
  }
 catch (  DimensionMismatchException ex) {
  }
  long[][] counts4={{40,22,43}};
  try {
    TestUtils.chiSquare(counts4);
    Assert.fail("Expecting DimensionMismatchException");
  }
 catch (  DimensionMismatchException ex) {
  }
  long[][] counts5={{40},{40},{30},{10}};
  try {
    TestUtils.chiSquare(counts5);
    Assert.fail("Expecting DimensionMismatchException");
  }
 catch (  DimensionMismatchException ex) {
  }
  long[][] counts6={{10,-2},{30,40},{60,90}};
  try {
    TestUtils.chiSquare(counts6);
    Assert.fail("Expecting NotPositiveException");
  }
 catch (  NotPositiveException ex) {
  }
  try {
    TestUtils.chiSquareTest(counts,0);
    Assert.fail("Expecting OutOfRangeException");
  }
 catch (  OutOfRangeException ex) {
  }
}
