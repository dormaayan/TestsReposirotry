@Override @Test public void testSqrt(){
  test(field.newDfp("0").sqrt(),field.newDfp("0"),0,"Sqrt #1");
  test(field.newDfp("-0").sqrt(),field.newDfp("-0"),0,"Sqrt #2");
  test(field.newDfp("1").sqrt(),field.newDfp("1"),0,"Sqrt #3");
  test(field.newDfp("2").sqrt(),field.newDfp("1.4142135623730950"),DfpField.FLAG_INEXACT,"Sqrt #4");
  test(field.newDfp("3").sqrt(),field.newDfp("1.7320508075688773"),DfpField.FLAG_INEXACT,"Sqrt #5");
  test(field.newDfp("5").sqrt(),field.newDfp("2.2360679774997897"),DfpField.FLAG_INEXACT,"Sqrt #6");
  test(field.newDfp("500").sqrt(),field.newDfp("22.3606797749978970"),DfpField.FLAG_INEXACT,"Sqrt #6.2");
  test(field.newDfp("50000").sqrt(),field.newDfp("223.6067977499789696"),DfpField.FLAG_INEXACT,"Sqrt #6.3");
  test(field.newDfp("-1").sqrt(),nan,DfpField.FLAG_INVALID,"Sqrt #7");
  test(pinf.sqrt(),pinf,0,"Sqrt #8");
  test(field.newDfp((byte)1,Dfp.QNAN).sqrt(),nan,0,"Sqrt #9");
  test(field.newDfp((byte)1,Dfp.SNAN).sqrt(),nan,DfpField.FLAG_INVALID,"Sqrt #9");
}
