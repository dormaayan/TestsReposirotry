@Test public void testReciprocal(){
  test(nan.reciprocal(),nan,0,"Reciprocal #1");
  test(field.newDfp("0").reciprocal(),pinf,DfpField.FLAG_DIV_ZERO,"Reciprocal #2");
  test(field.newDfp("-0").reciprocal(),ninf,DfpField.FLAG_DIV_ZERO,"Reciprocal #3");
  test(field.newDfp("3").reciprocal(),field.newDfp("0.33333333333333333333"),DfpField.FLAG_INEXACT,"Reciprocal #4");
  test(field.newDfp("6").reciprocal(),field.newDfp("0.16666666666666666667"),DfpField.FLAG_INEXACT,"Reciprocal #5");
  test(field.newDfp("1").reciprocal(),field.newDfp("1"),0,"Reciprocal #6");
  test(field.newDfp("-1").reciprocal(),field.newDfp("-1"),0,"Reciprocal #7");
  test(pinf.reciprocal(),field.newDfp("0"),0,"Reciprocal #8");
  test(ninf.reciprocal(),field.newDfp("-0"),0,"Reciprocal #9");
}
