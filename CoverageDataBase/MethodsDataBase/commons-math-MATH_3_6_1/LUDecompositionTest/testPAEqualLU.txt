/** 
 * test PA = LU 
 */
@Test public void testPAEqualLU(){
  RealMatrix matrix=MatrixUtils.createRealMatrix(testData);
  LUDecomposition lu=new LUDecomposition(matrix);
  RealMatrix l=lu.getL();
  RealMatrix u=lu.getU();
  RealMatrix p=lu.getP();
  double norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();
  Assert.assertEquals(0,norm,normTolerance);
  matrix=MatrixUtils.createRealMatrix(testDataMinus);
  lu=new LUDecomposition(matrix);
  l=lu.getL();
  u=lu.getU();
  p=lu.getP();
  norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();
  Assert.assertEquals(0,norm,normTolerance);
  matrix=MatrixUtils.createRealIdentityMatrix(17);
  lu=new LUDecomposition(matrix);
  l=lu.getL();
  u=lu.getU();
  p=lu.getP();
  norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();
  Assert.assertEquals(0,norm,normTolerance);
  matrix=MatrixUtils.createRealMatrix(singular);
  lu=new LUDecomposition(matrix);
  Assert.assertFalse(lu.getSolver().isNonSingular());
  Assert.assertNull(lu.getL());
  Assert.assertNull(lu.getU());
  Assert.assertNull(lu.getP());
  matrix=MatrixUtils.createRealMatrix(bigSingular);
  lu=new LUDecomposition(matrix);
  Assert.assertFalse(lu.getSolver().isNonSingular());
  Assert.assertNull(lu.getL());
  Assert.assertNull(lu.getU());
  Assert.assertNull(lu.getP());
}
