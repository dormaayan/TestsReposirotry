--------------------------------- Test #1 ---------------------------------
@Test
  public void testSkipExhausted() {
    leastActiveBalancingPolicy = new LeastActiveBalancingPolicy();
    assertEquals(poolWith7Active, leastActiveBalancingPolicy.getPool(pools, new HashSet<CassandraHost>(Arrays.asList(new CassandraHost("127.0.0.1:9160")))));
    assertEquals(poolWith5Active, leastActiveBalancingPolicy.getPool(pools, new HashSet<CassandraHost>(Arrays.asList(new CassandraHost("127.0.0.2:9161")))));
  }


------- MetaData------
Project: hector-core
Class: LeastActiveBalancingPolicyTest
Coverage: 0.7% (434/58,043)
Total-Coverage: 

--------------------------------- Test #2 ---------------------------------
@Test public void should_succeed_since_actual_is_not_zero_whatever_custom_comparison_strategy_is(){
  floatsWithAbsValueComparisonStrategy.assertIsZero(someInfo(),0.0f);
}


------- MetaData------
Project: asserts - core
Class: Floats_assertIsZero_Test
Coverage: 0.1% (420/393,738)
Total-Coverage:

--------------------------------- Test #3 ---------------------------------
@Test public void getWithAndroidUriUrl(){
class Example {
    @GET Call<ResponseBody> method(    @Url Uri url){
      return null;
    }
  }
  Request request=buildRequest(Example.class,Uri.parse("foo/bar/"));
  assertThat(request.method()).isEqualTo("GET");
  assertThat(request.headers().size()).isZero();
  assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/");
  assertThat(request.body()).isNull();
}



------- MetaData------
Project: retrofit-parent-2.0.0-beta3
Class: Floats_assertIsZero_Test
Coverage: 0.0% (0/14,354)
Total-Coverage:

--------------------------------- Test #4 ---------------------------------
@Test public void testLineLimitForFoldedHeader() throws Exception {
  final SessionInputBuffer inbuf=new SessionInputBufferImpl(1024,128,Consts.ASCII);
  final MessageConstraints constraints=MessageConstraints.custom().setMaxHeaderCount(2).setMaxLineLength(15).build();
  final NHttpMessageParser<HttpRequest> requestParser=new DefaultHttpRequestParser(inbuf,constraints);
  try {
    requestParser.fillBuffer(newChannel("GET / HTTP/1.0\r\nHeader: 9012345\r\n" + " 23456789012345\r\n 23456789012345\r\n 23456789012345\r\n\r\n"));
    requestParser.parse();
    Assert.fail("IOException should have been thrown");
  }
 catch (  final IOException expected) {
  }
}



------- MetaData------
Project: httpcomponents-core-4.4.11
Class: TestHttpMessageParser
Coverage: 1.3% (792/61,750)
Total-Coverage:

--------------------------------- Test #5 ---------------------------------
@Test public void testExecuteUpdateStringStringArray() throws Exception {
  try {
    delegate.executeUpdate("foo",(String[])null);
  }
 catch (  final SQLException e) {
  }
  verify(obj,times(1)).executeUpdate("foo",(String[])null);
}




------- MetaData------
Project: commons-dbcp-commons-dbcp-2.5.0
Class: TestDelegatingStatement
Coverage: 0.3% (206/59,075)
Total-Coverage:

--------------------------------- Test #6 ---------------------------------
@Test public void testWrite_singleByte_overwriting() throws IOException {
  JimfsOutputStream out=newOutputStream(false);
  addBytesToStore(out,9,8,7,6,5,4,3);
  out.write(1);
  out.write(2);
  out.write(3);
  assertStoreContains(out,1,2,3,6,5,4,3);
}

------- MetaData------
Project: jimfs-1.1
Class: JimfsOutputStreamTest
Coverage: 1.3% (667/49,825)
Total-Coverage:

--------------------------------- Test #7 ---------------------------------
@Test public void testEquals() throws Exception {
  UnaryAnd<Object> p=new UnaryAnd<Object>();
  assertEquals(p,p);
  UnaryAnd<Object> q=new UnaryAnd<Object>();
  assertObjectsAreEqual(p,q);
  for (int i=0; i < 3; i++) {
    p.and(Constant.truePredicate());
    assertObjectsAreNotEqual(p,q);
    q.and(Constant.truePredicate());
    assertObjectsAreEqual(p,q);
    p.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
    assertObjectsAreNotEqual(p,q);
    q.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
    assertObjectsAreEqual(p,q);
  }
  assertObjectsAreNotEqual(p,Constant.truePredicate());
}

------- MetaData------
Project: commons-functor-FUNCTOR_1_0_RC1
Class: TestUnaryAnd
Coverage: 0.8% (299/34,899)
Total-Coverage:

--------------------------------- Test #8 ---------------------------------
@Test public void indexOutOfBoundsExceptioWhenUsingBlockParametersOnAnEmptyList() throws IOException {
  shouldCompileTo("{{#each users as |user userId|}}\n" + "  Id: {{userId}} Name: {{user.name}} <BR>\n" + "{{/each}}",$("hash",$("users",Arrays.asList())),"");
}


------- MetaData------
Project: handlebars.java-4.1.2
Class: Hbs530
Coverage: 10% (5,574/55,813)
Total-Coverage:

--------------------------------- Test #9 ---------------------------------
@Test public void testJoin(){
  Set<String> elements=new LinkedHashSet<String>();
  String separator=",";
  elements.add("world");
  elements.add("peace");
  String join=CORSFilter.join(elements,separator);
  Assert.assertTrue("world,peace".equals(join));
}


------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CORSFilterTest
Coverage: 5% (228/4,333)
Total-Coverage:

--------------------------------- Test #10 ---------------------------------
@Test public void testUsAscii(){
  Assert.assertEquals("US-ASCII",Charsets.US_ASCII.name());
}


------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CharsetsTestCase
Coverage: 0% (21/84,517)
Total-Coverage:

--------------------------------- Test #11 --------------------------------
@Test public void testTokenization7() throws Exception {
  final Tokenizer tokenizer=new Tokenizer("---++-3",null,null,null);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"+",1,Operator.PRECEDENCE_UNARY_PLUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"+",1,Operator.PRECEDENCE_UNARY_PLUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertNumberToken(tokenizer.nextToken(),3d);
  assertFalse(tokenizer.hasNext());
}



------- MetaData------
Project:
Class: TokenizerTest
Coverage: 4.7% (720/15,346)
Total-Coverage:

--------------------------------- Test #12 --------------------------------
@Test public void getStatus_ReturnsStatus(){
  Result result=features.get(0).getElements()[0].getSteps()[1].getResult();
  Status status=result.getStatus();
  assertThat(status).isEqualTo(Status.PASSED);
}



------- MetaData------
Project: cucumber-reporting-cucumber-reporting-4.3.0
Class: ResultTest
Coverage: 9.6% (2,080/21,594)
Total-Coverage:

--------------------------------- Test #13 --------------------------------
/** 
 * See https://issues.apache.org/jira/browse/EMPIREDB-151
 */
@Test public void testSequence(){
  Connection conn=dbResource.getConnection();
  DBDatabaseDriver driver=dbResource.newDriver();
  SeqDB db=new SeqDB();
  db.open(driver,dbResource.getConnection());
  DBSQLScript script=new DBSQLScript();
  db.getCreateDDLScript(db.getDriver(),script);
  script.executeAll(db.getDriver(),dbResource.getConnection(),false);
  DBRecord data=new DBRecord();
  data.create(db.DATA);
  data.setValue(db.DATA.VALUE,"test");
  data.update(conn);
  final Object id=data.getLong(db.DATA.ID);
  DBRecord read=new DBRecord();
  read.read(db.DATA,id,conn);
  assertEquals("test",read.getString(db.DATA.VALUE));
  script=new DBSQLScript();
  db.getDriver().getDDLScript(DBCmdType.DROP,db.DATA,script);
  script.executeAll(db.getDriver(),conn,true);
}

------- MetaData------
Project: empire-db-apache-empire-db-2.4.7
Class: DBDatabaseDriverHSqlTest
Coverage: 10.5% (4,822/46,033)
Total-Coverage:

--------------------------------- Test #14 --------------------------------
@Test public void testIsNotSerializable(){
  assertFalse(HectorObjectMapper.isSerializable(HectorObjectMapper.class));
}


------- MetaData------
Project: hector-hector-2.0-0
Class: HectorObjectMapperTest
Coverage: 11.1% (1,276/11,471)
Total-Coverage:

--------------------------------- Test #15 --------------------------------
@SuppressWarnings("unchecked") @Test public void testAccessorsAndMutators(){
  final DefaultKeyValue<K,V> kv=makeDefaultKeyValue();
  kv.setKey((K)key);
  assertTrue(kv.getKey() == key);
  kv.setValue((V)value);
  assertTrue(kv.getValue() == value);
  kv.setKey(null);
  assertTrue(kv.getKey() == null);
  kv.setValue(null);
  assertTrue(kv.getValue() == null);
}



------- MetaData------
Project: commons-collections-collections-4.3-RC2
Class: DefaultKeyValueTest
Coverage: Generic
Total-Coverage:

--------------------------------- Test #16 --------------------------------
@Test public void testAdaptNonNull(){
  assertNotNull(IteratorToGeneratorAdapter.adapt(list.iterator()));
}




------- MetaData------
Project: commons-functor-FUNCTOR_1_0_RC1
Class: TestIteratorToGeneratorAdapter
Coverage: 0.2% (68/35,198)
Total-Coverage:


--------------------------------- Test #17 --------------------------------
@Test public void testIterator(){
  RealVector u=createVector();
  Iterator<Entry> i=u.iterator();
  RealVector v=RealVector.unmodifiableRealVector(u.copy());
  Iterator<Entry> j=v.iterator();
  boolean flag;
  while (i.hasNext()) {
    Assert.assertTrue(j.hasNext());
    Entry exp=i.next();
    Entry act=j.next();
    Assert.assertTrue(equals(exp.getIndex(),act.getIndex()));
    Assert.assertTrue(equals(exp.getValue(),act.getValue()));
    exp.setIndex(RANDOM.nextInt(DIM));
    act.setIndex(RANDOM.nextInt(DIM));
    flag=false;
    try {
      act.setValue(RANDOM.nextDouble());
    }
 catch (    MathUnsupportedOperationException e) {
      flag=true;
    }
    Assert.assertTrue("exception should have been thrown",flag);
  }
  Assert.assertFalse(j.hasNext());
}




------- MetaData------
Project: commons-functor-FUNCTOR_1_0_RC1
Class: UnmodifiableRealVectorAbstractTest
Coverage: Abstract
Total-Coverage:

--------------------------------- Test #18 --------------------------------
@Test public void full() throws IOException {
  File input=new File("src/test/resources/org/raml/v2/api/v10/full/input.raml");
  assertTrue(input.isFile());
  RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input);
  assertFalse(ramlModelResult.hasErrors());
  Api api=ramlModelResult.getApiV10();
  assertApi(api);
}




------- MetaData------
Project: raml-parser-2
Class: SpecInterfacesV10TestCase
Coverage: 41.7% (14,743/35,388)
Total-Coverage:

--------------------------------- Test #18 --------------------------------
@Test public void testCleanDirectory(){
  File testChildren=new File(testParent,"this/is/a/test");
  boolean success=testChildren.mkdirs();
  assertTrue("Could not create test folder",success);
  FileUtils.cleanDirectory(testParent);
  assertTrue("Parent was deleted",testParent.exists());
  assertEquals(0,testParent.list().length);
}




------- MetaData------
Project: empire-db-apache-empire-db-2.4.7
Class: FileUtilsTest
Coverage: 3.7% (140/3,765)
Total-Coverage:

--------------------------------- Test #19 --------------------------------
@Test public void testConnectionPool() throws Exception {
  final Connection c=pool.borrowObject();
  assertNotNull("Connection should be created and should not be null",c);
  assertEquals("There should be exactly one active object in the pool",1,pool.getNumActive());
  c.close();
  assertEquals("There should now be zero active objects in the pool",0,pool.getNumActive());
}


------- MetaData------
Project: commons-dbcp-commons-dbcp-2.5.0
Class: TestPoolableConnection
Coverage: 1.1% (670/59,281)
Total-Coverage:


--------------------------------- Test #20 --------------------------------
@Test public void backward() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
  TestProblem5 pb=new TestProblem5();
  double range=FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
  FirstOrderIntegrator integ=new AdamsMoultonIntegrator(4,0,range,1.0e-12,1.0e-12);
  TestProblemHandler handler=new TestProblemHandler(pb,integ);
  integ.addStepHandler(handler);
  integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
  Assert.assertTrue(handler.getLastError() < 3.0e-9);
  Assert.assertTrue(handler.getMaximalValueError() < 3.0e-9);
  Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-16);
  Assert.assertEquals("Adams-Moulton",integ.getName());
}



------- MetaData------
Project: commons-math-MATH_3_6_1
Class: AdamsMoultonIntegratorTest
Coverage: 5.0% (47,399/948,824)
Total-Coverage:

--------------------------------- Test #21 --------------------------------
@Test public void prepareReport_AddsCustomProperties(){
  Exception exception=new Exception();
  page=new ErrorPage(null,configuration,exception,jsonReports);
  page.prepareReport();
  VelocityContext context=page.context;
  assertThat(context.getKeys()).hasSize(11);
  assertThat(context.get("classifications")).isInstanceOf(List.class);
  assertThat(context.get("output_message")).isEqualTo(ExceptionUtils.getStackTrace(exception));
  assertThat(context.get("json_files")).isEqualTo(jsonReports);
}


------- MetaData------
Project: cucumber-reporting-cucumber-reporting-4.3.0
Class: ErrorPageTest
Coverage: 11.0% (2,380/21,594)
Total-Coverage:

--------------------------------- Test #22 --------------------------------
@Test public void testCreateColumn(){
  long clock=HFactory.createClock();
  HColumn<String,Long> col=HFactory.createColumn("nameString",new Long("345"),clock);
  HColumn<String,Long> col2=HFactory.createColumn("nameString",new Long("345"),clock,StringSerializer.get(),LongSerializer.get());
  assertEquals(col.getName(),col2.getName());
  assertEquals(col.getValue(),col2.getValue());
  assertEquals(col.getClock(),col2.getClock());
}


------- MetaData------
Project: hector-hector-2.0-0
Class: HFactoryTest
Coverage: 0.7% (382/58,043)
Total-Coverage:

--------------------------------- Test #23 --------------------------------
@Test public void testNullKeyInList(){
  MultigetSliceQuery<String,String,Long> msq=HFactory.createMultigetSliceQuery(keyspace,se,se,le);
  msq.setColumnFamily(cf);
  msq.setKeys("multigetSliceTest_key1",null);
  msq.setColumnNames("birthyear");
  QueryResult<Rows<String,String,Long>> result=msq.execute();
  assertEquals(1,result.get().getCount());
 

------- MetaData------
Project: hector-hector-2.0-0
Class: MultigetSliceQueryTest
Coverage: 5.9% (3,436/58,043)
Total-Coverage:

--------------------------------- Test #24 --------------------------------
@Test public void testHelpPage() throws Exception {
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  createSubparser(generateDocsCommand).printHelp(new PrintWriter(new OutputStreamWriter(baos,UTF_8),true));
  assertThat(baos.toString(UTF_8)).isEqualTo(String.format("usage: db generate-docs [-h] [--migrations MIGRATIONS-FILE]%n" + "          [--catalog CATALOG] [--schema SCHEMA] [file] output%n" + "%n"+ "Generate documentation about the database state.%n"+ "%n"+ "positional arguments:%n"+ "  file                   application configuration file%n"+ "  output                 output directory%n"+ "%n"+ "named arguments:%n"+ "  -h, --help             show this help message and exit%n"+ "  --migrations MIGRATIONS-FILE%n"+ "                         the file containing  the  Liquibase migrations for%n"+ "                         the application%n"+ "  --catalog CATALOG      Specify  the   database   catalog   (use  database%n"+ "                         default if omitted)%n"+ "  --schema SCHEMA        Specify the database schema  (use database default%n"+ "                         if omitted)%n"));
}



------- MetaData------
Project: dropwizard-1.3.8
Class: DbGenerateDocsCommandTest
Coverage: 3.1% (145/4,623) [dropwizard-migration)
Total-Coverage:

--------------------------------- Test #25 --------------------------------
@Test public void testCharacterCount(){
  assertEquals(10,Mode.NUMERIC.getCharacterCountBits(Version.getVersionForNumber(5)));
  assertEquals(12,Mode.NUMERIC.getCharacterCountBits(Version.getVersionForNumber(26)));
  assertEquals(14,Mode.NUMERIC.getCharacterCountBits(Version.getVersionForNumber(40)));
  assertEquals(9,Mode.ALPHANUMERIC.getCharacterCountBits(Version.getVersionForNumber(6)));
  assertEquals(8,Mode.BYTE.getCharacterCountBits(Version.getVersionForNumber(7)));
  assertEquals(8,Mode.KANJI.getCharacterCountBits(Version.getVersionForNumber(8)));
}



------- MetaData------
Project:  zxing-BS-4.7.8
Class: ModeTestCase
Coverage: 3.4% (5,412/159,541)
Total-Coverage:

--------------------------------- Test #26 --------------------------------
@Test public void withoutStringResult() throws IOException {
  shouldCompileTo("{{lambda}}",$("lambda",new Lambda<Object,Number>(){
    @Override public Number apply(    final Object context,    final Template template) throws IOException {
      return 3.5D;
    }
  }
),"3.5");
}




------- MetaData------
Project: handlebars.java-4.1.2
Class: LambdaTest
Coverage: 7.8% (4,372/55,813)
Total-Coverage:

--------------------------------- Test #27 --------------------------------
@Test public void testMatching_escapes(){
  assertThat("\\\\").matches("\\");
  assertThat("\\*").matches("*");
  assertThat("\\*\\*").matches("**");
  assertThat("\\[").matches("[");
  assertThat("\\{").matches("{");
  assertThat("\\a").matches("a");
  assertThat("{a,\\}}").matches("a","}");
  assertThat("{a\\,,b}").matches("a,","b").doesNotMatch("a",",");
}



------- MetaData------
Project: handlebars.java-4.1.2
Class: AbstractGlobMatcherTest
Coverage: Abstract
Total-Coverage:

--------------------------------- Test #28 --------------------------------
@Test public void failFourYearsValidation(){
  DateUtils.FOUR_YEARS_VALIDATION=true;
  RamlModelResult ramlModelResult=getDateTimeApi();
  assertThat(ramlModelResult.hasErrors(),is(true));
}




------- MetaData------
Project: raml-java-parser-1.0.29
Class: SystemPropertiesTestCase
Coverage: 17.4% (6,150/35,388), (yagi, 29.3 2,925/9,976)
Total-Coverage:

--------------------------------- Test #29 --------------------------------
@Test public void testFutureEvaluation() throws Exception {
  ExecutorService exec=Executors.newFixedThreadPool(10);
  int numTests=10000;
  double[] correct1=new double[numTests];
  Future[] results1=new Future[numTests];
  double[] correct2=new double[numTests];
  Future[] results2=new Future[numTests];
  for (int i=0; i < numTests; i++) {
    correct1[i]=Math.sin(2 * Math.PI / (i + 1));
    results1[i]=new ExpressionBuilder("sin(2pi/(n+1))").variables("pi","n").build().setVariable("pi",Math.PI).setVariable("n",i).evaluateAsync(exec);
    correct2[i]=Math.log(Math.E * Math.PI * (i + 1));
    results2[i]=new ExpressionBuilder("log(epi(n+1))").variables("pi","n","e").build().setVariable("pi",Math.PI).setVariable("e",Math.E).setVariable("n",i).evaluateAsync(exec);
  }
  for (int i=0; i < numTests; i++) {
    assertEquals(correct1[i],(Double)results1[i].get(),0d);
    assertEquals(correct2[i],(Double)results2[i].get(),0d);
  }
}


------- MetaData------
Project: exp4j-exp4j-0.4.8
Class: ConcurrencyTests
Coverage: 13.2% (2,024/15,346)
Total-Coverage:

--------------------------------- Test #30 --------------------------------
@Test public void ArrayOfString(){
  final StringNodeImpl expression=new StringNodeImpl("string[]");
  final Node user=new TypeExpressionReferenceFactory().create(expression,expression.getLiteralValue());
  final String dump=new RamlTreeNodeDumper().dump(user).trim();
  Assert.assertThat(dump,equalTo("ArrayTypeExpressionNode: string[] (Start: -1 , End: 7)\n" + "    NativeTypeExpressionNode: \"string\" (Start: -1 , End: 5)"));
}


------- MetaData------
Project: raml-java-parser-1.0.29
Class: TypeExpressionReferenceFactoryTestCase
Coverage: 1.3% (475/35,388), (yagi, 3.8 377/9,976)
Total-Coverage:

--------------------------------- Test #31 --------------------------------
@Test public void testAddArgument(){
  final CommandLine cmdl=new CommandLine("test");
  cmdl.addArgument("foo");
  cmdl.addArgument("bar");
  assertEquals("[test, foo, bar]",cmdl.toString());
  assertArrayEquals(new String[]{"test","foo","bar"},cmdl.toStrings());
}



------- MetaData------
Project: commons-exec-1.3
Class: CommandLineTest
Coverage: 3.5% (289/8,197)
Total-Coverage:

--------------------------------- Test #32 --------------------------------
@Test @Ignore public void testToIntegerBytes(){
  fail("Not yet implemented");
}



------- MetaData------
Project: commons-net-NET_3_6
Class: Base64Test
Coverage: Ignored
Total-Coverage:

--------------------------------- Test #33 --------------------------------
@Test public void testRetainMultipleTypes(){
  Iterable<Object> objects=Arrays.asList((Object)"foo","bar","baz",2L,BigInteger.ZERO);
  Iterator<Object> iterator=FilteredIterable.of(objects).retain(Long.class,BigInteger.class).iterator();
  assertEquals(2L,iterator.next());
  assertEquals(BigInteger.ZERO,iterator.next());
  assertFalse(iterator.hasNext());
}



------- MetaData------
Project: commons-functor-FUNCTOR_1_0_RC1
Class: TestFilteredIterable
Coverage: 1.1% (371/35,198)
Total-Coverage:

--------------------------------- Test #34 --------------------------------
@Test public void testJoinSingleElement(){
  Set<String> elements=new LinkedHashSet<String>();
  String separator=",";
  elements.add("world");
  String join=CORSFilter.join(elements,separator);
  Assert.assertTrue("world".equals(join));
}




------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CORSFilterTest
Coverage: 4.8% (219/4,561)
Total-Coverage:

--------------------------------- Test #35 --------------------------------
@SuppressWarnings("boxing") @Test public void testProduceContentEncoderNotCompleted() throws Exception {
  when(encoder.isCompleted()).thenReturn(Boolean.FALSE);
  producer.produceContent(encoder,null);
  verify(contentProducer,times(0)).close();
}


------- MetaData------
Project: httpcomponents-core-4.4.11
Class: TestBasicAsyncRequestProducer
Coverage: httpcore (0.1% 62 / 58,248) httpcore-nio (0.1% 82/58,732)
Total-Coverage: 

--------------------------------- Test #36 --------------------------------
@Test public void formatsFullURIs() throws Exception {
  assertThat(Servlets.getFullUrl(fullRequest)).isEqualTo("/one/two?one=two&three=four");
}


------- MetaData------
Project: dropwizard-1.3.8
Class: ServletsTest
Coverage: (dropwizard-servlets 1.3 % 59/4,674)
Total-Coverage:

--------------------------------- Test #37 --------------------------------
@Test public void testSupportsNonAsciiTags(){
  String body="<進捗推移グラフ>Yes</進捗推移グラフ><русский-тэг>Correct</<русский-тэг>";
  Document doc=Jsoup.parse(body);
  Elements els=doc.select("進捗推移グラフ");
  assertEquals("Yes",els.text());
  els=doc.select("русский-тэг");
  assertEquals("Correct",els.text());
}


------- MetaData------
Project: jsoup-jsoup-1.11.3
Class: HtmlParserTest
Coverage: 12.5% (7,390/59,326)
Total-Coverage:

--------------------------------- Test #38 --------------------------------
@Test public void testIsEmpty(){
  ArrayStack stack=new ArrayStack(5);
  assertTrue(stack.isEmpty());
  stack.push(4);
  assertFalse(stack.isEmpty());
  stack.push(4);
  assertFalse(stack.isEmpty());
  stack.push(4);
  assertFalse(stack.isEmpty());
  stack.pop();
  stack.pop();
  stack.pop();
  assertTrue(stack.isEmpty());
  stack.push(4);
  assertFalse(stack.isEmpty());
  stack.peek();
  assertFalse(stack.isEmpty());
  stack.pop();
  assertTrue(stack.isEmpty());
}


------- MetaData------
Project: exp4j-exp4j-0.4.8
Class: ArrayStackTest
Coverage: 0.8% (125/15,346)
Total-Coverage:

--------------------------------- Test #39 --------------------------------
/** 
 * Tests if a GET request is treated as simple request.
 * @See http://www.w3.org/TR/cors/#simple-method
 * @throws IOException
 * @throws ServletException
 */
@Test public void testDoFilterSimpleGET() throws IOException, ServletException {
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setHeader(CORSFilter.REQUEST_HEADER_ORIGIN,TestConfigs.HTTPS_WWW_APACHE_ORG);
  request.setMethod("GET");
  MockHttpServletResponse response=new MockHttpServletResponse();
  CORSFilter corsFilter=new CORSFilter();
  corsFilter.init(TestConfigs.getDefaultFilterConfig());
  corsFilter.doFilter(request,response,filterChain);
  Assert.assertTrue(response.getHeader(CORSFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("https://www.apache.org"));
  Assert.assertTrue((Boolean)request.getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));
  Assert.assertTrue(request.getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(TestConfigs.HTTPS_WWW_APACHE_ORG));
  Assert.assertTrue(request.getAttribute(CORSFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(CORSFilter.CORSRequestType.SIMPLE.name().toLowerCase()));
}



------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CORSFilterTest
Coverage: 20.7% (944/4,561)
Total-Coverage:

--------------------------------- Test #40 --------------------------------
@Test public void testConstants(){
  assertNotNull(new Constants());
  assertEquals(",connectionpool=",Constants.JMX_CONNECTION_POOL_BASE_EXT);
  assertEquals("connections",Constants.JMX_CONNECTION_POOL_PREFIX);
  assertEquals(",connectionpool=connections,connection=",Constants.JMX_CONNECTION_BASE_EXT);
  assertEquals(",connectionpool=connections,connection=",Constants.JMX_STATEMENT_POOL_BASE_EXT);
  assertEquals(",statementpool=statements",Constants.JMX_STATEMENT_POOL_PREFIX);
}




------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: TestConstants
Coverage: 20.7% (944/4,561)
Total-Coverage: