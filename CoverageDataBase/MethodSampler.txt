--------------------------------- Test #1 ---------------------------------
@Test
  public void testSkipExhausted() {
    leastActiveBalancingPolicy = new LeastActiveBalancingPolicy();
    assertEquals(poolWith7Active, leastActiveBalancingPolicy.getPool(pools, new HashSet<CassandraHost>(Arrays.asList(new CassandraHost("127.0.0.1:9160")))));
    assertEquals(poolWith5Active, leastActiveBalancingPolicy.getPool(pools, new HashSet<CassandraHost>(Arrays.asList(new CassandraHost("127.0.0.2:9161")))));
  }


------- MetaData------
Project: hector-core
Class: LeastActiveBalancingPolicyTest
Coverage: 0.7% (434/58,043)
Total-Coverage: 

--------------------------------- Test #2 ---------------------------------
@Test public void should_succeed_since_actual_is_not_zero_whatever_custom_comparison_strategy_is(){
  floatsWithAbsValueComparisonStrategy.assertIsZero(someInfo(),0.0f);
}


------- MetaData------
Project: asserts - core
Class: Floats_assertIsZero_Test
Coverage: 0.1% (420/393,738)
Total-Coverage:

--------------------------------- Test #3 ---------------------------------
@Test public void getWithAndroidUriUrl(){
class Example {
    @GET Call<ResponseBody> method(    @Url Uri url){
      return null;
    }
  }
  Request request=buildRequest(Example.class,Uri.parse("foo/bar/"));
  assertThat(request.method()).isEqualTo("GET");
  assertThat(request.headers().size()).isZero();
  assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/");
  assertThat(request.body()).isNull();
}



------- MetaData------
Project: retrofit-parent-2.0.0-beta3
Class: Floats_assertIsZero_Test
Coverage: 0.0% (0/14,354)
Total-Coverage:

--------------------------------- Test #4 ---------------------------------
@Test public void testLineLimitForFoldedHeader() throws Exception {
  final SessionInputBuffer inbuf=new SessionInputBufferImpl(1024,128,Consts.ASCII);
  final MessageConstraints constraints=MessageConstraints.custom().setMaxHeaderCount(2).setMaxLineLength(15).build();
  final NHttpMessageParser<HttpRequest> requestParser=new DefaultHttpRequestParser(inbuf,constraints);
  try {
    requestParser.fillBuffer(newChannel("GET / HTTP/1.0\r\nHeader: 9012345\r\n" + " 23456789012345\r\n 23456789012345\r\n 23456789012345\r\n\r\n"));
    requestParser.parse();
    Assert.fail("IOException should have been thrown");
  }
 catch (  final IOException expected) {
  }
}



------- MetaData------
Project: httpcomponents-core-4.4.11
Class: TestHttpMessageParser
Coverage: 1.3% (792/61,750)
Total-Coverage:

--------------------------------- Test #5 ---------------------------------
@Test public void testExecuteUpdateStringStringArray() throws Exception {
  try {
    delegate.executeUpdate("foo",(String[])null);
  }
 catch (  final SQLException e) {
  }
  verify(obj,times(1)).executeUpdate("foo",(String[])null);
}




------- MetaData------
Project: commons-dbcp-commons-dbcp-2.5.0
Class: TestDelegatingStatement
Coverage: 0.3% (206/59,075)
Total-Coverage:

--------------------------------- Test #6 ---------------------------------
@Test public void testWrite_singleByte_overwriting() throws IOException {
  JimfsOutputStream out=newOutputStream(false);
  addBytesToStore(out,9,8,7,6,5,4,3);
  out.write(1);
  out.write(2);
  out.write(3);
  assertStoreContains(out,1,2,3,6,5,4,3);
}

------- MetaData------
Project: jimfs-1.1
Class: JimfsOutputStreamTest
Coverage: 1.3% (667/49,825)
Total-Coverage:

--------------------------------- Test #7 ---------------------------------
@Test public void testEquals() throws Exception {
  UnaryAnd<Object> p=new UnaryAnd<Object>();
  assertEquals(p,p);
  UnaryAnd<Object> q=new UnaryAnd<Object>();
  assertObjectsAreEqual(p,q);
  for (int i=0; i < 3; i++) {
    p.and(Constant.truePredicate());
    assertObjectsAreNotEqual(p,q);
    q.and(Constant.truePredicate());
    assertObjectsAreEqual(p,q);
    p.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
    assertObjectsAreNotEqual(p,q);
    q.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
    assertObjectsAreEqual(p,q);
  }
  assertObjectsAreNotEqual(p,Constant.truePredicate());
}

------- MetaData------
Project: commons-functor-FUNCTOR_1_0_RC1
Class: TestUnaryAnd
Coverage: 0.8% (299/34,899)
Total-Coverage:

--------------------------------- Test #8 ---------------------------------
@Test public void indexOutOfBoundsExceptioWhenUsingBlockParametersOnAnEmptyList() throws IOException {
  shouldCompileTo("{{#each users as |user userId|}}\n" + "  Id: {{userId}} Name: {{user.name}} <BR>\n" + "{{/each}}",$("hash",$("users",Arrays.asList())),"");
}


------- MetaData------
Project: handlebars.java-4.1.2
Class: Hbs530
Coverage: 10% (5,574/55,813)
Total-Coverage:

--------------------------------- Test #9 ---------------------------------
@Test public void testJoin(){
  Set<String> elements=new LinkedHashSet<String>();
  String separator=",";
  elements.add("world");
  elements.add("peace");
  String join=CORSFilter.join(elements,separator);
  Assert.assertTrue("world,peace".equals(join));
}


------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CORSFilterTest
Coverage: 5% (228/4,333)
Total-Coverage:

--------------------------------- Test #10 ---------------------------------
@Test public void testUsAscii(){
  Assert.assertEquals("US-ASCII",Charsets.US_ASCII.name());
}


------- MetaData------
Project: cors-filter-cors-filter-1.0.1
Class: CharsetsTestCase
Coverage: 0% (21/84,517)
Total-Coverage:

--------------------------------- Test #11 --------------------------------
@Test public void testTokenization7() throws Exception {
  final Tokenizer tokenizer=new Tokenizer("---++-3",null,null,null);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"+",1,Operator.PRECEDENCE_UNARY_PLUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"+",1,Operator.PRECEDENCE_UNARY_PLUS);
  assertTrue(tokenizer.hasNext());
  assertOperatorToken(tokenizer.nextToken(),"-",1,Operator.PRECEDENCE_UNARY_MINUS);
  assertTrue(tokenizer.hasNext());
  assertNumberToken(tokenizer.nextToken(),3d);
  assertFalse(tokenizer.hasNext());
}



------- MetaData------
Project:
Class: TokenizerTest
Coverage: 4.7% (720/15,346)
Total-Coverage:

--------------------------------- Test #12 --------------------------------
@Test public void getStatus_ReturnsStatus(){
  Result result=features.get(0).getElements()[0].getSteps()[1].getResult();
  Status status=result.getStatus();
  assertThat(status).isEqualTo(Status.PASSED);
}



------- MetaData------
Project: cucumber-reporting-cucumber-reporting-4.3.0
Class: ResultTest
Coverage: 4.7% (720/14,626)
Total-Coverage:

