/** 
 * Tests for what happens when a file system is closed.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class JimfsFileSystemCloseTest {
  private JimfsFileSystem fs=(JimfsFileSystem)Jimfs.newFileSystem(Configuration.unix());
  @Test public void testIsNotOpen() throws IOException {
    assertTrue(fs.isOpen());
    fs.close();
    assertFalse(fs.isOpen());
  }
  @Test public void testIsNotAvailableFromProvider() throws IOException {
    URI uri=fs.getUri();
    assertEquals(fs,FileSystems.getFileSystem(uri));
    fs.close();
    try {
      FileSystems.getFileSystem(uri);
      fail();
    }
 catch (    FileSystemNotFoundException expected) {
    }
  }
  @Test public void testOpenStreamsClosed() throws IOException {
    Path p=fs.getPath("/foo");
    OutputStream out=Files.newOutputStream(p);
    InputStream in=Files.newInputStream(p);
    out.write(1);
    assertEquals(1,in.read());
    fs.close();
    try {
      out.write(1);
      fail();
    }
 catch (    IOException expected) {
      assertEquals("stream is closed",expected.getMessage());
    }
    try {
      in.read();
      fail();
    }
 catch (    IOException expected) {
      assertEquals("stream is closed",expected.getMessage());
    }
  }
  @Test public void testOpenChannelsClosed() throws IOException {
    Path p=fs.getPath("/foo");
    FileChannel fc=FileChannel.open(p,READ,WRITE,CREATE);
    SeekableByteChannel sbc=Files.newByteChannel(p,READ);
    AsynchronousFileChannel afc=AsynchronousFileChannel.open(p,READ,WRITE);
    assertTrue(fc.isOpen());
    assertTrue(sbc.isOpen());
    assertTrue(afc.isOpen());
    fs.close();
    assertFalse(fc.isOpen());
    assertFalse(sbc.isOpen());
    assertFalse(afc.isOpen());
    try {
      fc.size();
      fail();
    }
 catch (    ClosedChannelException expected) {
    }
    try {
      sbc.size();
      fail();
    }
 catch (    ClosedChannelException expected) {
    }
    try {
      afc.size();
      fail();
    }
 catch (    ClosedChannelException expected) {
    }
  }
  @Test public void testOpenDirectoryStreamsClosed() throws IOException {
    Path p=fs.getPath("/foo");
    Files.createDirectory(p);
    DirectoryStream<Path> stream=Files.newDirectoryStream(p);
    fs.close();
    try {
      stream.iterator();
      fail();
    }
 catch (    ClosedDirectoryStreamException expected) {
    }
  }
  @Test public void testOpenWatchServicesClosed() throws IOException {
    WatchService ws1=fs.newWatchService();
    WatchService ws2=fs.newWatchService();
    assertNull(ws1.poll());
    assertNull(ws2.poll());
    fs.close();
    try {
      ws1.poll();
      fail();
    }
 catch (    ClosedWatchServiceException expected) {
    }
    try {
      ws2.poll();
      fail();
    }
 catch (    ClosedWatchServiceException expected) {
    }
  }
  @Test public void testPathMethodsThrow() throws IOException {
    Path p=fs.getPath("/foo");
    Files.createDirectory(p);
    WatchService ws=fs.newWatchService();
    fs.close();
    try {
      p.register(ws,ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY);
      fail();
    }
 catch (    ClosedWatchServiceException expected) {
    }
    try {
      p=p.toRealPath();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
  }
  @Test public void testOpenFileAttributeViewsThrow() throws IOException {
    Path p=fs.getPath("/foo");
    Files.createFile(p);
    BasicFileAttributeView view=Files.getFileAttributeView(p,BasicFileAttributeView.class);
    fs.close();
    try {
      view.readAttributes();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      view.setTimes(null,null,null);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
  }
  @Test public void testFileSystemMethodsThrow() throws IOException {
    fs.close();
    try {
      fs.getPath("/foo");
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.getRootDirectories();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.getFileStores();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.getPathMatcher("glob:*.java");
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.getUserPrincipalLookupService();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.newWatchService();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      fs.supportedFileAttributeViews();
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
  }
  @Test public void testFilesMethodsThrow() throws IOException {
    Path file=fs.getPath("/file");
    Path dir=fs.getPath("/dir");
    Path nothing=fs.getPath("/nothing");
    Files.createDirectory(dir);
    Files.createFile(file);
    fs.close();
    try {
      Files.delete(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.createDirectory(nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.createFile(nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.write(nothing,ImmutableList.of("hello world"),UTF_8);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.newInputStream(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.newOutputStream(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.newByteChannel(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.newDirectoryStream(dir);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.copy(file,nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.move(file,nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.copy(dir,nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.move(dir,nothing);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.createSymbolicLink(nothing,file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.createLink(nothing,file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.exists(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.getAttribute(file,"size");
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.setAttribute(file,"lastModifiedTime",FileTime.fromMillis(0));
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.getFileAttributeView(file,BasicFileAttributeView.class);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.readAttributes(file,"basic:size,lastModifiedTime");
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.readAttributes(file,BasicFileAttributes.class);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.isDirectory(dir);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.readAllBytes(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
    try {
      Files.isReadable(file);
      fail();
    }
 catch (    ClosedFileSystemException expected) {
    }
  }
}
