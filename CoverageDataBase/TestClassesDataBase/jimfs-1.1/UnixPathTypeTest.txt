/** 
 * Tests for  {@link UnixPathType}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class UnixPathTypeTest {
  @Test public void testUnix(){
    PathType unix=PathType.unix();
    assertThat(unix.getSeparator()).isEqualTo("/");
    assertThat(unix.getOtherSeparators()).isEqualTo("");
    PathType.ParseResult path=unix.parsePath("//foo/bar");
    assertParseResult(path,"/","foo","bar");
    assertThat(unix.toString(path.root(),path.names())).isEqualTo("/foo/bar");
    PathType.ParseResult path2=unix.parsePath("foo/bar/");
    assertParseResult(path2,null,"foo","bar");
    assertThat(unix.toString(path2.root(),path2.names())).isEqualTo("foo/bar");
  }
  @Test public void testUnix_toUri(){
    URI fileUri=PathType.unix().toUri(fileSystemUri,"/",ImmutableList.of("foo","bar"),false);
    assertThat(fileUri.toString()).isEqualTo("jimfs://foo/foo/bar");
    assertThat(fileUri.getPath()).isEqualTo("/foo/bar");
    URI directoryUri=PathType.unix().toUri(fileSystemUri,"/",ImmutableList.of("foo","bar"),true);
    assertThat(directoryUri.toString()).isEqualTo("jimfs://foo/foo/bar/");
    assertThat(directoryUri.getPath()).isEqualTo("/foo/bar/");
    URI rootUri=PathType.unix().toUri(fileSystemUri,"/",ImmutableList.<String>of(),true);
    assertThat(rootUri.toString()).isEqualTo("jimfs://foo/");
    assertThat(rootUri.getPath()).isEqualTo("/");
  }
  @Test public void testUnix_toUri_escaping(){
    URI uri=PathType.unix().toUri(fileSystemUri,"/",ImmutableList.of("foo bar"),false);
    assertThat(uri.toString()).isEqualTo("jimfs://foo/foo%20bar");
    assertThat(uri.getRawPath()).isEqualTo("/foo%20bar");
    assertThat(uri.getPath()).isEqualTo("/foo bar");
  }
  @Test public void testUnix_uriRoundTrips(){
    assertUriRoundTripsCorrectly(PathType.unix(),"/");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo/bar/baz");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo/bar baz/one/two");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo bar");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo bar/");
    assertUriRoundTripsCorrectly(PathType.unix(),"/foo bar/baz/one");
  }
  @Test public void testUnix_illegalCharacters(){
    try {
      PathType.unix().parsePath("/foo/bar\0");
      fail();
    }
 catch (    InvalidPathException expected) {
      assertEquals(8,expected.getIndex());
    }
    try {
      PathType.unix().parsePath("/\u00001/foo");
      fail();
    }
 catch (    InvalidPathException expected) {
      assertEquals(1,expected.getIndex());
    }
  }
}
