/** 
 * Tests for  {@link PosixAttributeProvider}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class PosixAttributeProviderTest extends AbstractAttributeProviderTest<PosixAttributeProvider> {
  @Override protected PosixAttributeProvider createProvider(){
    return new PosixAttributeProvider();
  }
  @Override protected Set<? extends AttributeProvider> createInheritedProviders(){
    return ImmutableSet.of(new BasicAttributeProvider(),new OwnerAttributeProvider());
  }
  @Test public void testInitialAttributes(){
    assertContainsAll(file,ImmutableMap.of("group",createGroupPrincipal("group"),"permissions",PosixFilePermissions.fromString("rw-r--r--")));
  }
  @Test public void testSet(){
    assertSetAndGetSucceeds("group",createGroupPrincipal("foo"));
    assertSetAndGetSucceeds("permissions",PosixFilePermissions.fromString("rwxrwxrwx"));
    assertSetFails("permissions",ImmutableList.of(PosixFilePermission.GROUP_EXECUTE));
    assertSetFails("permissions",ImmutableSet.of("foo"));
  }
  @Test public void testSetOnCreate(){
    assertSetAndGetSucceedsOnCreate("permissions",PosixFilePermissions.fromString("rwxrwxrwx"));
    assertSetFailsOnCreate("group",createGroupPrincipal("foo"));
  }
  @Test public void testView() throws IOException {
    file.setAttribute("owner","owner",createUserPrincipal("user"));
    PosixFileAttributeView view=provider.view(fileLookup(),ImmutableMap.of("basic",new BasicAttributeProvider().view(fileLookup(),NO_INHERITED_VIEWS),"owner",new OwnerAttributeProvider().view(fileLookup(),NO_INHERITED_VIEWS)));
    assertNotNull(view);
    assertThat(view.name()).isEqualTo("posix");
    assertThat(view.getOwner()).isEqualTo(createUserPrincipal("user"));
    PosixFileAttributes attrs=view.readAttributes();
    assertThat(attrs.fileKey()).isEqualTo(0);
    assertThat(attrs.owner()).isEqualTo(createUserPrincipal("user"));
    assertThat(attrs.group()).isEqualTo(createGroupPrincipal("group"));
    assertThat(attrs.permissions()).isEqualTo(PosixFilePermissions.fromString("rw-r--r--"));
    view.setOwner(createUserPrincipal("root"));
    assertThat(view.getOwner()).isEqualTo(createUserPrincipal("root"));
    assertThat(file.getAttribute("owner","owner")).isEqualTo(createUserPrincipal("root"));
    view.setGroup(createGroupPrincipal("root"));
    assertThat(view.readAttributes().group()).isEqualTo(createGroupPrincipal("root"));
    assertThat(file.getAttribute("posix","group")).isEqualTo(createGroupPrincipal("root"));
    view.setPermissions(PosixFilePermissions.fromString("rwx------"));
    assertThat(view.readAttributes().permissions()).isEqualTo(PosixFilePermissions.fromString("rwx------"));
    assertThat(file.getAttribute("posix","permissions")).isEqualTo(PosixFilePermissions.fromString("rwx------"));
  }
  @Test public void testAttributes(){
    PosixFileAttributes attrs=provider.readAttributes(file);
    assertThat(attrs.permissions()).isEqualTo(PosixFilePermissions.fromString("rw-r--r--"));
    assertThat(attrs.group()).isEqualTo(createGroupPrincipal("group"));
    assertThat(attrs.fileKey()).isEqualTo(0);
  }
}
