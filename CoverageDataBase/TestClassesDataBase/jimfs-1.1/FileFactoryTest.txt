/** 
 * Tests for  {@link FileFactory}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class FileFactoryTest {
  private FileFactory factory;
  @Before public void setUp(){
    factory=new FileFactory(new HeapDisk(2,2,0));
  }
  @Test public void testCreateFiles_basic(){
    File file=factory.createDirectory();
    assertThat(file.id()).isEqualTo(0L);
    assertThat(file.isDirectory()).isTrue();
    file=factory.createRegularFile();
    assertThat(file.id()).isEqualTo(1L);
    assertThat(file.isRegularFile()).isTrue();
    file=factory.createSymbolicLink(fakePath());
    assertThat(file.id()).isEqualTo(2L);
    assertThat(file.isSymbolicLink()).isTrue();
  }
  @Test public void testCreateFiles_withSupplier(){
    File file=factory.directoryCreator().get();
    assertThat(file.id()).isEqualTo(0L);
    assertThat(file.isDirectory()).isTrue();
    file=factory.regularFileCreator().get();
    assertThat(file.id()).isEqualTo(1L);
    assertThat(file.isRegularFile()).isTrue();
    file=factory.symbolicLinkCreator(fakePath()).get();
    assertThat(file.id()).isEqualTo(2L);
    assertThat(file.isSymbolicLink()).isTrue();
  }
  static JimfsPath fakePath(){
    return PathServiceTest.fakeUnixPathService().emptyPath();
  }
}
