/** 
 * Configuration for a set of test cases.
 */
public static final class TestConfiguration {
  private final int blockSize;
  private final int cacheSize;
  private final ReuseStrategy reuseStrategy;
  private HeapDisk disk;
  public TestConfiguration(  int blockSize,  int cacheSize,  ReuseStrategy reuseStrategy){
    this.blockSize=blockSize;
    this.cacheSize=cacheSize;
    this.reuseStrategy=reuseStrategy;
    if (reuseStrategy != ReuseStrategy.NEW_DISK) {
      this.disk=createDisk();
    }
  }
  private HeapDisk createDisk(){
    int maxCachedBlockCount=cacheSize == -1 ? Integer.MAX_VALUE : (cacheSize / blockSize);
    return new HeapDisk(blockSize,Integer.MAX_VALUE,maxCachedBlockCount);
  }
  public RegularFile createRegularFile(){
    if (reuseStrategy == ReuseStrategy.NEW_DISK) {
      disk=createDisk();
    }
    return RegularFile.create(0,disk);
  }
  public void tearDown(  RegularFile file){
switch (reuseStrategy) {
case DELETE_FILES:
      file.deleted();
    break;
case KEEP_OR_DELETE_FILES:
  if (new Random().nextBoolean()) {
    file.deleted();
  }
break;
case KEEP_FILES:
break;
default :
break;
}
}
@Override public String toString(){
return reuseStrategy + " [" + blockSize+ ", "+ cacheSize+ "]";
}
}
