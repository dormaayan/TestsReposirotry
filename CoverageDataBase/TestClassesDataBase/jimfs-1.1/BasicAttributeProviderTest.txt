/** 
 * Tests for  {@link BasicAttributeProvider}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class BasicAttributeProviderTest extends AbstractAttributeProviderTest<BasicAttributeProvider> {
  @Override protected BasicAttributeProvider createProvider(){
    return new BasicAttributeProvider();
  }
  @Override protected Set<? extends AttributeProvider> createInheritedProviders(){
    return ImmutableSet.of();
  }
  @Test public void testSupportedAttributes(){
    assertSupportsAll("fileKey","size","isDirectory","isRegularFile","isSymbolicLink","isOther","creationTime","lastModifiedTime","lastAccessTime");
  }
  @Test public void testInitialAttributes(){
    long time=file.getCreationTime();
    assertThat(time).isNotEqualTo(0L);
    assertThat(time).isEqualTo(file.getLastAccessTime());
    assertThat(time).isEqualTo(file.getLastModifiedTime());
    assertContainsAll(file,ImmutableMap.<String,Object>builder().put("fileKey",0).put("size",0L).put("isDirectory",true).put("isRegularFile",false).put("isSymbolicLink",false).put("isOther",false).build());
  }
  @Test public void testSet(){
    FileTime time=FileTime.fromMillis(0L);
    assertSetAndGetSucceeds("creationTime",time);
    assertSetAndGetSucceeds("lastModifiedTime",time);
    assertSetAndGetSucceeds("lastAccessTime",time);
    assertSetFails("fileKey",3L);
    assertSetFails("size",1L);
    assertSetFails("isRegularFile",true);
    assertSetFails("isDirectory",true);
    assertSetFails("isSymbolicLink",true);
    assertSetFails("isOther",true);
    assertSetFails("creationTime","foo");
  }
  @Test public void testSetOnCreate(){
    FileTime time=FileTime.fromMillis(0L);
    assertSetFailsOnCreate("creationTime",time);
    assertSetFailsOnCreate("lastModifiedTime",time);
    assertSetFailsOnCreate("lastAccessTime",time);
  }
  @Test public void testView() throws IOException {
    BasicFileAttributeView view=provider.view(fileLookup(),NO_INHERITED_VIEWS);
    assertThat(view).isNotNull();
    assertThat(view.name()).isEqualTo("basic");
    BasicFileAttributes attrs=view.readAttributes();
    assertThat(attrs.fileKey()).isEqualTo(0);
    FileTime time=attrs.creationTime();
    assertThat(attrs.lastAccessTime()).isEqualTo(time);
    assertThat(attrs.lastModifiedTime()).isEqualTo(time);
    view.setTimes(null,null,null);
    attrs=view.readAttributes();
    assertThat(attrs.creationTime()).isEqualTo(time);
    assertThat(attrs.lastAccessTime()).isEqualTo(time);
    assertThat(attrs.lastModifiedTime()).isEqualTo(time);
    view.setTimes(FileTime.fromMillis(0L),null,null);
    attrs=view.readAttributes();
    assertThat(attrs.creationTime()).isEqualTo(time);
    assertThat(attrs.lastAccessTime()).isEqualTo(time);
    assertThat(attrs.lastModifiedTime()).isEqualTo(FileTime.fromMillis(0L));
  }
  @Test public void testAttributes(){
    BasicFileAttributes attrs=provider.readAttributes(file);
    assertThat(attrs.fileKey()).isEqualTo(0);
    assertThat(attrs.isDirectory()).isTrue();
    assertThat(attrs.isRegularFile()).isFalse();
    assertThat(attrs.creationTime()).isNotNull();
  }
}
