/** 
 * Tests for  {@link AclAttributeProvider}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class AclAttributeProviderTest extends AbstractAttributeProviderTest<AclAttributeProvider> {
  private static final UserPrincipal USER=createUserPrincipal("user");
  private static final UserPrincipal FOO=createUserPrincipal("foo");
  private static final ImmutableList<AclEntry> defaultAcl=new ImmutableList.Builder<AclEntry>().add(AclEntry.newBuilder().setType(ALLOW).setFlags(DIRECTORY_INHERIT).setPermissions(DELETE,APPEND_DATA).setPrincipal(USER).build()).add(AclEntry.newBuilder().setType(ALLOW).setFlags(DIRECTORY_INHERIT).setPermissions(DELETE,APPEND_DATA).setPrincipal(FOO).build()).build();
  @Override protected AclAttributeProvider createProvider(){
    return new AclAttributeProvider();
  }
  @Override protected Set<? extends AttributeProvider> createInheritedProviders(){
    return ImmutableSet.of(new BasicAttributeProvider(),new OwnerAttributeProvider());
  }
  @Override protected Map<String,?> createDefaultValues(){
    return ImmutableMap.of("acl:acl",defaultAcl);
  }
  @Test public void testInitialAttributes(){
    assertThat(provider.get(file,"acl")).isEqualTo(defaultAcl);
  }
  @Test public void testSet(){
    assertSetAndGetSucceeds("acl",ImmutableList.of());
    assertSetFailsOnCreate("acl",ImmutableList.of());
    assertSetFails("acl",ImmutableSet.of());
    assertSetFails("acl",ImmutableList.of("hello"));
  }
  @Test public void testView() throws IOException {
    AclFileAttributeView view=provider.view(fileLookup(),ImmutableMap.<String,FileAttributeView>of("owner",new OwnerAttributeProvider().view(fileLookup(),NO_INHERITED_VIEWS)));
    assertNotNull(view);
    assertThat(view.name()).isEqualTo("acl");
    assertThat(view.getAcl()).isEqualTo(defaultAcl);
    view.setAcl(ImmutableList.<AclEntry>of());
    view.setOwner(FOO);
    assertThat(view.getAcl()).isEqualTo(ImmutableList.<AclEntry>of());
    assertThat(view.getOwner()).isEqualTo(FOO);
    assertThat(file.getAttribute("acl","acl")).isEqualTo(ImmutableList.<AclEntry>of());
  }
}
