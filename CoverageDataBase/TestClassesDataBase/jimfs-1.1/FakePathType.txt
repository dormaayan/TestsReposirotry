/** 
 * Arbitrary path type with $ as the root, / as the separator and \ as an alternate separator.
 */
private static final class FakePathType extends PathType {
  protected FakePathType(){
    super(false,'/','\\');
  }
  @Override public ParseResult parsePath(  String path){
    String root=null;
    if (path.startsWith("$")) {
      root="$";
      path=path.substring(1);
    }
    return new ParseResult(root,splitter().split(path));
  }
  @Override public String toString(  @Nullable String root,  Iterable<String> names){
    StringBuilder builder=new StringBuilder();
    if (root != null) {
      builder.append(root);
    }
    joiner().appendTo(builder,names);
    return builder.toString();
  }
  @Override public String toUriPath(  String root,  Iterable<String> names,  boolean directory){
    StringBuilder builder=new StringBuilder();
    builder.append('/').append(root);
    for (    String name : names) {
      builder.append('/').append(name);
    }
    if (directory) {
      builder.append('/');
    }
    return builder.toString();
  }
  @Override public ParseResult parseUriPath(  String uriPath){
    checkArgument(uriPath.startsWith("/$"),"uriPath (%s) must start with /$",uriPath);
    return parsePath(uriPath.substring(1));
  }
}
