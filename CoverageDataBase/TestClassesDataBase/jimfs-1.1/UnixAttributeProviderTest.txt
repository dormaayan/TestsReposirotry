/** 
 * Tests for  {@link UnixAttributeProvider}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) @SuppressWarnings("OctalInteger") public class UnixAttributeProviderTest extends AbstractAttributeProviderTest<UnixAttributeProvider> {
  @Override protected UnixAttributeProvider createProvider(){
    return new UnixAttributeProvider();
  }
  @Override protected Set<? extends AttributeProvider> createInheritedProviders(){
    return ImmutableSet.of(new BasicAttributeProvider(),new OwnerAttributeProvider(),new PosixAttributeProvider());
  }
  @Test public void testInitialAttributes(){
    file.setAttribute("owner","owner",createUserPrincipal("foo"));
    file.setAttribute("posix","group",createGroupPrincipal("bar"));
    file.setAttribute("posix","permissions",ImmutableSet.copyOf(PosixFilePermissions.fromString("rw-r--r--")));
    assertThat(provider.get(file,"uid")).isInstanceOf(Integer.class);
    assertThat(provider.get(file,"gid")).isInstanceOf(Integer.class);
    assertThat(provider.get(file,"rdev")).isEqualTo(0L);
    assertThat(provider.get(file,"dev")).isEqualTo(1L);
    assertThat(provider.get(file,"ino")).isInstanceOf(Integer.class);
    assertThat(provider.get(file,"mode")).isEqualTo(0644);
    assertThat(provider.get(file,"ctime")).isEqualTo(FileTime.fromMillis(file.getCreationTime()));
    assertThat(provider.get(file,"nlink")).isEqualTo(1);
    file.incrementLinkCount();
    assertThat(provider.get(file,"nlink")).isEqualTo(2);
    file.decrementLinkCount();
    assertThat(provider.get(file,"nlink")).isEqualTo(1);
  }
  @Test public void testSet(){
    assertSetFails("unix:uid",1);
    assertSetFails("unix:gid",1);
    assertSetFails("unix:rdev",1L);
    assertSetFails("unix:dev",1L);
    assertSetFails("unix:ino",1);
    assertSetFails("unix:mode",1);
    assertSetFails("unix:ctime",1L);
    assertSetFails("unix:nlink",1);
  }
}
