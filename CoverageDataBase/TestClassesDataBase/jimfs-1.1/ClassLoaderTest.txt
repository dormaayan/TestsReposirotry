/** 
 * Tests behavior when user code loads Jimfs in a separate class loader from the system class loader (which is what  {@link FileSystemProvider#installedProviders()} uses to load{@link FileSystemProvider}s as services from the classpath).
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class ClassLoaderTest {
  @Test public void separateClassLoader() throws Exception {
    ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();
    ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
    ClassLoader loader=MoreObjects.firstNonNull(contextLoader,systemLoader);
    if (loader instanceof URLClassLoader) {
      URLClassLoader urlLoader=(URLClassLoader)loader;
      ClassLoader separateLoader=new URLClassLoader(urlLoader.getURLs(),systemLoader.getParent());
      Thread.currentThread().setContextClassLoader(separateLoader);
      try {
        Class<?> thisClass=separateLoader.loadClass(getClass().getName());
        Method createFileSystem=thisClass.getDeclaredMethod("createFileSystem");
        Object fs=createFileSystem.invoke(null);
        assertEquals("com.google.common.jimfs.JimfsFileSystem",fs.getClass().getName());
        assertFalse(fs instanceof JimfsFileSystem);
        assertTrue(fs instanceof FileSystem);
        writeAndRead((FileSystem)fs,"bar.txt","blah blah");
        assertEquals("blah",Files.readAllLines(((FileSystem)fs).getPath("foo.txt"),UTF_8).get(0));
      }
  finally {
        Thread.currentThread().setContextClassLoader(contextLoader);
      }
    }
  }
  /** 
 * This method is really just testing that  {@code Jimfs.newFileSystem()} succeeds. Withoutspecial handling, when the system class loader loads our  {@code FileSystemProvider}implementation as a service and this code (the user code) is loaded in a separate class loader, the system-loaded provider won't see the instance of  {@code Configuration} we give itas being an instance of the  {@code Configuration} it's expecting (they're completely separateclasses) and creation of the file system will fail.
 */
  public static FileSystem createFileSystem() throws IOException {
    FileSystem fs=Jimfs.newFileSystem(Configuration.unix());
    writeAndRead(fs,"foo.txt","blah");
    return fs;
  }
  private static void writeAndRead(  FileSystem fs,  String path,  String text) throws IOException {
    Path p=fs.getPath(path);
    Files.write(p,ImmutableList.of(text),UTF_8);
    List<String> lines=Files.readAllLines(p,UTF_8);
    assertEquals(text,lines.get(0));
  }
}
