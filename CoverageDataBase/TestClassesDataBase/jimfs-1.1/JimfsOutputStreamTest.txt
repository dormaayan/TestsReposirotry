/** 
 * Tests for  {@link JimfsOutputStream}.
 * @author Colin Decker
 */
@RunWith(JUnit4.class) public class JimfsOutputStreamTest {
  @Test public void testWrite_singleByte() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    out.write(1);
    out.write(2);
    out.write(3);
    assertStoreContains(out,1,2,3);
  }
  @Test public void testWrite_wholeArray() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    out.write(new byte[]{1,2,3,4});
    assertStoreContains(out,1,2,3,4);
  }
  @Test public void testWrite_partialArray() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    out.write(new byte[]{1,2,3,4,5,6},1,3);
    assertStoreContains(out,2,3,4);
  }
  @Test public void testWrite_partialArray_invalidInput() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    try {
      out.write(new byte[3],-1,1);
      fail();
    }
 catch (    IndexOutOfBoundsException expected) {
    }
    try {
      out.write(new byte[3],0,4);
      fail();
    }
 catch (    IndexOutOfBoundsException expected) {
    }
    try {
      out.write(new byte[3],1,3);
      fail();
    }
 catch (    IndexOutOfBoundsException expected) {
    }
  }
  @Test public void testWrite_singleByte_appendMode() throws IOException {
    JimfsOutputStream out=newOutputStream(true);
    addBytesToStore(out,9,8,7);
    out.write(1);
    out.write(2);
    out.write(3);
    assertStoreContains(out,9,8,7,1,2,3);
  }
  @Test public void testWrite_wholeArray_appendMode() throws IOException {
    JimfsOutputStream out=newOutputStream(true);
    addBytesToStore(out,9,8,7);
    out.write(new byte[]{1,2,3,4});
    assertStoreContains(out,9,8,7,1,2,3,4);
  }
  @Test public void testWrite_partialArray_appendMode() throws IOException {
    JimfsOutputStream out=newOutputStream(true);
    addBytesToStore(out,9,8,7);
    out.write(new byte[]{1,2,3,4,5,6},1,3);
    assertStoreContains(out,9,8,7,2,3,4);
  }
  @Test public void testWrite_singleByte_overwriting() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    addBytesToStore(out,9,8,7,6,5,4,3);
    out.write(1);
    out.write(2);
    out.write(3);
    assertStoreContains(out,1,2,3,6,5,4,3);
  }
  @Test public void testWrite_wholeArray_overwriting() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    addBytesToStore(out,9,8,7,6,5,4,3);
    out.write(new byte[]{1,2,3,4});
    assertStoreContains(out,1,2,3,4,5,4,3);
  }
  @Test public void testWrite_partialArray_overwriting() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    addBytesToStore(out,9,8,7,6,5,4,3);
    out.write(new byte[]{1,2,3,4,5,6},1,3);
    assertStoreContains(out,2,3,4,6,5,4,3);
  }
  @Test public void testClosedOutputStream_throwsException() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    out.close();
    try {
      out.write(1);
      fail();
    }
 catch (    IOException expected) {
    }
    try {
      out.write(new byte[3]);
      fail();
    }
 catch (    IOException expected) {
    }
    try {
      out.write(new byte[10],1,3);
      fail();
    }
 catch (    IOException expected) {
    }
    out.close();
  }
  @Test public void testClosedOutputStream_doesNotThrowOnFlush() throws IOException {
    JimfsOutputStream out=newOutputStream(false);
    out.close();
    out.flush();
    try (JimfsOutputStream out2=newOutputStream(false);BufferedOutputStream bout=new BufferedOutputStream(out2);OutputStreamWriter writer=new OutputStreamWriter(bout,UTF_8)){
    }
   }
  private static JimfsOutputStream newOutputStream(  boolean append){
    RegularFile file=regularFile(0);
    return new JimfsOutputStream(file,append,new FileSystemState(Runnables.doNothing()));
  }
  @SuppressWarnings("GuardedByChecker") private static void addBytesToStore(  JimfsOutputStream out,  int... bytes) throws IOException {
    RegularFile file=out.file;
    long pos=file.sizeWithoutLocking();
    for (    int b : bytes) {
      file.write(pos++,(byte)b);
    }
  }
  @SuppressWarnings("GuardedByChecker") private static void assertStoreContains(  JimfsOutputStream out,  int... bytes){
    byte[] actualBytes=new byte[bytes.length];
    out.file.read(0,actualBytes,0,actualBytes.length);
    assertArrayEquals(bytes(bytes),actualBytes);
  }
}
