/** 
 * Tests for  {@link BasicHeaderIterator}.
 */
public class TestBasicHeaderIterator {
  @Test public void testAllSame(){
    final Header[] headers=new Header[]{new BasicHeader("Name","value0"),new BasicHeader("nAme","value1, value1.1"),new BasicHeader("naMe","value2=whatever"),new BasicHeader("namE","value3;tag=nil")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"name");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
  }
  @Test public void testFirstLastOneNone(){
    final Header[] headers=new Header[]{new BasicHeader("match","value0"),new BasicHeader("mismatch","value1, value1.1"),new BasicHeader("single","value2=whatever"),new BasicHeader("match","value3;tag=nil")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"match");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"single");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"way-off");
    Assert.assertFalse(hit.hasNext());
  }
  @Test public void testInterspersed(){
    final Header[] headers=new Header[]{new BasicHeader("yellow","00"),new BasicHeader("maroon","01"),new BasicHeader("orange","02"),new BasicHeader("orange","03"),new BasicHeader("orange","04"),new BasicHeader("yellow","05"),new BasicHeader("maroon","06"),new BasicHeader("maroon","07"),new BasicHeader("maroon","08"),new BasicHeader("yellow","09"),new BasicHeader("maroon","0a"),new BasicHeader("yellow","0b"),new BasicHeader("orange","0c"),new BasicHeader("yellow","0d"),new BasicHeader("orange","0e")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("4",headers[4],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("5",headers[5],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("6",headers[6],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("7",headers[7],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("8",headers[8],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("9",headers[9],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("a",headers[10],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b",headers[11],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("c",headers[12],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("d",headers[13],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("e",headers[14],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"Yellow");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("5",headers[5],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("9",headers[9],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b",headers[11],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("d",headers[13],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"marOOn");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("6",headers[6],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("7",headers[7],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("8",headers[8],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("a",headers[10],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,"OranGe");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("4",headers[4],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b",headers[12],hit.nextHeader());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("e",headers[14],hit.nextHeader());
    Assert.assertFalse(hit.hasNext());
  }
  @Test public void testInvalid(){
    HeaderIterator hit=null;
    try {
      hit=new BasicHeaderIterator(null,"whatever");
      Assert.fail("null headers not detected");
    }
 catch (    final IllegalArgumentException iax) {
    }
    hit=new BasicHeaderIterator(new Header[0],"whatever");
    Assert.assertFalse(hit.hasNext());
    try {
      hit.nextHeader();
      Assert.fail("next beyond end not detected");
    }
 catch (    final NoSuchElementException nsx) {
    }
  }
  @Test public void testRemaining(){
    final Header[] headers=new Header[]{new BasicHeader("Name","value0"),new BasicHeader("nAme","value1, value1.1"),new BasicHeader("naMe","value2=whatever"),new BasicHeader("namE","value3;tag=nil")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0",headers[0],hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1",headers[1],hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2",headers[2],hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3",headers[3],hit.next());
    Assert.assertFalse(hit.hasNext());
    hit=new BasicHeaderIterator(headers,null);
    Assert.assertTrue(hit.hasNext());
    try {
      hit.remove();
      Assert.fail("remove not detected");
    }
 catch (    final UnsupportedOperationException uox) {
    }
    Assert.assertTrue("no next",((BasicHeaderIterator)hit).findNext(-3) < 0);
  }
}
