/** 
 * Unit tests for  {@link BufferedHttpEntity}.
 */
public class TestBufferedHttpEntity {
  @Test public void testBufferingEntity() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final InputStreamEntity httpentity=new InputStreamEntity(new ByteArrayInputStream(bytes),-1);
    final BufferedHttpEntity bufentity=new BufferedHttpEntity(httpentity);
    Assert.assertEquals(bytes.length,bufentity.getContentLength());
    Assert.assertTrue(bufentity.isRepeatable());
    Assert.assertFalse(bufentity.isChunked());
    Assert.assertFalse(bufentity.isStreaming());
    Assert.assertNotNull(bufentity.getContent());
    Assert.assertNotNull(bufentity.getContent());
  }
  @Test public void testWrappingEntity() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final ByteArrayEntity httpentity=new ByteArrayEntity(bytes);
    httpentity.setChunked(true);
    final BufferedHttpEntity bufentity=new BufferedHttpEntity(httpentity);
    Assert.assertEquals(bytes.length,bufentity.getContentLength());
    Assert.assertTrue(bufentity.isRepeatable());
    Assert.assertTrue(bufentity.isChunked());
    Assert.assertFalse(bufentity.isStreaming());
    Assert.assertNotNull(bufentity.getContent());
    Assert.assertNotNull(bufentity.getContent());
  }
  @Test public void testIllegalConstructor() throws Exception {
    try {
      new BufferedHttpEntity(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testWriteToBuffered() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final InputStreamEntity httpentity=new InputStreamEntity(new ByteArrayInputStream(bytes),-1);
    final BufferedHttpEntity bufentity=new BufferedHttpEntity(httpentity);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    bufentity.writeTo(out);
    byte[] bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    out=new ByteArrayOutputStream();
    bufentity.writeTo(out);
    bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    try {
      bufentity.writeTo(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testWriteToWrapped() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final ByteArrayEntity httpentity=new ByteArrayEntity(bytes);
    final BufferedHttpEntity bufentity=new BufferedHttpEntity(httpentity);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    bufentity.writeTo(out);
    byte[] bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    out=new ByteArrayOutputStream();
    bufentity.writeTo(out);
    bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    try {
      bufentity.writeTo(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
}
