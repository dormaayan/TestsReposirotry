static class LenientAsyncResponseConsumer extends AbstractAsyncResponseConsumer<HttpResponse> {
  private final SimpleInputBuffer buffer;
  private volatile HttpResponse response;
  public LenientAsyncResponseConsumer(){
    super();
    this.buffer=new SimpleInputBuffer(2048,HeapByteBufferAllocator.INSTANCE);
  }
  @Override protected void onResponseReceived(  final HttpResponse response){
    this.response=response;
  }
  @Override protected void onEntityEnclosed(  final HttpEntity entity,  final ContentType contentType){
  }
  @Override protected void onContentReceived(  final ContentDecoder decoder,  final IOControl ioControl) throws IOException {
    boolean finished=false;
    try {
      this.buffer.consumeContent(decoder);
      if (decoder.isCompleted()) {
        finished=true;
      }
    }
 catch (    final TruncatedChunkException ex) {
      this.buffer.shutdown();
      finished=true;
    }
    if (finished) {
      this.response.setEntity(new InputStreamEntity(new ContentInputStream(this.buffer),-1));
    }
  }
  @Override protected void releaseResources(){
  }
  @Override protected HttpResponse buildResult(  final HttpContext context){
    return this.response;
  }
}
