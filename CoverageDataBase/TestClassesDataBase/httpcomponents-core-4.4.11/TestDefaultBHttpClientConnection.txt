public class TestDefaultBHttpClientConnection {
  @Mock private Socket socket;
  private DefaultBHttpClientConnection conn;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    conn=new DefaultBHttpClientConnection(1024,1024,null,null,MessageConstraints.DEFAULT,LaxContentLengthStrategy.INSTANCE,StrictContentLengthStrategy.INSTANCE,DefaultHttpRequestWriterFactory.INSTANCE,DefaultHttpResponseParserFactory.INSTANCE);
  }
  @Test public void testBasics() throws Exception {
    Assert.assertFalse(conn.isOpen());
    Assert.assertEquals("[Not bound]",conn.toString());
  }
  @Test public void testReadRequestHead() throws Exception {
    final String s="HTTP/1.1 200 OK\r\nUser-Agent: test\r\n\r\n";
    final ByteArrayInputStream inStream=new ByteArrayInputStream(s.getBytes(Consts.ASCII));
    Mockito.when(socket.getInputStream()).thenReturn(inStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final HttpResponse response=conn.receiveResponseHeader();
    Assert.assertNotNull(response);
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertTrue(response.containsHeader("User-Agent"));
    Assert.assertEquals(1,conn.getMetrics().getResponseCount());
  }
  @Test public void testReadRequestEntity() throws Exception {
    final String s="HTTP/1.1 200 OK\r\nUser-Agent: test\r\nContent-Length: 3\r\n\r\n123";
    final ByteArrayInputStream inStream=new ByteArrayInputStream(s.getBytes(Consts.ASCII));
    Mockito.when(socket.getInputStream()).thenReturn(inStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final HttpResponse response=conn.receiveResponseHeader();
    Assert.assertNotNull(response);
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertTrue(response.containsHeader("User-Agent"));
    Assert.assertEquals(1,conn.getMetrics().getResponseCount());
    conn.receiveResponseEntity(response);
    final HttpEntity entity=response.getEntity();
    Assert.assertNotNull(entity);
    Assert.assertEquals(3,entity.getContentLength());
    Assert.assertEquals(1,conn.getMetrics().getResponseCount());
  }
  @Test public void testWriteResponseHead() throws Exception {
    final ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    Mockito.when(socket.getOutputStream()).thenReturn(outStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getRequestCount());
    final HttpRequest request=new BasicHttpRequest("GET","/stuff",HttpVersion.HTTP_1_1);
    request.addHeader("User-Agent","test");
    conn.sendRequestHeader(request);
    conn.flush();
    Assert.assertEquals(1,conn.getMetrics().getRequestCount());
    final String s=new String(outStream.toByteArray(),"ASCII");
    Assert.assertEquals("GET /stuff HTTP/1.1\r\nUser-Agent: test\r\n\r\n",s);
  }
  @Test public void testWriteResponseEntity() throws Exception {
    final ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    Mockito.when(socket.getOutputStream()).thenReturn(outStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getRequestCount());
    final HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST","/stuff",HttpVersion.HTTP_1_1);
    request.addHeader("User-Agent","test");
    request.addHeader("Content-Length","3");
    request.setEntity(new StringEntity("123",ContentType.TEXT_PLAIN));
    conn.sendRequestHeader(request);
    conn.sendRequestEntity(request);
    conn.flush();
    Assert.assertEquals(1,conn.getMetrics().getRequestCount());
    final String s=new String(outStream.toByteArray(),"ASCII");
    Assert.assertEquals("POST /stuff HTTP/1.1\r\nUser-Agent: test\r\nContent-Length: 3\r\n\r\n123",s);
  }
}
