/** 
 * Test cases for HTTP version class
 */
public class TestHttpVersion {
  @Test public void testHttpVersionInvalidConstructorInput() throws Exception {
    try {
      new HttpVersion(-1,-1);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException e) {
    }
    try {
      new HttpVersion(0,-1);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void testHttpVersionEquality() throws Exception {
    final HttpVersion ver1=new HttpVersion(1,1);
    final HttpVersion ver2=new HttpVersion(1,1);
    Assert.assertEquals(ver1.hashCode(),ver2.hashCode());
    Assert.assertTrue(ver1.equals(ver1));
    Assert.assertTrue(ver1.equals(ver2));
    Assert.assertTrue(ver1.equals(ver1));
    Assert.assertTrue(ver1.equals(ver2));
    Assert.assertFalse(ver1.equals(new Float(1.1)));
    Assert.assertTrue((new HttpVersion(0,9)).equals(HttpVersion.HTTP_0_9));
    Assert.assertTrue((new HttpVersion(1,0)).equals(HttpVersion.HTTP_1_0));
    Assert.assertTrue((new HttpVersion(1,1)).equals(HttpVersion.HTTP_1_1));
    Assert.assertFalse((new HttpVersion(1,1)).equals(HttpVersion.HTTP_1_0));
    Assert.assertTrue((new ProtocolVersion("HTTP",0,9)).equals(HttpVersion.HTTP_0_9));
    Assert.assertTrue((new ProtocolVersion("HTTP",1,0)).equals(HttpVersion.HTTP_1_0));
    Assert.assertTrue((new ProtocolVersion("HTTP",1,1)).equals(HttpVersion.HTTP_1_1));
    Assert.assertFalse((new ProtocolVersion("http",1,1)).equals(HttpVersion.HTTP_1_1));
    Assert.assertTrue(HttpVersion.HTTP_0_9.equals(new ProtocolVersion("HTTP",0,9)));
    Assert.assertTrue(HttpVersion.HTTP_1_0.equals(new ProtocolVersion("HTTP",1,0)));
    Assert.assertTrue(HttpVersion.HTTP_1_1.equals(new ProtocolVersion("HTTP",1,1)));
    Assert.assertFalse(HttpVersion.HTTP_1_1.equals(new ProtocolVersion("http",1,1)));
  }
  @Test public void testHttpVersionComparison(){
    Assert.assertTrue(HttpVersion.HTTP_0_9.lessEquals(HttpVersion.HTTP_1_1));
    Assert.assertTrue(HttpVersion.HTTP_0_9.greaterEquals(HttpVersion.HTTP_0_9));
    Assert.assertFalse(HttpVersion.HTTP_0_9.greaterEquals(HttpVersion.HTTP_1_0));
    Assert.assertTrue(HttpVersion.HTTP_1_0.compareToVersion(HttpVersion.HTTP_1_1) < 0);
    Assert.assertTrue(HttpVersion.HTTP_1_0.compareToVersion(HttpVersion.HTTP_0_9) > 0);
    Assert.assertTrue(HttpVersion.HTTP_1_0.compareToVersion(HttpVersion.HTTP_1_0) == 0);
  }
  @Test public void testCloning() throws Exception {
    final HttpVersion orig=HttpVersion.HTTP_1_1;
    final HttpVersion clone=(HttpVersion)orig.clone();
    Assert.assertEquals(orig,clone);
  }
  @Test public void testSerialization() throws Exception {
    final HttpVersion orig=HttpVersion.HTTP_1_1;
    final ByteArrayOutputStream outbuffer=new ByteArrayOutputStream();
    final ObjectOutputStream outStream=new ObjectOutputStream(outbuffer);
    outStream.writeObject(orig);
    outStream.close();
    final byte[] raw=outbuffer.toByteArray();
    final ByteArrayInputStream inBuffer=new ByteArrayInputStream(raw);
    final ObjectInputStream inStream=new ObjectInputStream(inBuffer);
    final HttpVersion clone=(HttpVersion)inStream.readObject();
    Assert.assertEquals(orig,clone);
  }
}
