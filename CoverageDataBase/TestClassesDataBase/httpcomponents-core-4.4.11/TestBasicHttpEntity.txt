/** 
 * Unit tests for  {@link BasicHttpEntity}.
 */
public class TestBasicHttpEntity {
  @Test public void testBasics() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final InputStream content=new ByteArrayInputStream(bytes);
    final BasicHttpEntity httpentity=new BasicHttpEntity();
    httpentity.setContent(content);
    httpentity.setContentLength(bytes.length);
    Assert.assertEquals(bytes.length,httpentity.getContentLength());
    Assert.assertFalse(httpentity.isRepeatable());
    Assert.assertTrue(httpentity.isStreaming());
  }
  @Test public void testContent() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final InputStream content=new ByteArrayInputStream(bytes);
    final BasicHttpEntity httpentity=new BasicHttpEntity();
    try {
      httpentity.getContent();
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
    httpentity.setContent(content);
    Assert.assertEquals(content,httpentity.getContent());
    httpentity.setContent(null);
    try {
      httpentity.getContent();
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
  }
  @Test public void testWriteTo() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ASCII);
    final InputStream content=new ByteArrayInputStream(bytes);
    final BasicHttpEntity httpentity=new BasicHttpEntity();
    httpentity.setContent(content);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    httpentity.writeTo(out);
    final byte[] bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    httpentity.setContent(null);
    out=new ByteArrayOutputStream();
    try {
      httpentity.writeTo(out);
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
    try {
      httpentity.writeTo(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
}
