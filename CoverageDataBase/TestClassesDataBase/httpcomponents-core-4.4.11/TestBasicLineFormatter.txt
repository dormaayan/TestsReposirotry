/** 
 * Tests for  {@link BasicLineFormatter}.
 */
public class TestBasicLineFormatter {
  @Test public void testHttpVersionFormatting() throws Exception {
    final String s=BasicLineFormatter.formatProtocolVersion(HttpVersion.HTTP_1_1,null);
    Assert.assertEquals("HTTP/1.1",s);
  }
  @Test public void testHttpVersionFormattingInvalidInput() throws Exception {
    try {
      BasicLineFormatter.formatProtocolVersion(null,BasicLineFormatter.INSTANCE);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      BasicLineFormatter.INSTANCE.appendProtocolVersion(new CharArrayBuffer(10),(HttpVersion)null);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testRLFormatting() throws Exception {
    final RequestLine requestline=new BasicRequestLine("GET","/stuff",HttpVersion.HTTP_1_1);
    final String s=BasicLineFormatter.formatRequestLine(requestline,null);
    Assert.assertEquals("GET /stuff HTTP/1.1",s);
  }
  @Test public void testRLFormattingInvalidInput() throws Exception {
    try {
      BasicLineFormatter.formatRequestLine(null,BasicLineFormatter.INSTANCE);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      BasicLineFormatter.INSTANCE.formatRequestLine(new CharArrayBuffer(10),(RequestLine)null);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testSLFormatting() throws Exception {
    StatusLine statusline=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    String s=BasicLineFormatter.formatStatusLine(statusline,null);
    Assert.assertEquals("HTTP/1.1 200 OK",s);
    statusline=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,null);
    s=BasicLineFormatter.formatStatusLine(statusline,null);
    Assert.assertEquals("HTTP/1.1 200 ",s);
  }
  @Test public void testSLFormattingInvalidInput() throws Exception {
    try {
      BasicLineFormatter.formatStatusLine(null,BasicLineFormatter.INSTANCE);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      BasicLineFormatter.INSTANCE.formatStatusLine(new CharArrayBuffer(10),(StatusLine)null);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testHeaderFormatting() throws Exception {
    final Header header1=new BasicHeader("name","value");
    String s=BasicLineFormatter.formatHeader(header1,null);
    Assert.assertEquals("name: value",s);
    final Header header2=new BasicHeader("name",null);
    s=BasicLineFormatter.formatHeader(header2,null);
    Assert.assertEquals("name: ",s);
  }
  @Test public void testHeaderFormattingInvalidInput() throws Exception {
    try {
      BasicLineFormatter.formatHeader(null,BasicLineFormatter.INSTANCE);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      BasicLineFormatter.INSTANCE.formatHeader(new CharArrayBuffer(10),(Header)null);
      Assert.fail("IllegalArgumentException should habe been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testHeaderFormattingRequestSplitting() throws Exception {
    final Header header=new BasicHeader("Host","apache.org\r\nOops: oops");
    final String s=BasicLineFormatter.formatHeader(header,null);
    Assert.assertFalse(s.contains("\n"));
    Assert.assertEquals("Host: apache.org  Oops: oops",s);
  }
}
