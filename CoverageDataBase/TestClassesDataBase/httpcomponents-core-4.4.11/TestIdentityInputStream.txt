/** 
 * Simple tests for  {@link IdentityInputStream}.
 */
public class TestIdentityInputStream {
  @Test public void testConstructor() throws Exception {
    final SessionInputBuffer receiver=new SessionInputBufferMock(new byte[]{});
    final IdentityInputStream in=new IdentityInputStream(receiver);
    in.close();
    try {
      new IdentityInputStream(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testBasicRead() throws Exception {
    final byte[] input=new byte[]{'a','b','c'};
    final SessionInputBufferMock receiver=new SessionInputBufferMock(input);
    final IdentityInputStream inStream=new IdentityInputStream(receiver);
    final byte[] tmp=new byte[2];
    Assert.assertEquals(2,inStream.read(tmp,0,tmp.length));
    Assert.assertEquals('a',tmp[0]);
    Assert.assertEquals('b',tmp[1]);
    Assert.assertEquals('c',inStream.read());
    Assert.assertEquals(-1,inStream.read(tmp,0,tmp.length));
    Assert.assertEquals(-1,inStream.read());
    Assert.assertEquals(-1,inStream.read(tmp,0,tmp.length));
    Assert.assertEquals(-1,inStream.read());
    inStream.close();
  }
  @Test public void testClosedCondition() throws Exception {
    final byte[] input=new byte[]{'a','b','c'};
    final SessionInputBufferMock receiver=new SessionInputBufferMock(input);
    final IdentityInputStream inStream=new IdentityInputStream(receiver);
    inStream.close();
    inStream.close();
    Assert.assertEquals(0,inStream.available());
    final byte[] tmp=new byte[2];
    Assert.assertEquals(-1,inStream.read(tmp,0,tmp.length));
    Assert.assertEquals(-1,inStream.read());
    Assert.assertEquals(-1,inStream.read(tmp,0,tmp.length));
    Assert.assertEquals(-1,inStream.read());
  }
  @Test public void testAvailable() throws Exception {
    final byte[] input=new byte[]{'a','b','c'};
    final SessionInputBufferMock receiver=new SessionInputBufferMock(input);
    final IdentityInputStream inStream=new IdentityInputStream(receiver);
    inStream.read();
    Assert.assertEquals(2,inStream.available());
    inStream.close();
  }
}
