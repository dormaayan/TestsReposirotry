/** 
 * Unit tests for  {@link BasicHttpResponse}.
 */
public class TestBasicHttpResponse {
  @Test public void testBasics(){
    final BasicHttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getProtocolVersion());
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertEquals("OK",response.getStatusLine().getReasonPhrase());
  }
  @Test public void testStatusLineMutation(){
    final BasicHttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertEquals("OK",response.getStatusLine().getReasonPhrase());
    response.setReasonPhrase("Kind of OK");
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertEquals("Kind of OK",response.getStatusLine().getReasonPhrase());
    response.setStatusCode(299);
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(299,response.getStatusLine().getStatusCode());
    Assert.assertEquals(null,response.getStatusLine().getReasonPhrase());
    response.setStatusLine(HttpVersion.HTTP_1_0,298);
    Assert.assertEquals(HttpVersion.HTTP_1_0,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(298,response.getStatusLine().getStatusCode());
    Assert.assertEquals(null,response.getStatusLine().getReasonPhrase());
    response.setStatusLine(HttpVersion.HTTP_1_1,200,"OK");
    Assert.assertEquals(HttpVersion.HTTP_1_1,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(200,response.getStatusLine().getStatusCode());
    Assert.assertEquals("OK",response.getStatusLine().getReasonPhrase());
    response.setStatusLine(new BasicStatusLine(HttpVersion.HTTP_1_0,500,"Boom"));
    Assert.assertEquals(HttpVersion.HTTP_1_0,response.getStatusLine().getProtocolVersion());
    Assert.assertEquals(500,response.getStatusLine().getStatusCode());
    Assert.assertEquals("Boom",response.getStatusLine().getReasonPhrase());
  }
  @Test public void testInvalidStatusCode(){
    try {
      new BasicHttpResponse(HttpVersion.HTTP_1_1,-200,"OK");
      Assert.fail("IllegalArgumentException expected");
    }
 catch (    final IllegalArgumentException expected) {
    }
    final BasicHttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
    try {
      response.setStatusCode(-1);
      Assert.fail("IllegalArgumentException expected");
    }
 catch (    final IllegalArgumentException expected) {
    }
    try {
      response.setStatusLine(HttpVersion.HTTP_1_1,-1);
      Assert.fail("IllegalArgumentException expected");
    }
 catch (    final IllegalArgumentException expected) {
    }
    try {
      response.setStatusLine(HttpVersion.HTTP_1_1,-1,"not ok");
      Assert.fail("IllegalArgumentException expected");
    }
 catch (    final IllegalArgumentException expected) {
    }
  }
}
