public class TestContentLengthOutputStream {
  @Test public void testConstructors() throws Exception {
    final ContentLengthOutputStream in=new ContentLengthOutputStream(new SessionOutputBufferMock(),10L);
    in.close();
    try {
      new ContentLengthOutputStream(null,10L);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new ContentLengthOutputStream(new SessionOutputBufferMock(),-10);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testBasics() throws Exception {
    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    final SessionOutputBufferMock datatransmitter=new SessionOutputBufferMock(buffer);
    final OutputStream out=new ContentLengthOutputStream(datatransmitter,15L);
    final byte[] tmp=new byte[10];
    out.write(tmp,0,10);
    out.write(1);
    out.write(tmp,0,10);
    out.write(tmp,0,10);
    out.write(tmp);
    out.write(1);
    out.write(2);
    out.flush();
    out.close();
    final byte[] data=datatransmitter.getData();
    Assert.assertEquals(15,data.length);
  }
  @Test public void testClose() throws Exception {
    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    final SessionOutputBufferMock datatransmitter=new SessionOutputBufferMock(buffer);
    final OutputStream out=new ContentLengthOutputStream(datatransmitter,15L);
    out.close();
    out.close();
    final byte[] tmp=new byte[10];
    try {
      out.write(tmp);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
    try {
      out.write(1);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
  }
}
