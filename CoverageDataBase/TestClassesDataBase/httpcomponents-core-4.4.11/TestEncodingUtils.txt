/** 
 * Unit tests for  {@link TestEncodingUtils}.
 */
public class TestEncodingUtils {
  private static String constructString(  final int[] unicodeChars){
    final StringBuilder buffer=new StringBuilder();
    if (unicodeChars != null) {
      for (      final int unicodeChar : unicodeChars) {
        buffer.append((char)unicodeChar);
      }
    }
    return buffer.toString();
  }
  static final int SWISS_GERMAN_HELLO[]={0x47,0x72,0xFC,0x65,0x7A,0x69,0x5F,0x7A,0xE4,0x6D,0xE4};
  @Test public void testBytesToString() throws Exception {
    final String s=constructString(SWISS_GERMAN_HELLO);
    final byte[] utf=s.getBytes("UTF-8");
    final byte[] latin1=s.getBytes("ISO-8859-1");
    final String s1=EncodingUtils.getString(utf,"UTF-8");
    final String s2=EncodingUtils.getString(latin1,"ISO-8859-1");
    Assert.assertEquals(s,s1);
    Assert.assertEquals(s,s2);
    try {
      EncodingUtils.getString(null,0,0,"UTF-8");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getString(null,"UTF-8");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getString(new byte[]{},null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getString(new byte[]{},"");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testStringToBytesToString() throws Exception {
    final String s=constructString(SWISS_GERMAN_HELLO);
    final byte[] utf=s.getBytes("UTF-8");
    final byte[] latin1=s.getBytes("ISO-8859-1");
    final byte[] data1=EncodingUtils.getBytes(s,"UTF-8");
    final byte[] data2=EncodingUtils.getBytes(s,"ISO-8859-1");
    Assert.assertNotNull(data1);
    Assert.assertEquals(utf.length,data1.length);
    for (int i=0; i < utf.length; i++) {
      Assert.assertEquals(utf[i],data1[i]);
    }
    Assert.assertNotNull(data2);
    Assert.assertEquals(latin1.length,data2.length);
    for (int i=0; i < latin1.length; i++) {
      Assert.assertEquals(latin1[i],data2[i]);
    }
    try {
      EncodingUtils.getBytes(null,"UTF-8");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getBytes("what not",null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getBytes("what not","");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testAsciiBytesToString() throws Exception {
    final String s="ascii only, I mean it!";
    Assert.assertEquals(s,EncodingUtils.getAsciiString(s.getBytes("US-ASCII")));
    try {
      EncodingUtils.getAsciiString(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      EncodingUtils.getAsciiString(null,0,0);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testAsciiStringToBytes() throws Exception {
    final String s="ascii only, I mean it!";
    final byte[] ascii=s.getBytes("US-ASCII");
    final byte[] data=EncodingUtils.getAsciiBytes(s);
    Assert.assertNotNull(data);
    Assert.assertEquals(ascii.length,data.length);
    for (int i=0; i < ascii.length; i++) {
      Assert.assertEquals(ascii[i],data[i]);
    }
    try {
      EncodingUtils.getAsciiBytes(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testUnsupportedEncoding(){
    final String s=constructString(SWISS_GERMAN_HELLO);
    final byte[] b1=s.getBytes();
    final byte[] b2=EncodingUtils.getBytes(s,"ThisJustAintRight");
    Assert.assertEquals(b1.length,b2.length);
    for (int i=0; i < b1.length; i++) {
      Assert.assertEquals(b1[i],b2[i]);
    }
    final String s1=new String(b1);
    final String s2=EncodingUtils.getString(b1,"ThisJustAintRight");
    Assert.assertEquals(s1,s2);
  }
}
