public class TestBasicConnPool {
  private BasicConnFactory connFactory;
  private BasicConnPool pool;
  private HttpHost host;
  private HttpClientConnection conn;
  private ServerSocket server;
  private int serverPort;
  private int sslServerPort;
  @Before public void setUp() throws Exception {
    server=new ServerSocket(0);
    serverPort=server.getLocalPort();
    final SSLServerSocket sslServer=(SSLServerSocket)SSLServerSocketFactory.getDefault().createServerSocket(0);
    sslServerPort=sslServer.getLocalPort();
    final SocketConfig sconfig=SocketConfig.custom().setSoTimeout(100).build();
    connFactory=new BasicConnFactory(sconfig,ConnectionConfig.DEFAULT);
    pool=new BasicConnPool(connFactory);
  }
  @After public void tearDown() throws Exception {
    server.close();
    if (conn != null) {
      conn.close();
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testNullConstructor2() throws Exception {
    new BasicConnPool((BasicConnFactory)null);
  }
  @Test public void testHttpCreateConnection() throws Exception {
    host=new HttpHost("localhost",serverPort,"http");
    conn=connFactory.create(host);
    assertTrue(conn.isOpen());
    assertEquals(100,conn.getSocketTimeout());
  }
  @Test public void testHttpsCreateConnection() throws Exception {
    final SocketConfig sconfig=SocketConfig.custom().setSoTimeout(100).build();
    connFactory=new BasicConnFactory(null,(SSLSocketFactory)SSLSocketFactory.getDefault(),0,sconfig,ConnectionConfig.DEFAULT);
    host=new HttpHost("localhost",sslServerPort,"https");
    conn=connFactory.create(host);
    assertTrue(conn.isOpen());
    assertEquals(100,conn.getSocketTimeout());
  }
  @Test public void testHttpCreateEntry() throws Exception {
    host=new HttpHost("localhost",serverPort,"http");
    conn=connFactory.create(host);
    final BasicPoolEntry entry=pool.createEntry(host,conn);
    assertEquals(conn,entry.getConnection());
    assertEquals("localhost",entry.getRoute().getHostName());
    entry.close();
  }
}
