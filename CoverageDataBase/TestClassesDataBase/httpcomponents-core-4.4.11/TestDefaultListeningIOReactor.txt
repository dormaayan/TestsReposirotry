/** 
 * Basic tests for  {@link DefaultListeningIOReactor}.
 */
public class TestDefaultListeningIOReactor {
  private static IOEventDispatch createIOEventDispatch(){
    final HttpProcessor httpproc=new ImmutableHttpProcessor(new HttpResponseInterceptor[]{new ResponseDate(),new ResponseServer(),new ResponseContent(),new ResponseConnControl()});
    final HttpAsyncService serviceHandler=new HttpAsyncService(httpproc,new UriHttpAsyncRequestHandlerMapper());
    return new DefaultHttpServerIODispatch(serviceHandler,ConnectionConfig.DEFAULT);
  }
  @Test public void testEndpointUpAndDown() throws Exception {
    final IOEventDispatch eventDispatch=createIOEventDispatch();
    final IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(1).build();
    final ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
    final Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          ioReactor.execute(eventDispatch);
        }
 catch (        final IOException ex) {
        }
      }
    }
);
    t.start();
    Set<ListenerEndpoint> endpoints=ioReactor.getEndpoints();
    Assert.assertNotNull(endpoints);
    Assert.assertEquals(0,endpoints.size());
    final ListenerEndpoint endpoint1=ioReactor.listen(new InetSocketAddress(0));
    endpoint1.waitFor();
    final ListenerEndpoint endpoint2=ioReactor.listen(new InetSocketAddress(0));
    endpoint2.waitFor();
    final int port=((InetSocketAddress)endpoint2.getAddress()).getPort();
    endpoints=ioReactor.getEndpoints();
    Assert.assertNotNull(endpoints);
    Assert.assertEquals(2,endpoints.size());
    endpoint1.close();
    endpoints=ioReactor.getEndpoints();
    Assert.assertNotNull(endpoints);
    Assert.assertEquals(1,endpoints.size());
    final ListenerEndpoint endpoint=endpoints.iterator().next();
    Assert.assertEquals(port,((InetSocketAddress)endpoint.getAddress()).getPort());
    ioReactor.shutdown(1000);
    t.join(1000);
    Assert.assertEquals(IOReactorStatus.SHUT_DOWN,ioReactor.getStatus());
  }
  @Test public void testEndpointAlreadyBoundFatal() throws Exception {
    final IOEventDispatch eventDispatch=createIOEventDispatch();
    final IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(1).build();
    final ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
    final CountDownLatch latch=new CountDownLatch(1);
    final Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          ioReactor.execute(eventDispatch);
          Assert.fail("IOException should have been thrown");
        }
 catch (        final IOException ex) {
          latch.countDown();
        }
      }
    }
);
    t.start();
    final ListenerEndpoint endpoint1=ioReactor.listen(new InetSocketAddress(0));
    endpoint1.waitFor();
    final int port=((InetSocketAddress)endpoint1.getAddress()).getPort();
    final ListenerEndpoint endpoint2=ioReactor.listen(new InetSocketAddress(port));
    endpoint2.waitFor();
    Assert.assertNotNull(endpoint2.getException());
    latch.await(2000,TimeUnit.MILLISECONDS);
    Assert.assertTrue(ioReactor.getStatus().compareTo(IOReactorStatus.SHUTTING_DOWN) >= 0);
    final Set<ListenerEndpoint> endpoints=ioReactor.getEndpoints();
    Assert.assertNotNull(endpoints);
    Assert.assertEquals(0,endpoints.size());
    ioReactor.shutdown(1000);
    t.join(1000);
    Assert.assertEquals(IOReactorStatus.SHUT_DOWN,ioReactor.getStatus());
  }
  @Test public void testEndpointAlreadyBoundNonFatal() throws Exception {
    final IOEventDispatch eventDispatch=createIOEventDispatch();
    final IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(1).build();
    final DefaultListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
    ioReactor.setExceptionHandler(new IOReactorExceptionHandler(){
      @Override public boolean handle(      final IOException ex){
        return (ex instanceof BindException);
      }
      @Override public boolean handle(      final RuntimeException ex){
        return false;
      }
    }
);
    final Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          ioReactor.execute(eventDispatch);
        }
 catch (        final IOException ex) {
        }
      }
    }
);
    t.start();
    final ListenerEndpoint endpoint1=ioReactor.listen(new InetSocketAddress(9999));
    endpoint1.waitFor();
    final ListenerEndpoint endpoint2=ioReactor.listen(new InetSocketAddress(9999));
    endpoint2.waitFor();
    Assert.assertNotNull(endpoint2.getException());
    Thread.sleep(500);
    Assert.assertEquals(IOReactorStatus.ACTIVE,ioReactor.getStatus());
    ioReactor.shutdown(1000);
    t.join(1000);
    Assert.assertEquals(IOReactorStatus.SHUT_DOWN,ioReactor.getStatus());
  }
}
