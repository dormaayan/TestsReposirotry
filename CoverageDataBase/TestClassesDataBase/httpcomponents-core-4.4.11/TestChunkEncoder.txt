/** 
 * Simple tests for  {@link ChunkEncoder}.
 */
public class TestChunkEncoder {
  @Test public void testBasicCoding() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("12345"));
    encoder.write(CodecTestUtils.wrap("678"));
    encoder.write(CodecTestUtils.wrap("90"));
    encoder.complete();
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertTrue(encoder.isCompleted());
    Assert.assertEquals("5\r\n12345\r\n3\r\n678\r\n2\r\n90\r\n0\r\n\r\n",s);
    Assert.assertEquals("[chunk-coded; completed: true]",encoder.toString());
  }
  @Test public void testChunkNoExceed() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,16);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("1234"));
    encoder.complete();
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertTrue(encoder.isCompleted());
    Assert.assertEquals("4\r\n1234\r\n0\r\n\r\n",s);
  }
  @Test public void testLimitedChannel() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(16,16);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(16,16);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    channel.write(CodecTestUtils.wrap("0123456789ABCDEF"));
    outbuf.write(CodecTestUtils.wrap("0123456789ABCDEF"));
    final ByteBuffer src=CodecTestUtils.wrap("0123456789ABCDEF");
    Assert.assertEquals(0,encoder.write(src));
    Assert.assertEquals(0,encoder.write(src));
    Assert.assertEquals(0,encoder.write(src));
    channel.reset();
    outbuf.flush(channel);
    channel.reset();
    Assert.assertEquals(10,encoder.write(src));
    channel.flush();
    Assert.assertEquals(6,encoder.write(src));
    channel.flush();
    Assert.assertEquals(0,encoder.write(src));
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("4\r\n0123\r\n4\r\n4567\r\n2\r\n89\r\n4\r\nABCD\r\n2\r\nEF\r\n",s);
  }
  @Test public void testBufferFragments() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(1024));
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,1024);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics,1024);
    Assert.assertEquals(16,encoder.write(CodecTestUtils.wrap("0123456789ABCDEF")));
    Assert.assertEquals(16,encoder.write(CodecTestUtils.wrap("0123456789ABCDEF")));
    Assert.assertEquals(16,encoder.write(CodecTestUtils.wrap("0123456789ABCDEF")));
    Mockito.verify(channel,Mockito.never()).write(Matchers.<ByteBuffer>any());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("10\r\n0123456789ABCDEF\r\n10\r\n0123456789ABCDEF\r\n" + "10\r\n0123456789ABCDEF\r\n",s);
  }
  @Test public void testChunkExceed() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(16,16);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    final ByteBuffer src=CodecTestUtils.wrap("0123456789ABCDEF");
    Assert.assertEquals(16,encoder.write(src));
    Assert.assertEquals(0,src.remaining());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("4\r\n0123\r\n4\r\n4567\r\n4\r\n89AB\r\n4\r\nCDEF\r\n",s);
  }
  @Test public void testCodingEmptyBuffer() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("12345"));
    encoder.write(CodecTestUtils.wrap("678"));
    encoder.write(CodecTestUtils.wrap("90"));
    final ByteBuffer empty=ByteBuffer.allocate(100);
    empty.flip();
    encoder.write(empty);
    encoder.write(null);
    encoder.complete();
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertTrue(encoder.isCompleted());
    Assert.assertEquals("5\r\n12345\r\n3\r\n678\r\n2\r\n90\r\n0\r\n\r\n",s);
  }
  @Test public void testCodingCompleted() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final ChunkEncoder encoder=new ChunkEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("12345"));
    encoder.write(CodecTestUtils.wrap("678"));
    encoder.write(CodecTestUtils.wrap("90"));
    encoder.complete();
    try {
      encoder.write(CodecTestUtils.wrap("more stuff"));
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
    try {
      encoder.complete();
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
  }
  @Test public void testInvalidConstructor(){
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    try {
      new ChunkEncoder(null,null,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new ChunkEncoder(channel,null,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new ChunkEncoder(channel,outbuf,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
}
