/** 
 * Unit tests for  {@link BufferedHeader}.
 */
public class TestBufferedHeader {
  @Test public void testBasicConstructor(){
    final CharArrayBuffer buf=new CharArrayBuffer(32);
    buf.append("name: value");
    final BufferedHeader header=new BufferedHeader(buf);
    Assert.assertEquals("name",header.getName());
    Assert.assertEquals("value",header.getValue());
    Assert.assertSame(buf,header.getBuffer());
    Assert.assertEquals(5,header.getValuePos());
  }
  @Test public void testInvalidName(){
    try {
      new BufferedHeader(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testHeaderElements(){
    final CharArrayBuffer buf=new CharArrayBuffer(32);
    buf.append("name: element1 = value1, element2; param1 = value1, element3");
    final BufferedHeader header=new BufferedHeader(buf);
    final HeaderElement[] elements=header.getElements();
    Assert.assertNotNull(elements);
    Assert.assertEquals(3,elements.length);
    Assert.assertEquals("element1",elements[0].getName());
    Assert.assertEquals("value1",elements[0].getValue());
    Assert.assertEquals("element2",elements[1].getName());
    Assert.assertEquals(null,elements[1].getValue());
    Assert.assertEquals("element3",elements[2].getName());
    Assert.assertEquals(null,elements[2].getValue());
    Assert.assertEquals(1,elements[1].getParameters().length);
  }
  @Test public void testCloning() throws Exception {
    final CharArrayBuffer buf=new CharArrayBuffer(32);
    buf.append("name: value");
    final BufferedHeader orig=new BufferedHeader(buf);
    final BufferedHeader clone=(BufferedHeader)orig.clone();
    Assert.assertEquals(orig.getName(),clone.getName());
    Assert.assertEquals(orig.getValue(),clone.getValue());
  }
  @Test public void testSerialization() throws Exception {
    final CharArrayBuffer buf=new CharArrayBuffer(32);
    buf.append("name: value");
    final BufferedHeader orig=new BufferedHeader(buf);
    final ByteArrayOutputStream outbuffer=new ByteArrayOutputStream();
    final ObjectOutputStream outStream=new ObjectOutputStream(outbuffer);
    outStream.writeObject(orig);
    outStream.close();
    final byte[] raw=outbuffer.toByteArray();
    final ByteArrayInputStream inBuffer=new ByteArrayInputStream(raw);
    final ObjectInputStream inStream=new ObjectInputStream(inBuffer);
    final BufferedHeader clone=(BufferedHeader)inStream.readObject();
    Assert.assertEquals(orig.getName(),clone.getName());
    Assert.assertEquals(orig.getValue(),clone.getValue());
  }
}
