public class TestBasicAsyncRequestConsumer {
  private BasicAsyncRequestConsumer consumer;
  @Mock private HttpEntityEnclosingRequest request;
  @Mock private HttpContext context;
  @Mock private ContentDecoder decoder;
  @Mock private IOControl ioControl;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    consumer=Mockito.spy(new BasicAsyncRequestConsumer());
  }
  @After public void tearDown() throws Exception {
  }
  @Test public void testRequestProcessing() throws Exception {
    when(request.getEntity()).thenReturn(new StringEntity("stuff"));
    consumer.requestReceived(request);
    consumer.consumeContent(decoder,ioControl);
    consumer.requestCompleted(context);
    verify(consumer).releaseResources();
    verify(consumer).buildResult(context);
    Assert.assertTrue(consumer.isDone());
    Assert.assertSame(request,consumer.getResult());
    consumer.requestCompleted(context);
    verify(consumer,times(1)).releaseResources();
    verify(consumer,times(1)).buildResult(context);
  }
  @Test public void testResponseProcessingWithException() throws Exception {
    when(request.getEntity()).thenReturn(new StringEntity("stuff"));
    final RuntimeException ooopsie=new RuntimeException();
    when(consumer.buildResult(context)).thenThrow(ooopsie);
    consumer.requestReceived(request);
    consumer.consumeContent(decoder,ioControl);
    consumer.requestCompleted(context);
    verify(consumer).releaseResources();
    Assert.assertTrue(consumer.isDone());
    Assert.assertSame(ooopsie,consumer.getException());
  }
  @Test public void testClose() throws Exception {
    consumer.close();
    verify(consumer).releaseResources();
    Assert.assertTrue(consumer.isDone());
    consumer.close();
    verify(consumer,times(1)).releaseResources();
  }
}
