public class TestBasicAsyncRequestProducer {
  private BasicAsyncRequestProducer producer;
  private HttpHost target;
  @Mock private HttpAsyncContentProducer contentProducer;
  @Mock private HttpEntityEnclosingRequest request;
  @Mock private ContentEncoder encoder;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    target=new HttpHost("localhost");
    producer=new BasicAsyncRequestProducer(target,request,contentProducer);
  }
  @After public void tearDown() throws Exception {
  }
  @Test(expected=IllegalArgumentException.class) public void testNullTarget3ArgConstructor() throws Exception {
    producer=new BasicAsyncRequestProducer(null,request,contentProducer);
  }
  @Test(expected=IllegalArgumentException.class) public void testNullRequest3ArgConstructor() throws Exception {
    producer=new BasicAsyncRequestProducer(target,null,contentProducer);
  }
  @Test(expected=IllegalArgumentException.class) public void testNullTarget2ArgConstructor() throws Exception {
    producer=new BasicAsyncRequestProducer(null,request);
  }
  @Test(expected=IllegalArgumentException.class) public void testNullRequest2ArgConstructor() throws Exception {
    producer=new BasicAsyncRequestProducer(target,null);
  }
  @Test public void testGenerateRequest(){
    final HttpRequest res=producer.generateRequest();
    Assert.assertSame(request,res);
  }
  @Test public void testGetTarget(){
    final HttpHost res=producer.getTarget();
    Assert.assertSame(target,res);
  }
  @SuppressWarnings("boxing") @Test public void testProduceContentEncoderCompleted() throws Exception {
    when(encoder.isCompleted()).thenReturn(Boolean.TRUE);
    producer.produceContent(encoder,null);
    verify(contentProducer,times(1)).close();
  }
  @SuppressWarnings("boxing") @Test public void testProduceContentEncoderNotCompleted() throws Exception {
    when(encoder.isCompleted()).thenReturn(Boolean.FALSE);
    producer.produceContent(encoder,null);
    verify(contentProducer,times(0)).close();
  }
  @Test public void testResetRequest() throws Exception {
    producer.resetRequest();
    verify(contentProducer,times(1)).close();
  }
  @Test public void testClose() throws Exception {
    producer.close();
    verify(contentProducer,times(1)).close();
  }
  @Test public void testToString(){
    Assert.assertEquals(target + " " + request+ " "+ contentProducer,producer.toString());
  }
}
