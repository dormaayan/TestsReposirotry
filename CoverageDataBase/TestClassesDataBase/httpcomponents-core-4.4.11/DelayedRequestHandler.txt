class DelayedRequestHandler implements HttpAsyncRequestHandler<HttpRequest> {
  private final SimpleRequestHandler requestHandler;
  public DelayedRequestHandler(){
    super();
    this.requestHandler=new SimpleRequestHandler();
  }
  @Override public HttpAsyncRequestConsumer<HttpRequest> processRequest(  final HttpRequest request,  final HttpContext context){
    return new BasicAsyncRequestConsumer();
  }
  @Override public void handle(  final HttpRequest request,  final HttpAsyncExchange httpexchange,  final HttpContext context) throws HttpException, IOException {
    final BasicHttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    new Thread(){
      @Override public void run(){
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException ie) {
        }
        try {
          requestHandler.handle(request,response,context);
        }
 catch (        final Exception ex) {
          response.setStatusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
        }
        httpexchange.submitResponse(new BasicAsyncResponseProducer(response));
      }
    }
.start();
  }
}
