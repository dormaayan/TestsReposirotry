public class TestUriHttpAsyncRequestHandlerMapper {
  @Test public void testRegisterUnregister() throws Exception {
    final HttpAsyncRequestHandler<?> h=Mockito.mock(HttpAsyncRequestHandler.class);
    final UriPatternMatcher<HttpAsyncRequestHandler<?>> matcher=Mockito.spy(new UriPatternMatcher<HttpAsyncRequestHandler<?>>());
    final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper(matcher);
    registry.register("/h1",h);
    registry.unregister("/h1");
    Mockito.verify(matcher).register("/h1",h);
    Mockito.verify(matcher).unregister("/h1");
  }
  @Test public void testLookup() throws Exception {
    final UriPatternMatcher<HttpAsyncRequestHandler<?>> matcher=Mockito.spy(new UriPatternMatcher<HttpAsyncRequestHandler<?>>());
    final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper(matcher);
    final HttpRequest request=new BasicHttpRequest("GET","/");
    registry.lookup(request);
    registry.unregister("/h1");
    Mockito.verify(matcher).lookup("/");
  }
  @Test(expected=IllegalArgumentException.class) public void testRegisterNull() throws Exception {
    final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper();
    registry.register(null,null);
  }
  @Test(expected=IllegalArgumentException.class) public void testLookupNull() throws Exception {
    final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper();
    registry.register(null,null);
  }
  @Test public void testWildCardMatchingWithQuery() throws Exception {
    final HttpAsyncRequestHandler<?> h1=Mockito.mock(HttpAsyncRequestHandler.class);
    final HttpAsyncRequestHandler<?> h2=Mockito.mock(HttpAsyncRequestHandler.class);
    final HttpAsyncRequestHandler<?> def=Mockito.mock(HttpAsyncRequestHandler.class);
    final UriPatternMatcher<HttpAsyncRequestHandler<?>> matcher=Mockito.spy(new UriPatternMatcher<HttpAsyncRequestHandler<?>>());
    final UriHttpAsyncRequestHandlerMapper registry=new UriHttpAsyncRequestHandlerMapper(matcher);
    registry.register("*",def);
    registry.register("*.view",h1);
    registry.register("*.form",h2);
    HttpAsyncRequestHandler<?> h;
    h=registry.lookup(new BasicHttpRequest("GET","/that.view?param=value"));
    Assert.assertNotNull(h);
    Assert.assertTrue(h1 == h);
    h=registry.lookup(new BasicHttpRequest("GET","/that.form?whatever"));
    Assert.assertNotNull(h);
    Assert.assertTrue(h2 == h);
    h=registry.lookup(new BasicHttpRequest("GET","/whatever"));
    Assert.assertNotNull(h);
    Assert.assertTrue(def == h);
  }
}
