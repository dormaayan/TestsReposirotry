public class TestIdentityOutputStream {
  @Test public void testConstructors() throws Exception {
    new IdentityOutputStream(new SessionOutputBufferMock()).close();
    try {
      new IdentityOutputStream(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testBasics() throws Exception {
    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    final SessionOutputBufferMock datatransmitter=new SessionOutputBufferMock(buffer);
    final OutputStream out=new IdentityOutputStream(datatransmitter);
    final byte[] tmp=new byte[10];
    out.write(tmp,0,10);
    out.write(tmp);
    out.write(1);
    out.flush();
    out.close();
    final byte[] data=datatransmitter.getData();
    Assert.assertEquals(21,data.length);
  }
  @Test public void testClose() throws Exception {
    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    final SessionOutputBufferMock datatransmitter=new SessionOutputBufferMock(buffer);
    final OutputStream out=new IdentityOutputStream(datatransmitter);
    out.close();
    out.close();
    final byte[] tmp=new byte[10];
    try {
      out.write(tmp);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
    try {
      out.write(1);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
  }
  @Test public void testConstructor() throws Exception {
    final SessionOutputBufferMock transmitter=new SessionOutputBufferMock();
    new IdentityOutputStream(transmitter).close();
    try {
      new IdentityOutputStream(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testBasicWrite() throws Exception {
    final SessionOutputBufferMock transmitter=new SessionOutputBufferMock();
    final IdentityOutputStream outStream=new IdentityOutputStream(transmitter);
    outStream.write(new byte[]{'a','b'},0,2);
    outStream.write('c');
    outStream.flush();
    final byte[] input=transmitter.getData();
    Assert.assertNotNull(input);
    final byte[] expected=new byte[]{'a','b','c'};
    Assert.assertEquals(expected.length,input.length);
    for (int i=0; i < expected.length; i++) {
      Assert.assertEquals(expected[i],input[i]);
    }
    outStream.close();
  }
  @Test public void testClosedCondition() throws Exception {
    final SessionOutputBufferMock transmitter=new SessionOutputBufferMock();
    final IdentityOutputStream outStream=new IdentityOutputStream(transmitter);
    outStream.close();
    outStream.close();
    try {
      final byte[] tmp=new byte[2];
      outStream.write(tmp,0,tmp.length);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException e) {
    }
    try {
      outStream.write('a');
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException e) {
    }
  }
}
