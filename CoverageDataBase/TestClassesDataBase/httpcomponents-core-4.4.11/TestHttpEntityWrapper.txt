/** 
 * Unit tests for  {@link HttpEntityWrapper}.
 */
public class TestHttpEntityWrapper {
  @Test public void testBasics() throws Exception {
    final String s="Message content";
    final StringEntity httpentity=new StringEntity(s,ContentType.TEXT_PLAIN);
    httpentity.setContentEncoding(HTTP.IDENTITY_CODING);
    final HttpEntityWrapper wrapped=new HttpEntityWrapper(httpentity);
    Assert.assertEquals(httpentity.getContentLength(),wrapped.getContentLength());
    Assert.assertEquals(httpentity.getContentType(),wrapped.getContentType());
    Assert.assertEquals(httpentity.getContentEncoding(),wrapped.getContentEncoding());
    Assert.assertEquals(httpentity.isChunked(),wrapped.isChunked());
    Assert.assertEquals(httpentity.isRepeatable(),wrapped.isRepeatable());
    Assert.assertEquals(httpentity.isStreaming(),wrapped.isStreaming());
    Assert.assertNotNull(wrapped.getContent());
  }
  @Test public void testIllegalConstructor() throws Exception {
    try {
      new HttpEntityWrapper(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testWriteTo() throws Exception {
    final String s="Message content";
    final byte[] bytes=s.getBytes(Consts.ISO_8859_1);
    final StringEntity httpentity=new StringEntity(s);
    final HttpEntityWrapper wrapped=new HttpEntityWrapper(httpentity);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    wrapped.writeTo(out);
    byte[] bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    out=new ByteArrayOutputStream();
    wrapped.writeTo(out);
    bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(bytes.length,bytes2.length);
    for (int i=0; i < bytes.length; i++) {
      Assert.assertEquals(bytes[i],bytes2[i]);
    }
    try {
      wrapped.writeTo(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testConsumeContent() throws Exception {
    final String s="Message content";
    final StringEntity httpentity=new StringEntity(s);
    final HttpEntityWrapper wrapped=new HttpEntityWrapper(httpentity);
    EntityUtils.consume(wrapped);
    EntityUtils.consume(wrapped);
  }
}
