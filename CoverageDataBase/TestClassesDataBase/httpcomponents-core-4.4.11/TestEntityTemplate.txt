/** 
 * Unit tests for  {@link EntityTemplate}.
 */
public class TestEntityTemplate {
  @Test public void testBasics() throws Exception {
    final HttpEntity httpentity=new EntityTemplate(new ContentProducer(){
      @Override public void writeTo(      final OutputStream outStream) throws IOException {
        outStream.write('a');
      }
    }
);
    Assert.assertEquals(-1,httpentity.getContentLength());
    Assert.assertTrue(httpentity.isRepeatable());
    Assert.assertFalse(httpentity.isStreaming());
  }
  @Test public void testIllegalConstructor() throws Exception {
    try {
      new EntityTemplate(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testWriteTo() throws Exception {
    final HttpEntity httpentity=new EntityTemplate(new ContentProducer(){
      @Override public void writeTo(      final OutputStream outStream) throws IOException {
        outStream.write('a');
      }
    }
);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    httpentity.writeTo(out);
    final byte[] bytes2=out.toByteArray();
    Assert.assertNotNull(bytes2);
    Assert.assertEquals(1,bytes2.length);
    try {
      httpentity.writeTo(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testgetContent() throws Exception {
    final HttpEntity httpentity=new EntityTemplate(new ContentProducer(){
      @Override public void writeTo(      final OutputStream outStream) throws IOException {
        outStream.write('a');
      }
    }
);
    final InputStream inStream=httpentity.getContent();
    Assert.assertNotNull(inStream);
    final String s=EntityUtils.toString(httpentity);
    Assert.assertEquals("a",s);
  }
}
