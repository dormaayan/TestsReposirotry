/** 
 * Unit tests for  {@link Args}.
 */
public class TestArgs {
  @Test public void testArgCheckPass(){
    Args.check(true,"All is well");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgCheckFail(){
    Args.check(false,"Oopsie");
  }
  @Test public void testArgNotNullPass(){
    final String stuff="stuff";
    Assert.assertSame(stuff,Args.notNull(stuff,"Stuff"));
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotNullFail(){
    Args.notNull(null,"Stuff");
  }
  @Test public void testArgNotEmptyPass(){
    final String stuff="stuff";
    Assert.assertSame(stuff,Args.notEmpty(stuff,"Stuff"));
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotEmptyFail1(){
    Args.notEmpty((String)null,"Stuff");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotEmptyFail2(){
    Args.notEmpty("","Stuff");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotBlankFail1(){
    Args.notBlank((String)null,"Stuff");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotBlankFail2(){
    Args.notBlank("","Stuff");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgNotBlankFail3(){
    Args.notBlank(" \t \n\r","Stuff");
  }
  @Test public void testArgCollectionNotEmptyPass(){
    final List<String> list=Arrays.asList("stuff");
    Assert.assertSame(list,Args.notEmpty(list,"List"));
  }
  @Test(expected=IllegalArgumentException.class) public void testArgCollectionNotEmptyFail1(){
    Args.notEmpty((List<?>)null,"List");
  }
  @Test(expected=IllegalArgumentException.class) public void testArgCollectionNotEmptyFail2(){
    Args.notEmpty(Collections.emptyList(),"List");
  }
  @Test public void testPositiveIntPass(){
    Assert.assertEquals(1,Args.positive(1,"Number"));
  }
  @Test(expected=IllegalArgumentException.class) public void testPositiveIntFail1(){
    Args.positive(-1,"Number");
  }
  @Test(expected=IllegalArgumentException.class) public void testPositiveIntFail2(){
    Args.positive(0,"Number");
  }
  @Test public void testPositiveLongPass(){
    Assert.assertEquals(1L,Args.positive(1L,"Number"));
  }
  @Test(expected=IllegalArgumentException.class) public void testPositiveLongFail1(){
    Args.positive(-1L,"Number");
  }
  @Test(expected=IllegalArgumentException.class) public void testPositiveLongFail2(){
    Args.positive(0L,"Number");
  }
  @Test public void testNotNegativeIntPass1(){
    Assert.assertEquals(1,Args.notNegative(1,"Number"));
  }
  @Test public void testNotNegativeIntPass2(){
    Assert.assertEquals(0,Args.notNegative(0,"Number"));
  }
  @Test(expected=IllegalArgumentException.class) public void testNotNegativeIntFail1(){
    Args.notNegative(-1,"Number");
  }
  @Test public void testNotNegativeLongPass1(){
    Assert.assertEquals(1L,Args.notNegative(1L,"Number"));
  }
  @Test public void testNotNegativeLongPass2(){
    Assert.assertEquals(0L,Args.notNegative(0L,"Number"));
  }
  @Test(expected=IllegalArgumentException.class) public void testNotNegativeLongFail1(){
    Args.notNegative(-1L,"Number");
  }
}
