public class TestContentLengthInputStream {
  @Test public void testConstructors() throws Exception {
    final ContentLengthInputStream in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[]{}),0);
    in.close();
    try {
      new ContentLengthInputStream(null,10);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new ContentLengthInputStream(new SessionInputBufferMock(new byte[]{}),-10);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testBasics() throws IOException {
    final String correct="1234567890123456";
    final InputStream in=new ContentLengthInputStream(new SessionInputBufferMock(correct,Consts.ISO_8859_1),10L);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    final byte[] buffer=new byte[50];
    int len=in.read(buffer,0,2);
    out.write(buffer,0,len);
    len=in.read(buffer);
    out.write(buffer,0,len);
    final String result=new String(out.toByteArray(),Consts.ISO_8859_1);
    Assert.assertEquals(result,"1234567890");
    in.close();
  }
  @Test public void testSkip() throws IOException {
    InputStream in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[20]),10L);
    Assert.assertEquals(10,in.skip(10));
    Assert.assertTrue(in.read() == -1);
    in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[20]),10L);
    in.read();
    Assert.assertEquals(9,in.skip(10));
    Assert.assertTrue(in.read() == -1);
    in.close();
    in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[20]),2L);
    in.read();
    in.read();
    Assert.assertTrue(in.skip(10) <= 0);
    Assert.assertTrue(in.skip(-1) == 0);
    Assert.assertTrue(in.read() == -1);
    in.close();
    in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[20]),10L);
    Assert.assertEquals(5,in.skip(5));
    Assert.assertEquals(5,in.read(new byte[20]));
    in.close();
  }
  @Test public void testAvailable() throws IOException {
    final InputStream in=new ContentLengthInputStream(new SessionInputBufferMock(new byte[]{1,2,3}),3L);
    Assert.assertEquals(0,in.available());
    in.read();
    Assert.assertEquals(2,in.available());
    in.close();
  }
  @Test public void testClose() throws IOException {
    final String correct="1234567890123456-";
    final SessionInputBuffer inBuffer=new SessionInputBufferMock(correct,Consts.ISO_8859_1);
    final InputStream in=new ContentLengthInputStream(inBuffer,16L);
    in.close();
    in.close();
    try {
      in.read();
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
    final byte[] tmp=new byte[10];
    try {
      in.read(tmp);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
    try {
      in.read(tmp,0,tmp.length);
      Assert.fail("IOException should have been thrown");
    }
 catch (    final IOException ex) {
    }
    Assert.assertEquals('-',inBuffer.read());
  }
  @Test public void testTruncatedContent() throws IOException {
    final String correct="1234567890123456";
    final SessionInputBuffer inBuffer=new SessionInputBufferMock(correct,Consts.ISO_8859_1);
    final InputStream in=new ContentLengthInputStream(inBuffer,32L);
    final byte[] tmp=new byte[32];
    final int byteRead=in.read(tmp);
    Assert.assertEquals(16,byteRead);
    try {
      in.read(tmp);
      Assert.fail("ConnectionClosedException should have been closed");
    }
 catch (    final ConnectionClosedException ex) {
    }
    try {
      in.read();
      Assert.fail("ConnectionClosedException should have been closed");
    }
 catch (    final ConnectionClosedException ex) {
    }
    try {
      in.close();
      Assert.fail("ConnectionClosedException should have been closed");
    }
 catch (    final ConnectionClosedException ex) {
    }
  }
}
