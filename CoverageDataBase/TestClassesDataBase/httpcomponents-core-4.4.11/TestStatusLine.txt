/** 
 * Simple tests for  {@link StatusLine}.
 */
public class TestStatusLine {
  @Test public void testConstructor(){
    final StatusLine statusline=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    Assert.assertEquals(HttpVersion.HTTP_1_1,statusline.getProtocolVersion());
    Assert.assertEquals(HttpStatus.SC_OK,statusline.getStatusCode());
    Assert.assertEquals("OK",statusline.getReasonPhrase());
  }
  @Test public void testConstructorInvalidInput(){
    try {
      new BasicStatusLine(null,HttpStatus.SC_OK,"OK");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException e) {
    }
    try {
      new BasicStatusLine(HttpVersion.HTTP_1_1,-1,"OK");
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void testToString() throws Exception {
    StatusLine statusline=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    Assert.assertEquals("HTTP/1.1 200 OK",statusline.toString());
    statusline=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,null);
    Assert.assertEquals("HTTP/1.1 200 ",statusline.toString());
  }
  @Test public void testCloning() throws Exception {
    final BasicStatusLine orig=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    final BasicStatusLine clone=(BasicStatusLine)orig.clone();
    Assert.assertEquals(orig.getReasonPhrase(),clone.getReasonPhrase());
    Assert.assertEquals(orig.getStatusCode(),clone.getStatusCode());
    Assert.assertEquals(orig.getProtocolVersion(),clone.getProtocolVersion());
  }
  @Test public void testSerialization() throws Exception {
    final BasicStatusLine orig=new BasicStatusLine(HttpVersion.HTTP_1_1,HttpStatus.SC_OK,"OK");
    final ByteArrayOutputStream outbuffer=new ByteArrayOutputStream();
    final ObjectOutputStream outStream=new ObjectOutputStream(outbuffer);
    outStream.writeObject(orig);
    outStream.close();
    final byte[] raw=outbuffer.toByteArray();
    final ByteArrayInputStream inBuffer=new ByteArrayInputStream(raw);
    final ObjectInputStream inStream=new ObjectInputStream(inBuffer);
    final BasicStatusLine clone=(BasicStatusLine)inStream.readObject();
    Assert.assertEquals(orig.getReasonPhrase(),clone.getReasonPhrase());
    Assert.assertEquals(orig.getStatusCode(),clone.getStatusCode());
    Assert.assertEquals(orig.getProtocolVersion(),clone.getProtocolVersion());
  }
}
