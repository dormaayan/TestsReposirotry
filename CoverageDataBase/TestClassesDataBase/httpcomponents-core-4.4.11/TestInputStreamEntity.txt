/** 
 * Unit tests for  {@link InputStreamEntity}.
 */
public class TestInputStreamEntity {
  @Test public void testBasics() throws Exception {
    final byte[] bytes="Message content".getBytes(Consts.ISO_8859_1);
    final InputStream inStream=new ByteArrayInputStream(bytes);
    final InputStreamEntity httpentity=new InputStreamEntity(inStream,bytes.length);
    Assert.assertEquals(bytes.length,httpentity.getContentLength());
    Assert.assertEquals(inStream,httpentity.getContent());
    Assert.assertNotNull(httpentity.getContent());
    Assert.assertFalse(httpentity.isRepeatable());
    Assert.assertTrue(httpentity.isStreaming());
  }
  @Test(expected=IllegalArgumentException.class) public void testIllegalConstructor() throws Exception {
    new InputStreamEntity(null,0);
  }
  @Test public void testUnknownLengthConstructor() throws Exception {
    final InputStream inStream=new ByteArrayInputStream(new byte[0]);
    final InputStreamEntity httpentity=new InputStreamEntity(inStream);
    Assert.assertEquals(-1,httpentity.getContentLength());
  }
  @Test public void testWriteTo() throws Exception {
    final String message="Message content";
    final byte[] bytes=message.getBytes(Consts.ISO_8859_1);
    final InputStream inStream=new ByteArrayInputStream(bytes);
    final InputStreamEntity httpentity=new InputStreamEntity(inStream,bytes.length);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    httpentity.writeTo(out);
    final byte[] writtenBytes=out.toByteArray();
    Assert.assertNotNull(writtenBytes);
    Assert.assertEquals(bytes.length,writtenBytes.length);
    final String s=new String(writtenBytes,Consts.ISO_8859_1.name());
    Assert.assertEquals(message,s);
  }
  @Test public void testWriteToPartialContent() throws Exception {
    final String message="Message content";
    final byte[] bytes=message.getBytes(Consts.ISO_8859_1);
    final InputStream inStream=new ByteArrayInputStream(bytes);
    final int contentLength=7;
    final InputStreamEntity httpentity=new InputStreamEntity(inStream,contentLength);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    httpentity.writeTo(out);
    final byte[] writtenBytes=out.toByteArray();
    Assert.assertNotNull(writtenBytes);
    Assert.assertEquals(contentLength,writtenBytes.length);
    final String s=new String(writtenBytes,Consts.ISO_8859_1.name());
    Assert.assertEquals(message.substring(0,contentLength),s);
  }
  @Test public void testWriteToUnknownLength() throws Exception {
    final String message="Message content";
    final byte[] bytes=message.getBytes(Consts.ISO_8859_1);
    final InputStream inStream=new ByteArrayInputStream(bytes);
    final InputStreamEntity httpentity=new InputStreamEntity(inStream);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    httpentity.writeTo(out);
    final byte[] writtenBytes=out.toByteArray();
    Assert.assertNotNull(writtenBytes);
    Assert.assertEquals(bytes.length,writtenBytes.length);
    final String s=new String(writtenBytes,Consts.ISO_8859_1.name());
    Assert.assertEquals(message,s);
  }
  @Test(expected=IllegalArgumentException.class) public void testWriteToNull() throws Exception {
    final InputStream inStream=new ByteArrayInputStream(new byte[0]);
    final InputStreamEntity httpentity=new InputStreamEntity(inStream,0);
    httpentity.writeTo(null);
  }
}
