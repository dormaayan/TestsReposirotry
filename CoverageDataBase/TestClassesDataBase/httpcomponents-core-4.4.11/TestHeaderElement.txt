/** 
 * Simple tests for  {@link HeaderElement}.
 */
public class TestHeaderElement {
  @Test public void testConstructor3() throws Exception {
    final HeaderElement element=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    Assert.assertEquals("name",element.getName());
    Assert.assertEquals("value",element.getValue());
    Assert.assertEquals(2,element.getParameters().length);
    Assert.assertEquals("value1",element.getParameterByName("param1").getValue());
    Assert.assertEquals("value2",element.getParameterByName("param2").getValue());
  }
  @Test public void testConstructor2() throws Exception {
    final HeaderElement element=new BasicHeaderElement("name","value");
    Assert.assertEquals("name",element.getName());
    Assert.assertEquals("value",element.getValue());
    Assert.assertEquals(0,element.getParameters().length);
  }
  @Test public void testInvalidName(){
    try {
      new BasicHeaderElement(null,null,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testParamByName() throws Exception {
    final String s="name = value; param1 = value1; param2 = value2";
    final HeaderElement element=BasicHeaderValueParser.parseHeaderElement(s,null);
    Assert.assertEquals("value1",element.getParameterByName("param1").getValue());
    Assert.assertEquals("value2",element.getParameterByName("param2").getValue());
    Assert.assertNull(element.getParameterByName("param3"));
    try {
      element.getParameterByName(null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testHashCode(){
    final HeaderElement element1=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    final HeaderElement element2=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param2","value2"),new BasicNameValuePair("param1","value1")});
    final HeaderElement element3=new BasicHeaderElement("name","value");
    final HeaderElement element4=new BasicHeaderElement("name","value");
    final HeaderElement element5=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    Assert.assertTrue(element1.hashCode() != element2.hashCode());
    Assert.assertTrue(element1.hashCode() != element3.hashCode());
    Assert.assertTrue(element2.hashCode() != element3.hashCode());
    Assert.assertTrue(element3.hashCode() == element4.hashCode());
    Assert.assertTrue(element1.hashCode() == element5.hashCode());
  }
  @Test public void testEquals(){
    final HeaderElement element1=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    final HeaderElement element2=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param2","value2"),new BasicNameValuePair("param1","value1")});
    final HeaderElement element3=new BasicHeaderElement("name","value");
    final HeaderElement element4=new BasicHeaderElement("name","value");
    final HeaderElement element5=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    Assert.assertTrue(element1.equals(element1));
    Assert.assertTrue(!element1.equals(element2));
    Assert.assertTrue(!element1.equals(element3));
    Assert.assertTrue(!element2.equals(element3));
    Assert.assertTrue(element3.equals(element4));
    Assert.assertTrue(element1.equals(element5));
    Assert.assertFalse(element1.equals(null));
    Assert.assertFalse(element1.equals("name = value; param1 = value1; param2 = value2"));
  }
  @Test public void testToString(){
    String s="name=value; param1=value1; param2=value2";
    HeaderElement element=BasicHeaderValueParser.parseHeaderElement(s,null);
    Assert.assertEquals(s,element.toString());
    s="name; param1=value1; param2=value2";
    element=BasicHeaderValueParser.parseHeaderElement(s,null);
    Assert.assertEquals(s,element.toString());
  }
  @Test public void testCloning() throws Exception {
    final BasicHeaderElement orig=new BasicHeaderElement("name","value",new NameValuePair[]{new BasicNameValuePair("param1","value1"),new BasicNameValuePair("param2","value2")});
    final BasicHeaderElement clone=(BasicHeaderElement)orig.clone();
    Assert.assertEquals(orig,clone);
  }
}
