/** 
 * Simple tests for  {@link IdentityEncoder}.
 */
public class TestIdentityEncoder {
  private File tmpfile;
  protected File createTempFile() throws IOException {
    this.tmpfile=File.createTempFile("testFile",".txt");
    return this.tmpfile;
  }
  @After public void deleteTempFile(){
    if (this.tmpfile != null && this.tmpfile.exists()) {
      this.tmpfile.delete();
    }
  }
  @Test public void testBasicCoding() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    encoder.complete();
    Assert.assertTrue(encoder.isCompleted());
    Assert.assertEquals(5,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff",s);
    Assert.assertEquals("[identity; completed: true]",encoder.toString());
  }
  @Test public void testCodingEmptySrcBuffer() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("stuff"));
    final ByteBuffer empty=ByteBuffer.allocate(100);
    empty.flip();
    encoder.write(empty);
    encoder.write(null);
    encoder.complete();
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertTrue(encoder.isCompleted());
    Assert.assertEquals("stuff",s);
  }
  @Test public void testCodingCompleted() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("stuff"));
    encoder.complete();
    try {
      encoder.write(CodecTestUtils.wrap("more stuff"));
      Assert.fail("IllegalStateException should have been thrown");
    }
 catch (    final IllegalStateException ex) {
    }
  }
  @Test public void testInvalidConstructor(){
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    try {
      new IdentityEncoder(null,null,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new IdentityEncoder(channel,null,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
    try {
      new IdentityEncoder(channel,outbuf,null);
      Assert.fail("IllegalArgumentException should have been thrown");
    }
 catch (    final IllegalArgumentException ex) {
    }
  }
  @Test public void testCodingFromFile() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    createTempFile();
    RandomAccessFile testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      testfile.write("stuff;".getBytes(Consts.ASCII));
      testfile.write("more stuff".getBytes(Consts.ASCII));
    }
  finally {
      testfile.close();
    }
    testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      final FileChannel fchannel=testfile.getChannel();
      encoder.transfer(fchannel,0,20);
    }
  finally {
      testfile.close();
    }
    final String s=channel.dump(Consts.ASCII);
    Assert.assertFalse(encoder.isCompleted());
    Assert.assertEquals("stuff;more stuff",s);
  }
  @Test public void testCodingEmptyFile() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    encoder.write(CodecTestUtils.wrap("stuff;"));
    createTempFile();
    RandomAccessFile testfile=new RandomAccessFile(this.tmpfile,"rw");
    testfile.close();
    testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      final FileChannel fchannel=testfile.getChannel();
      encoder.transfer(fchannel,0,20);
      encoder.write(CodecTestUtils.wrap("more stuff"));
    }
  finally {
      testfile.close();
    }
    final String s=channel.dump(Consts.ASCII);
    Assert.assertFalse(encoder.isCompleted());
    Assert.assertEquals("stuff;more stuff",s);
  }
  @Test public void testCodingFromFileSmaller() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    createTempFile();
    RandomAccessFile testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      testfile.write("stuff;".getBytes(Consts.ASCII));
      testfile.write("more stuff".getBytes(Consts.ASCII));
    }
  finally {
      testfile.close();
    }
    testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      final FileChannel fchannel=testfile.getChannel();
      encoder.transfer(fchannel,0,20);
    }
  finally {
      testfile.close();
    }
    final String s=channel.dump(Consts.ASCII);
    Assert.assertFalse(encoder.isCompleted());
    Assert.assertEquals("stuff;more stuff",s);
  }
  @Test public void testCodingFromFileFlushBuffer() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    outbuf.writeLine("header");
    createTempFile();
    RandomAccessFile testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      testfile.write("stuff;".getBytes(Consts.ASCII));
      testfile.write("more stuff".getBytes(Consts.ASCII));
    }
  finally {
      testfile.close();
    }
    testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      final FileChannel fchannel=testfile.getChannel();
      encoder.transfer(fchannel,0,20);
    }
  finally {
      testfile.close();
    }
    final String s=channel.dump(Consts.ASCII);
    Assert.assertFalse(encoder.isCompleted());
    Assert.assertEquals("header\r\nstuff;more stuff",s);
  }
  @Test public void testCodingFromFileChannelSaturated() throws Exception {
    final WritableByteChannelMock channel=new WritableByteChannelMock(64,4);
    final SessionOutputBuffer outbuf=new SessionOutputBufferImpl(1024,128);
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics);
    outbuf.writeLine("header");
    createTempFile();
    RandomAccessFile testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      testfile.write("stuff".getBytes(Consts.ASCII));
    }
  finally {
      testfile.close();
    }
    testfile=new RandomAccessFile(this.tmpfile,"rw");
    try {
      final FileChannel fchannel=testfile.getChannel();
      encoder.transfer(fchannel,0,20);
      encoder.transfer(fchannel,0,20);
    }
  finally {
      testfile.close();
    }
    final String s=channel.dump(Consts.ASCII);
    Assert.assertFalse(encoder.isCompleted());
    Assert.assertEquals("head",s);
  }
  @Test public void testCodingNoFragmentBuffering() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    outbuf.writeLine("header");
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,0);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Mockito.verify(channel,Mockito.times(2)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.never()).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).flush(channel);
    Assert.assertEquals(13,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("header\r\nstuff",s);
  }
  @Test public void testCodingFragmentBuffering() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    outbuf.writeLine("header");
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,32);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Mockito.verify(channel,Mockito.never()).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.never()).flush(channel);
    Assert.assertEquals(0,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("header\r\nstuff",s);
  }
  @Test public void testCodingFragmentBufferingMultipleFragments() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,32);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(10,encoder.write(CodecTestUtils.wrap("more stuff")));
    Mockito.verify(channel,Mockito.never()).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.never()).flush(channel);
    Assert.assertEquals(0,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff-more stuff",s);
  }
  @Test public void testCodingFragmentBufferingLargeFragment() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    outbuf.writeLine("header");
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,2);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Mockito.verify(channel,Mockito.times(2)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.never()).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).flush(channel);
    Assert.assertEquals(13,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("header\r\nstuff",s);
  }
  @Test public void testCodingFragmentBufferingTinyFragments() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,1);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(10,encoder.write(CodecTestUtils.wrap("more stuff")));
    Mockito.verify(channel,Mockito.times(5)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).flush(channel);
    Assert.assertEquals(18,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff---more stuff",s);
  }
  @Test public void testCodingFragmentBufferingTinyFragments2() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,2);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(10,encoder.write(CodecTestUtils.wrap("more stuff")));
    Mockito.verify(channel,Mockito.times(4)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(2)).flush(channel);
    Assert.assertEquals(18,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff---more stuff",s);
  }
  @Test public void testCodingFragmentBufferingTinyFragments3() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,3);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(2,encoder.write(CodecTestUtils.wrap("--")));
    Assert.assertEquals(10,encoder.write(CodecTestUtils.wrap("more stuff")));
    Mockito.verify(channel,Mockito.times(4)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(5)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(2)).flush(channel);
    Assert.assertEquals(21,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff------more stuff",s);
  }
  @Test public void testCodingFragmentBufferingBufferFlush() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,8);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(6,encoder.write(CodecTestUtils.wrap("-stuff")));
    Mockito.verify(channel,Mockito.times(1)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).flush(channel);
    Assert.assertEquals(8,metrics.getBytesTransferred());
    Assert.assertEquals(3,outbuf.length());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff-stuff",s);
  }
  @Test public void testCodingFragmentBufferingBufferFlush2() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,8);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(16,encoder.write(CodecTestUtils.wrap("-much more stuff")));
    Mockito.verify(channel,Mockito.times(2)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).flush(channel);
    Assert.assertEquals(21,metrics.getBytesTransferred());
    Assert.assertEquals(0,outbuf.length());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff-much more stuff",s);
  }
  @Test public void testCodingFragmentBufferingChannelSaturated() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64,8));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,3);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(0,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(0,encoder.write(CodecTestUtils.wrap("more stuff")));
    Mockito.verify(channel,Mockito.times(5)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(6)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(4)).flush(channel);
    Assert.assertEquals(8,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff---",s);
    Assert.assertEquals(3,outbuf.length());
  }
  @Test public void testCodingFragmentBufferingChannelSaturated2() throws Exception {
    final WritableByteChannelMock channel=Mockito.spy(new WritableByteChannelMock(64,8));
    final SessionOutputBuffer outbuf=Mockito.spy(new SessionOutputBufferImpl(1024,128));
    final HttpTransportMetricsImpl metrics=new HttpTransportMetricsImpl();
    final IdentityEncoder encoder=new IdentityEncoder(channel,outbuf,metrics,8);
    Assert.assertEquals(5,encoder.write(CodecTestUtils.wrap("stuff")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("-")));
    Assert.assertEquals(1,encoder.write(CodecTestUtils.wrap("much more stuff")));
    Mockito.verify(channel,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(3)).write(Matchers.<ByteBuffer>any());
    Mockito.verify(outbuf,Mockito.times(1)).flush(channel);
    Assert.assertEquals(8,metrics.getBytesTransferred());
    outbuf.flush(channel);
    final String s=channel.dump(Consts.ASCII);
    Assert.assertEquals("stuff--m",s);
    Assert.assertEquals(0,outbuf.length());
  }
}
