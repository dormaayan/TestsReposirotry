/** 
 * Base class for all HttpCore NIO integration tests
 */
public abstract class HttpCoreNIOTestBase {
  public enum ProtocolScheme {  http,   https}
  private final ProtocolScheme scheme;
  protected HttpServerNio server;
  protected HttpClientNio client;
  public HttpCoreNIOTestBase(  final ProtocolScheme scheme){
    this.scheme=scheme;
  }
  public HttpCoreNIOTestBase(){
    this(ProtocolScheme.http);
  }
  public ProtocolScheme getScheme(){
    return this.scheme;
  }
  protected SSLContext createServerSSLContext() throws Exception {
    final URL keyStoreURL=getClass().getResource("/test.keystore");
    final String storePassword="nopassword";
    return SSLContextBuilder.create().loadTrustMaterial(keyStoreURL,storePassword.toCharArray()).loadKeyMaterial(keyStoreURL,storePassword.toCharArray(),storePassword.toCharArray()).build();
  }
  protected SSLContext createClientSSLContext() throws Exception {
    final URL keyStoreURL=getClass().getResource("/test.keystore");
    final String storePassword="nopassword";
    return SSLContextBuilder.create().loadTrustMaterial(keyStoreURL,storePassword.toCharArray()).build();
  }
  protected ServerConnectionFactory createServerConnectionFactory() throws Exception {
    return new ServerConnectionFactory(this.scheme.equals(ProtocolScheme.https) ? createServerSSLContext() : null);
  }
  protected BasicNIOConnFactory createClientConnectionFactory() throws Exception {
    return new BasicNIOConnFactory(new ClientConnectionFactory(),this.scheme.equals(ProtocolScheme.https) ? new ClientConnectionFactory(createClientSSLContext()) : null);
  }
  public void initServer() throws Exception {
    this.server=new HttpServerNio();
    this.server.setConnectionFactory(createServerConnectionFactory());
    this.server.setTimeout(5000);
  }
  public void initClient() throws Exception {
    this.client=new HttpClientNio(createClientConnectionFactory());
    this.client.setTimeout(5000);
  }
  @After public void shutDownClient() throws Exception {
    if (this.client != null) {
      this.client.shutdown();
      this.client=null;
    }
  }
  @After public void shutDownServer() throws Exception {
    if (this.server != null) {
      this.server.shutdown();
      this.server=null;
    }
  }
}
