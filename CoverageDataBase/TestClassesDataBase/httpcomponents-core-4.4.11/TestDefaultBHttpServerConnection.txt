public class TestDefaultBHttpServerConnection {
  @Mock private Socket socket;
  private DefaultBHttpServerConnection conn;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    conn=new DefaultBHttpServerConnection(1024,1024,null,null,MessageConstraints.DEFAULT,LaxContentLengthStrategy.INSTANCE,StrictContentLengthStrategy.INSTANCE,DefaultHttpRequestParserFactory.INSTANCE,DefaultHttpResponseWriterFactory.INSTANCE);
  }
  @Test public void testBasics() throws Exception {
    Assert.assertFalse(conn.isOpen());
    Assert.assertEquals("[Not bound]",conn.toString());
  }
  @Test public void testReadRequestHead() throws Exception {
    final String s="GET / HTTP/1.1\r\nUser-Agent: test\r\n\r\n";
    final ByteArrayInputStream inStream=new ByteArrayInputStream(s.getBytes(Consts.ASCII));
    Mockito.when(socket.getInputStream()).thenReturn(inStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getRequestCount());
    final HttpRequest request=conn.receiveRequestHeader();
    Assert.assertNotNull(request);
    Assert.assertEquals(HttpVersion.HTTP_1_1,request.getProtocolVersion());
    Assert.assertEquals("/",request.getRequestLine().getUri());
    Assert.assertEquals("GET",request.getRequestLine().getMethod());
    Assert.assertTrue(request.containsHeader("User-Agent"));
    Assert.assertEquals(1,conn.getMetrics().getRequestCount());
  }
  @Test public void testReadRequestEntity() throws Exception {
    final String s="POST / HTTP/1.1\r\nUser-Agent: test\r\nContent-Length: 3\r\n\r\n123";
    final ByteArrayInputStream inStream=new ByteArrayInputStream(s.getBytes(Consts.ASCII));
    Mockito.when(socket.getInputStream()).thenReturn(inStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getRequestCount());
    final HttpEntityEnclosingRequest request=(HttpEntityEnclosingRequest)conn.receiveRequestHeader();
    Assert.assertNotNull(request);
    Assert.assertEquals(HttpVersion.HTTP_1_1,request.getProtocolVersion());
    Assert.assertEquals("/",request.getRequestLine().getUri());
    Assert.assertEquals("POST",request.getRequestLine().getMethod());
    Assert.assertTrue(request.containsHeader("User-Agent"));
    Assert.assertNull(request.getEntity());
    Assert.assertEquals(1,conn.getMetrics().getRequestCount());
    conn.receiveRequestEntity(request);
    final HttpEntity entity=request.getEntity();
    Assert.assertNotNull(entity);
    Assert.assertEquals(3,entity.getContentLength());
    Assert.assertEquals(1,conn.getMetrics().getRequestCount());
  }
  @Test public void testWriteResponseHead() throws Exception {
    final ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    Mockito.when(socket.getOutputStream()).thenReturn(outStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
    response.addHeader("User-Agent","test");
    conn.sendResponseHeader(response);
    conn.flush();
    Assert.assertEquals(1,conn.getMetrics().getResponseCount());
    final String s=new String(outStream.toByteArray(),"ASCII");
    Assert.assertEquals("HTTP/1.1 200 OK\r\nUser-Agent: test\r\n\r\n",s);
  }
  @Test public void testWriteResponse100Head() throws Exception {
    final ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    Mockito.when(socket.getOutputStream()).thenReturn(outStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,100,"Go on");
    conn.sendResponseHeader(response);
    conn.flush();
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final String s=new String(outStream.toByteArray(),"ASCII");
    Assert.assertEquals("HTTP/1.1 100 Go on\r\n\r\n",s);
  }
  @Test public void testWriteResponseEntity() throws Exception {
    final ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    Mockito.when(socket.getOutputStream()).thenReturn(outStream);
    conn.bind(socket);
    Assert.assertEquals(0,conn.getMetrics().getResponseCount());
    final HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
    response.addHeader("User-Agent","test");
    response.addHeader("Content-Length","3");
    response.setEntity(new StringEntity("123",ContentType.TEXT_PLAIN));
    conn.sendResponseHeader(response);
    conn.sendResponseEntity(response);
    conn.flush();
    Assert.assertEquals(1,conn.getMetrics().getResponseCount());
    final String s=new String(outStream.toByteArray(),"ASCII");
    Assert.assertEquals("HTTP/1.1 200 OK\r\nUser-Agent: test\r\nContent-Length: 3\r\n\r\n123",s);
  }
}
