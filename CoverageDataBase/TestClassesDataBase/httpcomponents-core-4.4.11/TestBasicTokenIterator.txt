/** 
 * Tests for  {@link BasicTokenIterator}.
 */
public class TestBasicTokenIterator {
  @Test public void testSingleHeader(){
    Header[] headers=new Header[]{new BasicHeader("Name","token0,token1, token2 , token3")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token1","token1",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token2","token2",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token3","token3",ti.nextToken());
    Assert.assertFalse(ti.hasNext());
    headers=new Header[]{new BasicHeader("Name","token0")};
    hit=new BasicHeaderIterator(headers,null);
    ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertFalse(ti.hasNext());
  }
  @Test public void testMultiHeader(){
    final Header[] headers=new Header[]{new BasicHeader("Name","token0,token1"),new BasicHeader("Name",""),new BasicHeader("Name","token2"),new BasicHeader("Name"," "),new BasicHeader("Name","token3 "),new BasicHeader("Name",","),new BasicHeader("Name","token4")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token1","token1",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token2","token2",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token3","token3",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token4","token4",ti.nextToken());
    Assert.assertFalse(ti.hasNext());
  }
  @Test public void testEmpty(){
    final Header[] headers=new Header[]{new BasicHeader("Name"," "),new BasicHeader("Name",""),new BasicHeader("Name",","),new BasicHeader("Name"," ,, ")};
    HeaderIterator hit=new BasicHeaderIterator(headers,null);
    TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertFalse(ti.hasNext());
    hit=new BasicHeaderIterator(headers,"empty");
    ti=new BasicTokenIterator(hit);
    Assert.assertFalse(ti.hasNext());
  }
  @Test public void testValueStart(){
    final Header[] headers=new Header[]{new BasicHeader("Name","token0"),new BasicHeader("Name"," token1"),new BasicHeader("Name",",token2"),new BasicHeader("Name"," ,token3"),new BasicHeader("Name",", token4"),new BasicHeader("Name"," , token5")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token1","token1",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token2","token2",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token3","token3",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token4","token4",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token5","token5",ti.nextToken());
    Assert.assertFalse(ti.hasNext());
  }
  @Test public void testValueEnd(){
    final Header[] headers=new Header[]{new BasicHeader("Name","token0"),new BasicHeader("Name","token1 "),new BasicHeader("Name","token2,"),new BasicHeader("Name","token3 ,"),new BasicHeader("Name","token4, "),new BasicHeader("Name","token5 , ")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token1","token1",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token2","token2",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token3","token3",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token4","token4",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token5","token5",ti.nextToken());
    Assert.assertFalse(ti.hasNext());
  }
  @Test public void testTokenChar(){
    final Header[] headers=new Header[]{new BasicHeader("Name","token0")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final BasicTokenIterator bti=new BasicTokenIterator(hit);
    Assert.assertTrue("letter",bti.isTokenChar('j'));
    Assert.assertFalse("control",bti.isTokenChar('\b'));
    Assert.assertFalse("separator",bti.isTokenChar('?'));
    Assert.assertTrue("other",bti.isTokenChar('-'));
  }
  @Test public void testInvalid(){
    final Header[] headers=new Header[]{new BasicHeader("in","token0=token1"),new BasicHeader("no","token0 token1"),new BasicHeader("pre","<token0,token1"),new BasicHeader("post","token0,token1=")};
    HeaderIterator hit=new BasicHeaderIterator(headers,"in");
    TokenIterator ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    try {
      ti.nextToken();
      Assert.fail("invalid infix character not detected");
    }
 catch (    final ParseException px) {
    }
    hit=new BasicHeaderIterator(headers,"no");
    ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    try {
      ti.nextToken();
      Assert.fail("missing token separator not detected");
    }
 catch (    final ParseException px) {
    }
    hit=new BasicHeaderIterator(headers,"pre");
    try {
      new BasicTokenIterator(hit);
      Assert.fail("invalid prefix character not detected");
    }
 catch (    final ParseException px) {
    }
    hit=new BasicHeaderIterator(headers,"post");
    ti=new BasicTokenIterator(hit);
    Assert.assertTrue(ti.hasNext());
    Assert.assertEquals("token0","token0",ti.nextToken());
    Assert.assertTrue(ti.hasNext());
    try {
      ti.nextToken();
      Assert.fail("invalid postfix character not detected");
    }
 catch (    final ParseException px) {
    }
  }
  @Test public void testWrongPublic(){
    try {
      new BasicTokenIterator(null);
      Assert.fail("null argument not detected");
    }
 catch (    final IllegalArgumentException iax) {
    }
    final Header[] headers=new Header[]{new BasicHeader("Name"," "),new BasicHeader("Name",""),new BasicHeader("Name",","),new BasicHeader("Name"," ,, ")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final TokenIterator ti=new BasicTokenIterator(hit);
    try {
      ti.next();
      Assert.fail("next after end not detected");
    }
 catch (    final NoSuchElementException nsx) {
    }
    try {
      ti.remove();
      Assert.fail("unsupported remove not detected");
    }
 catch (    final UnsupportedOperationException uox) {
    }
  }
  @Test public void testWrongProtected(){
    final Header[] headers=new Header[]{new BasicHeader("Name","token1,token2")};
    final HeaderIterator hit=new BasicHeaderIterator(headers,null);
    final BasicTokenIterator bti=new BasicTokenIterator(hit);
    try {
      bti.findTokenStart(-1);
      Assert.fail("tokenStart: negative index not detected");
    }
 catch (    final IllegalArgumentException iax) {
    }
    try {
      bti.findTokenSeparator(-1);
      Assert.fail("tokenSeparator: negative index not detected");
    }
 catch (    final IllegalArgumentException iax) {
    }
    try {
      bti.findTokenEnd(-1);
      Assert.fail("tokenEnd: negative index not detected");
    }
 catch (    final IllegalArgumentException iax) {
    }
  }
}
