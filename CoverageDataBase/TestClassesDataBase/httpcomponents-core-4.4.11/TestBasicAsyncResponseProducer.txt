public class TestBasicAsyncResponseProducer {
  private BasicAsyncResponseProducer producer;
  @Mock private HttpAsyncContentProducer contentProducer;
  @Mock private HttpResponse response;
  @Mock private ContentEncoder encoder;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    producer=new BasicAsyncResponseProducer(response,contentProducer);
  }
  @After public void tearDown() throws Exception {
  }
  @Test(expected=IllegalArgumentException.class) public void testNullTargetArgConstructor() throws Exception {
    producer=new BasicAsyncResponseProducer(null);
  }
  @Test public void testGenerateRequest(){
    final HttpResponse res=producer.generateResponse();
    Assert.assertSame(response,res);
  }
  @SuppressWarnings("boxing") @Test public void testProduceContentEncoderCompleted() throws Exception {
    when(encoder.isCompleted()).thenReturn(Boolean.TRUE);
    producer.produceContent(encoder,null);
    verify(contentProducer,times(1)).close();
  }
  @SuppressWarnings("boxing") @Test public void testProduceContentEncoderNotCompleted() throws Exception {
    when(encoder.isCompleted()).thenReturn(Boolean.FALSE);
    producer.produceContent(encoder,null);
    verify(contentProducer,never()).close();
  }
  @Test public void testClose() throws Exception {
    producer.close();
    verify(contentProducer,times(1)).close();
  }
}
