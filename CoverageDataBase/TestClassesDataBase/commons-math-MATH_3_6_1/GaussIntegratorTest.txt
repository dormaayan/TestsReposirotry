/** 
 * Test for  {@link GaussIntegrator} class.
 */
public class GaussIntegratorTest {
  @Test public void testGetWeights(){
    final double[] points={0,1.2,3.4};
    final double[] weights={9.8,7.6,5.4};
    final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));
    Assert.assertEquals(weights.length,integrator.getNumberOfPoints());
    for (int i=0; i < integrator.getNumberOfPoints(); i++) {
      Assert.assertEquals(weights[i],integrator.getWeight(i),0d);
    }
  }
  @Test public void testGetPoints(){
    final double[] points={0,1.2,3.4};
    final double[] weights={9.8,7.6,5.4};
    final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));
    Assert.assertEquals(points.length,integrator.getNumberOfPoints());
    for (int i=0; i < integrator.getNumberOfPoints(); i++) {
      Assert.assertEquals(points[i],integrator.getPoint(i),0d);
    }
  }
  @Test public void testIntegrate(){
    final double[] points={0,1,2,3,4,5};
    final double[] weights={1,1,1,1,1,1};
    final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));
    final double val=123.456;
    final UnivariateFunction c=new Constant(val);
    final double s=integrator.integrate(c);
    Assert.assertEquals(points.length * val,s,0d);
  }
}
