class DummyRuleFactory extends BaseRuleFactory<Double> {
  /** 
 * Rule computations counter. 
 */
  private static AtomicInteger nCalls=new AtomicInteger();
  @Override protected Pair<Double[],Double[]> computeRule(  int order){
    nCalls.getAndIncrement();
    try {
      Thread.sleep(20);
    }
 catch (    InterruptedException e) {
      Assert.fail("Unexpected interruption");
    }
    final Double[] p=new Double[order];
    final Double[] w=new Double[order];
    for (int i=0; i < order; i++) {
      p[i]=new Double(i);
      w[i]=new Double(i);
    }
    return new Pair<Double[],Double[]>(p,w);
  }
  public int getNumberOfCalls(){
    return nCalls.get();
  }
}
