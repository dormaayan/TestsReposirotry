private static class BrownDennisFunction extends MinpackFunction {
  public BrownDennisFunction(  int m,  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(m,startParams,theoreticalMinCost,theoreticalMinParams);
    setCostAccuracy(2.5e-8);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double temp=(i + 1) / 5.0;
      double ti=FastMath.sin(temp);
      double tmp1=x1 + temp * x2 - FastMath.exp(temp);
      double tmp2=x3 + ti * x4 - FastMath.cos(temp);
      jacobian[i]=new double[]{2 * tmp1,2 * temp * tmp1,2 * tmp2,2 * ti * tmp2};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      double temp=(i + 1) / 5.0;
      double tmp1=x1 + temp * x2 - FastMath.exp(temp);
      double tmp2=x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
      f[i]=tmp1 * tmp1 + tmp2 * tmp2;
    }
    return f;
  }
}
