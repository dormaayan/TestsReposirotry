/** 
 * Test of the  {@link HermiteRuleFactory}.
 */
public class HermiteTest {
  private static final GaussIntegratorFactory factory=new GaussIntegratorFactory();
  @Test public void testNormalDistribution(){
    final double oneOverSqrtPi=1 / FastMath.sqrt(Math.PI);
    final int numPoints=1;
    final UnivariateFunction f=new UnivariateFunction(){
      public double value(      double y){
        return oneOverSqrtPi;
      }
    }
;
    final GaussIntegrator integrator=factory.hermite(numPoints);
    final double result=integrator.integrate(f);
    final double expected=1;
    Assert.assertEquals(expected,result,Math.ulp(expected));
  }
  @Test public void testNormalMean(){
    final double sqrtTwo=FastMath.sqrt(2);
    final double oneOverSqrtPi=1 / FastMath.sqrt(Math.PI);
    final double mu=12345.6789;
    final double sigma=987.654321;
    final int numPoints=5;
    final UnivariateFunction f=new UnivariateFunction(){
      public double value(      double y){
        return oneOverSqrtPi * (sqrtTwo * sigma * y + mu);
      }
    }
;
    final GaussIntegrator integrator=factory.hermite(numPoints);
    final double result=integrator.integrate(f);
    final double expected=mu;
    Assert.assertEquals(expected,result,Math.ulp(expected));
  }
  @Test public void testNormalVariance(){
    final double twoOverSqrtPi=2 / FastMath.sqrt(Math.PI);
    final double sigma=987.654321;
    final double sigma2=sigma * sigma;
    final int numPoints=5;
    final UnivariateFunction f=new UnivariateFunction(){
      public double value(      double y){
        return twoOverSqrtPi * sigma2 * y* y;
      }
    }
;
    final GaussIntegrator integrator=factory.hermite(numPoints);
    final double result=integrator.integrate(f);
    final double expected=sigma2;
    Assert.assertEquals(expected,result,10 * Math.ulp(expected));
  }
}
