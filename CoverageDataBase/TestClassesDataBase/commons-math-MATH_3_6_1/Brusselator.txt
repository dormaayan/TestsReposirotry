private static class Brusselator extends AbstractParameterizable implements MainStateJacobianProvider, ParameterJacobianProvider {
  public static final String B="b";
  private double b;
  public Brusselator(  double b){
    super(B);
    this.b=b;
  }
  public int getDimension(){
    return 2;
  }
  public void computeDerivatives(  double t,  double[] y,  double[] yDot){
    double prod=y[0] * y[0] * y[1];
    yDot[0]=1 + prod - (b + 1) * y[0];
    yDot[1]=b * y[0] - prod;
  }
  public void computeMainStateJacobian(  double t,  double[] y,  double[] yDot,  double[][] dFdY){
    double p=2 * y[0] * y[1];
    double y02=y[0] * y[0];
    dFdY[0][0]=p - (1 + b);
    dFdY[0][1]=y02;
    dFdY[1][0]=b - p;
    dFdY[1][1]=-y02;
  }
  public void computeParameterJacobian(  double t,  double[] y,  double[] yDot,  String paramName,  double[] dFdP){
    if (isSupported(paramName)) {
      dFdP[0]=-y[0];
      dFdP[1]=y[0];
    }
 else {
      dFdP[0]=0;
      dFdP[1]=0;
    }
  }
  public double dYdP0(){
    return -1088.232716447743 + (1050.775747149553 + (-339.012934631828 + 36.52917025056327 * b) * b) * b;
  }
  public double dYdP1(){
    return 1502.824469929139 + (-1438.6974831849952 + (460.959476642384 - 49.43847385647082 * b) * b) * b;
  }
}
