/** 
 * Tests for  {@link Network}.
 */
public class NetworkTest {
  final FeatureInitializer init=FeatureInitializerFactory.uniform(0,2);
  @Test public void testGetFeaturesSize(){
    final FeatureInitializer[] initArray={init,init,init};
    final Network net=new NeuronSquareMesh2D(2,false,2,false,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    Assert.assertEquals(3,net.getFeaturesSize());
  }
  @Test public void testDeleteLink(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronSquareMesh2D(2,false,2,false,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    Collection<Neuron> neighbours;
    net.deleteLink(net.getNeuron(0),net.getNeuron(1));
    neighbours=net.getNeighbours(net.getNeuron(0));
    Assert.assertFalse(neighbours.contains(net.getNeuron(1)));
    neighbours=net.getNeighbours(net.getNeuron(1));
    Assert.assertTrue(neighbours.contains(net.getNeuron(0)));
  }
  @Test public void testDeleteNeuron(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronSquareMesh2D(2,false,2,false,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    Assert.assertEquals(2,net.getNeighbours(net.getNeuron(0)).size());
    Assert.assertEquals(2,net.getNeighbours(net.getNeuron(3)).size());
    net.deleteNeuron(net.getNeuron(1));
    try {
      net.getNeuron(1);
    }
 catch (    NoSuchElementException expected) {
    }
    Assert.assertEquals(1,net.getNeighbours(net.getNeuron(0)).size());
    Assert.assertEquals(1,net.getNeighbours(net.getNeuron(3)).size());
  }
  @Test public void testIterationOrder(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronSquareMesh2D(4,false,3,true,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    boolean isUnspecifiedOrder=false;
    long previousId=Long.MIN_VALUE;
    for (    Neuron n : net.getNeurons(new Network.NeuronIdentifierComparator())) {
      final long currentId=n.getIdentifier();
      if (currentId < previousId) {
        isUnspecifiedOrder=true;
        break;
      }
      previousId=currentId;
    }
    Assert.assertFalse(isUnspecifiedOrder);
  }
  @Test public void testCopy(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronSquareMesh2D(2,false,2,false,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    final Network copy=net.copy();
    final Neuron netNeuron0=net.getNeuron(0);
    final Neuron copyNeuron0=copy.getNeuron(0);
    final Neuron netNeuron1=net.getNeuron(1);
    final Neuron copyNeuron1=copy.getNeuron(1);
    Collection<Neuron> netNeighbours;
    Collection<Neuron> copyNeighbours;
    netNeighbours=net.getNeighbours(netNeuron0);
    copyNeighbours=copy.getNeighbours(copyNeuron0);
    Assert.assertTrue(netNeighbours.contains(netNeuron1));
    Assert.assertTrue(copyNeighbours.contains(copyNeuron1));
    net.deleteNeuron(netNeuron1);
    netNeighbours=net.getNeighbours(netNeuron0);
    copyNeighbours=copy.getNeighbours(copyNeuron0);
    Assert.assertFalse(netNeighbours.contains(netNeuron1));
    Assert.assertTrue(copyNeighbours.contains(copyNeuron1));
  }
  @Test public void testSerialize() throws IOException, ClassNotFoundException {
    final FeatureInitializer[] initArray={init};
    final Network out=new NeuronSquareMesh2D(4,false,3,true,SquareNeighbourhood.VON_NEUMANN,initArray).getNetwork();
    final ByteArrayOutputStream bos=new ByteArrayOutputStream();
    final ObjectOutputStream oos=new ObjectOutputStream(bos);
    oos.writeObject(out);
    final ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
    final ObjectInputStream ois=new ObjectInputStream(bis);
    final Network in=(Network)ois.readObject();
    for (    Neuron nOut : out) {
      final Neuron nIn=in.getNeuron(nOut.getIdentifier());
      final double[] outF=nOut.getFeatures();
      final double[] inF=nIn.getFeatures();
      Assert.assertEquals(outF.length,inF.length);
      for (int i=0; i < outF.length; i++) {
        Assert.assertEquals(outF[i],inF[i],0d);
      }
      final Collection<Neuron> outNeighbours=out.getNeighbours(nOut);
      final Collection<Neuron> inNeighbours=in.getNeighbours(nIn);
      Assert.assertEquals(outNeighbours.size(),inNeighbours.size());
      for (      Neuron oN : outNeighbours) {
        Assert.assertTrue(inNeighbours.contains(in.getNeuron(oN.getIdentifier())));
      }
    }
  }
}
