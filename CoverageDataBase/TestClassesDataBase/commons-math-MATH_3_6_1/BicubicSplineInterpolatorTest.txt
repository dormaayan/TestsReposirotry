/** 
 * Test case for the bicubic interpolator.
 * @deprecated as of 3.4 replaced by {@link org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolator}
 */
@Deprecated public final class BicubicSplineInterpolatorTest {
  /** 
 * Test preconditions.
 */
  @Test public void testPreconditions(){
    double[] xval=new double[]{3,4,5,6.5};
    double[] yval=new double[]{-4,-3,-1,2.5};
    double[][] zval=new double[xval.length][yval.length];
    BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();
    @SuppressWarnings("unused") BivariateFunction p=interpolator.interpolate(xval,yval,zval);
    double[] wxval=new double[]{3,2,5,6.5};
    try {
      p=interpolator.interpolate(wxval,yval,zval);
      Assert.fail("an exception should have been thrown");
    }
 catch (    MathIllegalArgumentException e) {
    }
    double[] wyval=new double[]{-4,-3,-1,-1};
    try {
      p=interpolator.interpolate(xval,wyval,zval);
      Assert.fail("an exception should have been thrown");
    }
 catch (    MathIllegalArgumentException e) {
    }
    double[][] wzval=new double[xval.length][yval.length + 1];
    try {
      p=interpolator.interpolate(xval,yval,wzval);
      Assert.fail("an exception should have been thrown");
    }
 catch (    DimensionMismatchException e) {
    }
    wzval=new double[xval.length - 1][yval.length];
    try {
      p=interpolator.interpolate(xval,yval,wzval);
      Assert.fail("an exception should have been thrown");
    }
 catch (    DimensionMismatchException e) {
    }
  }
  /** 
 * Interpolating a plane. <p> z = 2 x - 3 y + 5
 */
  @Test public void testInterpolation1(){
    final int sz=21;
    double[] xval=new double[sz];
    double[] yval=new double[sz];
    final double delta=1d / (sz - 1);
    for (int i=0; i < sz; i++) {
      xval[i]=-1 + 15 * i * delta;
      yval[i]=-20 + 30 * i * delta;
    }
    BivariateFunction f=new BivariateFunction(){
      public double value(      double x,      double y){
        return 2 * x - 3 * y + 5;
      }
    }
;
    double[][] zval=new double[xval.length][yval.length];
    for (int i=0; i < xval.length; i++) {
      for (int j=0; j < yval.length; j++) {
        zval[i][j]=f.value(xval[i],yval[j]);
      }
    }
    BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();
    BivariateFunction p=interpolator.interpolate(xval,yval,zval);
    double x, y;
    final RandomGenerator rng=new Well19937c(1234567L);
    final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);
    final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);
    final int numSamples=50;
    final double tol=6;
    for (int i=0; i < numSamples; i++) {
      x=distX.sample();
      for (int j=0; j < numSamples; j++) {
        y=distY.sample();
        Assert.assertEquals(f.value(x,y),p.value(x,y),tol);
      }
    }
  }
  /** 
 * Interpolating a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
 */
  @Test public void testInterpolation2(){
    final int sz=21;
    double[] xval=new double[sz];
    double[] yval=new double[sz];
    final double delta=1d / (sz - 1);
    for (int i=0; i < sz; i++) {
      xval[i]=-1 + 15 * i * delta;
      yval[i]=-20 + 30 * i * delta;
    }
    BivariateFunction f=new BivariateFunction(){
      public double value(      double x,      double y){
        return 2 * x * x - 3 * y * y + 4 * x * y - 5;
      }
    }
;
    double[][] zval=new double[xval.length][yval.length];
    for (int i=0; i < xval.length; i++) {
      for (int j=0; j < yval.length; j++) {
        zval[i][j]=f.value(xval[i],yval[j]);
      }
    }
    BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();
    BivariateFunction p=interpolator.interpolate(xval,yval,zval);
    double x, y;
    final RandomGenerator rng=new Well19937c(1234567L);
    final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);
    final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);
    final int numSamples=50;
    final double tol=251;
    for (int i=0; i < numSamples; i++) {
      x=distX.sample();
      for (int j=0; j < numSamples; j++) {
        y=distY.sample();
        Assert.assertEquals(f.value(x,y),p.value(x,y),tol);
      }
    }
  }
}
