/** 
 * <p>Some of the unit tests are re-implementations of the MINPACK <a href="http://www.netlib.org/minpack/ex/file17">file17</a> and <a href="http://www.netlib.org/minpack/ex/file22">file22</a> test files. The redistribution policy for MINPACK is available <a href="http://www.netlib.org/minpack/disclaimer">here</a>/
 */
public class GaussNewtonOptimizerWithCholeskyTest extends AbstractLeastSquaresOptimizerAbstractTest {
  @Override public int getMaxIterations(){
    return 1000;
  }
  @Override public LeastSquaresOptimizer getOptimizer(){
    return new GaussNewtonOptimizer(Decomposition.CHOLESKY);
  }
  @Override @Test public void testMoreEstimatedParametersSimple(){
    try {
      super.testMoreEstimatedParametersSimple();
      fail(optimizer);
    }
 catch (    ConvergenceException e) {
    }
  }
  @Override @Test public void testMoreEstimatedParametersUnsorted(){
    try {
      super.testMoreEstimatedParametersUnsorted();
      fail(optimizer);
    }
 catch (    ConvergenceException e) {
    }
  }
  @Test public void testMaxEvaluations() throws Exception {
    try {
      CircleVectorial circle=new CircleVectorial();
      circle.addPoint(30.0,68.0);
      circle.addPoint(50.0,-6.0);
      circle.addPoint(110.0,-20.0);
      circle.addPoint(35.0,15.0);
      circle.addPoint(45.0,97.0);
      LeastSquaresProblem lsp=builder(circle).checkerPair(new SimpleVectorValueChecker(1e-30,1e-30)).maxIterations(Integer.MAX_VALUE).start(new double[]{98.680,47.345}).build();
      optimizer.optimize(lsp);
      fail(optimizer);
    }
 catch (    TooManyEvaluationsException e) {
    }
  }
  @Override @Test public void testCircleFittingBadInit(){
    try {
      super.testCircleFittingBadInit();
      fail(optimizer);
    }
 catch (    ConvergenceException e) {
    }
  }
  @Override @Test public void testHahn1() throws IOException {
    try {
      super.testHahn1();
      fail(optimizer);
    }
 catch (    ConvergenceException e) {
    }
catch (    TooManyEvaluationsException e) {
    }
  }
}
