private static class Osborne1Function extends MinpackFunction {
  public Osborne1Function(  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(33,startParams,theoreticalMinCost,theoreticalMinParams);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double x5=variables[4];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double temp=10.0 * i;
      double tmp1=FastMath.exp(-temp * x4);
      double tmp2=FastMath.exp(-temp * x5);
      jacobian[i]=new double[]{-1,-tmp1,-tmp2,temp * x2 * tmp1,temp * x3 * tmp2};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double x5=variables[4];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      double temp=10.0 * i;
      double tmp1=FastMath.exp(-temp * x4);
      double tmp2=FastMath.exp(-temp * x5);
      f[i]=y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
    }
    return f;
  }
  private static final double[] y={0.844,0.908,0.932,0.936,0.925,0.908,0.881,0.850,0.818,0.784,0.751,0.718,0.685,0.658,0.628,0.603,0.580,0.558,0.538,0.522,0.506,0.490,0.478,0.467,0.457,0.448,0.438,0.431,0.424,0.420,0.414,0.411,0.406};
}
