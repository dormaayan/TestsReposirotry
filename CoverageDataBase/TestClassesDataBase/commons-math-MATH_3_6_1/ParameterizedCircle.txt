/** 
 * ODE representing a point moving on a circle with provided center and angular rate. 
 */
private static class ParameterizedCircle extends AbstractParameterizable implements FirstOrderDifferentialEquations, ParameterizedODE {
  public static final String CX="cx";
  public static final String CY="cy";
  public static final String OMEGA="omega";
  private final double[] y0;
  private double cx;
  private double cy;
  private double omega;
  public ParameterizedCircle(  double[] y0,  double cx,  double cy,  double omega){
    super(CX,CY,OMEGA);
    this.y0=y0.clone();
    this.cx=cx;
    this.cy=cy;
    this.omega=omega;
  }
  public int getDimension(){
    return 2;
  }
  public void computeDerivatives(  double t,  double[] y,  double[] yDot){
    yDot[0]=omega * (cy - y[1]);
    yDot[1]=omega * (y[0] - cx);
  }
  public double getParameter(  final String name) throws UnknownParameterException {
    if (name.equals(CX)) {
      return cx;
    }
 else     if (name.equals(CY)) {
      return cy;
    }
 else     if (name.equals(OMEGA)) {
      return omega;
    }
 else {
      throw new UnknownParameterException(name);
    }
  }
  public void setParameter(  final String name,  final double value) throws UnknownParameterException {
    if (name.equals(CX)) {
      cx=value;
    }
 else     if (name.equals(CY)) {
      cy=value;
    }
 else     if (name.equals(OMEGA)) {
      omega=value;
    }
 else {
      throw new UnknownParameterException(name);
    }
  }
  public double[] exactY(  double t){
    double cos=FastMath.cos(omega * t);
    double sin=FastMath.sin(omega * t);
    double dx0=y0[0] - cx;
    double dy0=y0[1] - cy;
    return new double[]{cx + cos * dx0 - sin * dy0,cy + sin * dx0 + cos * dy0};
  }
  public double[][] exactDyDy0(  double t){
    double cos=FastMath.cos(omega * t);
    double sin=FastMath.sin(omega * t);
    return new double[][]{{cos,-sin},{sin,cos}};
  }
  public double[] exactDyDcx(  double t){
    double cos=FastMath.cos(omega * t);
    double sin=FastMath.sin(omega * t);
    return new double[]{1 - cos,-sin};
  }
  public double[] exactDyDcy(  double t){
    double cos=FastMath.cos(omega * t);
    double sin=FastMath.sin(omega * t);
    return new double[]{sin,1 - cos};
  }
  public double[] exactDyDom(  double t){
    double cos=FastMath.cos(omega * t);
    double sin=FastMath.sin(omega * t);
    double dx0=y0[0] - cx;
    double dy0=y0[1] - cy;
    return new double[]{-t * (sin * dx0 + cos * dy0),t * (cos * dx0 - sin * dy0)};
  }
}
