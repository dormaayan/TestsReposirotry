public class AdamsNordsieckTransformerTest {
  @Test public void testPolynomialExtraDerivative(){
    checkNordsieckStart(new PolynomialFunction(new double[]{6,5,4,3,2,1}),5,0.0,0.125,3.2e-16);
  }
  @Test public void testPolynomialRegular(){
    checkNordsieckStart(new PolynomialFunction(new double[]{6,5,4,3,2,1}),4,0.0,0.125,3.1e-16);
  }
  @Test public void testPolynomialMissingLastDerivative(){
    checkNordsieckStart(new PolynomialFunction(new double[]{6,5,4,3,2,1}),3,0.0,0.125,1.6e-4);
  }
  @Test public void testTransformExact(){
    checkTransform(new PolynomialFunction(new double[]{6,5,4,3,2,1}),5,2.567e-15);
  }
  @Test public void testTransformInexact(){
    checkTransform(new PolynomialFunction(new double[]{6,5,4,3,2,1}),4,5.658e-4);
  }
  private void checkNordsieckStart(  final PolynomialFunction polynomial,  final int nbSteps,  final double t0,  final double h,  final double epsilon){
    final AdamsNordsieckTransformer transformer=AdamsNordsieckTransformer.getInstance(nbSteps);
    PolynomialFunction derivative=polynomial.polynomialDerivative();
    final Array2DRowRealMatrix nordsieck=start(transformer,nbSteps,t0,h,polynomial,derivative);
    Assert.assertEquals(nbSteps - 1,nordsieck.getRowDimension());
    double coeff=h;
    for (int i=0; i < nordsieck.getRowDimension(); ++i) {
      coeff*=h / (i + 2);
      derivative=derivative.polynomialDerivative();
      Assert.assertEquals(derivative.value(t0) * coeff,nordsieck.getEntry(i,0),epsilon);
    }
  }
  private void checkTransform(  final PolynomialFunction polynomial,  final int nbSteps,  final double expectedError){
    final AdamsNordsieckTransformer transformer=AdamsNordsieckTransformer.getInstance(nbSteps);
    final PolynomialFunction derivative=polynomial.polynomialDerivative();
    final double t0=0.0;
    final double h=0.125;
    final Array2DRowRealMatrix n0=start(transformer,nbSteps,t0,h,polynomial,derivative);
    final Array2DRowRealMatrix n1=transformer.updateHighOrderDerivativesPhase1(n0);
    transformer.updateHighOrderDerivativesPhase2(new double[]{h * derivative.value(t0)},new double[]{h * derivative.value(t0 + h)},n1);
    final Array2DRowRealMatrix n2=start(transformer,nbSteps,t0 + h,h,polynomial,derivative);
    Assert.assertEquals(expectedError,n2.subtract(n1).getNorm(),expectedError * 0.001);
  }
  private Array2DRowRealMatrix start(  final AdamsNordsieckTransformer transformer,  final int nbSteps,  final double t0,  final double h,  final UnivariateFunction f0,  final UnivariateFunction f1){
    final int nbStartPoints=(nbSteps + 3) / 2;
    final double[] t=new double[nbStartPoints];
    final double[][] y=new double[nbStartPoints][1];
    final double[][] yDot=new double[nbStartPoints][1];
    for (int i=0; i < nbStartPoints; ++i) {
      t[i]=t0 + i * h;
      y[i][0]=f0.value(t[i]);
      yDot[i][0]=f1.value(t[i]);
    }
    return transformer.initializeHighOrderDerivatives(h,t,y,yDot);
  }
}
