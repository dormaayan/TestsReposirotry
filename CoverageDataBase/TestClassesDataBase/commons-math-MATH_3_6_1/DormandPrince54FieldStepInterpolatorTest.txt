public class DormandPrince54FieldStepInterpolatorTest extends RungeKuttaFieldStepInterpolatorAbstractTest {
  protected <T extends RealFieldElement<T>>RungeKuttaFieldStepInterpolator<T> createInterpolator(  Field<T> field,  boolean forward,  T[][] yDotK,  FieldODEStateAndDerivative<T> globalPreviousState,  FieldODEStateAndDerivative<T> globalCurrentState,  FieldODEStateAndDerivative<T> softPreviousState,  FieldODEStateAndDerivative<T> softCurrentState,  FieldEquationsMapper<T> mapper){
    return new DormandPrince54FieldStepInterpolator<T>(field,forward,yDotK,globalPreviousState,globalCurrentState,softPreviousState,softCurrentState,mapper);
  }
  protected <T extends RealFieldElement<T>>FieldButcherArrayProvider<T> createButcherArrayProvider(  final Field<T> field){
    return new DormandPrince54FieldIntegrator<T>(field,0,1,1,1);
  }
  @Test public void interpolationAtBounds(){
    doInterpolationAtBounds(Decimal64Field.getInstance(),1.0e-50);
  }
  @Test public void interpolationInside(){
    doInterpolationInside(Decimal64Field.getInstance(),9.5e-14,1.8e-15);
  }
  @Test public void nonFieldInterpolatorConsistency(){
    doNonFieldInterpolatorConsistency(Decimal64Field.getInstance(),2.8e-17,2.3e-16,5.6e-16,5.6e-17);
  }
}
