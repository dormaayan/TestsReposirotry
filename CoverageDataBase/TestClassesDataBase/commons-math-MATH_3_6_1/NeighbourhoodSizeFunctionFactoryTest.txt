/** 
 * Tests for  {@link NeighbourhoodSizeFunctionFactory} class.
 */
public class NeighbourhoodSizeFunctionFactoryTest {
  @Test(expected=NotStrictlyPositiveException.class) public void testExponentialDecayPrecondition1(){
    NeighbourhoodSizeFunctionFactory.exponentialDecay(0,0,2);
  }
  @Test(expected=NotStrictlyPositiveException.class) public void testExponentialDecayPrecondition2(){
    NeighbourhoodSizeFunctionFactory.exponentialDecay(1,0,2);
  }
  @Test(expected=NumberIsTooLargeException.class) public void testExponentialDecayPrecondition3(){
    NeighbourhoodSizeFunctionFactory.exponentialDecay(1,1,100);
  }
  @Test(expected=NotStrictlyPositiveException.class) public void testExponentialDecayPrecondition4(){
    NeighbourhoodSizeFunctionFactory.exponentialDecay(2,1,0);
  }
  @Test public void testExponentialDecayTrivial(){
    final int n=65;
    final int init=4;
    final int valueAtN=3;
    final NeighbourhoodSizeFunction f=NeighbourhoodSizeFunctionFactory.exponentialDecay(init,valueAtN,n);
    Assert.assertEquals(init,f.value(0));
    Assert.assertEquals(valueAtN,f.value(n));
    Assert.assertEquals(0,f.value(Long.MAX_VALUE));
  }
  @Test(expected=NotStrictlyPositiveException.class) public void testQuasiSigmoidDecayPrecondition1(){
    NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(0d,-1d,2);
  }
  @Test(expected=NumberIsTooLargeException.class) public void testQuasiSigmoidDecayPrecondition3(){
    NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(1d,0d,100);
  }
  @Test(expected=NotStrictlyPositiveException.class) public void testQuasiSigmoidDecayPrecondition4(){
    NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(1d,-1d,0);
  }
  @Test public void testQuasiSigmoidDecayTrivial(){
    final int n=65;
    final double init=4;
    final double slope=-1e-1;
    final NeighbourhoodSizeFunction f=NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(init,slope,n);
    Assert.assertEquals(init,f.value(0),0d);
    Assert.assertEquals(0,f.value(Long.MAX_VALUE),0d);
  }
}
