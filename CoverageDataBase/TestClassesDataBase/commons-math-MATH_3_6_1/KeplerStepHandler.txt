private static class KeplerStepHandler implements StepHandler {
  public KeplerStepHandler(  TestProblem3 pb){
    this.pb=pb;
  }
  public void init(  double t0,  double[] y0,  double t){
    nbSteps=0;
    maxError=0;
  }
  public void handleStep(  StepInterpolator interpolator,  boolean isLast) throws MaxCountExceededException {
    ++nbSteps;
    for (int a=1; a < 100; ++a) {
      double prev=interpolator.getPreviousTime();
      double curr=interpolator.getCurrentTime();
      double interp=((100 - a) * prev + a * curr) / 100;
      interpolator.setInterpolatedTime(interp);
      double[] interpolatedY=interpolator.getInterpolatedState();
      double[] theoreticalY=pb.computeTheoreticalState(interpolator.getInterpolatedTime());
      double dx=interpolatedY[0] - theoreticalY[0];
      double dy=interpolatedY[1] - theoreticalY[1];
      double error=dx * dx + dy * dy;
      if (error > maxError) {
        maxError=error;
      }
    }
    if (isLast) {
      Assert.assertTrue(maxError < 2.7e-6);
      Assert.assertTrue(nbSteps < 80);
    }
  }
  private int nbSteps;
  private double maxError;
  private TestProblem3 pb;
}
