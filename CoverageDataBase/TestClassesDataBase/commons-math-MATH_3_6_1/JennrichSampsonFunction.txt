private static class JennrichSampsonFunction extends MinpackFunction {
  public JennrichSampsonFunction(  int m,  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(m,startParams,theoreticalMinCost,theoreticalMinParams);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double t=i + 1;
      jacobian[i]=new double[]{-t * FastMath.exp(t * x1),-t * FastMath.exp(t * x2)};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      double temp=i + 1;
      f[i]=2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
    }
    return f;
  }
}
