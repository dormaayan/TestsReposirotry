/** 
 * Tests for  {@link Neuron}.
 */
public class NeuronTest {
  @Test public void testGetIdentifier(){
    final long id=1234567;
    final Neuron n=new Neuron(id,new double[]{0});
    Assert.assertEquals(id,n.getIdentifier());
  }
  @Test public void testGetSize(){
    final double[] features={-1,-1e-97,0,23.456,9.01e203};
    final Neuron n=new Neuron(1,features);
    Assert.assertEquals(features.length,n.getSize());
  }
  @Test public void testGetFeatures(){
    final double[] features={-1,-1e-97,0,23.456,9.01e203};
    final Neuron n=new Neuron(1,features);
    final double[] f=n.getFeatures();
    Assert.assertFalse(f == features);
    Assert.assertEquals(features.length,f.length);
    for (int i=0; i < features.length; i++) {
      Assert.assertEquals(features[i],f[i],0d);
    }
  }
  @Test public void testCompareAndSetFeatures(){
    final Neuron n=new Neuron(1,new double[]{0});
    double[] expect=n.getFeatures();
    double[] update=new double[]{expect[0] + 1.23};
    boolean ok=n.compareAndSetFeatures(expect,update);
    Assert.assertTrue(ok);
    Assert.assertEquals(update[0],n.getFeatures()[0],0d);
    double[] update1=new double[]{update[0] + 4.56};
    ok=n.compareAndSetFeatures(expect,update1);
    Assert.assertFalse(ok);
    Assert.assertEquals(update[0],n.getFeatures()[0],0d);
  }
  @Test public void testCopy(){
    final Neuron n=new Neuron(1,new double[]{9.87});
    double[] update=new double[]{n.getFeatures()[0] + 2.34};
    n.compareAndSetFeatures(n.getFeatures(),update);
    final Neuron copy=n.copy();
    Assert.assertTrue(n.getFeatures()[0] == copy.getFeatures()[0]);
    Assert.assertEquals(n.getNumberOfAttemptedUpdates(),copy.getNumberOfAttemptedUpdates());
    update=new double[]{1.23 * n.getFeatures()[0]};
    n.compareAndSetFeatures(n.getFeatures(),update);
    Assert.assertFalse(n.getFeatures()[0] == copy.getFeatures()[0]);
    Assert.assertNotEquals(n.getNumberOfSuccessfulUpdates(),copy.getNumberOfSuccessfulUpdates());
  }
  @Test public void testSerialize() throws IOException, ClassNotFoundException {
    final Neuron out=new Neuron(123,new double[]{-98.76,-1,0,1e-23,543.21,1e234});
    final ByteArrayOutputStream bos=new ByteArrayOutputStream();
    final ObjectOutputStream oos=new ObjectOutputStream(bos);
    oos.writeObject(out);
    final ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
    final ObjectInputStream ois=new ObjectInputStream(bis);
    final Neuron in=(Neuron)ois.readObject();
    Assert.assertEquals(out.getIdentifier(),in.getIdentifier());
    final double[] outF=out.getFeatures();
    final double[] inF=in.getFeatures();
    Assert.assertEquals(outF.length,inF.length);
    for (int i=0; i < outF.length; i++) {
      Assert.assertEquals(outF[i],inF[i],0d);
    }
  }
}
