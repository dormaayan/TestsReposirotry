public class ReappearingEventTest {
  @Test public void testDormandPrince() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    double tEnd=test(1);
    Assert.assertEquals(10.0,tEnd,1e-7);
  }
  @Test public void testGragg() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    double tEnd=test(2);
    Assert.assertEquals(10.0,tEnd,1e-7);
  }
  public double test(  int integratorType) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    double e=1e-15;
    FirstOrderIntegrator integrator;
    integrator=(integratorType == 1) ? new DormandPrince853Integrator(e,100.0,1e-7,1e-7) : new GraggBulirschStoerIntegrator(e,100.0,1e-7,1e-7);
    PegasusSolver rootSolver=new PegasusSolver(e,e);
    integrator.addEventHandler(new Event(),0.1,e,1000,rootSolver);
    double t0=6.0;
    double tEnd=10.0;
    double[] y={2.0,2.0,2.0,4.0,2.0,7.0,15.0};
    return integrator.integrate(new Ode(),t0,y,tEnd,y);
  }
private static class Ode implements FirstOrderDifferentialEquations {
    public int getDimension(){
      return 7;
    }
    public void computeDerivatives(    double t,    double[] y,    double[] yDot){
      Arrays.fill(yDot,1.0);
    }
  }
  /** 
 * State events for this unit test. 
 */
protected static class Event implements EventHandler {
    public void init(    double t0,    double[] y0,    double t){
    }
    public double g(    double t,    double[] y){
      return y[6] - 15.0;
    }
    public Action eventOccurred(    double t,    double[] y,    boolean increasing){
      return Action.STOP;
    }
    public void resetState(    double t,    double[] y){
    }
  }
}
