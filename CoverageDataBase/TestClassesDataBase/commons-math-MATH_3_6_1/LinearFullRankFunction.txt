private static class LinearFullRankFunction extends MinpackFunction {
  public LinearFullRankFunction(  int m,  int n,  double x0,  double theoreticalStartCost,  double theoreticalMinCost){
    super(m,buildArray(n,x0),theoreticalMinCost,buildArray(n,-1.0));
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double t=2.0 / m;
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      jacobian[i]=new double[n];
      for (int j=0; j < n; ++j) {
        jacobian[i][j]=(i == j) ? (1 - t) : -t;
      }
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double sum=0;
    for (int i=0; i < n; ++i) {
      sum+=variables[i];
    }
    double t=1 + 2 * sum / m;
    double[] f=new double[m];
    for (int i=0; i < n; ++i) {
      f[i]=variables[i] - t;
    }
    Arrays.fill(f,n,m,-t);
    return f;
  }
}
