private static class Osborne2Function extends MinpackFunction {
  public Osborne2Function(  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(65,startParams,theoreticalMinCost,theoreticalMinParams);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x01=variables[0];
    double x02=variables[1];
    double x03=variables[2];
    double x04=variables[3];
    double x05=variables[4];
    double x06=variables[5];
    double x07=variables[6];
    double x08=variables[7];
    double x09=variables[8];
    double x10=variables[9];
    double x11=variables[10];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double temp=i / 10.0;
      double tmp1=FastMath.exp(-x05 * temp);
      double tmp2=FastMath.exp(-x06 * (temp - x09) * (temp - x09));
      double tmp3=FastMath.exp(-x07 * (temp - x10) * (temp - x10));
      double tmp4=FastMath.exp(-x08 * (temp - x11) * (temp - x11));
      jacobian[i]=new double[]{-tmp1,-tmp2,-tmp3,-tmp4,temp * x01 * tmp1,x02 * (temp - x09) * (temp - x09)* tmp2,x03 * (temp - x10) * (temp - x10)* tmp3,x04 * (temp - x11) * (temp - x11)* tmp4,-2 * x02 * x06* (temp - x09)* tmp2,-2 * x03 * x07* (temp - x10)* tmp3,-2 * x04 * x08* (temp - x11)* tmp4};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x01=variables[0];
    double x02=variables[1];
    double x03=variables[2];
    double x04=variables[3];
    double x05=variables[4];
    double x06=variables[5];
    double x07=variables[6];
    double x08=variables[7];
    double x09=variables[8];
    double x10=variables[9];
    double x11=variables[10];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      double temp=i / 10.0;
      double tmp1=FastMath.exp(-x05 * temp);
      double tmp2=FastMath.exp(-x06 * (temp - x09) * (temp - x09));
      double tmp3=FastMath.exp(-x07 * (temp - x10) * (temp - x10));
      double tmp4=FastMath.exp(-x08 * (temp - x11) * (temp - x11));
      f[i]=y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
    }
    return f;
  }
  private static final double[] y={1.366,1.191,1.112,1.013,0.991,0.885,0.831,0.847,0.786,0.725,0.746,0.679,0.608,0.655,0.616,0.606,0.602,0.626,0.651,0.724,0.649,0.649,0.694,0.644,0.624,0.661,0.612,0.558,0.533,0.495,0.500,0.423,0.395,0.375,0.372,0.391,0.396,0.405,0.428,0.429,0.523,0.562,0.607,0.653,0.672,0.708,0.633,0.668,0.645,0.632,0.591,0.559,0.597,0.625,0.739,0.710,0.729,0.720,0.636,0.581,0.428,0.292,0.162,0.098,0.054};
}
