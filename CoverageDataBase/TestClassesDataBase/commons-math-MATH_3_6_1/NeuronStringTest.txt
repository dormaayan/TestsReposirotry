/** 
 * Tests for  {@link NeuronString} and {@link Network} functionality fora one-dimensional network.
 */
public class NeuronStringTest {
  final FeatureInitializer init=FeatureInitializerFactory.uniform(0,2);
  @Test public void testSegmentNetwork(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronString(4,false,initArray).getNetwork();
    Collection<Neuron> neighbours;
    neighbours=net.getNeighbours(net.getNeuron(0));
    for (    long nId : new long[]{1}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(1,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(1));
    for (    long nId : new long[]{0,2}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(2));
    for (    long nId : new long[]{1,3}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(3));
    for (    long nId : new long[]{2}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(1,neighbours.size());
  }
  @Test public void testCircleNetwork(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronString(4,true,initArray).getNetwork();
    Collection<Neuron> neighbours;
    neighbours=net.getNeighbours(net.getNeuron(0));
    for (    long nId : new long[]{1,3}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(1));
    for (    long nId : new long[]{0,2}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(2));
    for (    long nId : new long[]{1,3}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
    neighbours=net.getNeighbours(net.getNeuron(3));
    for (    long nId : new long[]{0,2}) {
      Assert.assertTrue(neighbours.contains(net.getNeuron(nId)));
    }
    Assert.assertEquals(2,neighbours.size());
  }
  @Test public void testGetNeighboursWithExclude(){
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronString(5,true,initArray).getNetwork();
    final Collection<Neuron> exclude=new ArrayList<Neuron>();
    exclude.add(net.getNeuron(1));
    final Collection<Neuron> neighbours=net.getNeighbours(net.getNeuron(0),exclude);
    Assert.assertTrue(neighbours.contains(net.getNeuron(4)));
    Assert.assertEquals(1,neighbours.size());
  }
  @Test public void testSerialize() throws IOException, ClassNotFoundException {
    final FeatureInitializer[] initArray={init};
    final NeuronString out=new NeuronString(4,false,initArray);
    final ByteArrayOutputStream bos=new ByteArrayOutputStream();
    final ObjectOutputStream oos=new ObjectOutputStream(bos);
    oos.writeObject(out);
    final ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
    final ObjectInputStream ois=new ObjectInputStream(bis);
    final NeuronString in=(NeuronString)ois.readObject();
    for (    Neuron nOut : out.getNetwork()) {
      final Neuron nIn=in.getNetwork().getNeuron(nOut.getIdentifier());
      final double[] outF=nOut.getFeatures();
      final double[] inF=nIn.getFeatures();
      Assert.assertEquals(outF.length,inF.length);
      for (int i=0; i < outF.length; i++) {
        Assert.assertEquals(outF[i],inF[i],0d);
      }
      final Collection<Neuron> outNeighbours=out.getNetwork().getNeighbours(nOut);
      final Collection<Neuron> inNeighbours=in.getNetwork().getNeighbours(nIn);
      Assert.assertEquals(outNeighbours.size(),inNeighbours.size());
      for (      Neuron oN : outNeighbours) {
        Assert.assertTrue(inNeighbours.contains(in.getNetwork().getNeuron(oN.getIdentifier())));
      }
    }
  }
}
