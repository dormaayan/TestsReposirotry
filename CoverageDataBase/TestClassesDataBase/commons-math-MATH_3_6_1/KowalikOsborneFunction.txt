private static class KowalikOsborneFunction extends MinpackFunction {
  public KowalikOsborneFunction(  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(11,startParams,theoreticalMinCost,theoreticalMinParams);
    if (theoreticalStartCost > 20.0) {
      setCostAccuracy(2.0e-4);
      setParamsAccuracy(5.0e-3);
    }
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double tmp=v[i] * (v[i] + x3) + x4;
      double j1=-v[i] * (v[i] + x2) / tmp;
      double j2=-v[i] * x1 / tmp;
      double j3=j1 * j2;
      double j4=j3 / v[i];
      jacobian[i]=new double[]{j1,j2,j3,j4};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double x4=variables[3];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      f[i]=y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
    }
    return f;
  }
  private static final double[] v={4.0,2.0,1.0,0.5,0.25,0.167,0.125,0.1,0.0833,0.0714,0.0625};
  private static final double[] y={0.1957,0.1947,0.1735,0.1600,0.0844,0.0627,0.0456,0.0342,0.0323,0.0235,0.0246};
}
