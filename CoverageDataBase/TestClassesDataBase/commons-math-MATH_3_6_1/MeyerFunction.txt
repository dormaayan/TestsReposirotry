private static class MeyerFunction extends MinpackFunction {
  public MeyerFunction(  double[] startParams,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(16,startParams,theoreticalMinCost,theoreticalMinParams);
    if (theoreticalStartCost > 1.0e6) {
      setCostAccuracy(7.0e-3);
      setParamsAccuracy(2.0e-2);
    }
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double temp=5.0 * (i + 1) + 45.0 + x3;
      double tmp1=x2 / temp;
      double tmp2=FastMath.exp(tmp1);
      double tmp3=x1 * tmp2 / temp;
      jacobian[i]=new double[]{tmp2,tmp3,-tmp1 * tmp3};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      f[i]=x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
    }
    return f;
  }
  private static final double[] y={34780.0,28610.0,23650.0,19630.0,16370.0,13720.0,11540.0,9744.0,8261.0,7030.0,6005.0,5147.0,4427.0,3820.0,3307.0,2872.0};
}
