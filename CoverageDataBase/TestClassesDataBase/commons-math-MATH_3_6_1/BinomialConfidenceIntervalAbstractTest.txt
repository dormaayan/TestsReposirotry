/** 
 * Test cases for the BinomialConfidenceInterval implementations.
 */
public abstract class BinomialConfidenceIntervalAbstractTest {
  protected BinomialConfidenceInterval testStatistic;
  private final int successes=50;
  private final int trials=500;
  private final double confidenceLevel=0.9;
  protected abstract BinomialConfidenceInterval createBinomialConfidenceInterval();
  /** 
 * Returns the confidence interval for the given statistic with the following values: <ul> <li>trials: 500</li> <li>successes: 50</li> <li>confidenceLevel: 0.9</li> </ul>
 * @return the Confidence Interval for the given values
 */
  protected ConfidenceInterval createStandardTestInterval(){
    return testStatistic.createInterval(trials,successes,confidenceLevel);
  }
  @Before public void setUp(){
    testStatistic=createBinomialConfidenceInterval();
  }
  @Test(expected=MathIllegalArgumentException.class) public void testZeroConfidencelevel(){
    testStatistic.createInterval(trials,successes,0d);
  }
  @Test(expected=MathIllegalArgumentException.class) public void testOneConfidencelevel(){
    testStatistic.createInterval(trials,successes,1d);
  }
  @Test(expected=MathIllegalArgumentException.class) public void testZeroTrials(){
    testStatistic.createInterval(0,0,confidenceLevel);
  }
  @Test(expected=MathIllegalArgumentException.class) public void testNegativeSuccesses(){
    testStatistic.createInterval(trials,-1,confidenceLevel);
  }
  @Test(expected=MathIllegalArgumentException.class) public void testSuccessesExceedingTrials(){
    testStatistic.createInterval(trials,trials + 1,confidenceLevel);
  }
}
