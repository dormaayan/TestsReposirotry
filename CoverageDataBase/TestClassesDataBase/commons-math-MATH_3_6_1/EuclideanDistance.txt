private static class EuclideanDistance implements MultivariateDifferentiableFunction {
  public double value(  double[] point){
    double d2=0;
    for (    double x : point) {
      d2+=x * x;
    }
    return FastMath.sqrt(d2);
  }
  public DerivativeStructure value(  DerivativeStructure[] point) throws DimensionMismatchException, MathIllegalArgumentException {
    DerivativeStructure d2=point[0].getField().getZero();
    for (    DerivativeStructure x : point) {
      d2=d2.add(x.multiply(x));
    }
    return d2.sqrt();
  }
  public double[] gradient(  double[] point){
    double[] gradient=new double[point.length];
    double d=value(point);
    for (int i=0; i < point.length; ++i) {
      gradient[i]=point[i] / d;
    }
    return gradient;
  }
}
