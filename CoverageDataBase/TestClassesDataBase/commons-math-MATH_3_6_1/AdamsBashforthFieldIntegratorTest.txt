public class AdamsBashforthFieldIntegratorTest extends AdamsFieldIntegratorAbstractTest {
  protected <T extends RealFieldElement<T>>AdamsFieldIntegrator<T> createIntegrator(  Field<T> field,  final int nSteps,  final double minStep,  final double maxStep,  final double scalAbsoluteTolerance,  final double scalRelativeTolerance){
    return new AdamsBashforthFieldIntegrator<T>(field,nSteps,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);
  }
  protected <T extends RealFieldElement<T>>AdamsFieldIntegrator<T> createIntegrator(  Field<T> field,  final int nSteps,  final double minStep,  final double maxStep,  final double[] vecAbsoluteTolerance,  final double[] vecRelativeTolerance){
    return new AdamsBashforthFieldIntegrator<T>(field,nSteps,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);
  }
  @Test(expected=NumberIsTooSmallException.class) public void testMinStep(){
    doDimensionCheck(Decimal64Field.getInstance());
  }
  @Test public void testIncreasingTolerance(){
    doTestIncreasingTolerance(Decimal64Field.getInstance(),2.6,122);
  }
  @Test(expected=MaxCountExceededException.class) public void exceedMaxEvaluations(){
    doExceedMaxEvaluations(Decimal64Field.getInstance(),650);
  }
  @Test public void backward(){
    doBackward(Decimal64Field.getInstance(),4.3e-8,4.3e-8,1.0e-16,"Adams-Bashforth");
  }
  @Test public void polynomial(){
    doPolynomial(Decimal64Field.getInstance(),5,0.004,6.0e-10);
  }
  @Test(expected=MathIllegalStateException.class) public void testStartFailure(){
    doTestStartFailure(Decimal64Field.getInstance());
  }
}
