private static class Linear<T extends RealFieldElement<T>> implements FirstOrderFieldDifferentialEquations<T>, FieldSecondaryEquations<T> {
  private final Field<T> field;
  private final int dimension;
  private final int start;
  private Linear(  final Field<T> field,  final int dimension,  final int start){
    this.field=field;
    this.dimension=dimension;
    this.start=start;
  }
  public int getDimension(){
    return dimension;
  }
  public void init(  final T t0,  final T[] y0,  final T finalTime){
    Assert.assertEquals(dimension,y0.length);
    Assert.assertEquals(10.0,t0.getReal(),1.0e-15);
    Assert.assertEquals(100.0,finalTime.getReal(),1.0e-15);
    for (int i=0; i < y0.length; ++i) {
      Assert.assertEquals(i,y0[i].getReal(),1.0e-15);
    }
  }
  public T[] computeDerivatives(  final T t,  final T[] y){
    final T[] yDot=MathArrays.buildArray(field,dimension);
    for (int i=0; i < dimension; ++i) {
      yDot[i]=field.getZero().add(i);
    }
    return yDot;
  }
  public void init(  final T t0,  final T[] primary0,  final T[] secondary0,  final T finalTime){
    Assert.assertEquals(dimension,secondary0.length);
    Assert.assertEquals(10.0,t0.getReal(),1.0e-15);
    Assert.assertEquals(100.0,finalTime.getReal(),1.0e-15);
    for (int i=0; i < primary0.length; ++i) {
      Assert.assertEquals(i,primary0[i].getReal(),1.0e-15);
    }
    for (int i=0; i < secondary0.length; ++i) {
      Assert.assertEquals(start + i,secondary0[i].getReal(),1.0e-15);
    }
  }
  public T[] computeDerivatives(  final T t,  final T[] primary,  final T[] primaryDot,  final T[] secondary){
    final T[] secondaryDot=MathArrays.buildArray(field,dimension);
    for (int i=0; i < dimension; ++i) {
      secondaryDot[i]=field.getZero().subtract(i);
    }
    return secondaryDot;
  }
}
