private static class PerfectInterpolator implements StepInterpolator {
  private final TestProblemAbstract problem;
  private double previousTime;
  private double currentTime;
  private double interpolatedTime;
  public PerfectInterpolator(  final TestProblemAbstract problem){
    this.problem=problem;
    this.previousTime=problem.getInitialTime();
    this.currentTime=problem.getInitialTime();
    this.interpolatedTime=problem.getInitialTime();
  }
  public void readExternal(  ObjectInput arg0){
  }
  public void writeExternal(  ObjectOutput arg0){
  }
  public double getPreviousTime(){
    return previousTime;
  }
  public void setPreviousTime(  double time){
    previousTime=time;
  }
  public double getCurrentTime(){
    return currentTime;
  }
  public void setCurrentTime(  double time){
    currentTime=time;
  }
  public double getInterpolatedTime(){
    return interpolatedTime;
  }
  public void setInterpolatedTime(  double time){
    interpolatedTime=time;
  }
  public double[] getInterpolatedState(){
    return problem.computeTheoreticalState(interpolatedTime);
  }
  public double[] getInterpolatedDerivatives(){
    double[] y=problem.computeTheoreticalState(interpolatedTime);
    double[] yDot=new double[y.length];
    problem.computeDerivatives(interpolatedTime,y,yDot);
    return yDot;
  }
  public double[] getInterpolatedSecondaryState(  int index){
    return null;
  }
  public double[] getInterpolatedSecondaryDerivatives(  int index){
    return null;
  }
  public boolean isForward(){
    return problem.getFinalTime() > problem.getInitialTime();
  }
  public StepInterpolator copy(){
    return this;
  }
}
