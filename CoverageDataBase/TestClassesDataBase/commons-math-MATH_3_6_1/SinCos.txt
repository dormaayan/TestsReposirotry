private static class SinCos implements FirstOrderFieldDifferentialEquations<DerivativeStructure> {
  private final DerivativeStructure omega;
  private DerivativeStructure r;
  private DerivativeStructure alpha;
  private double dRdY00;
  private double dRdY01;
  private double dAlphadOmega;
  private double dAlphadT0;
  private double dAlphadY00;
  private double dAlphadY01;
  protected SinCos(  final DerivativeStructure omega){
    this.omega=omega;
  }
  public int getDimension(){
    return 2;
  }
  public void init(  final DerivativeStructure t0,  final DerivativeStructure[] y0,  final DerivativeStructure finalTime){
    final DerivativeStructure r2=y0[0].multiply(y0[0]).add(y0[1].multiply(y0[1]));
    this.r=r2.sqrt();
    this.dRdY00=y0[0].divide(r).getReal();
    this.dRdY01=y0[1].divide(r).getReal();
    this.alpha=y0[0].atan2(y0[1]).subtract(t0.multiply(omega));
    this.dAlphadOmega=-t0.getReal();
    this.dAlphadT0=-omega.getReal();
    this.dAlphadY00=y0[1].divide(r2).getReal();
    this.dAlphadY01=y0[0].negate().divide(r2).getReal();
  }
  public DerivativeStructure[] computeDerivatives(  final DerivativeStructure t,  final DerivativeStructure[] y){
    return new DerivativeStructure[]{omega.multiply(y[1]),omega.multiply(y[0]).negate()};
  }
  public double[] theoreticalY(  final double t){
    final double theta=omega.getReal() * t + alpha.getReal();
    return new double[]{r.getReal() * FastMath.sin(theta),r.getReal() * FastMath.cos(theta)};
  }
  public double[][] getDerivatives(  final double t){
    final double theta=omega.getReal() * t + alpha.getReal();
    final double sin=FastMath.sin(theta);
    final double cos=FastMath.cos(theta);
    final double y0=r.getReal() * sin;
    final double y1=r.getReal() * cos;
    final double dY0dOmega=y1 * (t + dAlphadOmega);
    final double dY0dT0=y1 * dAlphadT0;
    final double dY0dY00=dRdY00 * sin + y1 * dAlphadY00;
    final double dY0dY01=dRdY01 * sin + y1 * dAlphadY01;
    final double dY0dT=y1 * omega.getReal();
    final double dY1dOmega=-y0 * (t + dAlphadOmega);
    final double dY1dT0=-y0 * dAlphadT0;
    final double dY1dY00=dRdY00 * cos - y0 * dAlphadY00;
    final double dY1dY01=dRdY01 * cos - y0 * dAlphadY01;
    final double dY1dT=-y0 * omega.getReal();
    return new double[][]{{dY0dOmega,dY0dT0,dY0dY00,dY0dY01,dY0dT},{dY1dOmega,dY1dT0,dY1dY00,dY1dY01,dY1dT}};
  }
}
