public class MidpointIntegratorTest {
  @Test(expected=DimensionMismatchException.class) public void testDimensionCheck() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    TestProblem1 pb=new TestProblem1();
    new MidpointIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension() + 10],1.0,new double[pb.getDimension() + 10]);
    Assert.fail("an exception should have been thrown");
  }
  @Test public void testDecreasingSteps() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    for (    TestProblemAbstract pb : new TestProblemAbstract[]{new TestProblem1(),new TestProblem2(),new TestProblem3(),new TestProblem4(),new TestProblem5(),new TestProblem6()}) {
      double previousValueError=Double.NaN;
      double previousTimeError=Double.NaN;
      for (int i=4; i < 10; ++i) {
        double step=(pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0,-i);
        FirstOrderIntegrator integ=new MidpointIntegrator(step);
        TestProblemHandler handler=new TestProblemHandler(pb,integ);
        integ.addStepHandler(handler);
        EventHandler[] functions=pb.getEventsHandlers();
        for (int l=0; l < functions.length; ++l) {
          integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);
        }
        double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
        if (functions.length == 0) {
          Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);
        }
        double valueError=handler.getMaximalValueError();
        if (i > 4) {
          Assert.assertTrue(valueError < FastMath.abs(previousValueError));
        }
        previousValueError=valueError;
        double timeError=handler.getMaximalTimeError();
        if (i > 4) {
          Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
        }
        previousTimeError=timeError;
      }
    }
  }
  @Test public void testSmallStep() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    TestProblem1 pb=new TestProblem1();
    double step=(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
    FirstOrderIntegrator integ=new MidpointIntegrator(step);
    TestProblemHandler handler=new TestProblemHandler(pb,integ);
    integ.addStepHandler(handler);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.assertTrue(handler.getLastError() < 2.0e-7);
    Assert.assertTrue(handler.getMaximalValueError() < 1.0e-6);
    Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);
    Assert.assertEquals("midpoint",integ.getName());
  }
  @Test public void testBigStep() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    TestProblem1 pb=new TestProblem1();
    double step=(pb.getFinalTime() - pb.getInitialTime()) * 0.2;
    FirstOrderIntegrator integ=new MidpointIntegrator(step);
    TestProblemHandler handler=new TestProblemHandler(pb,integ);
    integ.addStepHandler(handler);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.assertTrue(handler.getLastError() > 0.01);
    Assert.assertTrue(handler.getMaximalValueError() > 0.05);
    Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);
  }
  @Test public void testBackward() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    TestProblem5 pb=new TestProblem5();
    double step=FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
    FirstOrderIntegrator integ=new MidpointIntegrator(step);
    TestProblemHandler handler=new TestProblemHandler(pb,integ);
    integ.addStepHandler(handler);
    integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);
    Assert.assertTrue(handler.getLastError() < 6.0e-4);
    Assert.assertTrue(handler.getMaximalValueError() < 6.0e-4);
    Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);
    Assert.assertEquals("midpoint",integ.getName());
  }
  @Test public void testStepSize() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {
    final double step=1.23456;
    FirstOrderIntegrator integ=new MidpointIntegrator(step);
    integ.addStepHandler(new StepHandler(){
      public void handleStep(      StepInterpolator interpolator,      boolean isLast){
        if (!isLast) {
          Assert.assertEquals(step,interpolator.getCurrentTime() - interpolator.getPreviousTime(),1.0e-12);
        }
      }
      public void init(      double t0,      double[] y0,      double t){
      }
    }
);
    integ.integrate(new FirstOrderDifferentialEquations(){
      public void computeDerivatives(      double t,      double[] y,      double[] dot){
        dot[0]=1.0;
      }
      public int getDimension(){
        return 1;
      }
    }
,0.0,new double[]{0.0},5.0,new double[1]);
  }
}
