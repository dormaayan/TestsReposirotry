/** 
 * Tests for  {@link MapUtils} class.
 */
public class MapUtilsTest {
  @Test public void testFindClosestNeuron(){
    final FeatureInitializer init=new OffsetFeatureInitializer(FeatureInitializerFactory.uniform(-0.1,0.1));
    final FeatureInitializer[] initArray={init};
    final Network net=new NeuronString(3,false,initArray).getNetwork();
    final DistanceMeasure dist=new EuclideanDistance();
    final Set<Neuron> allBest=new HashSet<Neuron>();
    final Set<Neuron> best=new HashSet<Neuron>();
    double[][] features;
    best.clear();
    features=new double[][]{{-1},{0.4}};
    for (    double[] f : features) {
      best.add(MapUtils.findBest(f,net,dist));
    }
    Assert.assertEquals(1,best.size());
    allBest.addAll(best);
    best.clear();
    features=new double[][]{{0.6},{1.4}};
    for (    double[] f : features) {
      best.add(MapUtils.findBest(f,net,dist));
    }
    Assert.assertEquals(1,best.size());
    allBest.addAll(best);
    best.clear();
    features=new double[][]{{1.6},{3}};
    for (    double[] f : features) {
      best.add(MapUtils.findBest(f,net,dist));
    }
    Assert.assertEquals(1,best.size());
    allBest.addAll(best);
    Assert.assertEquals(3,allBest.size());
  }
  @Test public void testSort(){
    final Set<Neuron> list=new HashSet<Neuron>();
    for (int i=0; i < 4; i++) {
      list.add(new Neuron(i,new double[]{i - 0.5}));
    }
    final Neuron[] sorted=MapUtils.sort(new double[]{3.4},list,new EuclideanDistance());
    final long[] expected=new long[]{3,2,1,0};
    for (int i=0; i < list.size(); i++) {
      Assert.assertEquals(expected[i],sorted[i].getIdentifier());
    }
  }
}
