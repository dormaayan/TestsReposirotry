private static class BardFunction extends MinpackFunction {
  public BardFunction(  double x0,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(15,buildArray(3,x0),theoreticalMinCost,theoreticalMinParams);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double x2=variables[1];
    double x3=variables[2];
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      double tmp1=i + 1;
      double tmp2=15 - i;
      double tmp3=(i <= 7) ? tmp1 : tmp2;
      double tmp4=x2 * tmp2 + x3 * tmp3;
      tmp4*=tmp4;
      jacobian[i]=new double[]{-1,tmp1 * tmp2 / tmp4,tmp1 * tmp3 / tmp4};
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double x1=variables[0];
    double x2=variables[1];
    double x3=variables[2];
    double[] f=new double[m];
    for (int i=0; i < m; ++i) {
      double tmp1=i + 1;
      double tmp2=15 - i;
      double tmp3=(i <= 7) ? tmp1 : tmp2;
      f[i]=y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
    }
    return f;
  }
  private static final double[] y={0.14,0.18,0.22,0.25,0.29,0.32,0.35,0.39,0.37,0.58,0.73,0.96,1.34,2.10,4.39};
}
