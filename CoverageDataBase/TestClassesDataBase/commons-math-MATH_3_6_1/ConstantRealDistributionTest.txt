/** 
 * Test cases for ConstantRealDistribution.
 */
public class ConstantRealDistributionTest extends RealDistributionAbstractTest {
  @Override public void setUp(){
    super.setUp();
    setTolerance(0);
  }
  /** 
 * Creates the default uniform real distribution instance to use in tests. 
 */
  @Override public ConstantRealDistribution makeDistribution(){
    return new ConstantRealDistribution(1);
  }
  /** 
 * Creates the default cumulative probability distribution test input values 
 */
  @Override public double[] makeCumulativeTestPoints(){
    return new double[]{0,0.5,1};
  }
  /** 
 * Creates the default cumulative probability distribution test expected values 
 */
  @Override public double[] makeCumulativeTestValues(){
    return new double[]{0,0,1};
  }
  /** 
 * Creates the default probability density test expected values 
 */
  @Override public double[] makeDensityTestValues(){
    return new double[]{0,0,1};
  }
  /** 
 * Override default test, verifying that inverse cum is constant 
 */
  @Override @Test public void testInverseCumulativeProbabilities(){
    RealDistribution dist=getDistribution();
    for (    double x : getCumulativeTestValues()) {
      Assert.assertEquals(1,dist.inverseCumulativeProbability(x),0);
    }
  }
  @Test public void testMeanVariance(){
    ConstantRealDistribution dist;
    dist=new ConstantRealDistribution(-1);
    Assert.assertEquals(dist.getNumericalMean(),-1,0d);
    Assert.assertEquals(dist.getNumericalVariance(),0,0d);
  }
  @Test public void testSampling(){
    ConstantRealDistribution dist=new ConstantRealDistribution(0);
    for (int i=0; i < 10; i++) {
      Assert.assertEquals(0,dist.sample(),0);
    }
  }
}
