private static class BrownAlmostLinearFunction extends MinpackFunction {
  public BrownAlmostLinearFunction(  int m,  double factor,  double theoreticalStartCost,  double theoreticalMinCost,  double[] theoreticalMinParams){
    super(m,buildArray(m,factor),theoreticalMinCost,theoreticalMinParams);
  }
  @Override public double[][] computeJacobian(  double[] variables){
    double[][] jacobian=new double[m][];
    for (int i=0; i < m; ++i) {
      jacobian[i]=new double[n];
    }
    double prod=1;
    for (int j=0; j < n; ++j) {
      prod*=variables[j];
      for (int i=0; i < n; ++i) {
        jacobian[i][j]=1;
      }
      jacobian[j][j]=2;
    }
    for (int j=0; j < n; ++j) {
      double temp=variables[j];
      if (temp == 0) {
        temp=1;
        prod=1;
        for (int k=0; k < n; ++k) {
          if (k != j) {
            prod*=variables[k];
          }
        }
      }
      jacobian[n - 1][j]=prod / temp;
    }
    return jacobian;
  }
  @Override public double[] computeValue(  double[] variables){
    double[] f=new double[m];
    double sum=-(n + 1);
    double prod=1;
    for (int j=0; j < n; ++j) {
      sum+=variables[j];
      prod*=variables[j];
    }
    for (int i=0; i < n; ++i) {
      f[i]=variables[i] + sum;
    }
    f[n - 1]=prod - 1;
    return f;
  }
}
