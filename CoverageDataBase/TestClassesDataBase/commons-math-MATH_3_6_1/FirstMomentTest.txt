/** 
 * Test cases for the  {@link FirstMoment} class.
 */
public class FirstMomentTest extends StorelessUnivariateStatisticAbstractTest {
  /** 
 * descriptive statistic. 
 */
  protected FirstMoment stat;
  /** 
 * @see org.apache.commons.math3.stat.descriptive.UnivariateStatisticAbstractTest#getUnivariateStatistic()
 */
  @Override public UnivariateStatistic getUnivariateStatistic(){
    return new FirstMoment();
  }
  /** 
 * @see org.apache.commons.math3.stat.descriptive.UnivariateStatisticAbstractTest#expectedValue()
 */
  @Override public double expectedValue(){
    return this.mean;
  }
  /** 
 * Added in an attempt to resolve MATH-1146 Commented out tests that won't pass with the current implementation.
 */
  @Test public void testSpecialValues(){
    final FirstMoment mean=new FirstMoment();
    mean.clear();
    mean.increment(Double.POSITIVE_INFINITY);
    mean.increment(Double.NEGATIVE_INFINITY);
    Assert.assertTrue(Double.isNaN(mean.getResult()));
    mean.clear();
    mean.increment(Double.NEGATIVE_INFINITY);
    mean.increment(Double.POSITIVE_INFINITY);
    Assert.assertTrue(Double.isNaN(mean.getResult()));
    mean.clear();
    mean.increment(Double.NaN);
    mean.increment(Double.POSITIVE_INFINITY);
    Assert.assertTrue(Double.isNaN(mean.getResult()));
    mean.clear();
    mean.increment(Double.NaN);
    mean.increment(Double.NEGATIVE_INFINITY);
    Assert.assertTrue(Double.isNaN(mean.getResult()));
    mean.clear();
    mean.increment(Double.NaN);
    mean.increment(0d);
    Assert.assertTrue(Double.isNaN(mean.getResult()));
  }
}
