static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {
  private ChannelPromise promise;
  /** 
 * Create new instance
 * @param promise Promise object used to notify when first settings are received
 */
  Http2SettingsHandler(  ChannelPromise promise){
    this.promise=promise;
  }
  /** 
 * Wait for this handler to be added after the upgrade to HTTP/2, and for initial preface handshake to complete.
 * @param timeout Time to wait
 * @param unit {@link java.util.concurrent.TimeUnit} for {@code timeout}
 * @throws Exception if timeout or other failure occurs
 */
  public void awaitSettings(  long timeout,  TimeUnit unit) throws Exception {
    if (!promise.awaitUninterruptibly(timeout,unit)) {
      throw new IllegalStateException("Timed out waiting for settings");
    }
    if (!promise.isSuccess()) {
      throw new RuntimeException(promise.cause());
    }
  }
  @Override protected void channelRead0(  ChannelHandlerContext ctx,  Http2Settings msg) throws Exception {
    promise.setSuccess();
    ctx.pipeline().remove(this);
  }
}
