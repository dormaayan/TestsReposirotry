/** 
 * Tests that the allowed and disallowed method handlers work as expected
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class AllowedMethodsTestCase {
  @Test public void testAllowedMethods() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      final AllowedMethodsHandler handler=new AllowedMethodsHandler(ResponseCodeHandler.HANDLE_200,Methods.POST);
      DefaultServer.setRootHandler(handler);
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.METHOD_NOT_ALLOWED,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.setEntity(new StringEntity("foo"));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testDisallowedMethods() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      final DisallowedMethodsHandler handler=new DisallowedMethodsHandler(ResponseCodeHandler.HANDLE_200,Methods.GET);
      DefaultServer.setRootHandler(handler);
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.METHOD_NOT_ALLOWED,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.setEntity(new StringEntity("foo"));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
