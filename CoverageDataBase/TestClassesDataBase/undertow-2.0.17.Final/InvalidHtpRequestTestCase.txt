/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore @HttpOneOnly public class InvalidHtpRequestTestCase {
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(ResponseCodeHandler.HANDLE_200);
  }
  @Test public void testInvalidCharacterInMethod() throws IOException {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpRequestBase method=new HttpRequestBase(){
        @Override public String getMethod(){
          return "GET;POST";
        }
        @Override public URI getURI(){
          try {
            return new URI(DefaultServer.getDefaultServerURL());
          }
 catch (          URISyntaxException e) {
            throw new RuntimeException(e);
          }
        }
      }
;
      HttpResponse result=client.execute(method);
      Assert.assertEquals(StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testInvalidCharacterInHeader() throws IOException {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpRequestBase method=new HttpGet(DefaultServer.getDefaultServerURL());
      method.addHeader("fake;header","value");
      HttpResponse result=client.execute(method);
      Assert.assertEquals(StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultipleContentLengths() throws IOException {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpRequestBase method=new HttpGet(DefaultServer.getDefaultServerURL());
      method.addHeader(Headers.CONTENT_LENGTH_STRING,"0");
      method.addHeader(Headers.CONTENT_LENGTH_STRING,"10");
      HttpResponse result=client.execute(method);
      Assert.assertEquals(StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testContentLengthAndTransferEncoding() throws IOException {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpRequestBase method=new HttpGet(DefaultServer.getDefaultServerURL());
      method.addHeader(Headers.CONTENT_LENGTH_STRING,"0");
      method.addHeader(Headers.TRANSFER_ENCODING_STRING,"chunked");
      HttpResponse result=client.execute(method);
      Assert.assertEquals(StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultipleTransferEncoding() throws IOException {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpRequestBase method=new HttpGet(DefaultServer.getDefaultServerURL());
      method.addHeader(Headers.TRANSFER_ENCODING_STRING,"chunked");
      method.addHeader(Headers.TRANSFER_ENCODING_STRING,"gzip, chunked");
      HttpResponse result=client.execute(method);
      Assert.assertEquals(StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
