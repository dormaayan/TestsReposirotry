/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class PreCompressedResourceTestCase {
  @After public void clean() throws IOException, URISyntaxException {
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    if (Files.exists(rootPath.resolve("page.html.gz"))) {
      Files.delete(rootPath.resolve("page.html.gz"));
    }
    if (Files.exists(rootPath.resolve("page.html.gzip"))) {
      Files.delete(rootPath.resolve("page.html.gzip"));
    }
    if (Files.exists(rootPath.resolve("page.html.nonsense"))) {
      Files.delete(rootPath.resolve("page.html.nonsense"));
    }
    if (Files.exists(rootPath.resolve("page.html.gzip.nonsense"))) {
      Files.delete(rootPath.resolve("page.html.gzip.nonsense"));
    }
  }
  @Test public void testContentEncodedResource() throws IOException, URISyntaxException {
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try (CloseableHttpClient compClient=HttpClientBuilder.create().build()){
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PreCompressedResourceSupplier(new PathResourceManager(rootPath,10485760)).addEncoding("gzip",".gz")).setDirectoryListingEnabled(true))));
      final String plainResponse=assertResponse(client.execute(get),false);
      assertResponse(compClient.execute(get),false,plainResponse);
      generatePreCompressedResource("gz");
      assertResponse(compClient.execute(get),true,plainResponse,"gz");
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testCorrectResourceSelected() throws IOException, URISyntaxException {
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try (CloseableHttpClient compClient=HttpClientBuilder.create().build()){
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new EncodingHandler(new ContentEncodingRepository().addEncodingHandler("gzip",new GzipEncodingProvider(),50,Predicates.truePredicate())).setNext(new ResourceHandler(new PreCompressedResourceSupplier(new PathResourceManager(rootPath,10485760)).addEncoding("gzip",".gzip")).setDirectoryListingEnabled(true)))));
      final String plainResponse=assertResponse(client.execute(get),false);
      assertResponse(compClient.execute(get),true,plainResponse);
      generatePreCompressedResource("gzip");
      generatePreCompressedResource("nonsense");
      generatePreCompressedResource("gzip.nonsense");
      assertResponse(compClient.execute(get),true,plainResponse,"gzip");
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private void generateGZipFile(  Path source,  Path target) throws IOException {
    byte[] buffer=new byte[1024];
    GZIPOutputStream gzos=new GZIPOutputStream(new FileOutputStream(target.toFile()));
    FileInputStream in=new FileInputStream(source.toFile());
    int len;
    while ((len=in.read(buffer)) > 0) {
      gzos.write(buffer,0,len);
    }
    in.close();
    gzos.finish();
    gzos.close();
  }
  private void replaceStringInFile(  Path file,  String original,  String replacement) throws IOException {
    String content=new String(Files.readAllBytes(file),StandardCharsets.UTF_8);
    content=content.replaceAll(original,replacement);
    Files.write(file,content.getBytes(StandardCharsets.UTF_8));
  }
  private String assertResponse(  HttpResponse response,  boolean encoding) throws IOException {
    return assertResponse(response,encoding,null,null);
  }
  private String assertResponse(  HttpResponse response,  boolean encoding,  String compareWith) throws IOException {
    return assertResponse(response,encoding,compareWith,"web");
  }
  /** 
 * Series of assertions checking response code, headers and response content
 */
  private String assertResponse(  HttpResponse response,  boolean encoding,  String compareWith,  String extension) throws IOException {
    Assert.assertEquals(StatusCodes.OK,response.getStatusLine().getStatusCode());
    String body=HttpClientUtils.readResponse(response);
    Header[] headers=response.getHeaders(Headers.CONTENT_TYPE_STRING);
    Assert.assertEquals("text/html",headers[0].getValue());
    if (encoding) {
      assert response.getEntity() instanceof DecompressingEntity;
    }
 else {
      Assert.assertNull(response.getFirstHeader(Headers.CONTENT_ENCODING_STRING));
    }
    if (compareWith != null) {
      Assert.assertEquals(compareWith.replace("\r","").replace("web",extension),body.replace("\r",""));
    }
    return body;
  }
  /** 
 * Creates compressed resource made by compressing page.html which content is updated before with  {@param extension}and after compression returned to original content
 */
  private void generatePreCompressedResource(  String extension) throws IOException, URISyntaxException {
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path html=rootPath.resolve("page.html");
    replaceStringInFile(html,"web",extension);
    generateGZipFile(html,rootPath.resolve("page.html." + extension));
    replaceStringInFile(html,extension,"web");
  }
}
