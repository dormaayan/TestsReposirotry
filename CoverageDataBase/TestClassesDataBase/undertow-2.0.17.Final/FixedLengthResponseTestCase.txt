/** 
 * Tests that persistent connections work with fixed length responses
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class FixedLengthResponseTestCase {
  private static final String MESSAGE="My HTTP Request!";
  private static volatile String message;
  private static volatile ServerConnection connection;
  @Before public void reset(){
    connection=null;
  }
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        if (connection == null) {
          connection=exchange.getConnection();
        }
 else         if (!DefaultServer.isAjp() && !DefaultServer.isProxy() && connection != exchange.getConnection()) {
          Sender sender=exchange.getResponseSender();
          sender.send("Connection not persistent");
          return;
        }
        exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH,message.length() + "");
        final Sender sender=exchange.getResponseSender();
        sender.send(message);
      }
    }
);
  }
  @Test public void sendHttpRequest() throws IOException {
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
    TestHttpClient client=new TestHttpClient();
    try {
      generateMessage(1);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
      generateMessage(1000);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private static void generateMessage(  int repetitions){
    final StringBuilder builder=new StringBuilder(repetitions * MESSAGE.length());
    for (int i=0; i < repetitions; ++i) {
      builder.append(MESSAGE);
    }
    message=builder.toString();
  }
}
