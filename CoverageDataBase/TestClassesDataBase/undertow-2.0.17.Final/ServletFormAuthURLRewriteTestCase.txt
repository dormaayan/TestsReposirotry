/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ServletFormAuthURLRewriteTestCase {
  public static final String HELLO_WORLD="Hello World";
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler path=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo s=new ServletInfo("servlet",SendUsernameServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/secured/*");
    ServletInfo echo=new ServletInfo("echo",EchoServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/secured/echo");
    ServletInfo echoParam=new ServletInfo("echoParam",RequestParamEchoServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/secured/echoParam");
    ServletInfo s1=new ServletInfo("loginPage",FormLoginServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("group1")).addMapping("/FormLoginServlet");
    ServletIdentityManager identityManager=new ServletIdentityManager();
    identityManager.addUser("user1","password1","role1");
    DeploymentInfo builder=new DeploymentInfo().setServletSessionConfig(new ServletSessionConfig().setSessionTrackingModes(Collections.singleton(SessionTrackingMode.URL))).setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").setAuthenticationMode(AuthenticationMode.CONSTRAINT_DRIVEN).setIdentityManager(identityManager).setLoginConfig(new LoginConfig("FORM","Test Realm","/FormLoginServlet","/error.html")).addServlets(s,s1,echo,echoParam);
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    path.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(path);
  }
  @Test public void testServletFormAuth() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setRedirectStrategy(new DefaultRedirectStrategy(){
      @Override public boolean isRedirected(      final HttpRequest request,      final HttpResponse response,      final HttpContext context) throws ProtocolException {
        if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
          return true;
        }
        return super.isRedirected(request,response,context);
      }
    }
);
    try {
      final String uri=DefaultServer.getDefaultServerURL() + "/servletContext/secured/test";
      HttpGet get=new HttpGet(uri);
      HttpResponse result=client.execute(get);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertTrue(response.startsWith("j_security_check"));
      BasicNameValuePair[] pairs=new BasicNameValuePair[]{new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1")};
      final List<NameValuePair> data=new ArrayList<>();
      data.addAll(Arrays.asList(pairs));
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/" + response);
      post.setEntity(new UrlEncodedFormEntity(data));
      result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("user1",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testServletFormAuthWithSavedPostBody() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setRedirectStrategy(new DefaultRedirectStrategy(){
      @Override public boolean isRedirected(      final HttpRequest request,      final HttpResponse response,      final HttpContext context) throws ProtocolException {
        if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
          return true;
        }
        return super.isRedirected(request,response,context);
      }
    }
);
    try {
      final String uri=DefaultServer.getDefaultServerURL() + "/servletContext/secured/echo";
      HttpPost post=new HttpPost(uri);
      post.setEntity(new StringEntity("String Entity"));
      HttpResponse result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertTrue(response.startsWith("j_security_check"));
      BasicNameValuePair[] pairs=new BasicNameValuePair[]{new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1")};
      final List<NameValuePair> data=new ArrayList<>();
      data.addAll(Arrays.asList(pairs));
      post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/" + response);
      post.setEntity(new UrlEncodedFormEntity(data));
      result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("String Entity",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testServletFormAuthWithOriginalRequestParams() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setRedirectStrategy(new DefaultRedirectStrategy(){
      @Override public boolean isRedirected(      final HttpRequest request,      final HttpResponse response,      final HttpContext context) throws ProtocolException {
        if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
          return true;
        }
        return super.isRedirected(request,response,context);
      }
    }
);
    try {
      final String uri=DefaultServer.getDefaultServerURL() + "/servletContext/secured/echoParam?param=developer";
      HttpPost post=new HttpPost(uri);
      post.setEntity(new StringEntity("String Entity"));
      HttpResponse result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertTrue(response.startsWith("j_security_check"));
      BasicNameValuePair[] pairs=new BasicNameValuePair[]{new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1")};
      final List<NameValuePair> data=new ArrayList<>();
      data.addAll(Arrays.asList(pairs));
      post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/" + response);
      post.setEntity(new UrlEncodedFormEntity(data));
      result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      assertEquals("developer",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
