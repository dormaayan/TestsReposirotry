/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @HttpOneOnly public class ClientEndpointReconnectTestCase {
  private static ServerWebSocketContainer deployment;
  private static volatile boolean failed=false;
  @BeforeClass public static void setup() throws Exception {
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(ClientEndpointReconnectTestCase.class.getClassLoader()).setContextPath("/ws").setResourceManager(new TestResourceLoader(ClientEndpointReconnectTestCase.class)).setClassIntrospecter(TestClassIntrospector.INSTANCE).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,new WebSocketDeploymentInfo().setBuffers(new DefaultByteBufferPool(true,8192)).setWorker(DefaultServer.getWorkerSupplier()).addEndpoint(DisconnectServerEndpoint.class).addEndpoint(AnnotatedClientReconnectEndpoint.class).addListener(new WebSocketDeploymentInfo.ContainerReadyListener(){
      @Override public void ready(      ServerWebSocketContainer container){
        deployment=container;
      }
    }
).setReconnectHandler(new WebSocketReconnectHandler(){
      @Override public long disconnected(      CloseReason closeReason,      URI connectionUri,      Session session,      int disconnectCount){
        if (disconnectCount < 3) {
          return 1;
        }
 else {
          return -1;
        }
      }
      @Override public long reconnectFailed(      IOException exception,      URI connectionUri,      Session session,      int failedCount){
        failed=true;
        return -1;
      }
    }
)).setDeploymentName("servletContext.war");
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    DefaultServer.setRootHandler(Handlers.path().addPrefixPath("/ws",manager.start()));
  }
  @AfterClass public static void after(){
    deployment=null;
  }
  @Test public void testAnnotatedClientEndpoint() throws Exception {
    AnnotatedClientReconnectEndpoint endpoint=new AnnotatedClientReconnectEndpoint();
    Session session=deployment.connectToServer(endpoint,new URI("ws://" + DefaultServer.getHostAddress("default") + ":"+ DefaultServer.getHostPort("default")+ "/ws/"));
    Assert.assertEquals("OPEN",endpoint.message());
    session.getBasicRemote().sendText("hi");
    Assert.assertEquals("MESSAGE-ECHO-hi",endpoint.message());
    session.getBasicRemote().sendText("close");
    Assert.assertEquals("CLOSE",endpoint.message());
    Assert.assertEquals("OPEN",endpoint.message());
    session.getBasicRemote().sendText("hi");
    Assert.assertEquals("MESSAGE-ECHO-hi",endpoint.message());
    session.getBasicRemote().sendText("close");
    Assert.assertEquals("CLOSE",endpoint.message());
    Assert.assertEquals("OPEN",endpoint.message());
    session.getBasicRemote().sendText("hi");
    Assert.assertEquals("MESSAGE-ECHO-hi",endpoint.message());
    session.getBasicRemote().sendText("close");
    Assert.assertEquals("CLOSE",endpoint.message());
    Assert.assertNull(endpoint.quickMessage());
    Assert.assertFalse(failed);
  }
}
