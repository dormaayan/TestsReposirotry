/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class HttpServerExchangeTestCase {
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      HttpServerExchange exchange) throws Exception {
        exchange.getResponseSender().send(exchange.getHostName() + ":" + exchange.getProtocol()+ ":"+ exchange.getRequestMethod()+ ":"+ exchange.getHostPort()+ ":"+ exchange.getRequestURI()+ ":"+ exchange.getRelativePath()+ ":"+ exchange.getQueryString());
      }
    }
);
  }
  @Test public void testHttpServerExchange() throws IOException {
    String port=DefaultServer.isAjp() && !DefaultServer.isProxy() ? "9080" : "7777";
    String protocol=DefaultServer.isH2() ? Protocols.HTTP_2_0_STRING : Protocols.HTTP_1_1_STRING;
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/somepath");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("localhost:" + protocol + ":GET:"+ port+ ":/somepath:/somepath:",HttpClientUtils.readResponse(result));
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/somepath?a=b");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("localhost:" + protocol + ":GET:"+ port+ ":/somepath:/somepath:a=b",HttpClientUtils.readResponse(result));
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/somepath?a=b");
      get.addHeader("Host","[::1]:8080");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("::1:" + protocol + ":GET:8080:/somepath:/somepath:a=b",HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
