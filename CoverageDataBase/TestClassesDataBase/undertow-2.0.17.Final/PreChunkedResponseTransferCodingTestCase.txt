/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @HttpOneOnly public class PreChunkedResponseTransferCodingTestCase {
  private static final String MESSAGE="My HTTP Request!";
  private static volatile String message;
  private static volatile String chunkedMessage;
  private static volatile ServerConnection connection;
  @BeforeClass public static void setup(){
    final BlockingHandler blockingHandler=new BlockingHandler();
    DefaultServer.setRootHandler(blockingHandler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange){
        try {
          if (connection == null) {
            connection=exchange.getConnection();
          }
 else           if (!DefaultServer.isAjp() && !DefaultServer.isProxy() && connection != exchange.getConnection()) {
            final OutputStream outputStream=exchange.getOutputStream();
            outputStream.write("Connection not persistent".getBytes());
            outputStream.close();
            return;
          }
          exchange.getResponseHeaders().put(Headers.TRANSFER_ENCODING,Headers.CHUNKED.toString());
          exchange.putAttachment(HttpAttachments.PRE_CHUNKED_RESPONSE,true);
          new StringWriteChannelListener(chunkedMessage).setup(exchange.getResponseChannel());
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  @Test public void sendHttpRequest() throws IOException {
    Assume.assumeFalse(DefaultServer.isH2());
    connection=null;
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
    TestHttpClient client=new TestHttpClient();
    try {
      generateMessage(0);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
      generateMessage(1);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
      generateMessage(1000);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private static void generateMessage(  int repetitions){
    final StringBuilder builder=new StringBuilder(repetitions * MESSAGE.length());
    final StringBuilder chunkedBuilder=new StringBuilder(repetitions * MESSAGE.length());
    for (int i=0; i < repetitions; ++i) {
      builder.append(MESSAGE);
      chunkedBuilder.append(Integer.toHexString(MESSAGE.length()));
      chunkedBuilder.append("\r\n");
      chunkedBuilder.append(MESSAGE);
      chunkedBuilder.append("\r\n");
    }
    chunkedBuilder.append("0\r\n\r\n");
    message=builder.toString();
    chunkedMessage=chunkedBuilder.toString();
  }
}
