/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class SimpleNonBlockingServerTestCase {
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(new SetHeaderHandler(new HttpHandler(){
      @Override public void handleRequest(      HttpServerExchange exchange) throws Exception {
        exchange.getResponseSender().send("hi all");
      }
    }
,"MyHeader","MyValue"));
  }
  @Test public void sendHttpRequest() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders("MyHeader");
      Assert.assertEquals("MyValue",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void sendHttp11RequestWithClose() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.addHeader("Connection","close");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders("MyHeader");
      Assert.assertEquals("MyValue",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void sendHttpOneZeroRequest() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION,HttpVersion.HTTP_1_0);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders("MyHeader");
      Assert.assertEquals("MyValue",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
