/** 
 * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
 */
@RunWith(DefaultServer.class) @HttpOneOnly public class DynamicEndpointTest {
  private static ServerWebSocketContainer deployment;
  @BeforeClass public static void setup() throws Exception {
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(DynamicEndpointTest.class.getClassLoader()).setContextPath("/ws").setResourceManager(new TestResourceLoader(DynamicEndpointTest.class)).setClassIntrospecter(TestClassIntrospector.INSTANCE).addServlet(Servlets.servlet("upgrade",DoUpgradeServlet.class).addMapping("/*")).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,new WebSocketDeploymentInfo().setBuffers(DefaultServer.getBufferPool()).setWorker(DefaultServer.getWorkerSupplier()).addListener(new WebSocketDeploymentInfo.ContainerReadyListener(){
      @Override public void ready(      ServerWebSocketContainer container){
        deployment=container;
      }
    }
)).setDeploymentName("servletContext.war");
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    DefaultServer.setRootHandler(Handlers.path().addPrefixPath("/ws",manager.start()));
  }
  @AfterClass public static void after(){
    deployment=null;
  }
  @Test public void testDynamicAnnotatedEndpoint() throws Exception {
    final byte[] payload="hello".getBytes();
    final FutureResult latch=new FutureResult();
    WebSocketTestClient client=new WebSocketTestClient(WebSocketVersion.V13,new URI("ws://" + DefaultServer.getHostAddress("default") + ":"+ DefaultServer.getHostPort("default")+ "/ws/dynamicEchoEndpoint?annotated=true"));
    client.connect();
    client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)),new FrameChecker(TextWebSocketFrame.class,"opened:true /dynamicEchoEndpoint hello".getBytes(),latch));
    latch.getIoFuture().get();
    client.destroy();
  }
  @Test public void testDynamicProgramaticEndpoint() throws Exception {
    final byte[] payload="hello".getBytes();
    final FutureResult latch=new FutureResult();
    WebSocketTestClient client=new WebSocketTestClient(WebSocketVersion.V13,new URI("ws://" + DefaultServer.getHostAddress("default") + ":"+ DefaultServer.getHostPort("default")+ "/ws/dynamicEchoEndpoint"));
    client.connect();
    client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)),new FrameChecker(TextWebSocketFrame.class,"/dynamicEchoEndpoint hello".getBytes(),latch));
    latch.getIoFuture().get();
    client.destroy();
  }
}
