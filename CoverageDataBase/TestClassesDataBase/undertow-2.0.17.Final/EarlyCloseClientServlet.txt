/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class EarlyCloseClientServlet extends HttpServlet {
  private static volatile boolean exceptionThrown;
  private static volatile boolean completedNormally;
  private static volatile CountDownLatch latch=new CountDownLatch(1);
  @Override protected void doPost(  final HttpServletRequest req,  final HttpServletResponse resp) throws ServletException, IOException {
    try {
      final ByteArrayOutputStream out=new ByteArrayOutputStream();
      final ServletInputStream inputStream=req.getInputStream();
      byte[] buf=new byte[1024];
      int read;
      while ((read=inputStream.read(buf)) != -1) {
        out.write(buf,0,read);
      }
      resp.getOutputStream().write(out.toByteArray());
      completedNormally=true;
    }
 catch (    IOException e) {
      exceptionThrown=true;
    }
 finally {
      latch.countDown();
    }
  }
  public static void reset(){
    latch=new CountDownLatch(1);
    completedNormally=false;
    exceptionThrown=false;
  }
  public static boolean isExceptionThrown(){
    return exceptionThrown;
  }
  public static boolean isCompletedNormally(){
    return completedNormally;
  }
  public static CountDownLatch getLatch(){
    return latch;
  }
}
