/** 
 * Tests that the correct encoding is selected
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class EncodingSelectionTestCase {
  private static final String HEADER=Headers.CONTENT_ENCODING_STRING;
  /** 
 * Tests encoding selection with no qvalue <p/> Also tests a lot of non standard formats for Accept-Encoding to make sure that we are liberal in what we accept
 * @throws IOException
 */
  @Test public void testBasicEncodingSelect() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      final EncodingHandler handler=new EncodingHandler(new ContentEncodingRepository().addEncodingHandler("compress",ContentEncodingProvider.IDENTITY,50).addEncodingHandler("bzip",ContentEncodingProvider.IDENTITY,100)).setNext(new HttpHandler(){
        @Override public void handleRequest(        final HttpServerExchange exchange) throws Exception {
          exchange.getResponseSender().send("hi");
        }
      }
);
      DefaultServer.setRootHandler(handler);
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders(HEADER);
      Assert.assertEquals(0,header.length);
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"bzip");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"bzip compress identity someOtherEncoding");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING," compress, identity, someOtherEncoding,  bzip  , ");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"boo; compress, identity; someOtherEncoding,   , ");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("compress",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"boo; compress; identity; someOtherEncoding,   , ");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("compress",header[0].getValue());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  /** 
 * Tests encoding selection with a qvalue
 * @throws IOException
 */
  @Test public void testEncodingSelectWithQValue() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      final EncodingHandler handler=new EncodingHandler(new ContentEncodingRepository().addEncodingHandler("compress",ContentEncodingProvider.IDENTITY,100).addEncodingHandler("bzip",ContentEncodingProvider.IDENTITY,50)).setNext(new HttpHandler(){
        @Override public void handleRequest(        final HttpServerExchange exchange) throws Exception {
          exchange.getResponseSender().send("hi");
        }
      }
);
      DefaultServer.setRootHandler(handler);
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"bzip, compress;q=0.6");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"*;q=0.00");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_ACCEPTABLE,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"*;q=0.00 bzip");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"*;q=0.00 bzip;q=0.3");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"compress;q=0.1 bzip;q=0.05");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("compress",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"compress;q=0.1, bzip;q=1.000");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testEncodingSelectionWithQValueAndPredicate() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      final EncodingHandler handler=new EncodingHandler(new ContentEncodingRepository().addEncodingHandler("compress",ContentEncodingProvider.IDENTITY,100,Predicates.falsePredicate()).addEncodingHandler("bzip",ContentEncodingProvider.IDENTITY,50)).setNext(new HttpHandler(){
        @Override public void handleRequest(        final HttpServerExchange exchange) throws Exception {
          exchange.getResponseSender().send("hi");
        }
      }
);
      DefaultServer.setRootHandler(handler);
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"bzip, compress;q=0.6");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"*;q=0.00");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_ACCEPTABLE,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"compress");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals(0,header.length);
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"*;q=0.00 bzip;q=0.3");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"compress;q=0.1 bzip;q=0.05");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"compress;q=0.1, bzip;q=1.000");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      header=result.getHeaders(HEADER);
      Assert.assertEquals("bzip",header[0].getValue());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
