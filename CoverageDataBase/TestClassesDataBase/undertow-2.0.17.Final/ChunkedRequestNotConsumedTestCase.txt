/** 
 * See https://issues.jboss.org/browse/UNDERTOW-1011
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ChunkedRequestNotConsumedTestCase {
  private static final String MESSAGE="My HTTP Request!";
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws InterruptedException {
        exchange.setResponseContentLength("message".length());
        exchange.getResponseSender().send("message",new IoCallback(){
          @Override public void onComplete(          HttpServerExchange exchange,          Sender sender){
            exchange.dispatch(SameThreadExecutor.INSTANCE,new Runnable(){
              @Override public void run(){
                exchange.getIoThread().executeAfter(new Runnable(){
                  @Override public void run(){
                    exchange.endExchange();
                  }
                }
,300,TimeUnit.MILLISECONDS);
              }
            }
);
          }
          @Override public void onException(          HttpServerExchange exchange,          Sender sender,          IOException exception){
            exchange.endExchange();
          }
        }
);
      }
    }
);
  }
  @Test public void testChunkedRequestNotConsumed() throws IOException {
    HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
    TestHttpClient client=new TestHttpClient();
    try {
      final Random random=new Random();
      final int seed=random.nextInt();
      System.out.print("Using Seed " + seed);
      random.setSeed(seed);
      for (int i=0; i < 3; ++i) {
        post.setEntity(new StringEntity(""){
          @Override public long getContentLength(){
            return -1;
          }
          @Override public boolean isChunked(){
            return true;
          }
          @Override public void writeTo(          OutputStream outstream) throws IOException {
            outstream.flush();
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
            }
            outstream.write(MESSAGE.getBytes(StandardCharsets.US_ASCII));
          }
        }
);
        HttpResponse result=client.execute(post);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        HttpClientUtils.readResponse(result);
      }
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
