/** 
 * Test sticky session force == false; behavior
 * @author Emanuel Muckenhuber
 */
public class StickySessionForceUnitTestCase extends AbstractModClusterTestBase {
  static NodeTestConfig server1;
  static NodeTestConfig server2;
static {
    server1=NodeTestConfig.builder().setStickySessionForce(false).setJvmRoute("server1").setType(getType()).setHostname("localhost").setPort(port + 1);
    server2=NodeTestConfig.builder().setStickySessionForce(false).setJvmRoute("server2").setType(getType()).setHostname("localhost").setPort(port + 2);
  }
  @BeforeClass public static void setup(){
    startServers(server1,server2);
  }
  @AfterClass public static void tearDown(){
    stopServers();
  }
  @Test public void testNoDomainRemovedContext() throws IOException {
    registerNodes(true,server1,server2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.removeApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.removeApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testNoDomainStoppedContext() throws IOException {
    registerNodes(true,server1,server2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.stopApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.stopApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testNoDomainNodeInError() throws IOException {
    registerNodes(true,server1,server2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.updateLoad(server1.getJvmRoute(),-1);
    }
 else {
      modClusterClient.updateLoad(server2.getJvmRoute(),-1);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDifferentDomainRemovedContext() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain2");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.removeApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.removeApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDifferentDomainStoppedContext() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain2");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.stopApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.stopApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDifferentDomainNodeInError() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain2");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.updateLoad(server1.getJvmRoute(),-1);
    }
 else {
      modClusterClient.updateLoad(server2.getJvmRoute(),-1);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDomainStoppedContext() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain1");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.stopApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.stopApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDomainRemovedContext() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain1");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.removeApp(server1.getJvmRoute(),SESSION);
    }
 else {
      modClusterClient.removeApp(server2.getJvmRoute(),SESSION);
    }
    checkGet("/session",StatusCodes.OK);
  }
  @Test public void testDomainNodeInError() throws IOException {
    final NodeTestConfig config1=server1.clone().setDomain("domain1");
    final NodeTestConfig config2=server2.clone().setDomain("domain1");
    registerNodes(true,config1,config2);
    modClusterClient.enableApp(server1.getJvmRoute(),SESSION);
    modClusterClient.enableApp(server2.getJvmRoute(),SESSION);
    final String response=checkGet("/session",StatusCodes.OK);
    if (response.startsWith(server1.getJvmRoute())) {
      modClusterClient.updateLoad(server1.getJvmRoute(),-1);
    }
 else {
      modClusterClient.updateLoad(server2.getJvmRoute(),-1);
    }
    checkGet("/session",StatusCodes.OK);
  }
}
