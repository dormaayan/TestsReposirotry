/** 
 * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
 */
public class WebSocket07ServerTest extends AbstractWebSocketServerTest {
  @Override protected WebSocketVersion getVersion(){
    return WebSocketVersion.V07;
  }
  @Test public void testPing() throws Exception {
    final AtomicBoolean connected=new AtomicBoolean(false);
    DefaultServer.setRootHandler(new WebSocketProtocolHandshakeHandler(new WebSocketConnectionCallback(){
      @Override public void onConnect(      final WebSocketHttpExchange exchange,      final WebSocketChannel channel){
        connected.set(true);
        channel.getReceiveSetter().set(new AbstractReceiveListener(){
          @Override protected void onFullPingMessage(          WebSocketChannel channel,          BufferedBinaryMessage message) throws IOException {
            final Pooled<ByteBuffer[]> data=message.getData();
            WebSockets.sendPong(data.getResource(),channel,new WebSocketCallback<Void>(){
              @Override public void complete(              WebSocketChannel channel,              Void context){
                data.close();
              }
              @Override public void onError(              WebSocketChannel channel,              Void context,              Throwable throwable){
                data.close();
              }
            }
);
          }
        }
);
        channel.resumeReceives();
      }
    }
));
    final FutureResult latch=new FutureResult();
    final byte[] payload="payload".getBytes();
    WebSocketTestClient client=new WebSocketTestClient(getVersion(),new URI("ws://" + NetworkUtils.formatPossibleIpv6Address(DefaultServer.getHostAddress("default")) + ':'+ DefaultServer.getHostPort("default")+ '/'));
    client.connect();
    client.send(new PingWebSocketFrame(Unpooled.wrappedBuffer(payload)),new FrameChecker(PongWebSocketFrame.class,payload,latch));
    latch.getIoFuture().get();
    client.destroy();
  }
}
