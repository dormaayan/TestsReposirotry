/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.Parameterized.class) public class FormDataParserTestCase {
static class AggregateRunner extends TestRunner {
  }
  private final HttpHandler rootHandler;
  public FormDataParserTestCase(  final HttpHandler rootHandler){
    this.rootHandler=rootHandler;
  }
  @Parameterized.Parameters public static Collection<Object[]> handlerChains(){
    List<Object[]> ret=new ArrayList<>();
    final FormParserFactory parserFactory=FormParserFactory.builder().build();
    HttpHandler fd=new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        final FormDataParser parser=parserFactory.createParser(exchange);
        parser.parse(new HttpHandler(){
          @Override public void handleRequest(          final HttpServerExchange exchange) throws Exception {
            FormData data=exchange.getAttachment(FormDataParser.FORM_DATA);
            Iterator<String> it=data.iterator();
            while (it.hasNext()) {
              String fd=it.next();
              for (              FormData.FormValue val : data.get(fd)) {
                exchange.getResponseHeaders().add(new HttpString("res"),fd + ":" + val.getValue());
              }
            }
          }
        }
);
      }
    }
;
    ret.add(new Object[]{fd});
    final BlockingHandler blocking=new BlockingHandler();
    blocking.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        final FormDataParser parser=parserFactory.createParser(exchange);
        try {
          FormData data=parser.parseBlocking();
          Iterator<String> it=data.iterator();
          while (it.hasNext()) {
            String fd=it.next();
            for (            FormData.FormValue val : data.get(fd)) {
              exchange.getResponseHeaders().add(new HttpString("res"),fd + ":" + val.getValue());
            }
          }
        }
 catch (        IOException e) {
          exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);
        }
      }
    }
);
    ret.add(new Object[]{blocking});
    return ret;
  }
  @Test public void testFormDataParsing() throws Exception {
    runTest(new BasicNameValuePair("name","A Value"));
    runTest(new BasicNameValuePair("name","A Value"),new BasicNameValuePair("Single-value",null));
    runTest(new BasicNameValuePair("name","A Value"),new BasicNameValuePair("A/name/with_special*chars","A $ value&& with=SomeCharacters"));
    runTest(new BasicNameValuePair("name","A Value"),new BasicNameValuePair("Single-value",null),new BasicNameValuePair("A/name/with_special*chars","A $ value&& with=SomeCharacters"));
  }
  private void runTest(  final NameValuePair... pairs) throws Exception {
    DefaultServer.setRootHandler(rootHandler);
    TestHttpClient client=new TestHttpClient();
    try {
      final List<NameValuePair> data=new ArrayList<>();
      data.addAll(Arrays.asList(pairs));
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.setHeader(Headers.CONTENT_TYPE_STRING,FormEncodedDataDefinition.APPLICATION_X_WWW_FORM_URLENCODED);
      post.setEntity(new UrlEncodedFormEntity(data));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      checkResult(data,result);
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private void checkResult(  final List<NameValuePair> data,  final HttpResponse result){
    Map<String,String> res=new HashMap<>();
    for (    Header d : result.getHeaders("res")) {
      String[] split=d.getValue().split(":");
      res.put(split[0],split.length == 1 ? "" : split[1]);
    }
    for (    NameValuePair vp : data) {
      Assert.assertEquals(vp.getValue() == null ? "" : vp.getValue(),res.get(vp.getName()));
    }
  }
}
