/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class SsoTestCase extends AuthenticationTestBase {
  @BeforeClass public static void setup(){
    final SingleSignOnAuthenticationMechanism sso=new SingleSignOnAuthenticationMechanism(new InMemorySingleSignOnManager());
    final PathHandler path=new PathHandler();
    HttpHandler current=new ResponseHandler();
    current=new AuthenticationCallHandler(current);
    current=new AuthenticationConstraintHandler(current);
    List<AuthenticationMechanism> mechs=new ArrayList<>();
    mechs.add(sso);
    mechs.add(new BasicAuthenticationMechanism("Test Realm"));
    current=new AuthenticationMechanismsHandler(current,mechs);
    current=new NotificationReceiverHandler(current,Collections.<NotificationReceiver>singleton(auditReceiver));
    current=new SecurityInitialHandler(AuthenticationMode.PRO_ACTIVE,identityManager,current);
    path.addPrefixPath("/test1",current);
    current=new ResponseHandler();
    current=new AuthenticationCallHandler(current);
    current=new AuthenticationConstraintHandler(current);
    mechs=new ArrayList<>();
    mechs.add(sso);
    mechs.add(new FormAuthenticationMechanism("form","/login","/error"));
    current=new AuthenticationMechanismsHandler(current,mechs);
    current=new NotificationReceiverHandler(current,Collections.<NotificationReceiver>singleton(auditReceiver));
    current=new SecurityInitialHandler(AuthenticationMode.PRO_ACTIVE,identityManager,current);
    path.addPrefixPath("/test2",current);
    path.addPrefixPath("/login",new ResponseCodeHandler(StatusCodes.UNAUTHORIZED));
    DefaultServer.setRootHandler(new SessionAttachmentHandler(path,new InMemorySessionManager(""),new SessionCookieConfig()));
  }
  @Override protected List<AuthenticationMechanism> getTestMechanisms(){
    return null;
  }
  @Test public void testSsoSuccess() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/test1");
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
    String header=getAuthHeader(BASIC,values);
    assertEquals(BASIC + " realm=\"Test Realm\"",header);
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/test1");
    get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("userOne:passwordOne".getBytes(),false));
    result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    values=result.getHeaders("ProcessedBy");
    assertEquals(1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    HttpClientUtils.readResponse(result);
    assertSingleNotificationType(SecurityNotification.EventType.AUTHENTICATED);
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/test2");
    result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    values=result.getHeaders("ProcessedBy");
    assertEquals(1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    HttpClientUtils.readResponse(result);
    assertSingleNotificationType(SecurityNotification.EventType.AUTHENTICATED);
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/test1?logout=true");
    get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("userOne:passwordOne".getBytes(),false));
    result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    values=result.getHeaders("ProcessedBy");
    assertEquals(1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    HttpClientUtils.readResponse(result);
    assertNotifiactions(SecurityNotification.EventType.AUTHENTICATED,SecurityNotification.EventType.LOGGED_OUT);
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/test2");
    result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
  }
}
