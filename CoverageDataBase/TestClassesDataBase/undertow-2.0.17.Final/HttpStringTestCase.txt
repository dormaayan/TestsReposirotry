/** 
 * @author Matej Lazar
 */
@Category(UnitTest.class) public class HttpStringTestCase {
  @Test public void testOrderShorterFirst(){
    HttpString a=new HttpString("a");
    HttpString aa=new HttpString("aa");
    Assert.assertEquals(-1,a.compareTo(aa));
  }
  /** 
 * test HttpString.compareTo part: bytes.length - other.bytes.length
 */
  @Test public void testCompareShorterFirst(){
    HttpString accept=new HttpString(Headers.ACCEPT_STRING);
    Assert.assertEquals(accept.compareTo(Headers.ACCEPT_CHARSET),Headers.ACCEPT.compareTo(Headers.ACCEPT_CHARSET));
    HttpString acceptCharset=new HttpString(Headers.ACCEPT_CHARSET_STRING);
    Assert.assertEquals(acceptCharset.compareTo(Headers.ACCEPT),Headers.ACCEPT_CHARSET.compareTo(Headers.ACCEPT));
  }
  /** 
 * test HttpString.compareTo part: res = signum(higher(bytes[i]) - higher(other.bytes[i]));
 */
  @Test public void testCompare(){
    HttpString contentType=new HttpString(Headers.CONTENT_TYPE_STRING);
    Assert.assertEquals(contentType.compareTo(Headers.COOKIE),Headers.CONTENT_TYPE.compareTo(Headers.COOKIE));
    HttpString cookie=new HttpString(Headers.COOKIE_STRING);
    Assert.assertEquals(cookie.compareTo(Headers.CONTENT_TYPE),Headers.COOKIE.compareTo(Headers.CONTENT_TYPE));
  }
  @Test public void testSerialization() throws IOException, ClassNotFoundException {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ObjectOutputStream so=new ObjectOutputStream(out);
    HttpString testString=new HttpString("test");
    so.writeObject(testString);
    so.close();
    ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));
    Object res=in.readObject();
    Assert.assertEquals(testString,res);
  }
}
