/** 
 * Tests abnormal connection termination
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore @HttpOneOnly public class ConnectionTerminationTestCase {
  private volatile boolean completionListenerCalled=false;
  private final CountDownLatch completionListenerCalledLatch=new CountDownLatch(1);
  @Test public void testAbnormalRequestTermination() throws IOException, InterruptedException {
    DefaultServer.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        if (exchange.isInIoThread()) {
          exchange.dispatch(this);
          return;
        }
        exchange.startBlocking();
        exchange.addExchangeCompleteListener(new ExchangeCompletionListener(){
          @Override public void exchangeEvent(          HttpServerExchange exchange,          NextListener nextListener){
            completionListenerCalled=true;
            completionListenerCalledLatch.countDown();
            nextListener.proceed();
          }
        }
);
        final InputStream request=exchange.getInputStream();
        String data=FileUtils.readFile(request);
        exchange.getOutputStream().write(data.getBytes("UTF-8"));
      }
    }
);
    Socket socket=new Socket();
    socket.connect(DefaultServer.getDefaultServerAddress());
    try {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < 10000; ++i) {
        sb.append("hello world\r\n");
      }
      String request="POST / HTTP/1.1\r\nHost:localhost\r\nContent-Length:" + sb.length() + 100+ "\r\n\r\n"+ sb.toString();
      OutputStream outputStream=socket.getOutputStream();
      outputStream.write(request.getBytes("US-ASCII"));
      socket.getInputStream().close();
      outputStream.close();
      completionListenerCalledLatch.await(5,TimeUnit.SECONDS);
      Assert.assertTrue(completionListenerCalled);
    }
  finally {
      IoUtils.safeClose(socket);
    }
  }
}
