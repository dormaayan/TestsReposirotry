static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {
  private static final Http2FrameLogger logger=new Http2FrameLogger(LogLevel.INFO,Http2ClientInitializer.class);
  private final int maxContentLength;
  private HttpToHttp2ConnectionHandler connectionHandler;
  private HttpResponseHandler responseHandler;
  private Http2SettingsHandler settingsHandler;
  Http2ClientInitializer(  int maxContentLength){
    this.maxContentLength=maxContentLength;
  }
  @Override public void initChannel(  SocketChannel ch) throws Exception {
    final Http2Connection connection=new DefaultHttp2Connection(false);
    connectionHandler=new HttpToHttp2ConnectionHandlerBuilder().connection(connection).frameListener(new DelegatingDecompressorFrameListener(connection,new InboundHttp2ToHttpAdapterBuilder(connection).maxContentLength(maxContentLength).propagateSettings(true).build())).build();
    responseHandler=new HttpResponseHandler();
    settingsHandler=new Http2SettingsHandler(ch.newPromise());
    configureClearText(ch);
  }
  public HttpResponseHandler responseHandler(){
    return responseHandler;
  }
  public Http2SettingsHandler settingsHandler(){
    return settingsHandler;
  }
  protected void configureEndOfPipeline(  ChannelPipeline pipeline){
    pipeline.addLast(settingsHandler,responseHandler);
  }
  /** 
 * Configure the pipeline for a cleartext upgrade from HTTP to HTTP/2.
 */
  private void configureClearText(  SocketChannel ch){
    HttpClientCodec sourceCodec=new HttpClientCodec();
    Http2ClientUpgradeCodec upgradeCodec=new Http2ClientUpgradeCodec(connectionHandler);
    HttpClientUpgradeHandler upgradeHandler=new HttpClientUpgradeHandler(sourceCodec,upgradeCodec,65536);
    ch.pipeline().addLast(sourceCodec,upgradeHandler,new UpgradeRequestHandler(),new UserEventLogger());
  }
  /** 
 * A handler that triggers the cleartext upgrade to HTTP/2 by sending an initial HTTP request.
 */
private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {
    @Override public void channelActive(    ChannelHandlerContext ctx) throws Exception {
      DefaultFullHttpRequest upgradeRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/sdf");
      upgradeRequest.headers().add(Headers.HOST_STRING,"default");
      ctx.writeAndFlush(upgradeRequest);
      ctx.fireChannelActive();
      ctx.pipeline().remove(this);
      configureEndOfPipeline(ctx.pipeline());
    }
  }
  /** 
 * Class that logs any User Events triggered on this channel.
 */
private static class UserEventLogger extends ChannelInboundHandlerAdapter {
    @Override public void userEventTriggered(    ChannelHandlerContext ctx,    Object evt) throws Exception {
      System.out.println("User Event Triggered: " + evt);
      ctx.fireUserEventTriggered(evt);
    }
  }
  private static Http2FrameReader frameReader(){
    return new Http2InboundFrameLogger(new DefaultHttp2FrameReader(),logger);
  }
  private static Http2FrameWriter frameWriter(){
    return new Http2OutboundFrameLogger(new DefaultHttp2FrameWriter(),logger);
  }
}
