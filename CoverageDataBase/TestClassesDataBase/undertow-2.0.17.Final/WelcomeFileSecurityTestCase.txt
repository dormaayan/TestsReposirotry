/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class WelcomeFileSecurityTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletIdentityManager identityManager=new ServletIdentityManager();
    identityManager.addUser("user1","password1","role1");
    DeploymentInfo builder=new DeploymentInfo().setClassIntrospecter(TestClassIntrospector.INSTANCE).setClassLoader(ServletPathMappingTestCase.class.getClassLoader()).setContextPath("/servletContext").setDeploymentName("servletContext.war").setResourceManager(new TestResourceLoader(WelcomeFileSecurityTestCase.class)).addWelcomePages("doesnotexist.html","index.html","default").setIdentityManager(identityManager).setLoginConfig(new LoginConfig("BASIC","Test Realm")).addServlet(new ServletInfo("DefaultTestServlet",PathTestServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/path/default")).addSecurityConstraint(new SecurityConstraint().addRoleAllowed("role1").addWebResourceCollection(new WebResourceCollection().addUrlPattern("/index.html")));
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @Test public void testWelcomeFileRedirect() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
      Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
      assertEquals(1,values.length);
      assertEquals(BASIC + " realm=\"Test Realm\"",values[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/");
      get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("user1:password1".getBytes(),false));
      result=client.execute(get);
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertTrue(response.contains("Redirected home page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testWelcomeServletRedirect() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/path?a=b");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
      Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
      assertEquals(1,values.length);
      assertEquals(BASIC + " realm=\"Test Realm\"",values[0].getValue());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/path?a=b");
      get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("user1:password1".getBytes(),false));
      result=client.execute(get);
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("pathInfo:null queryString:a=b servletPath:/path/default requestUri:/servletContext/path/",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
