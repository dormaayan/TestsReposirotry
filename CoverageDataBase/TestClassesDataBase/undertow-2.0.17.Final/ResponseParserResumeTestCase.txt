/** 
 * Tests that the parser can resume when it is given partial input
 * @author Stuart Douglas
 */
@Category(UnitTest.class) public class ResponseParserResumeTestCase {
  public static final String DATA="HTTP/1.1 200 OK\r\nHost:   www.somehost.net\r\nOtherHeader: some\r\n    value\r\nHostee:another\r\nAccept-garbage:   a\r\n\r\ntttt";
  @Test public void testMethodSplit(){
    byte[] in=DATA.getBytes();
    for (int i=0; i < in.length - 4; ++i) {
      try {
        testResume(i,in);
      }
 catch (      Throwable e) {
        throw new RuntimeException("Test failed at split " + i,e);
      }
    }
  }
  @Test public void testOneCharacterAtATime() throws BadRequestException {
    byte[] in=DATA.getBytes();
    final ResponseParseState context=new ResponseParseState();
    HttpResponseBuilder result=new HttpResponseBuilder();
    ByteBuffer buffer=ByteBuffer.wrap(in);
    buffer.limit(1);
    while (context.state != ResponseParseState.PARSE_COMPLETE) {
      HttpResponseParser.INSTANCE.handle(buffer,context,result);
      buffer.limit(buffer.limit() + 1);
    }
    runAssertions(result,context);
  }
  private void testResume(  final int split,  byte[] in) throws BadRequestException {
    final ResponseParseState context=new ResponseParseState();
    HttpResponseBuilder result=new HttpResponseBuilder();
    ByteBuffer buffer=ByteBuffer.wrap(in);
    buffer.limit(split);
    HttpResponseParser.INSTANCE.handle(buffer,context,result);
    Assert.assertEquals(0,buffer.remaining());
    buffer.limit(buffer.capacity());
    HttpResponseParser.INSTANCE.handle(buffer,context,result);
    runAssertions(result,context);
    Assert.assertEquals(4,buffer.remaining());
  }
  private void runAssertions(  final HttpResponseBuilder result,  final ResponseParseState context){
    Assert.assertEquals(StatusCodes.OK,result.getStatusCode());
    Assert.assertEquals("OK",result.getReasonPhrase());
    Assert.assertSame(Protocols.HTTP_1_1,result.getProtocol());
    Assert.assertEquals("www.somehost.net",result.getResponseHeaders().getFirst(new HttpString("Host")));
    Assert.assertEquals("some value",result.getResponseHeaders().getFirst(new HttpString("OtherHeader")));
    Assert.assertEquals("another",result.getResponseHeaders().getFirst(new HttpString("Hostee")));
    Assert.assertEquals("a",result.getResponseHeaders().getFirst(new HttpString("Accept-garbage")));
    Assert.assertEquals(4,result.getResponseHeaders().getHeaderNames().size());
    Assert.assertEquals(ResponseParseState.PARSE_COMPLETE,context.state);
  }
}
