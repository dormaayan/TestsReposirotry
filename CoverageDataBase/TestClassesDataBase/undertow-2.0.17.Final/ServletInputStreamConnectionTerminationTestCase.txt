/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @HttpOneOnly @ProxyIgnore public class ServletInputStreamConnectionTerminationTestCase {
  public static final String HELLO_WORLD="Hello World";
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(new ServletInfo("term",ConnectionTerminationServlet.class).setAsyncSupported(true).addMapping("/term"));
  }
  @Test public void testConnectionTermination() throws IOException {
    StringBuilder builder=new StringBuilder(1000 * HELLO_WORLD.length());
    for (int j=0; j < 1000; ++j) {
      builder.append(HELLO_WORLD);
    }
    String message=builder.toString();
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/term";
      HttpPost post=new HttpPost(uri);
      post.setEntity(new StringEntity(message));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.fail();
    }
 catch (    IOException expected) {
    }
 finally {
      client.getConnectionManager().shutdown();
    }
  }
}
