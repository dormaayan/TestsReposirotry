/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class DefaultServletCachingTestCase {
  private static final int MAX_FILE_SIZE=20;
  private static final int METADATA_MAX_AGE=2000;
  public static final String DIR_NAME="cacheTest";
  static Path tmpDir;
  static DirectBufferCache dataCache=new DirectBufferCache(1000,10,1000 * 10 * 1000,BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,METADATA_MAX_AGE);
  @Before public void before(){
    for (    Object k : dataCache.getAllKeys()) {
      dataCache.remove(k);
    }
  }
  @BeforeClass public static void setup() throws ServletException, IOException {
    tmpDir=Files.createTempDirectory(DIR_NAME);
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassIntrospecter(TestClassIntrospector.INSTANCE).setClassLoader(ServletPathMappingTestCase.class.getClassLoader()).setContextPath("/servletContext").setDeploymentName("servletContext.war").setResourceManager(new CachingResourceManager(100,MAX_FILE_SIZE,dataCache,new PathResourceManager(tmpDir,10485760,false,false,false),METADATA_MAX_AGE));
    builder.addServlet(new ServletInfo("DefaultTestServlet",PathTestServlet.class).addMapping("/path/default")).addFilter(Servlets.filter("message",MessageFilter.class).addInitParam(MessageFilter.MESSAGE,"FILTER_TEXT ")).addFilterUrlMapping("message","*.txt",DispatcherType.REQUEST);
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @AfterClass public static void after() throws IOException {
    FileUtils.deleteRecursive(tmpDir);
  }
  @Test public void testFileExistanceCheckCached() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    String fileName=new SecureRandomSessionIdGenerator().createSessionId() + ".html";
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      Path f=tmpDir.resolve(fileName);
      Files.write(f,"hello".getBytes());
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      Thread.sleep(METADATA_MAX_AGE);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("hello",response);
      Files.delete(f);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testFileContentsCached() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    String fileName="hello.html";
    Path f=tmpDir.resolve(fileName);
    Files.write(f,"hello".getBytes());
    try {
      for (int i=0; i < 10; ++i) {
        HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
        HttpResponse result=client.execute(get);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        String response=HttpClientUtils.readResponse(result);
        Assert.assertEquals("hello",response);
      }
      Files.write(f,"hello world".getBytes());
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("hello",response);
      Thread.sleep(METADATA_MAX_AGE);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("hello world",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testFileContentsCachedWithFilter() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    String fileName="hello.txt";
    Path f=tmpDir.resolve(fileName);
    Files.write(f,"hello".getBytes());
    try {
      for (int i=0; i < 10; ++i) {
        HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
        HttpResponse result=client.execute(get);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        String response=HttpClientUtils.readResponse(result);
        Assert.assertEquals("FILTER_TEXT hello",response);
      }
      Files.write(f,"hello world".getBytes());
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("FILTER_TEXT hello",response);
      Thread.sleep(METADATA_MAX_AGE);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/" + fileName);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("FILTER_TEXT hello world",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testRangeRequest() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String fileName="range.html";
      Path f=tmpDir.resolve(fileName);
      Files.write(f,"hello".getBytes());
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/range.html");
      get.addHeader("range","bytes=2-3");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.PARTIAL_CONTENT,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("ll",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  /** 
 * Regression test for UNDERTOW-1444. Tested file is bigger then  {@value #MAX_FILE_SIZE} bytes.
 */
  @Test public void testRangeRequestFileNotInCache() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String fileName="range_not_in_cache.html";
      Path f=tmpDir.resolve(fileName);
      Files.write(f,"hello world and once again hello world".getBytes());
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/range_not_in_cache.html");
      get.addHeader("range","bytes=2-3");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.PARTIAL_CONTENT,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("ll",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
