/** 
 * Tests wrapped requests and responses TODO: these tests should be expanded to add more functionality to the wrappers, and also test request dispatches
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public abstract class AbstractResponseWrapperTestCase {
  @Before public void setup() throws ServletException {
    DeploymentInfo builder=new DeploymentInfo();
    builder.setExceptionHandler(LoggingExceptionHandler.builder().add(IllegalArgumentException.class,"io.undertow",Logger.Level.DEBUG).build());
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    builder.addServlet(new ServletInfo("wrapperServlet",WrapperServlet.class).addMapping("/*"));
    builder.addFilter(new FilterInfo("standard",StandardRequestWrappingFilter.class));
    builder.addFilterUrlMapping("standard","/standard",DispatcherType.REQUEST);
    builder.addFilter(new FilterInfo("nonstandard",NonStandardRequestWrappingFilter.class));
    builder.addFilterUrlMapping("nonstandard","/nonstandard",DispatcherType.REQUEST);
    builder.setClassIntrospecter(TestClassIntrospector.INSTANCE).setClassLoader(AbstractResponseWrapperTestCase.class.getClassLoader()).setContextPath("/servletContext").setDeploymentName("servletContext.war").setAllowNonStandardWrappers(isNonStandardAllowed());
    final DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  abstract boolean isNonStandardAllowed();
  @Test public void testNoWrapper() throws IOException, ServletException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(HttpServletRequestImpl.class.getName() + "\n" + HttpServletResponseImpl.class.getName(),response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testStandardWrapper() throws IOException, ServletException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/standard");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(StandardRequestWrapper.class.getName() + "\n" + StandardResponseWrapper.class.getName(),response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
