/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class DeflateContentEncodingTestCase {
  private static volatile String message;
  @BeforeClass public static void setup(){
    final EncodingHandler handler=new EncodingHandler(new ContentEncodingRepository().addEncodingHandler("deflate",new DeflateEncodingProvider(),50,Predicates.maxContentSize(5))).setNext(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH,message.length() + "");
        exchange.getResponseSender().send(message,IoCallback.END_EXCHANGE);
      }
    }
);
    DefaultServer.setRootHandler(handler);
  }
  /** 
 * Tests the use of the deflate contentent encoding
 * @throws IOException
 */
  @Test public void testDeflateEncoding() throws IOException {
    runTest("Hello World");
  }
  /** 
 * This message should not be compressed as it is too small
 * @throws IOException
 */
  @Test public void testSmallMessagePredicateDoesNotCompress() throws IOException {
    try (CloseableHttpClient client=HttpClientBuilder.create().build()){
      message="Hi";
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"deflate");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] header=result.getHeaders(Headers.CONTENT_ENCODING_STRING);
      Assert.assertEquals(0,header.length);
      final String body=HttpClientUtils.readResponse(result);
      Assert.assertEquals("Hi",body);
    }
   }
  @Test public void testDeflateEncodingBigResponse() throws IOException {
    final StringBuilder messageBuilder=new StringBuilder(691963);
    for (int i=0; i < 691963; ++i) {
      messageBuilder.append("*");
    }
    runTest(messageBuilder.toString());
  }
  @Test public void testDeflateEncodingRandomSizeResponse() throws IOException {
    int seed=new Random().nextInt();
    try {
      final Random random=new Random(seed);
      int size=random.nextInt(691963);
      final StringBuilder messageBuilder=new StringBuilder(size);
      for (int i=0; i < size; ++i) {
        messageBuilder.append('*' + random.nextInt(10));
      }
      runTest(messageBuilder.toString());
    }
 catch (    Exception e) {
      throw new RuntimeException("Test failed with seed " + seed,e);
    }
  }
  public void runTest(  final String theMessage) throws IOException {
    try (CloseableHttpClient client=HttpClientBuilder.create().build()){
      message=theMessage;
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      get.setHeader(Headers.ACCEPT_ENCODING_STRING,"deflate");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      assert result.getEntity() instanceof DecompressingEntity;
      final String body=HttpClientUtils.readResponse(result);
      Assert.assertEquals(theMessage,body);
    }
   }
}
