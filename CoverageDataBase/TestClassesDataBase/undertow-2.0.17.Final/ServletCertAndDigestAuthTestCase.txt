/** 
 * @author Tomas Hofman
 */
@RunWith(DefaultServer.class) public class ServletCertAndDigestAuthTestCase {
  private static final String REALM_NAME="Servlet_Realm";
  private static final String BASE_PATH="/servletContext/secured/";
  private static SSLContext clientSSLContext;
  @BeforeClass public static void startSSL() throws Exception {
    DefaultServer.startSSLServer(OptionMap.create(SSL_CLIENT_AUTH_MODE,NOT_REQUESTED));
    clientSSLContext=DefaultServer.getClientSSLContext();
    final PathHandler path=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo multipartServlet=new ServletInfo("Multipart Accepting Servlet",MultipartAcceptingServlet.class).addMapping("/secured/multipart").setMultipartConfig(new MultipartConfigElement(""));
    ServletIdentityManager identityManager=new ServletIdentityManager();
    identityManager.addUser("user1","password1","role1");
    identityManager.addUser("charsetUser","password-Ã¼","role1");
    LoginConfig loginConfig=new LoginConfig(REALM_NAME);
    loginConfig.addFirstAuthMethod(new AuthMethodConfig("BASIC"));
    loginConfig.addFirstAuthMethod(new AuthMethodConfig("CLIENT_CERT"));
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").setIdentityManager(identityManager).setLoginConfig(loginConfig).addServlets(multipartServlet);
    builder.addSecurityConstraint(new SecurityConstraint().addWebResourceCollection(new WebResourceCollection().addUrlPattern("/secured/*")).addRoleAllowed("role1").setEmptyRoleSemantic(SecurityInfo.EmptyRoleSemantic.DENY));
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    path.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(path);
  }
  @AfterClass public static void stopSSL() throws Exception {
    clientSSLContext=null;
    DefaultServer.stopSSLServer();
  }
  @Test public void testMultipartRequest() throws Exception {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < 2000; i++) {
      sb.append("0123456789");
    }
    try (TestHttpClient client=new TestHttpClient()){
      MultipartEntityBuilder builder=MultipartEntityBuilder.create();
      builder.addPart("part1",new ByteArrayBody(sb.toString().getBytes(),"file.txt"));
      builder.addPart("part2",new StringBody("0123456789",ContentType.TEXT_HTML));
      HttpEntity entity=builder.build();
      client.setSSLContext(clientSSLContext);
      String url=DefaultServer.getDefaultServerSSLAddress() + BASE_PATH + "multipart";
      HttpPost post=new HttpPost(url);
      post.setEntity(entity);
      post.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString(("user1" + ":" + "password1").getBytes(StandardCharsets.UTF_8),false));
      HttpResponse result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    }
   }
}
