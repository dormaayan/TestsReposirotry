/** 
 * <p>Tests if a request made to a secured resource is saved before the client is redirect to the login form. Once the authentication is done, the server should restore the original/saved request.</p>
 * @author Pedro Igor
 */
@RunWith(DefaultServer.class) public class SaveOriginalPostRequestTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler path=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo securedRequestDumper=new ServletInfo("SecuredRequestDumperServlet",RequestDumper.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/secured/dumpRequest");
    ServletInfo securedIndexRequestDumper=new ServletInfo("SecuredIndexRequestDumperServlet",RequestDumper.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("role1")).addMapping("/index.html");
    ServletInfo unsecuredRequestDumper=new ServletInfo("UnsecuredRequestDumperServlet",RequestDumper.class).addMapping("/dumpRequest");
    ServletInfo loginFormServlet=new ServletInfo("loginPage",FormLoginServlet.class).setServletSecurityInfo(new ServletSecurityInfo().addRoleAllowed("group1")).addMapping("/FormLoginServlet");
    ServletIdentityManager identityManager=new ServletIdentityManager();
    identityManager.addUser("user1","password1","role1");
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").setIdentityManager(identityManager).addWelcomePage("index.html").setResourceManager(new TestResourceLoader(SaveOriginalPostRequestTestCase.class)).setLoginConfig(new LoginConfig("FORM","Test Realm","/FormLoginServlet","/error.html")).addServlets(securedRequestDumper,unsecuredRequestDumper,loginFormServlet,securedIndexRequestDumper);
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    path.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(path);
  }
  @Test public void testParametersFromOriginalPostRequest() throws IOException {
    TestHttpClient client=createHttpClient();
    HttpResponse result=executePostRequest(client,"/servletContext/dumpRequest",new BasicNameValuePair("param1","param1Value"),new BasicNameValuePair("param2","param2Value"));
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    String response=HttpClientUtils.readResponse(result);
    assertTrue(response.contains("param1=param1Value/param2=param2Value"));
    result=executePostRequest(client,"/servletContext/secured/dumpRequest",new BasicNameValuePair("securedParam1","securedParam1Value"),new BasicNameValuePair("securedParam2","securedParam2Value"));
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Assert.assertTrue(HttpClientUtils.readResponse(result).startsWith("j_security_check"));
    result=executePostRequest(client,"/servletContext/j_security_check",new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1"));
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    response=HttpClientUtils.readResponse(result);
    assertTrue(response.contains("securedParam1=securedParam1Value"));
    assertTrue(response.contains("securedParam2=securedParam2Value"));
  }
  @Test public void testSavedRequestWithWelcomeFile() throws IOException {
    TestHttpClient client=createHttpClient();
    HttpResponse result=executePostRequest(client,"/servletContext/",new BasicNameValuePair("securedParam1","securedParam1Value"),new BasicNameValuePair("securedParam2","securedParam2Value"));
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Assert.assertTrue(HttpClientUtils.readResponse(result).startsWith("j_security_check"));
    result=executePostRequest(client,"/servletContext/j_security_check",new BasicNameValuePair("j_username","user1"),new BasicNameValuePair("j_password","password1"));
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    String response=HttpClientUtils.readResponse(result);
    assertTrue(response.contains("securedParam1=securedParam1Value"));
    assertTrue(response.contains("securedParam2=securedParam2Value"));
  }
  private TestHttpClient createHttpClient(){
    TestHttpClient client=new TestHttpClient();
    client.setRedirectStrategy(new DefaultRedirectStrategy(){
      @Override public boolean isRedirected(      final HttpRequest request,      final HttpResponse response,      final HttpContext context) throws ProtocolException {
        if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
          return true;
        }
        return super.isRedirected(request,response,context);
      }
    }
);
    return client;
  }
  private HttpResponse executePostRequest(  TestHttpClient client,  String uri,  BasicNameValuePair... parameters) throws IOException {
    HttpPost request=new HttpPost(DefaultServer.getDefaultServerURL() + uri);
    request.setEntity(new UrlEncodedFormEntity(new ArrayList<NameValuePair>(Arrays.asList(parameters))));
    return client.execute(request);
  }
static class RequestDumper extends HttpServlet {
    @Override protected void doPost(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      dumpRequest(req,resp);
    }
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      dumpRequest(req,resp);
    }
    private void dumpRequest(    HttpServletRequest req,    HttpServletResponse resp) throws IOException {
      StringBuilder buffer=new StringBuilder();
      PrintWriter writer=resp.getWriter();
      buffer.append("Method: " + req.getMethod() + "\n");
      Enumeration<String> parameterNames=req.getParameterNames();
      buffer.append("Parameters: ");
      while (parameterNames.hasMoreElements()) {
        String parameterName=parameterNames.nextElement();
        buffer.append(parameterName + "=" + req.getParameter(parameterName));
        buffer.append("/");
      }
      writer.write(buffer.toString());
    }
  }
}
