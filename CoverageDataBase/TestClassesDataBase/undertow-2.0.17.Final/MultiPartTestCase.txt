/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore public class MultiPartTestCase {
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(new ServletExtension(){
      @Override public void handleDeployment(      DeploymentInfo deploymentInfo,      ServletContext servletContext){
        deploymentInfo.addListener(Servlets.listener(AddMultipartServetListener.class));
        deploymentInfo.setExceptionHandler(LoggingExceptionHandler.builder().add(RuntimeException.class,"io.undertow",Logger.Level.DEBUG).build());
      }
    }
,servlet("mp0",MultiPartServlet.class).addMapping("/0"),servlet("mp1",MultiPartServlet.class).addMapping("/1").setMultipartConfig(multipartConfig(null,0,0,0)),servlet("mp2",MultiPartServlet.class).addMapping("/2").setMultipartConfig(multipartConfig(null,0,3,0)),servlet("mp3",MultiPartServlet.class).addMapping("/3").setMultipartConfig(multipartConfig(null,3,0,0)));
  }
  @Test public void testMultiPartRequestWithNoMultipartConfig() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/0";
      HttpPost post=new HttpPost(uri);
      MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
      entity.addPart("formValue",new StringBody("myValue","text/plain",StandardCharsets.UTF_8));
      entity.addPart("file",new FileBody(new File(MultiPartTestCase.class.getResource("uploadfile.txt").getFile())));
      post.setEntity(entity);
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("EXCEPTION: class java.lang.IllegalStateException",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultiPartRequest() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/1";
      HttpPost post=new HttpPost(uri);
      MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE,null,StandardCharsets.UTF_8);
      entity.addPart("formValue",new StringBody("myValue","text/plain",StandardCharsets.UTF_8));
      entity.addPart("file",new FileBody(new File(MultiPartTestCase.class.getResource("uploadfile.txt").getFile())));
      post.setEntity(entity);
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("PARAMS:\n" + "name: formValue\n" + "filename: null\n"+ "content-type: null\n"+ "Content-Disposition: form-data; name=\"formValue\"\n"+ "size: 7\n"+ "content: myValue\n"+ "name: file\n"+ "filename: uploadfile.txt\n"+ "content-type: application/octet-stream\n"+ "Content-Disposition: form-data; name=\"file\"; filename=\"uploadfile.txt\"\n"+ "Content-Type: application/octet-stream\n"+ "size: 13\n"+ "content: file contents\n",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultiPartRequestWithAddedServlet() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/added";
      HttpPost post=new HttpPost(uri);
      MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
      entity.addPart("formValue",new StringBody("myValue","text/plain",StandardCharsets.UTF_8));
      entity.addPart("file",new FileBody(new File(MultiPartTestCase.class.getResource("uploadfile.txt").getFile())));
      post.setEntity(entity);
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("PARAMS:\n" + "name: formValue\n" + "filename: null\n"+ "content-type: null\n"+ "Content-Disposition: form-data; name=\"formValue\"\n"+ "size: 7\n"+ "content: myValue\n"+ "name: file\n"+ "filename: uploadfile.txt\n"+ "content-type: application/octet-stream\n"+ "Content-Disposition: form-data; name=\"file\"; filename=\"uploadfile.txt\"\n"+ "Content-Type: application/octet-stream\n"+ "size: 13\n"+ "content: file contents\n",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultiPartRequestToLarge() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/2";
      HttpPost post=new HttpPost(uri);
      MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
      entity.addPart("formValue",new StringBody("myValue","text/plain",StandardCharsets.UTF_8));
      entity.addPart("file",new FileBody(new File(MultiPartTestCase.class.getResource("uploadfile.txt").getFile())));
      post.setEntity(entity);
      HttpResponse result=client.execute(post);
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("EXCEPTION: class java.lang.IllegalStateException",response);
    }
 catch (    IOException expected) {
    }
 finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMultiPartIndividualFileToLarge() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/3";
      HttpPost post=new HttpPost(uri);
      MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
      entity.addPart("formValue",new StringBody("myValue","text/plain",StandardCharsets.UTF_8));
      entity.addPart("file",new FileBody(new File(MultiPartTestCase.class.getResource("uploadfile.txt").getFile())));
      post.setEntity(entity);
      HttpResponse result=client.execute(post);
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("EXCEPTION: class java.lang.IllegalStateException",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
