/** 
 * Tests calling close on the input stream before all data has been read.
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ServletInputStreamDrainTestCase {
  public static final String SERVLET="servlet";
  private static final String HELLO_WORLD="Hello World";
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(new ServletInfo(SERVLET,ForceDrainServlet.class).addMapping("/" + SERVLET));
  }
  @Test public void testServletInputStreamEarlyClose() throws Exception {
    StringBuilder builder=new StringBuilder(1000 * HELLO_WORLD.length());
    for (int i=0; i < 10; ++i) {
      try {
        for (int j=0; j < 1000; ++j) {
          builder.append(HELLO_WORLD);
        }
      }
 catch (      Throwable e) {
        throw new RuntimeException("test failed with i equal to " + i,e);
      }
    }
    String message=builder.toString();
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext/" + SERVLET;
      HttpPost post=new HttpPost(uri);
      post.setEntity(new StringEntity(message));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("close",HttpClientUtils.readResponse(result));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("close",HttpClientUtils.readResponse(result));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("close",HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
