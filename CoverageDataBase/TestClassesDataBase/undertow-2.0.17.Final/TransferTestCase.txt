/** 
 * @author Jason T. Greene
 */
@RunWith(DefaultServer.class) public class TransferTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").addServlet(new ServletInfo("servlet",TXServlet.class).addMapping("/"));
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @Test public void testServletRequest() throws Exception {
    TestListener.init(2);
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/aa");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final byte[] response=HttpClientUtils.readRawResponse(result);
      Path file=Paths.get(TXServlet.class.getResource(TXServlet.class.getSimpleName() + ".class").toURI());
      byte[] expected=new byte[(int)Files.size(file)];
      DataInputStream dataInputStream=new DataInputStream(Files.newInputStream(file));
      dataInputStream.readFully(expected);
      dataInputStream.close();
      Assert.assertArrayEquals(expected,response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
