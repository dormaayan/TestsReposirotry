/** 
 * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
 */
public final class FrameChecker implements WebSocketTestClient.FrameListener {
  private final Class<? extends WebSocketFrame> clazz;
  private final byte[] expectedPayload;
  private final FutureResult<?> latch;
  private volatile boolean first=true;
  public FrameChecker(  Class<? extends WebSocketFrame> clazz,  byte[] expectedPayload,  FutureResult<?> latch){
    this.clazz=clazz;
    this.expectedPayload=expectedPayload;
    this.latch=latch;
  }
  @Override public void onFrame(  WebSocketFrame frame){
    try {
      if (first) {
        first=false;
        Assert.assertTrue(clazz.isInstance(frame));
        if (frame instanceof TextWebSocketFrame) {
          String buf=((TextWebSocketFrame)frame).text();
          Assert.assertEquals(new String(expectedPayload,StandardCharsets.UTF_8),buf);
        }
 else {
          ByteBuf buf=frame.content();
          byte[] data=new byte[buf.readableBytes()];
          buf.readBytes(data);
          Assert.assertArrayEquals(expectedPayload,data);
        }
        latch.setResult(null);
      }
 else {
        Assert.assertTrue(CloseWebSocketFrame.class.isInstance(frame));
      }
    }
 catch (    Throwable e) {
      latch.setException(new IOException(e));
    }
  }
  @Override public void onError(  Throwable t){
    try {
      t.printStackTrace();
      Assert.fail();
    }
  finally {
      latch.setException(new IOException(t));
    }
  }
}
