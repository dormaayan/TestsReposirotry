/** 
 * Test case to test transport-guarantee enforcement.
 * @author <a href="mailto:darran.lofthouse@jboss.com">Darran Lofthouse</a>
 */
@RunWith(DefaultServer.class) public class ConfidentialityConstraintUrlMappingTestCase {
  @BeforeClass public static void setup() throws Exception {
    DefaultServer.startSSLServer();
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo s=new ServletInfo("servlet",SendSchemeServlet.class).addMapping("/clear").addMapping("/integral").addMapping("/confidential");
    DeploymentInfo info=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").setConfidentialPortManager(TestConfidentialPortManager.INSTANCE).addServlet(s);
    info.addSecurityConstraint(new SecurityConstraint().addWebResourceCollection(new WebResourceCollection().addUrlPattern("/integral")).setTransportGuaranteeType(TransportGuaranteeType.INTEGRAL).setEmptyRoleSemantic(EmptyRoleSemantic.PERMIT));
    info.addSecurityConstraint(new SecurityConstraint().addWebResourceCollection(new WebResourceCollection().addUrlPattern("/confidential")).setTransportGuaranteeType(TransportGuaranteeType.CONFIDENTIAL).setEmptyRoleSemantic(EmptyRoleSemantic.PERMIT));
    DeploymentManager manager=container.addDeployment(info);
    manager.deploy();
    root.addPrefixPath(info.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @AfterClass public static void cleanUp() throws Exception {
    DefaultServer.stopSSLServer();
  }
  @Test public void testClear() throws IOException {
    internalTest("/clear","http");
  }
  @Test public void testIntegral() throws IOException {
    internalTest("/integral","https");
  }
  @Test public void testConfidential() throws IOException {
    internalTest("/confidential","https");
  }
  private void internalTest(  final String path,  final String expectedScheme) throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setSSLContext(DefaultServer.getClientSSLContext());
    final String url=DefaultServer.getDefaultServerURL() + "/servletContext" + path;
    try {
      HttpGet get=new HttpGet(url);
      HttpResponse result=client.execute(get);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(expectedScheme,response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
