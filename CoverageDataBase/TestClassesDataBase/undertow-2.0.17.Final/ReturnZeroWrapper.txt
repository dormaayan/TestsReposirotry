private static class ReturnZeroWrapper implements ConduitWrapper<StreamSinkConduit> {
  @Override public StreamSinkConduit wrap(  final ConduitFactory<StreamSinkConduit> factory,  final HttpServerExchange exchange){
    return new AbstractStreamSinkConduit<StreamSinkConduit>(factory.create()){
      int c=0;
      @Override public long transferFrom(      final FileChannel src,      final long position,      final long count) throws IOException {
        if (c++ % 100 != 90)         return 0;
        return super.transferFrom(src,position,count);
      }
      @Override public long transferFrom(      final StreamSourceChannel source,      final long count,      final ByteBuffer throughBuffer) throws IOException {
        if (c++ % 100 != 90)         return 0;
        return super.transferFrom(source,count,throughBuffer);
      }
      @Override public int write(      final ByteBuffer src) throws IOException {
        if (c++ % 100 != 90)         return 0;
        return super.write(src);
      }
      @Override public long write(      final ByteBuffer[] srcs,      final int offs,      final int len) throws IOException {
        if (c++ % 100 != 90)         return 0;
        return super.write(srcs,offs,len);
      }
      @Override public boolean flush() throws IOException {
        if (c++ % 100 != 90)         return false;
        return super.flush();
      }
    }
;
  }
}
