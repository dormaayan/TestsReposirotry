/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class SimpleAsyncTestCase {
  public static final String HELLO_WORLD="Hello World";
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(new ServletExtension(){
      @Override public void handleDeployment(      DeploymentInfo deploymentInfo,      ServletContext servletContext){
        deploymentInfo.setServletStackTraces(ServletStackTraces.NONE);
        deploymentInfo.addErrorPages(new ErrorPage("/500",StatusCodes.INTERNAL_SERVER_ERROR));
      }
    }
,servlet("messageServlet",MessageServlet.class).addInitParam(MessageServlet.MESSAGE,HELLO_WORLD).setAsyncSupported(true).addMapping("/message"),servlet("500",MessageServlet.class).addInitParam(MessageServlet.MESSAGE,"500").setAsyncSupported(true).addMapping("/500"),servlet("asyncServlet",AsyncServlet.class).addInitParam(MessageServlet.MESSAGE,HELLO_WORLD).setAsyncSupported(true).addMapping("/async"),servlet("asyncServlet2",AnotherAsyncServlet.class).setAsyncSupported(true).addMapping("/async2"),servlet("error",AsyncErrorServlet.class).setAsyncSupported(true).addMapping("/error"),servlet("errorlistener",AsyncErrorListenerServlet.class).setAsyncSupported(true).addMapping("/errorlistener"),servlet("dispatch",AsyncDispatchServlet.class).setAsyncSupported(true).addMapping("/dispatch"),servlet("doubleCompleteServlet",AsyncDoubleCompleteServlet.class).setAsyncSupported(true).addMapping("/double-complete"));
  }
  @Test public void testSimpleHttpServlet() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/async");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(HELLO_WORLD,response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testSimpleHttpAsyncServletWithoutDispatch() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/async2");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(AnotherAsyncServlet.class.getSimpleName(),response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testErrorServlet() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/error");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("500",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testErrorListenerServlet() throws Exception {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/errorlistener");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("500",response);
      Assert.assertEquals("ERROR",AsyncErrorListenerServlet.EVENTS.poll(10,TimeUnit.SECONDS));
      Assert.assertEquals("COMPLETED",AsyncErrorListenerServlet.EVENTS.poll(10,TimeUnit.SECONDS));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testWrappedDispatch() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("wrapped: " + HELLO_WORLD,response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testErrorServletWithPostData() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/error");
      post.setEntity(new StringEntity("Post body stuff"));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("500",response);
      post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/error");
      post.setEntity(new StringEntity("Post body stuff"));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("500",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testServletCompletesTwiceOnInitialThread() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/double-complete");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(HELLO_WORLD,response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
