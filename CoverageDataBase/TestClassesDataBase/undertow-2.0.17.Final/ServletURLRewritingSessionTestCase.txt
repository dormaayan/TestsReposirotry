/** 
 * basic test of in memory session functionality
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ServletURLRewritingSessionTestCase {
  public static final String COUNT="count";
  @BeforeClass public static void setup(){
    DeploymentUtils.setupServlet(new ServletExtension(){
      @Override public void handleDeployment(      DeploymentInfo deploymentInfo,      ServletContext servletContext){
        deploymentInfo.setServletSessionConfig(new ServletSessionConfig().setSessionTrackingModes(Collections.singleton(SessionTrackingMode.URL)));
      }
    }
,Servlets.servlet(URLRewritingServlet.class).addMapping("/foo"));
  }
  @Test public void testURLRewriting() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/foo;foo=bar");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testURLRewritingWithQueryParameters() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/foo?a=b;c");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testURLRewritingWithExistingOldSessionId() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/foo;jsessionid=foobar");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testURLRewritingWithExistingOldSessionIdAndOtherPathParams() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/foo;jsessionid=foobar&a=b");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
public static class URLRewritingServlet extends HttpServlet {
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      HttpSession session=req.getSession(true);
      Object existing=session.getAttribute(COUNT);
      if (existing == null) {
        session.setAttribute(COUNT,0);
      }
 else {
        Assert.assertTrue(req.getRequestURI().startsWith("/servletContext/foo;"));
        Assert.assertTrue(req.getRequestURI().contains("jsessionid=" + session.getId()));
      }
      Integer count=(Integer)session.getAttribute(COUNT);
      resp.addHeader(COUNT,count.toString());
      session.setAttribute(COUNT,++count);
      for (      Map.Entry<String,String[]> qp : req.getParameterMap().entrySet()) {
        resp.addHeader(qp.getKey(),qp.getValue()[0]);
      }
      if (req.getQueryString() == null) {
        resp.getWriter().write(resp.encodeURL(DefaultServer.getDefaultServerURL() + req.getRequestURI()));
      }
 else {
        resp.getWriter().write(resp.encodeURL(DefaultServer.getDefaultServerURL() + req.getRequestURI() + "?"+ req.getQueryString()));
      }
    }
  }
}
