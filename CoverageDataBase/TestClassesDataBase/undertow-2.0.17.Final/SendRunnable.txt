private static class SendRunnable implements Runnable {
  private final Session session;
  private final int thread;
  private final AtomicInteger count=new AtomicInteger();
  private final ExecutorService executor;
  SendRunnable(  Session session,  int thread,  ExecutorService executor){
    this.session=session;
    this.thread=thread;
    this.executor=executor;
  }
  @Override public void run(){
    session.getAsyncRemote().sendText("t-" + thread + "-m-"+ count.get(),new SendHandler(){
      @Override public void onResult(      SendResult result){
        if (!result.isOK()) {
          try {
            result.getException().printStackTrace();
            session.close();
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
        if (count.incrementAndGet() != NUM_REQUESTS) {
          executor.submit(SendRunnable.this);
        }
 else {
          executor.submit(new Runnable(){
            @Override public void run(){
              session.getAsyncRemote().sendText("close");
            }
          }
);
        }
      }
    }
);
  }
}
