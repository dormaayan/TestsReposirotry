/** 
 * @author Luis Mineiro
 */
@RunWith(DefaultServer.class) public class PredicatedHandlersProxyTestCase {
  private static Undertow server1;
  private static Undertow server2;
  @BeforeClass public static void setup() throws URISyntaxException {
    int port=getHostPort("default") + 1;
    final NameVirtualHostHandler handler=new NameVirtualHostHandler().addHost("original-host",new SetHeaderHandler(ResponseCodeHandler.HANDLE_200,"myHost","original-host")).setDefaultHandler(new SetHeaderHandler(ResponseCodeHandler.HANDLE_200,"myHost","upstream-host"));
    server1=Undertow.builder().addHttpListener(port,getHostAddress("default")).setHandler(handler).build();
    server1.start();
  }
  @Test public void testProxy() throws Exception {
    TestHttpClient client=new TestHttpClient();
    int port=getHostPort("default");
    String upstreamUrl="http://" + NetworkUtils.formatPossibleIpv6Address(getHostAddress("default")) + ":"+ (port + 1);
    DefaultServer.setRootHandler(Handlers.predicates(PredicatedHandlersParser.parse(String.format("path-suffix['.html'] -> reverse-proxy[hosts={'%1$s'}, rewrite-host-header=true]\n" + "path-suffix['.jsp'] -> reverse-proxy[hosts={'%1$s'}]",upstreamUrl),getClass().getClassLoader()),ResponseCodeHandler.HANDLE_404));
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/foo.html");
    get.addHeader("Host","original-host");
    HttpResponse result=client.execute(get);
    Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Header[] header=result.getHeaders("myHost");
    Assert.assertEquals("upstream-host",header[0].getValue());
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/foo.jsp");
    get.addHeader("Host","original-host");
    result=client.execute(get);
    Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    header=result.getHeaders("myHost");
    Assert.assertEquals("original-host",header[0].getValue());
    HttpClientUtils.readResponse(result);
  }
  @AfterClass public static void teardown(){
    server1.stop();
  }
}
