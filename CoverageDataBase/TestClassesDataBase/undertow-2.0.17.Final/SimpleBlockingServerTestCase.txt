/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class SimpleBlockingServerTestCase {
  private static volatile String message;
  @BeforeClass public static void setup(){
    final BlockingHandler blockingHandler=new BlockingHandler();
    DefaultServer.setRootHandler(blockingHandler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange){
        try {
          if (exchange.getRequestMethod().equals(Methods.POST)) {
            byte[] buffer=new byte[1024];
            final ByteArrayOutputStream b=new ByteArrayOutputStream();
            int r=0;
            final OutputStream outputStream=exchange.getOutputStream();
            final InputStream inputStream=exchange.getInputStream();
            while ((r=inputStream.read(buffer)) > 0) {
              b.write(buffer,0,r);
            }
            outputStream.write(b.toByteArray());
            outputStream.close();
          }
 else {
            if (exchange.getQueryParameters().containsKey("useFragmentedSender")) {
              exchange.getResponseSender().send("",new IoCallback(){
                int i=0;
                @Override public void onComplete(                final HttpServerExchange exchange,                final Sender sender){
                  if (i == message.length()) {
                    sender.close();
                    exchange.endExchange();
                  }
 else {
                    sender.send("" + message.charAt(i++),this);
                  }
                }
                @Override public void onException(                final HttpServerExchange exchange,                final Sender sender,                final IOException exception){
                  exchange.endExchange();
                }
              }
);
            }
 else             if (exchange.getQueryParameters().containsKey("useSender")) {
              exchange.getResponseSender().send(message,IoCallback.END_EXCHANGE);
            }
 else {
              final OutputStream outputStream=exchange.getOutputStream();
              outputStream.write(message.getBytes());
              outputStream.close();
            }
          }
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  @Test public void sendHttpRequest() throws IOException {
    message="My HTTP Request!";
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testHeadRequests() throws IOException {
    message="My HTTP Request!";
    TestHttpClient client=new TestHttpClient();
    HttpHead head=new HttpHead(DefaultServer.getDefaultServerURL() + "/path");
    try {
      for (int i=0; i < 3; ++i) {
        HttpResponse result=client.execute(head);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        Assert.assertEquals("",HttpClientUtils.readResponse(result));
        Assert.assertEquals(message.length() + "",result.getFirstHeader(Headers.CONTENT_LENGTH_STRING).getValue());
      }
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testDeleteRequests() throws IOException {
    message="My HTTP Request!";
    TestHttpClient client=new TestHttpClient();
    HttpDelete delete=new HttpDelete(DefaultServer.getDefaultServerURL() + "/path");
    try {
      for (int i=0; i < 3; ++i) {
        HttpResponse result=client.execute(delete);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        Assert.assertEquals(message,HttpClientUtils.readResponse(result));
      }
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testLargeResponse() throws IOException {
    final StringBuilder messageBuilder=new StringBuilder(6919638);
    for (int i=0; i < 6919638; ++i) {
      messageBuilder.append("*");
    }
    message=messageBuilder.toString();
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String resultString=HttpClientUtils.readResponse(result);
      Assert.assertEquals(message.length(),resultString.length());
      Assert.assertTrue(message.equals(resultString));
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path?useSender");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String resultBody=HttpClientUtils.readResponse(result);
      Assert.assertTrue(message.equals(resultBody));
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path?useFragmentedSender");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      resultBody=HttpClientUtils.readResponse(result);
      Assert.assertTrue(message.equals(resultBody));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testSmallRequest() throws IOException {
    message=null;
    TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.setEntity(new StringEntity("a"));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertTrue("a".equals(HttpClientUtils.readResponse(result)));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testLargeRequest() throws IOException {
    message=null;
    final StringBuilder messageBuilder=new StringBuilder(6919638);
    for (int i=0; i < 6919638; ++i) {
      messageBuilder.append("+");
    }
    TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.setEntity(new StringEntity(messageBuilder.toString()));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertTrue(messageBuilder.toString().equals(HttpClientUtils.readResponse(result)));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
