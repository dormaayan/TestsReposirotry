/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class HttpContinueAcceptingHandlerTestCase {
  private static volatile boolean accept=false;
  @BeforeClass public static void setup(){
    final BlockingHandler blockingHandler=new BlockingHandler();
    final HttpContinueAcceptingHandler handler=new HttpContinueAcceptingHandler(blockingHandler,new Predicate(){
      @Override public boolean resolve(      HttpServerExchange value){
        return accept;
      }
    }
);
    DefaultServer.setRootHandler(handler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange){
        try {
          byte[] buffer=new byte[1024];
          final ByteArrayOutputStream b=new ByteArrayOutputStream();
          int r=0;
          final OutputStream outputStream=exchange.getOutputStream();
          final InputStream inputStream=exchange.getInputStream();
          while ((r=inputStream.read(buffer)) > 0) {
            b.write(buffer,0,r);
          }
          outputStream.write(b.toByteArray());
          outputStream.close();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  @Before public void before(){
    Assume.assumeFalse(DefaultServer.isAjp());
  }
  @Test public void testHttpContinueRejected() throws IOException {
    accept=false;
    String message="My HTTP Request!";
    HttpParams httpParams=new BasicHttpParams();
    httpParams.setParameter("http.protocol.wait-for-continue",Integer.MAX_VALUE);
    TestHttpClient client=new TestHttpClient();
    client.setParams(httpParams);
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.addHeader("Expect","100-continue");
      post.setEntity(new StringEntity(message));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.EXPECTATION_FAILED,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testHttpContinueAccepted() throws IOException {
    accept=true;
    String message="My HTTP Request!";
    HttpParams httpParams=new BasicHttpParams();
    httpParams.setParameter("http.protocol.wait-for-continue",Integer.MAX_VALUE);
    TestHttpClient client=new TestHttpClient();
    client.setParams(httpParams);
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
      post.addHeader("Expect","100-continue");
      post.setEntity(new StringEntity(message));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(message,HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
