/** 
 * Test case covering the core of Client-Cert
 * @author <a href="mailto:darran.lofthouse@jboss.com">Darran Lofthouse</a>
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore public class ClientCertRenegotiationTestCase extends AuthenticationTestBase {
  private static SSLContext clientSSLContext;
  @Override protected List<AuthenticationMechanism> getTestMechanisms(){
    AuthenticationMechanism mechanism=new ClientCertAuthenticationMechanism();
    return Collections.singletonList(mechanism);
  }
  @BeforeClass public static void startSSL() throws Exception {
    DefaultServer.startSSLServer(OptionMap.create(SSL_CLIENT_AUTH_MODE,NOT_REQUESTED));
    clientSSLContext=DefaultServer.getClientSSLContext();
  }
  @AfterClass public static void stopSSL() throws Exception {
    clientSSLContext=null;
    DefaultServer.stopSSLServer();
  }
  @Test public void testClientCertSuccess() throws Exception {
    TestHttpClient client=new TestHttpClient();
    client.setSSLContext(clientSSLContext);
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerSSLAddress());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders("ProcessedBy");
    assertEquals("ProcessedBy Headers",1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    values=result.getHeaders("AuthenticatedUser");
    assertEquals("AuthenticatedUser Headers",1,values.length);
    assertEquals("CN=Test Client,OU=OU,O=Org,L=City,ST=State,C=GB",values[0].getValue());
    HttpClientUtils.readResponse(result);
    assertSingleNotificationType(EventType.AUTHENTICATED);
  }
  @Test public void testClientCertSuccessWithPostBody() throws Exception {
    TestHttpClient client=new TestHttpClient();
    try {
      client.setSSLContext(clientSSLContext);
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerSSLAddress());
      post.setEntity(new StringEntity("hi"));
      HttpResponse result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] values=result.getHeaders("ProcessedBy");
      assertEquals("ProcessedBy Headers",1,values.length);
      assertEquals("ResponseHandler",values[0].getValue());
      values=result.getHeaders("AuthenticatedUser");
      assertEquals("AuthenticatedUser Headers",1,values.length);
      assertEquals("CN=Test Client,OU=OU,O=Org,L=City,ST=State,C=GB",values[0].getValue());
      HttpClientUtils.readResponse(result);
      assertSingleNotificationType(EventType.AUTHENTICATED);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testClientCertSuccessWithLargePostBody() throws Exception {
    PooledByteBuffer buf=DefaultServer.getBufferPool().allocate();
    int requestSize=buf.getBuffer().limit() - 1;
    buf.close();
    final StringBuilder messageBuilder=new StringBuilder(requestSize);
    for (int i=0; i < requestSize; ++i) {
      messageBuilder.append("*");
    }
    TestHttpClient client=new TestHttpClient();
    client.setSSLContext(clientSSLContext);
    HttpPost post=new HttpPost(DefaultServer.getDefaultServerSSLAddress());
    post.setEntity(new StringEntity(messageBuilder.toString()));
    HttpResponse result=client.execute(post);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders("ProcessedBy");
    assertEquals("ProcessedBy Headers",1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    values=result.getHeaders("AuthenticatedUser");
    assertEquals("AuthenticatedUser Headers",1,values.length);
    assertEquals("CN=Test Client,OU=OU,O=Org,L=City,ST=State,C=GB",values[0].getValue());
    HttpClientUtils.readResponse(result);
    assertSingleNotificationType(EventType.AUTHENTICATED);
  }
}
