/** 
 * A test case to test when the only authentication mechanism is the GENERIC_HEADER mechanism.
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class GenericHeaderAuthenticationTestCase extends AuthenticationTestBase {
  static AuthenticationMechanism getTestMechanism(){
    return new GenericHeaderAuthenticationMechanism(NAME,Collections.singletonList(new HttpString("user")),Collections.singletonList("sessionid"),identityManager);
  }
  @Override protected List<AuthenticationMechanism> getTestMechanisms(){
    AuthenticationMechanism mechanism=getTestMechanism();
    return Collections.singletonList(mechanism);
  }
  @Test public void testGenericHeaderSucess() throws Exception {
    _testGenericHeaderSucess();
    assertSingleNotificationType(EventType.AUTHENTICATED);
  }
  static void _testGenericHeaderSucess() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.FORBIDDEN,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader("user","userOne");
    get.addHeader("cookie","sessionid=passwordOne");
    result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders("ProcessedBy");
    assertEquals(1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    HttpClientUtils.readResponse(result);
  }
  @Test public void testBadUserName() throws Exception {
    _testBadUserName();
    assertSingleNotificationType(EventType.FAILED_AUTHENTICATION);
  }
  static void _testBadUserName() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.FORBIDDEN,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader("user","badUser");
    get.addHeader("cookie","sessionid=badPassword");
    result=client.execute(get);
    assertEquals(StatusCodes.FORBIDDEN,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
  }
  @Test public void testBadPassword() throws Exception {
    _testBadPassword();
    assertSingleNotificationType(EventType.FAILED_AUTHENTICATION);
  }
  static void _testBadPassword() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.FORBIDDEN,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader("user","userOne");
    get.addHeader("cookie","sessionid=badPassword");
    result=client.execute(get);
    assertEquals(StatusCodes.FORBIDDEN,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
  }
}
