/** 
 * Test case to test transport-guarantee enforcement.
 * @author <a href="mailto:darran.lofthouse@jboss.com">Darran Lofthouse</a>
 */
@RunWith(DefaultServer.class) public class SSLMetaDataTestCase {
  @BeforeClass public static void setup() throws Exception {
    DefaultServer.startSSLServer();
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo s=new ServletInfo("servlet",SSLAttributesServlet.class).addMapping("/id").addMapping("/cert").addMapping("/key-size").addMapping("/cipher-suite");
    DeploymentInfo info=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").addServlet(s);
    DeploymentManager manager=container.addDeployment(info);
    manager.deploy();
    root.addPrefixPath(info.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @AfterClass public static void cleanUp() throws Exception {
    DefaultServer.stopSSLServer();
  }
  @Test public void testSessionId() throws IOException {
    internalTest("/id");
  }
  @Test public void testCipherSuite() throws IOException {
    internalTest("/cipher-suite");
  }
  @Test public void testKeySize() throws IOException {
    internalTest("/key-size");
  }
  @Test public void testCert() throws IOException {
    internalTest("/cert");
  }
  private void internalTest(  final String path) throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setSSLContext(DefaultServer.getClientSSLContext());
    final String url=DefaultServer.getDefaultServerSSLAddress() + "/servletContext" + path;
    try {
      HttpGet get=new HttpGet(url);
      HttpResponse result=client.execute(get);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertTrue(response.length() > 0);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
