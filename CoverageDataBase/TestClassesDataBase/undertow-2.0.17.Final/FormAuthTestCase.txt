/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class FormAuthTestCase extends AuthenticationTestBase {
  public static final String HELLO_WORLD="Hello World";
  @Override protected void setRootHandler(  HttpHandler current){
    final PredicateHandler handler=new PredicateHandler(Predicates.path("/login"),new HttpHandler(){
      @Override public void handleRequest(      HttpServerExchange exchange) throws Exception {
        exchange.getResponseSender().send("Login Page");
      }
    }
,current);
    super.setRootHandler(new SessionAttachmentHandler(handler,new InMemorySessionManager("test"),new SessionCookieConfig()));
  }
  protected boolean cachingRequired(){
    return true;
  }
  @Test public void testFormAuth() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setRedirectStrategy(new DefaultRedirectStrategy(){
      @Override public boolean isRedirected(      final HttpRequest request,      final HttpResponse response,      final HttpContext context) throws ProtocolException {
        Header[] locationHeaders=response.getHeaders("Location");
        if (locationHeaders != null && locationHeaders.length > 0) {
          for (          Header locationHeader : locationHeaders) {
            assertFalse("Location header incorrectly computed resulting in wrong request URI upon redirect, " + "failed probably due UNDERTOW-884",locationHeader.getValue().startsWith(DefaultServer.getDefaultServerURL() + DefaultServer.getDefaultServerURL()));
          }
        }
        if (response.getStatusLine().getStatusCode() == StatusCodes.FOUND) {
          return true;
        }
        return super.isRedirected(request,response,context);
      }
    }
);
    try {
      final String uri=DefaultServer.getDefaultServerURL() + "/secured/test";
      HttpGet get=new HttpGet(uri);
      HttpResponse result=client.execute(get);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("Login Page",response);
      BasicNameValuePair[] pairs=new BasicNameValuePair[]{new BasicNameValuePair("j_username","userOne"),new BasicNameValuePair("j_password","passwordOne")};
      final List<NameValuePair> data=new ArrayList<>();
      data.addAll(Arrays.asList(pairs));
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/j_security_check;jsessionid=dsjahfklsahdfjklsa");
      post.setEntity(new UrlEncodedFormEntity(data));
      result=client.execute(post);
      assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Header[] values=result.getHeaders("ProcessedBy");
      assertEquals(1,values.length);
      assertEquals("ResponseHandler",values[0].getValue());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Override protected List<AuthenticationMechanism> getTestMechanisms(){
    List<AuthenticationMechanism> ret=new ArrayList<>();
    ret.add(new CachedAuthenticatedSessionMechanism());
    ret.add(new FormAuthenticationMechanism("test","/login","/error"));
    return ret;
  }
}
