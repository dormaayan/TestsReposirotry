/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class FixedLengthRequestTestCase {
  private static final String MESSAGE="My HTTP Request!";
  private static volatile String message;
  private static volatile ServerConnection connection;
  @BeforeClass public static void setup(){
    final BlockingHandler blockingHandler=new BlockingHandler();
    DefaultServer.setRootHandler(blockingHandler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange){
        try {
          if (connection == null) {
            connection=exchange.getConnection();
          }
 else           if (!DefaultServer.isAjp() && !DefaultServer.isProxy() && connection != exchange.getConnection()) {
            exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);
            final OutputStream outputStream=exchange.getOutputStream();
            outputStream.write("Connection not persistent".getBytes());
            outputStream.close();
            return;
          }
          final OutputStream outputStream=exchange.getOutputStream();
          final InputStream inputStream=exchange.getInputStream();
          String m=HttpClientUtils.readResponse(inputStream);
          Assert.assertEquals(message,m);
          inputStream.close();
          outputStream.close();
        }
 catch (        IOException e) {
          exchange.getResponseHeaders().put(Headers.CONNECTION,"close");
          exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  @Test public void testFixedLengthRequest() throws IOException {
    connection=null;
    HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
    TestHttpClient client=new TestHttpClient();
    try {
      generateMessage(1);
      post.setEntity(new StringEntity(message));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      generateMessage(1000);
      post.setEntity(new StringEntity(message));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test @Ignore("sometimes the client attempts to re-use the same connection after the failure, but the server has already closed it") public void testMaxRequestSizeFixedLengthRequest() throws IOException {
    connection=null;
    OptionMap existing=DefaultServer.getUndertowOptions();
    HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/path");
    post.setHeader(HttpHeaders.CONNECTION,"close");
    TestHttpClient client=new TestHttpClient();
    try {
      generateMessage(1);
      post.setEntity(new StringEntity(message));
      DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.MAX_ENTITY_SIZE,3L));
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      connection=null;
      DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.MAX_ENTITY_SIZE,(long)message.length()));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      DefaultServer.setUndertowOptions(existing);
      client.getConnectionManager().shutdown();
    }
  }
  private static void generateMessage(  int repetitions){
    final StringBuilder builder=new StringBuilder(repetitions * MESSAGE.length());
    for (int i=0; i < repetitions; ++i) {
      builder.append(MESSAGE);
    }
    message=builder.toString();
  }
}
