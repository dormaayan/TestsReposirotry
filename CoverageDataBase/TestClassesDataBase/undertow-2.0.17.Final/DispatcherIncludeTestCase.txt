/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class DispatcherIncludeTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").setResourceManager(new TestResourceLoader(DispatcherIncludeTestCase.class)).addServlet(new ServletInfo("include",MessageServlet.class).addInitParam(MessageServlet.MESSAGE,"included").addMapping("/include")).addServlet(new ServletInfo("dispatcher",IncludeServlet.class).addMapping("/dispatch")).addServlet(new ServletInfo("pathTest",PathTestServlet.class).addMapping("/path")).addFilter(new FilterInfo("notIncluded",MessageFilter.class).addInitParam(MessageFilter.MESSAGE,"Not Included")).addFilter(new FilterInfo("inc",MessageFilter.class).addInitParam(MessageFilter.MESSAGE,"Path!")).addFilter(new FilterInfo("nameFilter",MessageFilter.class).addInitParam(MessageFilter.MESSAGE,"Name!")).addFilterUrlMapping("notIncluded","/include",DispatcherType.REQUEST).addFilterUrlMapping("inc","/include",DispatcherType.INCLUDE).addFilterServletNameMapping("nameFilter","include",DispatcherType.INCLUDE);
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @Test public void testPathBasedInclude() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch");
      get.setHeader("include","/include");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "Path!Name!included",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testNameBasedInclude() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch");
      get.setHeader("include","include");
      get.setHeader("name","true");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "Name!included",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testPathBasedStaticInclude() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch");
      get.setHeader("include","/snippet.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "SnippetText",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testPathBasedStaticIncludePost() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch");
      post.setHeader("include","/snippet.html");
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "SnippetText",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testIncludeAggregatesQueryString() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch?a=b");
      get.setHeader("include","/path");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "pathInfo:null queryString:a=b servletPath:/dispatch requestUri:/servletContext/dispatch",response);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/dispatch?a=b");
      get.setHeader("include","/path?foo=bar");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      Assert.assertEquals(IncludeServlet.MESSAGE + "pathInfo:null queryString:a=b servletPath:/dispatch requestUri:/servletContext/dispatch",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
