/** 
 * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
 */
@RunWith(DefaultServer.class) @HttpOneOnly public class AbstractWebSocketServerTest {
  @Test public void testText() throws Exception {
    if (getVersion() == WebSocketVersion.V00) {
      return;
    }
    final AtomicBoolean connected=new AtomicBoolean(false);
    DefaultServer.setRootHandler(new WebSocketProtocolHandshakeHandler(new WebSocketConnectionCallback(){
      @Override public void onConnect(      final WebSocketHttpExchange exchange,      final WebSocketChannel channel){
        connected.set(true);
        channel.getReceiveSetter().set(new AbstractReceiveListener(){
          @Override protected void onFullTextMessage(          WebSocketChannel channel,          BufferedTextMessage message) throws IOException {
            String string=message.getData();
            if (string.equals("hello")) {
              WebSockets.sendText("world",channel,null);
            }
 else {
              WebSockets.sendText(string,channel,null);
            }
          }
        }
);
        channel.resumeReceives();
      }
    }
));
    final FutureResult<?> latch=new FutureResult();
    WebSocketTestClient client=new WebSocketTestClient(getVersion(),new URI("ws://" + NetworkUtils.formatPossibleIpv6Address(DefaultServer.getHostAddress("default")) + ":"+ DefaultServer.getHostPort("default")+ "/"));
    client.connect();
    client.send(new TextWebSocketFrame(Unpooled.copiedBuffer("hello",CharsetUtil.US_ASCII)),new FrameChecker(TextWebSocketFrame.class,"world".getBytes(CharsetUtil.US_ASCII),latch));
    latch.getIoFuture().get();
    client.destroy();
  }
  @Test public void testBinary() throws Exception {
    if (getVersion() == WebSocketVersion.V00) {
      return;
    }
    final AtomicBoolean connected=new AtomicBoolean(false);
    DefaultServer.setRootHandler(new WebSocketProtocolHandshakeHandler(new WebSocketConnectionCallback(){
      @Override public void onConnect(      final WebSocketHttpExchange exchange,      final WebSocketChannel channel){
        connected.set(true);
        channel.getReceiveSetter().set(new AbstractReceiveListener(){
          @Override protected void onFullBinaryMessage(          WebSocketChannel channel,          BufferedBinaryMessage message) throws IOException {
            final Pooled<ByteBuffer[]> data=message.getData();
            WebSockets.sendBinary(data.getResource(),channel,new WebSocketCallback<Void>(){
              @Override public void complete(              WebSocketChannel channel,              Void context){
                data.close();
              }
              @Override public void onError(              WebSocketChannel channel,              Void context,              Throwable throwable){
                data.close();
              }
            }
);
          }
        }
);
        channel.resumeReceives();
      }
    }
));
    final FutureResult latch=new FutureResult();
    final byte[] payload="payload".getBytes();
    WebSocketTestClient client=new WebSocketTestClient(getVersion(),new URI("ws://" + NetworkUtils.formatPossibleIpv6Address(DefaultServer.getHostAddress("default")) + ":"+ DefaultServer.getHostPort("default")+ "/"));
    client.connect();
    client.send(new BinaryWebSocketFrame(Unpooled.wrappedBuffer(payload)),new FrameChecker(BinaryWebSocketFrame.class,payload,latch));
    latch.getIoFuture().get();
    client.destroy();
  }
  @Test public void testCloseFrame() throws Exception {
    if (getVersion() == WebSocketVersion.V00) {
      return;
    }
    final AtomicBoolean connected=new AtomicBoolean(false);
    DefaultServer.setRootHandler(new WebSocketProtocolHandshakeHandler(new WebSocketConnectionCallback(){
      @Override public void onConnect(      final WebSocketHttpExchange exchange,      final WebSocketChannel channel){
        connected.set(true);
        channel.getReceiveSetter().set(new AbstractReceiveListener(){
          @Override protected void onFullCloseMessage(          WebSocketChannel channel,          BufferedBinaryMessage message) throws IOException {
            message.getData().close();
            channel.sendClose();
          }
        }
);
        channel.resumeReceives();
      }
    }
));
    final AtomicBoolean receivedResponse=new AtomicBoolean(false);
    final FutureResult latch=new FutureResult();
    WebSocketTestClient client=new WebSocketTestClient(getVersion(),new URI("ws://" + NetworkUtils.formatPossibleIpv6Address(DefaultServer.getHostAddress("default")) + ":"+ DefaultServer.getHostPort("default")+ "/"));
    client.connect();
    client.send(new CloseWebSocketFrame(),new FrameChecker(CloseWebSocketFrame.class,new byte[0],latch));
    latch.getIoFuture().get();
    Assert.assertFalse(receivedResponse.get());
    client.destroy();
  }
  protected WebSocketVersion getVersion(){
    return WebSocketVersion.V00;
  }
}
