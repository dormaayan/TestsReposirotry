/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class SecurityErrorPageTestCase {
  @BeforeClass public static void setup() throws IOException, ServletException {
    final ServletContainer container=ServletContainer.Factory.newInstance();
    final PathHandler root=new PathHandler();
    DefaultServer.setRootHandler(root);
    DeploymentInfo builder=new DeploymentInfo();
    builder.addServlet(new ServletInfo("secure",SecureServlet.class).addMapping("/secure")).addSecurityConstraint(Servlets.securityConstraint().addRoleAllowed("user").addWebResourceCollection(Servlets.webResourceCollection().addUrlPattern("/*")));
    builder.addServlet(new ServletInfo("path",PathServlet.class).addMapping("/*"));
    builder.addErrorPage(new ErrorPage("/401",StatusCodes.UNAUTHORIZED));
    ServletIdentityManager identityManager=new ServletIdentityManager();
    identityManager.addUser("user1","password1");
    builder.setClassIntrospecter(TestClassIntrospector.INSTANCE).setClassLoader(ErrorPageTestCase.class.getClassLoader()).setContextPath("/servletContext").setServletStackTraces(ServletStackTraces.NONE).setIdentityManager(identityManager).setLoginConfig(Servlets.loginConfig("BASIC","Test Realm")).setDeploymentName("servletContext.war");
    final DeploymentManager manager1=container.addDeployment(builder);
    manager1.deploy();
    root.addPrefixPath(builder.getContextPath(),manager1.start());
  }
  @Test public void testErrorPages() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      runTest(client,StatusCodes.UNAUTHORIZED,"/401");
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private void runTest(  final TestHttpClient client,  int statusCode,  String expected) throws IOException {
    final HttpGet get;
    final HttpResponse result;
    final String response;
    get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/secure");
    result=client.execute(get);
    Assert.assertEquals(statusCode,result.getStatusLine().getStatusCode());
    response=HttpClientUtils.readResponse(result);
    Assert.assertThat(response,CoreMatchers.startsWith(expected));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.ERROR_REQUEST_URI + "=/servletContext/secure"));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.ERROR_SERVLET_NAME + "=secure"));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.ERROR_MESSAGE + "=" + StatusCodes.getReason(statusCode)));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.ERROR_STATUS_CODE + "=" + statusCode));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.FORWARD_REQUEST_URI + "=/servletContext/secure"));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.FORWARD_CONTEXT_PATH + "=/servletContext"));
    Assert.assertThat(response,CoreMatchers.containsString(RequestDispatcher.FORWARD_SERVLET_PATH + "=/secure"));
  }
}
