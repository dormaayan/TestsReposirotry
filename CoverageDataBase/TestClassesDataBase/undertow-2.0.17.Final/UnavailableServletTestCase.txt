/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class UnavailableServletTestCase {
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(servlet("p",UnavailableServlet.class).addInitParam(UnavailableServlet.PERMANENT,"1").addMapping("/p"),servlet("t",UnavailableServlet.class).addMapping("/t"));
  }
  @Test public void testPermanentUnavailableServlet() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/p");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testTempUnavailableServlet() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/t");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.SERVICE_UNAVAILABLE,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      Thread.sleep(1001);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/t");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
