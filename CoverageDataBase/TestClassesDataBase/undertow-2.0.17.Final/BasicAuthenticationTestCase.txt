/** 
 * A test case to test when the only authentication mechanism is the BASIC mechanism.
 * @author <a href="mailto:darran.lofthouse@jboss.com">Darran Lofthouse</a>
 */
@RunWith(DefaultServer.class) public class BasicAuthenticationTestCase extends AuthenticationTestBase {
  static AuthenticationMechanism getTestMechanism(){
    return new BasicAuthenticationMechanism("Test Realm");
  }
  @Override protected List<AuthenticationMechanism> getTestMechanisms(){
    AuthenticationMechanism mechanism=getTestMechanism();
    return Collections.singletonList(mechanism);
  }
  @Test public void testBasicSuccess() throws Exception {
    _testBasicSuccess();
    assertSingleNotificationType(EventType.AUTHENTICATED);
  }
  static void _testBasicSuccess() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
    String header=getAuthHeader(BASIC,values);
    assertEquals(BASIC + " realm=\"Test Realm\"",header);
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("userOne:passwordOne".getBytes(),false));
    result=client.execute(get);
    assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    values=result.getHeaders("ProcessedBy");
    assertEquals(1,values.length);
    assertEquals("ResponseHandler",values[0].getValue());
    HttpClientUtils.readResponse(result);
  }
  @Test public void testBadUserName() throws Exception {
    _testBadUserName();
    assertSingleNotificationType(EventType.FAILED_AUTHENTICATION);
  }
  static void _testBadUserName() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
    String header=getAuthHeader(BASIC,values);
    assertEquals(BASIC + " realm=\"Test Realm\"",header);
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("badUser:passwordOne".getBytes(),false));
    result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
  }
  @Test public void testBadPassword() throws Exception {
    _testBadPassword();
    assertSingleNotificationType(EventType.FAILED_AUTHENTICATION);
  }
  static void _testBadPassword() throws Exception {
    TestHttpClient client=new TestHttpClient();
    HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL());
    HttpResponse result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    Header[] values=result.getHeaders(WWW_AUTHENTICATE.toString());
    String header=getAuthHeader(BASIC,values);
    assertEquals(BASIC + " realm=\"Test Realm\"",header);
    HttpClientUtils.readResponse(result);
    get=new HttpGet(DefaultServer.getDefaultServerURL());
    get.addHeader(AUTHORIZATION.toString(),BASIC + " " + FlexBase64.encodeString("userOne:badPassword".getBytes(),false));
    result=client.execute(get);
    assertEquals(StatusCodes.UNAUTHORIZED,result.getStatusLine().getStatusCode());
    HttpClientUtils.readResponse(result);
  }
}
