/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @AjpIgnore(apacheOnly=true) public class LotsOfHeadersRequestTestCase {
  private static final String HEADER="HEADER";
  private static final String MESSAGE="Hello Header";
  private static final int DEFAULT_MAX_HEADERS=200;
  private static final int TEST_MAX_HEADERS=20;
  private static int getDefaultMaxHeaders(){
    int res=DEFAULT_MAX_HEADERS - 3;
    if (DefaultServer.isProxy()) {
      res-=5;
    }
    if (DefaultServer.isH2()) {
      res-=3;
    }
    return res;
  }
  private static int getTestMaxHeaders(){
    int res=TEST_MAX_HEADERS - 3;
    if (DefaultServer.isProxy()) {
      res-=5;
    }
    if (DefaultServer.isH2()) {
      res-=3;
    }
    return res;
  }
  @BeforeClass public static void setup(){
    Assume.assumeFalse(DefaultServer.isH2upgrade());
    final BlockingHandler blockingHandler=new BlockingHandler();
    DefaultServer.setRootHandler(blockingHandler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange){
        HeaderMap headers=exchange.getRequestHeaders();
        for (        HeaderValues header : headers) {
          for (          String val : header) {
            exchange.getResponseHeaders().put(HttpString.tryFromString(header.getHeaderName().toString()),val);
          }
        }
      }
    }
);
  }
  @Test @AjpIgnore public void testLotsOfHeadersInRequest_Default_Ok() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      for (int i=0; i < getDefaultMaxHeaders(); ++i) {
        get.addHeader(HEADER + i,MESSAGE + i);
      }
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      for (int i=0; i < getDefaultMaxHeaders(); ++i) {
        Header[] header=result.getHeaders(HEADER + i);
        Assert.assertEquals(MESSAGE + i,header[0].getValue());
      }
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testLotsOfHeadersInRequest_Default_BadRequest() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      for (int i=0; i < (getDefaultMaxHeaders() + 1); ++i) {
        get.addHeader(HEADER + i,MESSAGE + i);
      }
      HttpResponse result=client.execute(get);
      Assert.assertEquals(DefaultServer.isH2() ? StatusCodes.SERVICE_UNAVAILABLE : StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test @AjpIgnore public void testLotsOfHeadersInRequest_MaxHeaders_Ok() throws IOException {
    OptionMap existing=DefaultServer.getUndertowOptions();
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      for (int i=0; i < getTestMaxHeaders(); ++i) {
        get.addHeader(HEADER + i,MESSAGE + i);
      }
      DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.MAX_HEADERS,TEST_MAX_HEADERS));
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      for (int i=0; i < getTestMaxHeaders(); ++i) {
        Header[] header=result.getHeaders(HEADER + i);
        Assert.assertEquals(MESSAGE + i,header[0].getValue());
      }
    }
  finally {
      DefaultServer.setUndertowOptions(existing);
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testLotsOfHeadersInRequest_MaxHeaders_BadRequest() throws IOException {
    OptionMap existing=DefaultServer.getUndertowOptions();
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
      for (int i=0; i < (getTestMaxHeaders() + 1); ++i) {
        get.addHeader(HEADER + i,MESSAGE + i);
      }
      DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.MAX_HEADERS,TEST_MAX_HEADERS));
      HttpResponse result=client.execute(get);
      Assert.assertEquals(DefaultServer.isH2() ? StatusCodes.SERVICE_UNAVAILABLE : StatusCodes.BAD_REQUEST,result.getStatusLine().getStatusCode());
    }
  finally {
      DefaultServer.setUndertowOptions(existing);
      client.getConnectionManager().shutdown();
    }
  }
}
