/** 
 * @author Stuart Douglas
 */
@HttpOneOnly @ProxyIgnore @RunWith(DefaultServer.class) public class MaxRequestSizeTestCase {
  public static final String A_MESSAGE="A message";
  @BeforeClass public static void setup(){
    final BlockingHandler blockingHandler=new BlockingHandler();
    DefaultServer.setRootHandler(blockingHandler);
    blockingHandler.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        final OutputStream outputStream=exchange.getOutputStream();
        final InputStream inputStream=exchange.getInputStream();
        String m=HttpClientUtils.readResponse(inputStream);
        Assert.assertEquals(A_MESSAGE,m);
        inputStream.close();
        outputStream.close();
      }
    }
);
  }
  @Test public void testMaxRequestHeaderSize() throws IOException {
    OptionMap existing=DefaultServer.getUndertowOptions();
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/notamatchingpath");
      post.setEntity(new StringEntity(A_MESSAGE));
      post.addHeader(Headers.CONNECTION_STRING,"close");
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      OptionMap maxSize=OptionMap.create(UndertowOptions.MAX_HEADER_SIZE,10);
      DefaultServer.setUndertowOptions(maxSize);
      try {
        HttpResponse response=client.execute(post);
        HttpClientUtils.readResponse(response);
        Assert.assertEquals(StatusCodes.BAD_REQUEST,response.getStatusLine().getStatusCode());
      }
 catch (      IOException e) {
      }
      maxSize=OptionMap.create(UndertowOptions.MAX_HEADER_SIZE,1000);
      DefaultServer.setUndertowOptions(maxSize);
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      DefaultServer.setUndertowOptions(existing);
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testMaxRequestEntitySize() throws IOException {
    OptionMap existing=DefaultServer.getUndertowOptions();
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpPost post=new HttpPost(DefaultServer.getDefaultServerURL() + "/notamatchingpath");
      post.setEntity(new StringEntity(A_MESSAGE));
      post.addHeader(Headers.CONNECTION_STRING,"close");
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      OptionMap maxSize=OptionMap.create(UndertowOptions.MAX_ENTITY_SIZE,(long)A_MESSAGE.length() - 1);
      DefaultServer.setUndertowOptions(maxSize);
      post=new HttpPost(DefaultServer.getDefaultServerURL() + "/notamatchingpath");
      post.setEntity(new StringEntity(A_MESSAGE));
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.INTERNAL_SERVER_ERROR,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      maxSize=OptionMap.create(UndertowOptions.MAX_HEADER_SIZE,1000);
      DefaultServer.setUndertowOptions(maxSize);
      post=new HttpPost(DefaultServer.getDefaultServerURL() + "/notamatchingpath");
      post.setEntity(new StringEntity(A_MESSAGE));
      post.addHeader(Headers.CONNECTION_STRING,"close");
      result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      DefaultServer.setUndertowOptions(existing);
      client.getConnectionManager().shutdown();
    }
  }
}
