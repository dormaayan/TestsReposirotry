/** 
 * basic test of in memory session functionality
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class URLRewritingSessionTestCase {
  public static final String COUNT="count";
  @BeforeClass public static void setup(){
    final PathParameterSessionConfig sessionConfig=new PathParameterSessionConfig();
    final SessionAttachmentHandler handler=new SessionAttachmentHandler(new InMemorySessionManager(""),sessionConfig);
    handler.setNext(new HttpHandler(){
      @Override public void handleRequest(      final HttpServerExchange exchange) throws Exception {
        final SessionManager manager=exchange.getAttachment(SessionManager.ATTACHMENT_KEY);
        Session session=manager.getSession(exchange,sessionConfig);
        if (session == null) {
          session=manager.createSession(exchange,sessionConfig);
          session.setAttribute(COUNT,0);
        }
 else {
          Assert.assertEquals("/notamatchingpath;jsessionid=" + session.getId(),exchange.getRequestURI());
        }
        Integer count=(Integer)session.getAttribute(COUNT);
        exchange.getResponseHeaders().add(new HttpString(COUNT),count.toString());
        session.setAttribute(COUNT,++count);
        for (        Map.Entry<String,Deque<String>> qp : exchange.getQueryParameters().entrySet()) {
          exchange.getResponseHeaders().add(new HttpString(qp.getKey()),qp.getValue().getFirst());
        }
        if (exchange.getQueryString().isEmpty()) {
          exchange.getResponseSender().send(sessionConfig.rewriteUrl(DefaultServer.getDefaultServerURL() + "/notamatchingpath",session.getId()));
        }
 else {
          exchange.getResponseSender().send(sessionConfig.rewriteUrl(DefaultServer.getDefaultServerURL() + "/notamatchingpath?" + exchange.getQueryString(),session.getId()));
        }
      }
    }
);
    DefaultServer.setRootHandler(handler);
  }
  @Test public void testURLRewriting() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/notamatchingpath;foo=bar");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testURLRewritingWithQueryParameters() throws IOException {
    TestHttpClient client=new TestHttpClient();
    client.setCookieStore(new BasicCookieStore());
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/notamatchingpath?a=b;c");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String url=HttpClientUtils.readResponse(result);
      Header[] header=result.getHeaders(COUNT);
      Assert.assertEquals("0",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("1",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
      get=new HttpGet(url);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      url=HttpClientUtils.readResponse(result);
      header=result.getHeaders(COUNT);
      Assert.assertEquals("2",header[0].getValue());
      Assert.assertEquals("b;c",result.getHeaders("a")[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
