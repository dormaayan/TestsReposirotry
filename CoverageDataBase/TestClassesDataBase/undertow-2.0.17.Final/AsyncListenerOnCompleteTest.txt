@RunWith(DefaultServer.class) public class AsyncListenerOnCompleteTest {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler root=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo f=new ServletInfo("asyncServlet",OnCompleteServlet.class).addMapping("/async").setAsyncSupported(true);
    ServletInfo a1=new ServletInfo("message",MessageServlet.class).setAsyncSupported(true).addInitParam(MessageServlet.MESSAGE,"Hello").addMapping("/message");
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(AsyncListenerOnCompleteTest.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").addServlets(f,a1);
    builder.setExceptionHandler(LoggingExceptionHandler.builder().add(IllegalStateException.class,"io.undertow",Logger.Level.DEBUG).build());
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    root.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(root);
  }
  @Test public void testOnCompleteWithNoCompleteCalled() throws IOException, InterruptedException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/async");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(200,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("Hello",response);
      Assert.assertEquals("onComplete",OnCompleteServlet.QUEUE.poll(10,TimeUnit.SECONDS));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
