/** 
 * @author Lucas Ponce
 */
@RunWith(DefaultServer.class) public class FileHandlerSymlinksTestCase {
  @Before public void createSymlinksScenario() throws IOException, URISyntaxException {
    Assume.assumeFalse(System.getProperty("os.name").toLowerCase().contains("windows"));
    Path filePath=Paths.get(getClass().getResource("page.html").toURI());
    Path rootPath=filePath.getParent();
    Path newDir=rootPath.resolve("newDir");
    Files.createDirectories(newDir);
    Path innerDir=newDir.resolve("innerDir");
    Files.createDirectories(innerDir);
    Files.copy(filePath,newDir.resolve(filePath.getFileName()));
    Files.copy(filePath,innerDir.resolve(filePath.getFileName()));
    Path newSymlink=rootPath.resolve("newSymlink");
    Files.createSymbolicLink(newSymlink,newDir);
    Path innerSymlink=newDir.resolve("innerSymlink");
    Files.createSymbolicLink(innerSymlink,innerDir);
  }
  @After public void deleteSymlinksScenario() throws IOException, URISyntaxException {
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    Path newDir=rootPath.resolve("newDir");
    Path page=newDir.resolve("page.html");
    Path innerDir=newDir.resolve("innerDir");
    Path innerSymlink=newDir.resolve("innerSymlink");
    Path innerPage=innerDir.resolve("page.html");
    Files.deleteIfExists(innerSymlink);
    Files.deleteIfExists(newSymlink);
    Files.deleteIfExists(innerPage);
    Files.deleteIfExists(page);
    Files.deleteIfExists(innerDir);
    Files.deleteIfExists(newDir);
  }
  @Test public void testCreateSymlinks() throws IOException, URISyntaxException {
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newDir=rootPath.resolve("newDir");
    Assert.assertFalse(Files.isSymbolicLink(newDir));
    Path innerDir=newDir.resolve("innerDir");
    Assert.assertFalse(Files.isSymbolicLink(innerDir));
    Path newSymlink=rootPath.resolve("newSymlink");
    Assert.assertTrue(Files.isSymbolicLink(newSymlink));
    Path innerSymlink=newSymlink.resolve("innerSymlink");
    Assert.assertTrue(Files.isSymbolicLink(innerSymlink));
    Path f=innerSymlink.getRoot();
    for (int i=0; i < innerSymlink.getNameCount(); i++) {
      f=f.resolve(innerSymlink.getName(i).toString());
      System.out.println(f + " " + Files.isSymbolicLink(f));
    }
    f=f.resolve(".");
    System.out.println(f + " " + Files.isSymbolicLink(f));
  }
  @Test public void testDefaultAccessSymlinkDenied() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760)).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkDeniedForEmptySafePath() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,"")).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkDeniedForInsideSymlinks() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newDir");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,"")).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerDir/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkGranted() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,"/")).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkGrantedUsingSpecificFilters() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,rootPath.toAbsolutePath().toString().concat("/newDir"))).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkGrantedUsingSpecificFiltersWithDirectoryListingEnabled() throws IOException, URISyntaxException {
    HttpParams params=new SyncBasicHttpParams();
    DefaultHttpClient.setDefaultHttpParams(params);
    HttpConnectionParams.setSoTimeout(params,300000);
    TestHttpClient client=new TestHttpClient(params);
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,rootPath.toAbsolutePath().toString().concat("/newDir"))).setDirectoryListingEnabled(false).addWelcomeFiles("page.html")));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/.");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkDeniedUsingSpecificFilters() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,rootPath.toAbsolutePath().toString().concat("/otherDir"))).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testExplicitAccessSymlinkDeniedUsingSameSymlinkName() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,rootPath.toAbsolutePath().toString().concat("/innerSymlink"))).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testResourceManagerBaseSymlink() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,"")).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testRelativePathSymlinkFilter() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    Path newSymlink=rootPath.resolve("newSymlink");
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(newSymlink,10485760,true,"innerDir")).setDirectoryListingEnabled(false).addWelcomeFiles("page.html"))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/innerSymlink/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
