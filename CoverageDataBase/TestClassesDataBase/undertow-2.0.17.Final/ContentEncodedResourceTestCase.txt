/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ContentEncodedResourceTestCase {
  public static final String DIR_NAME="contentEncodingTestCase";
  static Path tmpDir;
  @BeforeClass public static void setup() throws IOException {
    tmpDir=Files.createTempDirectory(Paths.get(System.getProperty("java.io.tmpdir")),DIR_NAME);
    final PathResourceManager resourceManager=new PathResourceManager(tmpDir,10485760);
    DefaultServer.setRootHandler(new ResourceHandler(resourceManager).setContentEncodedResourceManager(new ContentEncodedResourceManager(tmpDir,new CachingResourceManager(100,10000,null,resourceManager,-1),new ContentEncodingRepository().addEncodingHandler("deflate",new DeflateEncodingProvider(),50,null),0,100000,null)));
  }
  @AfterClass public static void after() throws IOException {
    FileUtils.deleteRecursive(tmpDir);
  }
  @Test public void testFileIsCompressed() throws IOException, InterruptedException {
    String fileName="hello.html";
    Path f=tmpDir.resolve(fileName);
    Files.write(f,"hello world".getBytes());
    try (CloseableHttpClient client=HttpClientBuilder.create().build()){
      for (int i=0; i < 3; ++i) {
        HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/" + fileName);
        CloseableHttpResponse result=client.execute(get);
        Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
        String response=HttpClientUtils.readResponse(result);
        Assert.assertEquals("hello world",response);
        assert result.getEntity() instanceof DecompressingEntity;
        result.close();
      }
      Files.write(f,"modified file".getBytes());
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/" + fileName);
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Assert.assertEquals("hello world",response);
      assert result.getEntity() instanceof DecompressingEntity;
    }
   }
}
