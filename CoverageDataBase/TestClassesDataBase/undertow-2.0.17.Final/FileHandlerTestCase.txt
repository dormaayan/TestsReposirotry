/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class FileHandlerTestCase {
  @Test public void testFileIsServed() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,10485760)).setDirectoryListingEnabled(true))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testHeadRequest() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path file=Paths.get(getClass().getResource("page.html").toURI());
    Path rootPath=file.getParent();
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,10485760)).setDirectoryListingEnabled(true))));
      HttpHead get=new HttpHead(DefaultServer.getDefaultServerURL() + "/path/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals(Long.toString(Files.size(file)),result.getHeaders(Headers.CONTENT_LENGTH_STRING)[0].getValue());
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testDotSuffix() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,1)).setDirectoryListingEnabled(true))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html.");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.NOT_FOUND,result.getStatusLine().getStatusCode());
      HttpClientUtils.readResponse(result);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testFileTransfer() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,1)).setDirectoryListingEnabled(true))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertTrue(response,response.contains("A web page"));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testFileTransferLargeFile() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path tmp=Paths.get(System.getProperty("java.io.tmpdir"));
    StringBuilder message=new StringBuilder();
    for (int i=0; i < 100000; ++i) {
      message.append("Hello World");
    }
    Path large=Files.createTempFile(null,".txt");
    try {
      Files.copy(new ByteArrayInputStream(message.toString().getBytes(StandardCharsets.UTF_8)),large,StandardCopyOption.REPLACE_EXISTING);
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(tmp,1)).setDirectoryListingEnabled(true))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/" + large.getFileName().toString());
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      final String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/plain",headers[0].getValue());
      Assert.assertTrue(response,response.equals(message.toString()));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test public void testRangeRequests() throws IOException, URISyntaxException {
    TestHttpClient client=new TestHttpClient();
    Path rootPath=Paths.get(getClass().getResource("page.html").toURI()).getParent();
    try {
      DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,1)).setDirectoryListingEnabled(true))));
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
      get.addHeader("range","bytes=2-3");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.PARTIAL_CONTENT,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      Header[] headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertEquals("--",response);
      get=new HttpGet(DefaultServer.getDefaultServerURL() + "/path/page.html");
      get.addHeader("range","bytes=-7");
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.PARTIAL_CONTENT,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      headers=result.getHeaders("Content-Type");
      Assert.assertEquals("text/html",headers[0].getValue());
      Assert.assertEquals("</html>",response);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  public static void main(  String[] args) throws URISyntaxException {
    Path rootPath=Paths.get(FileHandlerTestCase.class.getResource("page.html").toURI()).getParent().getParent();
    HttpHandler root=new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path",new ResourceHandler(new PathResourceManager(rootPath,1)).setDirectoryListingEnabled(true)));
    Undertow undertow=Undertow.builder().addHttpListener(8888,"localhost").setHandler(root).build();
    undertow.start();
  }
}
