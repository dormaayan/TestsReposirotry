/** 
 * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
 */
@Category(UnitTest.class) public class ClassUtilsTest {
  @Test public void testExtractHandlerType(){
    Map<Class<?>,Boolean> types=ClassUtils.getHandlerTypes(FinalIm.class);
    Assert.assertEquals(1,types.size());
    Assert.assertTrue(types.containsKey(ByteBuffer.class));
    types=ClassUtils.getHandlerTypes(ByteBufferFromSuperClassEncoder.class);
    Assert.assertEquals(1,types.size());
    Assert.assertTrue(types.containsKey(ByteBuffer.class));
    types=ClassUtils.getHandlerTypes(MessageHandlerImpl.class);
    Assert.assertEquals(1,types.size());
    Assert.assertTrue(types.containsKey(ByteBuffer.class));
    Assert.assertFalse(types.get(ByteBuffer.class));
    types=ClassUtils.getHandlerTypes(AsyncMessageHandlerImpl.class);
    Assert.assertEquals(1,types.size());
    Assert.assertTrue(types.containsKey(ByteBuffer.class));
    Assert.assertTrue(types.get(ByteBuffer.class));
    types=ClassUtils.getHandlerTypes(ComplexMessageHandlerImpl.class);
    Assert.assertEquals(2,types.size());
    Assert.assertTrue(types.containsKey(ByteBuffer.class));
    Assert.assertFalse(types.get(ByteBuffer.class));
    Assert.assertTrue(types.containsKey(String.class));
    Assert.assertTrue(types.get(String.class));
    Assert.assertFalse(types.containsKey(byte[].class));
  }
  @Test public void testExtractEncoderType(){
    Class<?> clazz=ClassUtils.getEncoderType(BinaryEncoder.class);
    Assert.assertEquals(String.class,clazz);
    Class<?> clazz2=ClassUtils.getEncoderType(TextEncoder.class);
    Assert.assertEquals(String.class,clazz2);
    Class<?> clazz3=ClassUtils.getEncoderType(TextStreamEncoder.class);
    Assert.assertEquals(String.class,clazz3);
    Class<?> clazz4=ClassUtils.getEncoderType(BinaryStreamEncoder.class);
    Assert.assertEquals(String.class,clazz4);
  }
private static class MessageHandlerImpl implements MessageHandler.Whole<ByteBuffer> {
    @Override public void onMessage(    ByteBuffer message){
    }
  }
private static final class AsyncMessageHandlerImpl implements MessageHandler.Partial<ByteBuffer> {
    @Override public void onMessage(    final ByteBuffer partialMessage,    final boolean last){
    }
  }
private static class DummyHandlerImpl extends MessageHandlerImpl {
  }
private static final class ComplexMessageHandlerImpl extends DummyHandlerImpl implements MessageHandler.Partial<String> {
    @Override public void onMessage(    String partialMessage,    boolean last){
    }
    public void onMessage(    byte[] bytes,    boolean last){
    }
  }
private static class ParamSuperclassEncoder<T> implements MessageHandler.Partial<T> {
    @Override public void onMessage(    final T partialMessage,    final boolean last){
    }
  }
private static final class ByteBufferFromSuperClassEncoder extends ParamSuperclassEncoder<ByteBuffer> {
  }
private static final class BinaryEncoder implements Encoder.Binary<String> {
    @Override public ByteBuffer encode(    String object) throws EncodeException {
      throw new UnsupportedOperationException();
    }
    @Override public void init(    final EndpointConfig config){
    }
    @Override public void destroy(){
    }
  }
private static class Im1<R,T,X,YY> extends ParamSuperclassEncoder<X> {
  }
private static class Im2<X,Z,Y,Foo,Bar extends Test> extends Im1<List<String>,Z,Y,Integer> {
  }
private static final class FinalIm extends Im2<String,Integer,ByteBuffer,String,Test> {
  }
private static final class TextEncoder implements Encoder.Text<String> {
    @Override public String encode(    String object) throws EncodeException {
      throw new UnsupportedOperationException();
    }
    @Override public void init(    final EndpointConfig config){
    }
    @Override public void destroy(){
    }
  }
private static final class TextStreamEncoder implements Encoder.TextStream<String> {
    @Override public void encode(    String object,    Writer writer) throws EncodeException, IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void init(    final EndpointConfig config){
    }
    @Override public void destroy(){
    }
  }
private static final class BinaryStreamEncoder implements Encoder.BinaryStream<String> {
    @Override public void encode(    String object,    OutputStream stream) throws EncodeException, IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void init(    final EndpointConfig config){
    }
    @Override public void destroy(){
    }
  }
}
