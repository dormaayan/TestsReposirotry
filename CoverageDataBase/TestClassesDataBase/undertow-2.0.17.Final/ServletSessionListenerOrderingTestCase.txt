/** 
 * @see https://issues.jboss.org/browse/UNDERTOW-23
 * @author Jozef Hartinger
 */
@RunWith(DefaultServer.class) public class ServletSessionListenerOrderingTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler path=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/listener").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("listener.war").addListener(new ListenerInfo(FirstListener.class)).addListener(new ListenerInfo(SecondListener.class)).addServlet(new ServletInfo("message",EmptyServlet.class).addMapping("/*"));
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    path.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(path);
  }
  @Test public void testSimpleSessionUsage() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      Tracker.reset();
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/listener/test");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      List<String> expected=new ArrayList<>();
      expected.add(FirstListener.class.getSimpleName());
      expected.add(SecondListener.class.getSimpleName());
      expected.add(SecondListener.class.getSimpleName());
      expected.add(FirstListener.class.getSimpleName());
      Assert.assertEquals(expected,Tracker.getActions());
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
}
