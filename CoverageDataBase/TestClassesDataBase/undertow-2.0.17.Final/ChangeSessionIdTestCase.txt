/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) public class ChangeSessionIdTestCase {
  @BeforeClass public static void setup() throws ServletException {
    final PathHandler path=new PathHandler();
    final ServletContainer container=ServletContainer.Factory.newInstance();
    ServletInfo s=new ServletInfo("servlet",ChangeSessionIdServlet.class).addMapping("/aa");
    DeploymentInfo builder=new DeploymentInfo().setClassLoader(SimpleServletTestCase.class.getClassLoader()).setContextPath("/servletContext").setClassIntrospecter(TestClassIntrospector.INSTANCE).setDeploymentName("servletContext.war").addListener(new ListenerInfo(ChangeSessionIdListener.class)).addServlet(s);
    DeploymentManager manager=container.addDeployment(builder);
    manager.deploy();
    path.addPrefixPath(builder.getContextPath(),manager.start());
    DefaultServer.setRootHandler(path);
  }
  @Test public void testChangeSessionId() throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/servletContext/aa");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      String response=HttpClientUtils.readResponse(result);
      String oldId=testResponse(response,null);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      oldId=testResponse(response,oldId);
      result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      response=HttpClientUtils.readResponse(result);
      oldId=testResponse(response,oldId);
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private String testResponse(  final String response,  final String expectedOld){
    final String[] parts=response.split(" ");
    Assert.assertEquals(2,parts.length);
    String oldId=parts[0];
    String newId=parts[1];
    if (expectedOld != null) {
      Assert.assertEquals(expectedOld,oldId);
    }
    Assert.assertFalse(oldId.isEmpty());
    Assert.assertFalse(newId.isEmpty());
    Assert.assertFalse(oldId.equals(newId));
    Assert.assertEquals(oldId,ChangeSessionIdListener.oldId);
    Assert.assertEquals(newId,ChangeSessionIdListener.newId);
    return newId;
  }
}
