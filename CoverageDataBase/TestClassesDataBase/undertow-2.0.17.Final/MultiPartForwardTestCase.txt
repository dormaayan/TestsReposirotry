@RunWith(DefaultServer.class) public class MultiPartForwardTestCase {
  @BeforeClass public static void setup() throws ServletException {
    DeploymentUtils.setupServlet(Servlets.servlet("MultiPartCapableServlet",MultiPartCapableServlet.class).addMapping("/multipart").setMultipartConfig(multipartConfig(null,0,0,0)),Servlets.servlet("ForwardingServlet",ForwardingServlet.class).addMapping("/forward"));
  }
  @Test public void urlEncodedFormRequestDirectlyToMultipartServlet() throws IOException {
    String response=sendRequest("/multipart",createUrlEncodedFormPostEntity());
    Assert.assertEquals("Params:\n" + "foo: bar",response);
  }
  @Test public void urlEncodedFormRequestForwardedToMultipartServlet() throws IOException {
    String response=sendRequest("/forward",createUrlEncodedFormPostEntity());
    Assert.assertEquals("Params:\n" + "foo: bar",response);
  }
  @Test public void multiPartFormRequestDirectlyToMultipartServlet() throws IOException {
    String response=sendRequest("/multipart",createMultiPartFormPostEntity());
    Assert.assertEquals("Params:\n" + "foo: bar",response);
  }
  @Test public void multiPartFormRequestForwardedToMultipartServlet() throws IOException {
    String response=sendRequest("/forward",createMultiPartFormPostEntity());
    Assert.assertEquals("Params:\n" + "foo: bar",response);
  }
  private String sendRequest(  String path,  HttpEntity postEntity) throws IOException {
    TestHttpClient client=new TestHttpClient();
    try {
      String uri=DefaultServer.getDefaultServerURL() + "/servletContext" + path;
      HttpPost post=new HttpPost(uri);
      post.setEntity(postEntity);
      HttpResponse result=client.execute(post);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      return HttpClientUtils.readResponse(result).trim();
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  private MultipartEntity createMultiPartFormPostEntity() throws IOException {
    MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    entity.addPart("foo",new StringBody("bar"));
    return entity;
  }
  private UrlEncodedFormEntity createUrlEncodedFormPostEntity() throws IOException {
    BasicNameValuePair nameValuePair=new BasicNameValuePair("foo","bar");
    return new UrlEncodedFormEntity(Arrays.asList(nameValuePair));
  }
}
