@RunWith(DefaultServer.class) public class EncodedEncodedSlashTestCase {
  @BeforeClass public static void setup(){
    DefaultServer.setRootHandler(new HttpHandler(){
      @Override public void handleRequest(      HttpServerExchange exchange) throws Exception {
        exchange.getResponseSender().send(exchange.getRequestPath());
      }
    }
);
  }
  @Test public void testSlashNotDecoded() throws Exception {
    final TestHttpClient client=new TestHttpClient();
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/%2f%5c");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("/%2f%5c",HttpClientUtils.readResponse(result));
    }
  finally {
      client.getConnectionManager().shutdown();
    }
  }
  @Test @ProxyIgnore public void testSlashDecoded() throws Exception {
    final TestHttpClient client=new TestHttpClient();
    OptionMap old=DefaultServer.getUndertowOptions();
    DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.ALLOW_ENCODED_SLASH,true));
    try {
      HttpGet get=new HttpGet(DefaultServer.getDefaultServerURL() + "/%2f%5c");
      HttpResponse result=client.execute(get);
      Assert.assertEquals(StatusCodes.OK,result.getStatusLine().getStatusCode());
      Assert.assertEquals("//\\",HttpClientUtils.readResponse(result));
    }
  finally {
      DefaultServer.setUndertowOptions(old);
      client.getConnectionManager().shutdown();
    }
  }
}
