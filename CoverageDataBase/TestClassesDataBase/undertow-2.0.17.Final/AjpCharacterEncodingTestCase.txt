/** 
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore public class AjpCharacterEncodingTestCase {
  private static final int PORT=DefaultServer.getHostPort() + 10;
  private static Undertow undertow;
  private static OptionMap old;
  @BeforeClass public static void setup() throws Exception {
    undertow=Undertow.builder().setServerOption(UndertowOptions.URL_CHARSET,"MS949").setServerOption(UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL,true).addListener(new Undertow.ListenerBuilder().setType(Undertow.ListenerType.AJP).setHost(DefaultServer.getHostAddress()).setPort(PORT)).setHandler(new HttpHandler(){
      @Override public void handleRequest(      HttpServerExchange exchange) throws Exception {
        exchange.getResponseSender().send("RESULT:" + exchange.getQueryParameters().get("p").getFirst());
      }
    }
).build();
    undertow.start();
    DefaultServer.setRootHandler(ProxyHandler.builder().setProxyClient(new LoadBalancingProxyClient().addHost(new URI("ajp://" + DefaultServer.getHostAddress() + ":"+ PORT))).build());
    old=DefaultServer.getUndertowOptions();
    DefaultServer.setUndertowOptions(OptionMap.create(UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL,true,UndertowOptions.URL_CHARSET,"MS949"));
  }
  @AfterClass public static void after(){
    DefaultServer.setUndertowOptions(old);
    undertow.stop();
  }
  @Test public void sendHttpRequest() throws IOException {
    Socket socket=new Socket(DefaultServer.getHostAddress(),DefaultServer.getHostPort());
    socket.getOutputStream().write("GET /path?p=한%20글 HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n".getBytes("MS949"));
    String result=FileUtils.readFile(socket.getInputStream());
    Assert.assertTrue("Failed to find expected result \n" + result,result.contains("한 글"));
  }
}
