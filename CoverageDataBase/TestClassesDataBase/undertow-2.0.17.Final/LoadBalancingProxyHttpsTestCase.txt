/** 
 * Tests the load balancing proxy
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class) @ProxyIgnore public class LoadBalancingProxyHttpsTestCase extends AbstractLoadBalancingProxyTestCase {
  @BeforeClass public static void setup() throws URISyntaxException {
    final SessionCookieConfig sessionConfig=new SessionCookieConfig();
    int port=DefaultServer.getHostPort("default");
    server1=Undertow.builder().addHttpsListener(port + 1,DefaultServer.getHostAddress("default"),DefaultServer.getServerSslContext()).setSocketOption(Options.REUSE_ADDRESSES,true).setServerOption(UndertowOptions.NO_REQUEST_TIMEOUT,IDLE_TIMEOUT).setHandler(getRootHandler("s1","server1")).build();
    server2=Undertow.builder().addHttpsListener(port + 2,DefaultServer.getHostAddress("default"),DefaultServer.getServerSslContext()).setServerOption(UndertowOptions.ENABLE_SPDY,false).setServerOption(UndertowOptions.NO_REQUEST_TIMEOUT,IDLE_TIMEOUT).setSocketOption(Options.REUSE_ADDRESSES,true).setHandler(getRootHandler("s2","server2")).build();
    server1.start();
    server2.start();
    UndertowXnioSsl ssl=new UndertowXnioSsl(DefaultServer.getWorker().getXnio(),OptionMap.EMPTY,DefaultServer.SSL_BUFFER_POOL,DefaultServer.createClientSslContext());
    DefaultServer.setRootHandler(ProxyHandler.builder().setProxyClient(new LoadBalancingProxyClient().setConnectionsPerThread(4).addHost(new URI("https",null,DefaultServer.getHostAddress("default"),port + 1,null,null,null),"s1",ssl).addHost(new URI("https",null,DefaultServer.getHostAddress("default"),port + 2,null,null,null),"s2",ssl)).setMaxRequestTime(10000).setMaxConnectionRetries(2).build());
  }
}
