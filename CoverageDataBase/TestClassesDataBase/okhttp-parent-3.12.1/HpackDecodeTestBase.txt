/** 
 * Tests Hpack implementation using https://github.com/http2jp/hpack-test-case/
 */
public class HpackDecodeTestBase {
  /** 
 * Reads all stories in the folders provided, asserts if no story found.
 */
  protected static Collection<Story[]> createStories(  String[] interopTests) throws Exception {
    List<Story[]> result=new ArrayList<>();
    for (    String interopTestName : interopTests) {
      List<Story> stories=HpackJsonUtil.readStories(interopTestName);
      if (stories.isEmpty()) {
        fail("No stories for: " + interopTestName);
      }
      for (      Story story : stories) {
        result.add(new Story[]{story});
      }
    }
    return result;
  }
  private final Buffer bytesIn=new Buffer();
  private final Hpack.Reader hpackReader=new Hpack.Reader(4096,bytesIn);
  private final Story story;
  public HpackDecodeTestBase(  Story story){
    this.story=story;
  }
  /** 
 * Expects wire to be set for all cases, and compares the decoder's output to expected headers.
 */
  protected void testDecoder() throws Exception {
    testDecoder(story);
  }
  protected void testDecoder(  Story story) throws Exception {
    for (    Case caze : story.getCases()) {
      bytesIn.write(caze.getWire());
      hpackReader.readHeaders();
      assertSetEquals(String.format("seqno=%d",caze.getSeqno()),caze.getHeaders(),hpackReader.getAndResetHeaderList());
    }
  }
  /** 
 * Checks if  {@code expected} and {@code observed} are equal when viewed as a set and headers arededuped. TODO: See if duped headers should be preserved on decode and verify.
 */
  private static void assertSetEquals(  String message,  List<Header> expected,  List<Header> observed){
    assertEquals(message,new LinkedHashSet<>(expected),new LinkedHashSet<>(observed));
  }
  protected Story getStory(){
    return story;
  }
}
