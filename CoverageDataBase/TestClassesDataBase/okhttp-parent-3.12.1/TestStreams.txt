/** 
 * One peer's streams, listener, and web socket in the test. 
 */
private static class TestStreams extends RealWebSocket.Streams {
  private final String name;
  private final WebSocketRecorder listener;
  private RealWebSocket webSocket;
  boolean closeThrows;
  boolean closed;
  public TestStreams(  boolean client,  Pipe source,  Pipe sink){
    super(client,Okio.buffer(source.source()),Okio.buffer(sink.sink()));
    this.name=client ? "client" : "server";
    this.listener=new WebSocketRecorder(name);
  }
  public void initWebSocket(  Random random,  int pingIntervalMillis) throws IOException {
    String url="http://example.com/websocket";
    Response response=new Response.Builder().code(101).message("OK").request(new Request.Builder().url(url).build()).protocol(Protocol.HTTP_1_1).build();
    webSocket=new RealWebSocket(response.request(),listener,random,pingIntervalMillis);
    webSocket.initReaderAndWriter(name,this);
  }
  public boolean processNextFrame() throws IOException {
    return webSocket.processNextFrame();
  }
  @Override public void close() throws IOException {
    source.close();
    sink.close();
    if (closed) {
      throw new AssertionError("Already closed");
    }
    closed=true;
    if (closeThrows) {
      throw new RuntimeException("Oops!");
    }
  }
}
