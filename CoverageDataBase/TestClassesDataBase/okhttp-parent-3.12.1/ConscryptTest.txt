public class ConscryptTest {
  public static final CipherSuite[] MANDATORY_CIPHER_SUITES=new CipherSuite[]{CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256};
  private OkHttpClient client=buildClient();
  private OkHttpClient buildClient(){
    ConnectionSpec spec=new ConnectionSpec.Builder(true).cipherSuites(MANDATORY_CIPHER_SUITES).tlsVersions(TlsVersion.TLS_1_2).supportsTlsExtensions(true).build();
    return new OkHttpClient.Builder().connectionSpecs(Arrays.asList(spec)).build();
  }
  private static void assumeConscrypt(){
    Assume.assumeTrue("conscrypt".equals(System.getProperty("okhttp.platform")));
  }
  private static void assumeNetwork(){
    try {
      InetAddress.getByName("www.google.com");
    }
 catch (    UnknownHostException uhe) {
      Assume.assumeNoException(uhe);
    }
  }
  @Test public void testMozilla() throws IOException {
    assumeNetwork();
    assumeConscrypt();
    Request request=new Request.Builder().url("https://mozilla.org/robots.txt").build();
    Response response=client.newCall(request).execute();
    assertEquals(Protocol.HTTP_2,response.protocol());
  }
  @Test public void testGoogle() throws IOException {
    assumeNetwork();
    assumeConscrypt();
    Request request=new Request.Builder().url("https://google.com/robots.txt").build();
    Response response=client.newCall(request).execute();
    assertEquals(Protocol.HTTP_2,response.protocol());
  }
  @Test public void testBuild(){
    assertNotNull(ConscryptPlatform.buildIfSupported());
  }
  @Test public void testPreferred(){
    Assume.assumeFalse(Platform.isConscryptPreferred());
    try {
      Security.insertProviderAt(new OpenSSLProvider(),1);
      assertTrue(Platform.isConscryptPreferred());
    }
  finally {
      Security.removeProvider("Conscrypt");
    }
  }
}
