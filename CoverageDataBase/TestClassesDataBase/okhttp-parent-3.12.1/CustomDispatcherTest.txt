public class CustomDispatcherTest {
  private MockWebServer mockWebServer=new MockWebServer();
  @After public void tearDown() throws Exception {
    mockWebServer.shutdown();
  }
  @Test public void simpleDispatch() throws Exception {
    mockWebServer.start();
    final List<RecordedRequest> requestsMade=new ArrayList<>();
    final Dispatcher dispatcher=new Dispatcher(){
      @Override public MockResponse dispatch(      RecordedRequest request){
        requestsMade.add(request);
        return new MockResponse();
      }
    }
;
    assertEquals(0,requestsMade.size());
    mockWebServer.setDispatcher(dispatcher);
    final URL url=mockWebServer.url("/").url();
    final HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.getResponseCode();
    assertEquals(1,requestsMade.size());
  }
  @Test public void outOfOrderResponses() throws Exception {
    AtomicInteger firstResponseCode=new AtomicInteger();
    AtomicInteger secondResponseCode=new AtomicInteger();
    mockWebServer.start();
    final String secondRequest="/bar";
    final String firstRequest="/foo";
    final CountDownLatch latch=new CountDownLatch(1);
    final Dispatcher dispatcher=new Dispatcher(){
      @Override public MockResponse dispatch(      RecordedRequest request) throws InterruptedException {
        if (request.getPath().equals(firstRequest)) {
          latch.await();
        }
        return new MockResponse();
      }
    }
;
    mockWebServer.setDispatcher(dispatcher);
    final Thread startsFirst=buildRequestThread(firstRequest,firstResponseCode);
    startsFirst.start();
    final Thread endsFirst=buildRequestThread(secondRequest,secondResponseCode);
    endsFirst.start();
    endsFirst.join();
    assertEquals(0,firstResponseCode.get());
    assertEquals(200,secondResponseCode.get());
    latch.countDown();
    startsFirst.join();
    assertEquals(200,firstResponseCode.get());
    assertEquals(200,secondResponseCode.get());
  }
  private Thread buildRequestThread(  final String path,  final AtomicInteger responseCode){
    return new Thread(new Runnable(){
      @Override public void run(){
        final URL url=mockWebServer.url(path).url();
        final HttpURLConnection conn;
        try {
          conn=(HttpURLConnection)url.openConnection();
          responseCode.set(conn.getResponseCode());
        }
 catch (        IOException e) {
        }
      }
    }
);
  }
}
