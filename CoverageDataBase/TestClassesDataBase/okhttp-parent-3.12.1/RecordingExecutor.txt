class RecordingExecutor extends AbstractExecutorService {
  private boolean shutdown;
  private List<AsyncCall> calls=new ArrayList<>();
  @Override public void execute(  Runnable command){
    if (shutdown)     throw new RejectedExecutionException();
    calls.add((AsyncCall)command);
  }
  public void assertJobs(  String... expectedUrls){
    List<String> actualUrls=new ArrayList<>();
    for (    AsyncCall call : calls) {
      actualUrls.add(call.request().url().toString());
    }
    assertEquals(Arrays.asList(expectedUrls),actualUrls);
  }
  public void finishJob(  String url){
    for (Iterator<AsyncCall> i=calls.iterator(); i.hasNext(); ) {
      AsyncCall call=i.next();
      if (call.request().url().toString().equals(url)) {
        i.remove();
        dispatcher.finished(call);
        return;
      }
    }
    throw new AssertionError("No such job: " + url);
  }
  @Override public void shutdown(){
    shutdown=true;
  }
  @Override public List<Runnable> shutdownNow(){
    throw new UnsupportedOperationException();
  }
  @Override public boolean isShutdown(){
    throw new UnsupportedOperationException();
  }
  @Override public boolean isTerminated(){
    throw new UnsupportedOperationException();
  }
  @Override public boolean awaitTermination(  long timeout,  TimeUnit unit){
    throw new UnsupportedOperationException();
  }
}
