public final class EventSourceHttpTest {
  @Rule public final MockWebServer server=new MockWebServer();
  private final EventSourceRecorder listener=new EventSourceRecorder();
  private OkHttpClient client=defaultClient();
  @After public void after(){
    listener.assertExhausted();
  }
  @Test public void event(){
    server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type","text/event-stream"));
    EventSource source=newEventSource();
    assertEquals("/",source.request().url().encodedPath());
    listener.assertOpen();
    listener.assertEvent(null,null,"hey");
    listener.assertClose();
  }
  @Test public void badContentType(){
    server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type","text/plain"));
    EventSource source=newEventSource();
    listener.assertFailure("Invalid content-type: text/plain");
  }
  @Test public void badResponseCode(){
    server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type","text/event-stream").setResponseCode(401));
    EventSource source=newEventSource();
    listener.assertFailure(null);
  }
  @Test public void callTimeoutIsNotApplied() throws Exception {
    client=client.newBuilder().callTimeout(100,TimeUnit.MILLISECONDS).build();
    server.enqueue(new MockResponse().setBodyDelay(500,TimeUnit.MILLISECONDS).setHeader("content-type","text/event-stream").setBody("data: hey\n\n"));
    EventSource source=newEventSource();
    assertEquals("/",source.request().url().encodedPath());
    listener.assertOpen();
    listener.assertEvent(null,null,"hey");
    listener.assertClose();
  }
  private EventSource newEventSource(){
    Request request=new Request.Builder().url(server.url("/")).build();
    EventSource.Factory factory=EventSources.createFactory(client);
    return factory.newEventSource(request,listener);
  }
}
