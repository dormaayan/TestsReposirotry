/** 
 * A port of Android's android.net.http.HttpResponseCacheTest to JUnit4.
 */
public final class HttpResponseCacheTest {
  @Rule public TemporaryFolder cacheRule=new TemporaryFolder();
  @Rule public MockWebServer server=new MockWebServer();
  private File cacheDir;
  private OkUrlFactory urlFactory;
  @Before public void setUp() throws Exception {
    cacheDir=cacheRule.getRoot();
    urlFactory=new OkUrlFactory(new OkHttpClient());
  }
  @After public void tearDown() throws Exception {
    ResponseCache.setDefault(null);
  }
  @Test public void install() throws Exception {
    HttpResponseCache installed=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    assertNotNull(installed);
    assertSame(installed,ResponseCache.getDefault());
    assertSame(installed,HttpResponseCache.getDefault());
  }
  @Test public void secondEquivalentInstallDoesNothing() throws Exception {
    HttpResponseCache first=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    HttpResponseCache another=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    assertSame(first,another);
  }
  @Test public void installClosesPreviouslyInstalled() throws Exception {
    HttpResponseCache first=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    initializeCache(first);
    HttpResponseCache another=HttpResponseCache.install(cacheDir,8 * 1024 * 1024);
    initializeCache(another);
    assertNotSame(first,another);
    try {
      first.flush();
      fail();
    }
 catch (    IllegalStateException expected) {
    }
  }
  @Test public void getInstalledWithWrongTypeInstalled(){
    ResponseCache.setDefault(new ResponseCache(){
      @Override public CacheResponse get(      URI uri,      String requestMethod,      Map<String,List<String>> requestHeaders){
        return null;
      }
      @Override public CacheRequest put(      URI uri,      URLConnection connection){
        return null;
      }
    }
);
    assertNull(HttpResponseCache.getInstalled());
  }
  @Test public void closeCloses() throws Exception {
    HttpResponseCache cache=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    initializeCache(cache);
    cache.close();
    try {
      cache.flush();
      fail();
    }
 catch (    IllegalStateException expected) {
    }
  }
  @Test public void closeUninstalls() throws Exception {
    HttpResponseCache cache=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    cache.close();
    assertNull(ResponseCache.getDefault());
  }
  @Test public void deleteUninstalls() throws Exception {
    HttpResponseCache cache=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    cache.delete();
    assertNull(ResponseCache.getDefault());
  }
  /** 
 * Make sure that statistics tracking are wired all the way through the wrapper class. http://code.google.com/p/android/issues/detail?id=25418
 */
  @Test public void statisticsTracking() throws Exception {
    HttpResponseCache cache=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);
    server.enqueue(new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A"));
    URLConnection c1=openUrl(server.url("/"));
    InputStream inputStream=c1.getInputStream();
    assertEquals('A',inputStream.read());
    inputStream.close();
    assertEquals(1,cache.getRequestCount());
    assertEquals(1,cache.getNetworkCount());
    assertEquals(0,cache.getHitCount());
    URLConnection c2=openUrl(server.url("/"));
    assertEquals('A',c2.getInputStream().read());
    URLConnection c3=openUrl(server.url("/"));
    assertEquals('A',c3.getInputStream().read());
    assertEquals(3,cache.getRequestCount());
    assertEquals(1,cache.getNetworkCount());
    assertEquals(2,cache.getHitCount());
  }
  private URLConnection openUrl(  HttpUrl url){
    ResponseCache responseCache=ResponseCache.getDefault();
    AndroidInternal.setResponseCache(urlFactory,responseCache);
    return urlFactory.open(url.url());
  }
  private void initializeCache(  HttpResponseCache cache){
    cache.size();
  }
}
