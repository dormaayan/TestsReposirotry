public final class AddressTest {
  private Dns dns=Dns.SYSTEM;
  private SocketFactory socketFactory=SocketFactory.getDefault();
  private Authenticator authenticator=Authenticator.NONE;
  private List<Protocol> protocols=Util.immutableList(Protocol.HTTP_1_1);
  private List<ConnectionSpec> connectionSpecs=Util.immutableList(ConnectionSpec.MODERN_TLS);
  private RecordingProxySelector proxySelector=new RecordingProxySelector();
  @Test public void equalsAndHashcode() throws Exception {
    Address a=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,null,protocols,connectionSpecs,proxySelector);
    Address b=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,null,protocols,connectionSpecs,proxySelector);
    assertEquals(a,b);
    assertEquals(a.hashCode(),b.hashCode());
  }
  @Test public void differentProxySelectorsAreDifferent() throws Exception {
    Address a=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,null,protocols,connectionSpecs,new RecordingProxySelector());
    Address b=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,null,protocols,connectionSpecs,new RecordingProxySelector());
    assertFalse(a.equals(b));
  }
  @Test public void addressToString() throws Exception {
    Address address=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,null,protocols,connectionSpecs,proxySelector);
    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",address.toString());
  }
  @Test public void addressWithProxyToString() throws Exception {
    Address address=new Address("square.com",80,dns,socketFactory,null,null,null,authenticator,Proxy.NO_PROXY,protocols,connectionSpecs,proxySelector);
    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}",address.toString());
  }
}
