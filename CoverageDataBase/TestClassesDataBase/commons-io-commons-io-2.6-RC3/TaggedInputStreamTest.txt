/** 
 * JUnit Test Case for  {@link TaggedInputStream}.
 */
public class TaggedInputStreamTest {
  @Test public void testEmptyStream() throws IOException {
    final InputStream stream=new TaggedInputStream(new ClosedInputStream());
    assertEquals(0,stream.available());
    assertEquals(-1,stream.read());
    assertEquals(-1,stream.read(new byte[1]));
    assertEquals(-1,stream.read(new byte[1],0,1));
    stream.close();
  }
  @Test public void testNormalStream() throws IOException {
    final InputStream stream=new TaggedInputStream(new ByteArrayInputStream(new byte[]{'a','b','c'}));
    assertEquals(3,stream.available());
    assertEquals('a',stream.read());
    final byte[] buffer=new byte[1];
    assertEquals(1,stream.read(buffer));
    assertEquals('b',buffer[0]);
    assertEquals(1,stream.read(buffer,0,1));
    assertEquals('c',buffer[0]);
    assertEquals(-1,stream.read());
    stream.close();
  }
  @Test public void testBrokenStream(){
    final IOException exception=new IOException("test exception");
    final TaggedInputStream stream=new TaggedInputStream(new BrokenInputStream(exception));
    try {
      stream.available();
      fail("Expected exception not thrown.");
    }
 catch (    final IOException e) {
      assertTrue(stream.isCauseOf(e));
      try {
        stream.throwIfCauseOf(e);
        fail("Expected exception not thrown.");
      }
 catch (      final IOException e2) {
        assertEquals(exception,e2);
      }
    }
    try {
      stream.read();
      fail("Expected exception not thrown.");
    }
 catch (    final IOException e) {
      assertTrue(stream.isCauseOf(e));
      try {
        stream.throwIfCauseOf(e);
        fail("Expected exception not thrown.");
      }
 catch (      final IOException e2) {
        assertEquals(exception,e2);
      }
    }
    try {
      stream.close();
      fail("Expected exception not thrown.");
    }
 catch (    final IOException e) {
      assertTrue(stream.isCauseOf(e));
      try {
        stream.throwIfCauseOf(e);
        fail("Expected exception not thrown.");
      }
 catch (      final IOException e2) {
        assertEquals(exception,e2);
      }
    }
  }
  @Test public void testOtherException() throws Exception {
    final IOException exception=new IOException("test exception");
    final InputStream closed=new ClosedInputStream();
    final TaggedInputStream stream=new TaggedInputStream(closed);
    assertFalse(stream.isCauseOf(exception));
    assertFalse(stream.isCauseOf(new TaggedIOException(exception,UUID.randomUUID())));
    stream.throwIfCauseOf(exception);
    stream.throwIfCauseOf(new TaggedIOException(exception,UUID.randomUUID()));
    stream.close();
  }
}
