/** 
 * Test cases for FileUtils.cleanDirectory() method.
 */
public class FileUtilsCleanDirectoryTestCase {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  private File top;
  @Before public void setUp() throws Exception {
    top=temporaryFolder.getRoot();
  }
  @Test public void testCleanEmpty() throws Exception {
    assertEquals(0,top.list().length);
    FileUtils.cleanDirectory(top);
    assertEquals(0,top.list().length);
  }
  @Test public void testDeletesRegular() throws Exception {
    FileUtils.touch(new File(top,"regular"));
    FileUtils.touch(new File(top,".hidden"));
    assertEquals(2,top.list().length);
    FileUtils.cleanDirectory(top);
    assertEquals(0,top.list().length);
  }
  @Test public void testDeletesNested() throws Exception {
    final File nested=new File(top,"nested");
    assertTrue(nested.mkdirs());
    FileUtils.touch(new File(nested,"file"));
    assertEquals(1,top.list().length);
    FileUtils.cleanDirectory(top);
    assertEquals(0,top.list().length);
  }
  @Test public void testThrowsOnNullList() throws Exception {
    if (System.getProperty("os.name").startsWith("Win") || !chmod(top,0,false)) {
      return;
    }
    try {
      FileUtils.cleanDirectory(top);
      fail("expected IOException");
    }
 catch (    final IOException e) {
      assertEquals("Failed to list contents of " + top.getAbsolutePath(),e.getMessage());
    }
  }
  @Test public void testThrowsOnCannotDeleteFile() throws Exception {
    final File file=new File(top,"restricted");
    FileUtils.touch(file);
    if (System.getProperty("os.name").startsWith("Win") || !chmod(top,500,false)) {
      return;
    }
    try {
      FileUtils.cleanDirectory(top);
      fail("expected IOException");
    }
 catch (    final IOException e) {
      assertEquals("Unable to delete file: " + file.getAbsolutePath(),e.getMessage());
    }
  }
  private boolean chmod(  final File file,  final int mode,  final boolean recurse) throws InterruptedException {
    final List<String> args=new ArrayList<>();
    args.add("chmod");
    if (recurse) {
      args.add("-R");
    }
    args.add(Integer.toString(mode));
    args.add(file.getAbsolutePath());
    Process proc;
    try {
      proc=Runtime.getRuntime().exec(args.toArray(new String[args.size()]));
    }
 catch (    final IOException e) {
      return false;
    }
    final int result=proc.waitFor();
    return result == 0;
  }
}
