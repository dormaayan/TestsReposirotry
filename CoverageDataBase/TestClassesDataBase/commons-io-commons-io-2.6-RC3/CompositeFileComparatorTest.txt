/** 
 * Test case for  {@link CompositeFileComparator}.
 */
public class CompositeFileComparatorTest extends ComparatorAbstractTestCase {
  @Before public void setUp() throws Exception {
    comparator=new CompositeFileComparator(new AbstractFileComparator[]{(AbstractFileComparator)SizeFileComparator.SIZE_COMPARATOR,(AbstractFileComparator)ExtensionFileComparator.EXTENSION_COMPARATOR});
    reverse=new ReverseComparator(comparator);
    final File dir=getTestDirectory();
    lessFile=new File(dir,"xyz.txt");
    equalFile1=new File(dir,"foo.txt");
    equalFile2=new File(dir,"bar.txt");
    moreFile=new File(dir,"foo.xyz");
    if (!lessFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + lessFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output3=new BufferedOutputStream(new FileOutputStream(lessFile))){
      TestUtils.generateTestData(output3,32);
    }
     if (!equalFile1.getParentFile().exists()) {
      throw new IOException("Cannot create file " + equalFile1 + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output2=new BufferedOutputStream(new FileOutputStream(equalFile1))){
      TestUtils.generateTestData(output2,48);
    }
     if (!equalFile2.getParentFile().exists()) {
      throw new IOException("Cannot create file " + equalFile2 + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(equalFile2))){
      TestUtils.generateTestData(output1,48);
    }
     if (!moreFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + moreFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(moreFile))){
      TestUtils.generateTestData(output,48);
    }
   }
  /** 
 * Test Constructor with null Iterable
 */
  @Test public void constructorIterable_order(){
    final List<Comparator<File>> list=new ArrayList<>();
    list.add(SizeFileComparator.SIZE_COMPARATOR);
    list.add(ExtensionFileComparator.EXTENSION_COMPARATOR);
    final Comparator<File> c=new CompositeFileComparator(list);
    assertEquals("equal",0,c.compare(equalFile1,equalFile2));
    assertTrue("less",c.compare(lessFile,moreFile) < 0);
    assertTrue("more",c.compare(moreFile,lessFile) > 0);
  }
  /** 
 * Test Constructor with null Iterable
 */
  @Test public void constructorIterable_Null(){
    final Comparator<File> c=new CompositeFileComparator((Iterable<Comparator<File>>)null);
    assertEquals("less,more",0,c.compare(lessFile,moreFile));
    assertEquals("more,less",0,c.compare(moreFile,lessFile));
    assertEquals("toString","CompositeFileComparator{}",c.toString());
  }
  /** 
 * Test Constructor with null array
 */
  @Test public void constructorArray_Null(){
    final Comparator<File> c=new CompositeFileComparator((Comparator<File>[])null);
    assertEquals("less,more",0,c.compare(lessFile,moreFile));
    assertEquals("more,less",0,c.compare(moreFile,lessFile));
    assertEquals("toString","CompositeFileComparator{}",c.toString());
  }
}
