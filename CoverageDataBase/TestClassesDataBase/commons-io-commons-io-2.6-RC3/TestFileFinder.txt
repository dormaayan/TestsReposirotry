/** 
 * Test DirectoryWalker implementation that finds files in a directory hierarchy applying a file filter.
 */
private static class TestFileFinder extends DirectoryWalker {
  protected TestFileFinder(  final FileFilter filter,  final int depthLimit){
    super(filter,depthLimit);
  }
  protected TestFileFinder(  final IOFileFilter dirFilter,  final IOFileFilter fileFilter,  final int depthLimit){
    super(dirFilter,fileFilter,depthLimit);
  }
  /** 
 * find files.
 */
  protected List<File> find(  final File startDirectory){
    final List<File> results=new ArrayList<>();
    try {
      walk(startDirectory,results);
    }
 catch (    final IOException ex) {
      fail(ex.toString());
    }
    return results;
  }
  /** 
 * Handles a directory end by adding the File to the result set.
 */
  @Override protected void handleDirectoryEnd(  final File directory,  final int depth,  final Collection results){
    results.add(directory);
  }
  /** 
 * Handles a file by adding the File to the result set.
 */
  @Override protected void handleFile(  final File file,  final int depth,  final Collection results){
    results.add(file);
  }
}
