/** 
 * Test for FileDeleteStrategy.
 * @see FileDeleteStrategy
 */
public class FileDeleteStrategyTestCase {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  private File getTestDirectory(){
    return temporaryFolder.getRoot();
  }
  @Test public void testDeleteNormal() throws Exception {
    final File baseDir=getTestDirectory();
    final File subDir=new File(baseDir,"test");
    assertTrue(subDir.mkdir());
    final File subFile=new File(subDir,"a.txt");
    if (!subFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + subFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(subFile))){
      TestUtils.generateTestData(output,16);
    }
     assertTrue(subDir.exists());
    assertTrue(subFile.exists());
    try {
      FileDeleteStrategy.NORMAL.delete(subDir);
      fail();
    }
 catch (    final IOException ex) {
    }
    assertTrue(subDir.exists());
    assertTrue(subFile.exists());
    FileDeleteStrategy.NORMAL.delete(subFile);
    assertTrue(subDir.exists());
    assertFalse(subFile.exists());
    FileDeleteStrategy.NORMAL.delete(subDir);
    assertFalse(subDir.exists());
    FileDeleteStrategy.NORMAL.delete(subDir);
    assertFalse(subDir.exists());
  }
  @Test public void testDeleteQuietlyNormal() throws Exception {
    final File baseDir=getTestDirectory();
    final File subDir=new File(baseDir,"test");
    assertTrue(subDir.mkdir());
    final File subFile=new File(subDir,"a.txt");
    if (!subFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + subFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(subFile))){
      TestUtils.generateTestData(output,16);
    }
     assertTrue(subDir.exists());
    assertTrue(subFile.exists());
    assertFalse(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
    assertTrue(subDir.exists());
    assertTrue(subFile.exists());
    assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subFile));
    assertTrue(subDir.exists());
    assertFalse(subFile.exists());
    assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
    assertFalse(subDir.exists());
    assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
    assertFalse(subDir.exists());
  }
  @Test public void testDeleteForce() throws Exception {
    final File baseDir=getTestDirectory();
    final File subDir=new File(baseDir,"test");
    assertTrue(subDir.mkdir());
    final File subFile=new File(subDir,"a.txt");
    if (!subFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + subFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(subFile))){
      TestUtils.generateTestData(output,16);
    }
     assertTrue(subDir.exists());
    assertTrue(subFile.exists());
    FileDeleteStrategy.FORCE.delete(subDir);
    assertFalse(subDir.exists());
    assertFalse(subFile.exists());
    FileDeleteStrategy.FORCE.delete(subDir);
    assertFalse(subDir.exists());
  }
  @Test public void testDeleteNull() throws Exception {
    try {
      FileDeleteStrategy.NORMAL.delete(null);
      fail();
    }
 catch (    final NullPointerException ex) {
    }
    assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(null));
  }
  @Test public void testToString(){
    assertEquals("FileDeleteStrategy[Normal]",FileDeleteStrategy.NORMAL.toString());
    assertEquals("FileDeleteStrategy[Force]",FileDeleteStrategy.FORCE.toString());
  }
}
