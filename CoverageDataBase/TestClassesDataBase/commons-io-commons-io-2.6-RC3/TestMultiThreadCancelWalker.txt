/** 
 * Test DirectoryWalker implementation that finds files in a directory hierarchy applying a file filter.
 */
static class TestMultiThreadCancelWalker extends DirectoryWalker {
  private final String cancelFileName;
  private final boolean suppressCancel;
  private boolean cancelled;
  public List results;
  TestMultiThreadCancelWalker(  final String cancelFileName,  final boolean suppressCancel){
    super();
    this.cancelFileName=cancelFileName;
    this.suppressCancel=suppressCancel;
  }
  /** 
 * find files.
 */
  protected List find(  final File startDirectory) throws IOException {
    results=new ArrayList();
    walk(startDirectory,results);
    return results;
  }
  /** 
 * Handles a directory end by adding the File to the result set.
 */
  @Override protected void handleDirectoryEnd(  final File directory,  final int depth,  final Collection results) throws IOException {
    results.add(directory);
    assertFalse(cancelled);
    if (cancelFileName.equals(directory.getName())) {
      cancelled=true;
    }
  }
  /** 
 * Handles a file by adding the File to the result set.
 */
  @Override protected void handleFile(  final File file,  final int depth,  final Collection results) throws IOException {
    results.add(file);
    assertFalse(cancelled);
    if (cancelFileName.equals(file.getName())) {
      cancelled=true;
    }
  }
  /** 
 * Handles Cancelled.
 */
  @Override protected boolean handleIsCancelled(  final File file,  final int depth,  final Collection results) throws IOException {
    return cancelled;
  }
  /** 
 * Handles Cancel.
 */
  @Override protected void handleCancelled(  final File startDirectory,  final Collection results,  final CancelException cancel) throws IOException {
    if (!suppressCancel) {
      super.handleCancelled(startDirectory,results,cancel);
    }
  }
}
