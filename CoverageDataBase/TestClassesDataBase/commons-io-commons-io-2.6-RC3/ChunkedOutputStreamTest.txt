/** 
 * Test the chunked output stream
 */
public class ChunkedOutputStreamTest {
  @Test public void write_four_chunks() throws Exception {
    final AtomicInteger numWrites=new AtomicInteger();
    final ByteArrayOutputStream baos=getByteArrayOutputStream(numWrites);
    final ChunkedOutputStream chunked=new ChunkedOutputStream(baos,10);
    chunked.write("0123456789012345678901234567891".getBytes());
    assertEquals(4,numWrites.get());
    chunked.close();
  }
  @Test(expected=IllegalArgumentException.class) public void negative_chunksize_not_permitted() throws Exception {
    final ChunkedOutputStream chunked=new ChunkedOutputStream(new ByteArrayOutputStream(),0);
    chunked.close();
  }
  @Test public void defaultConstructor() throws IOException {
    final AtomicInteger numWrites=new AtomicInteger();
    final ByteArrayOutputStream baos=getByteArrayOutputStream(numWrites);
    final ChunkedOutputStream chunked=new ChunkedOutputStream(baos);
    chunked.write(new byte[1024 * 4 + 1]);
    assertEquals(2,numWrites.get());
    chunked.close();
  }
  private ByteArrayOutputStream getByteArrayOutputStream(  final AtomicInteger numWrites){
    return new ByteArrayOutputStream(){
      @Override public void write(      final byte[] b,      final int off,      final int len){
        numWrites.incrementAndGet();
        super.write(b,off,len);
      }
    }
;
  }
}
