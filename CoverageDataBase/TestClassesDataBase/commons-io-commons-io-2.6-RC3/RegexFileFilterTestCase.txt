/** 
 * Used to test RegexFileFilterUtils.
 */
public class RegexFileFilterTestCase {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  public void assertFiltering(  final IOFileFilter filter,  final File file,  final boolean expected) throws Exception {
    assertEquals("Filter(File) " + filter.getClass().getName() + " not "+ expected+ " for "+ file,expected,filter.accept(file));
    if (file != null && file.getParentFile() != null) {
      assertEquals("Filter(File, String) " + filter.getClass().getName() + " not "+ expected+ " for "+ file,expected,filter.accept(file.getParentFile(),file.getName()));
    }
 else     if (file == null) {
      assertEquals("Filter(File, String) " + filter.getClass().getName() + " not "+ expected+ " for null",expected,filter.accept(file));
    }
  }
  @Test public void testRegex() throws Exception {
    IOFileFilter filter=new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");
    assertFiltering(filter,new File("Test.java"),true);
    assertFiltering(filter,new File("test-10.java"),true);
    assertFiltering(filter,new File("test-.java"),false);
    filter=new RegexFileFilter("^[Tt]est.java$");
    assertFiltering(filter,new File("Test.java"),true);
    assertFiltering(filter,new File("test.java"),true);
    assertFiltering(filter,new File("tEST.java"),false);
    filter=new RegexFileFilter(Pattern.compile("^test.java$",Pattern.CASE_INSENSITIVE));
    assertFiltering(filter,new File("Test.java"),true);
    assertFiltering(filter,new File("test.java"),true);
    assertFiltering(filter,new File("tEST.java"),true);
    filter=new RegexFileFilter("^test.java$",Pattern.CASE_INSENSITIVE);
    assertFiltering(filter,new File("Test.java"),true);
    assertFiltering(filter,new File("test.java"),true);
    assertFiltering(filter,new File("tEST.java"),true);
    filter=new RegexFileFilter("^test.java$",IOCase.INSENSITIVE);
    assertFiltering(filter,new File("Test.java"),true);
    assertFiltering(filter,new File("test.java"),true);
    assertFiltering(filter,new File("tEST.java"),true);
    try {
      new RegexFileFilter((String)null);
      fail();
    }
 catch (    final IllegalArgumentException ignore) {
    }
    try {
      new RegexFileFilter(null,Pattern.CASE_INSENSITIVE);
      fail();
    }
 catch (    final IllegalArgumentException ignore) {
    }
    try {
      new RegexFileFilter(null,IOCase.INSENSITIVE);
      fail();
    }
 catch (    final IllegalArgumentException ignore) {
    }
    try {
      new RegexFileFilter((java.util.regex.Pattern)null);
      fail();
    }
 catch (    final IllegalArgumentException ignore) {
    }
  }
}
