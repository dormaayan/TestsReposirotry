/** 
 * Tests that files really lock, although no writing is done as the locking is tested only on construction.
 */
public class LockableFileWriterTest {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  private File getTestDirectory(){
    return temporaryFolder.getRoot();
  }
  private File file;
  private File lockDir;
  private File lockFile;
  private File altLockDir;
  private File altLockFile;
  @Before public void setUp(){
    file=new File(getTestDirectory(),"testlockfile");
    lockDir=new File(System.getProperty("java.io.tmpdir"));
    lockFile=new File(lockDir,file.getName() + ".lck");
    altLockDir=getTestDirectory();
    altLockFile=new File(altLockDir,file.getName() + ".lck");
  }
  @Test public void testFileLocked() throws IOException {
    try (LockableFileWriter lfw1=new LockableFileWriter(file)){
      assertTrue(file.exists());
      assertTrue(lockFile.exists());
      try (LockableFileWriter lfw2=new LockableFileWriter(file)){
        fail("Somehow able to open a locked file. ");
      }
 catch (      final IOException ioe) {
        final String msg=ioe.getMessage();
        assertTrue("Exception message does not start correctly. ",msg.startsWith("Can't write file, lock "));
        assertTrue(file.exists());
        assertTrue(lockFile.exists());
      }
      try (LockableFileWriter lfw3=new LockableFileWriter(file)){
        fail("Somehow able to open a locked file. ");
      }
 catch (      final IOException ioe) {
        final String msg=ioe.getMessage();
        assertTrue("Exception message does not start correctly. ",msg.startsWith("Can't write file, lock "));
        assertTrue(file.exists());
        assertTrue(lockFile.exists());
      }
    }
     assertTrue(file.exists());
    assertFalse(lockFile.exists());
  }
  @Test public void testAlternateLockDir() throws IOException {
    try (LockableFileWriter lfw1=new LockableFileWriter(file,"UTF-8",true,altLockDir.getAbsolutePath())){
      assertTrue(file.exists());
      assertTrue(altLockFile.exists());
      try (LockableFileWriter lfw2=new LockableFileWriter(file,StandardCharsets.UTF_8,true,altLockDir.getAbsolutePath())){
        fail("Somehow able to open a locked file. ");
      }
 catch (      final IOException ioe) {
        final String msg=ioe.getMessage();
        assertTrue("Exception message does not start correctly. ",msg.startsWith("Can't write file, lock "));
        assertTrue(file.exists());
        assertTrue(altLockFile.exists());
      }
    }
     assertTrue(file.exists());
    assertFalse(altLockFile.exists());
  }
  @Test public void testFileNotLocked() throws IOException {
    try (LockableFileWriter lfw1=new LockableFileWriter(file)){
      assertTrue(file.exists());
      assertTrue(lockFile.exists());
    }
     assertTrue(file.exists());
    assertFalse(lockFile.exists());
    try (LockableFileWriter lfw2=new LockableFileWriter(file)){
      assertTrue(file.exists());
      assertTrue(lockFile.exists());
    }
     assertTrue(file.exists());
    assertFalse(lockFile.exists());
  }
  @Test public void testConstructor_File_encoding_badEncoding() throws IOException {
    try (Writer writer=new LockableFileWriter(file,"BAD-ENCODE")){
      fail();
    }
 catch (    final UnsupportedCharsetException ex) {
      assertFalse(file.exists());
      assertFalse(lockFile.exists());
    }
    assertFalse(file.exists());
    assertFalse(lockFile.exists());
  }
  @Test public void testConstructor_File_directory(){
    try (Writer writer=new LockableFileWriter(getTestDirectory())){
      fail();
    }
 catch (    final IOException ex) {
      assertFalse(file.exists());
      assertFalse(lockFile.exists());
    }
    assertFalse(file.exists());
    assertFalse(lockFile.exists());
  }
  @Test public void testConstructor_File_nullFile() throws IOException {
    try (Writer writer=new LockableFileWriter((File)null)){
      fail();
    }
 catch (    final NullPointerException ex) {
      assertFalse(file.exists());
      assertFalse(lockFile.exists());
    }
    assertFalse(file.exists());
    assertFalse(lockFile.exists());
  }
  @Test public void testConstructor_fileName_nullFile() throws IOException {
    try (Writer writer=new LockableFileWriter((String)null)){
      fail();
    }
 catch (    final NullPointerException ex) {
      assertFalse(file.exists());
      assertFalse(lockFile.exists());
    }
    assertFalse(file.exists());
    assertFalse(lockFile.exists());
  }
}
