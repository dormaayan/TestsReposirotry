/** 
 * JUnit Test Case for  {@link AutoCloseInputStream}.
 */
public class AutoCloseInputStreamTest {
  private byte[] data;
  private InputStream stream;
  private boolean closed;
  @Before public void setUp(){
    data=new byte[]{'x','y','z'};
    stream=new AutoCloseInputStream(new ByteArrayInputStream(data){
      @Override public void close(){
        closed=true;
      }
    }
);
    closed=false;
  }
  @Test public void testClose() throws IOException {
    stream.close();
    assertTrue("closed",closed);
    assertEquals("read()",-1,stream.read());
  }
  @Test public void testRead() throws IOException {
    for (    final byte element : data) {
      assertEquals("read()",element,stream.read());
      assertFalse("closed",closed);
    }
    assertEquals("read()",-1,stream.read());
    assertTrue("closed",closed);
  }
  @Test public void testReadBuffer() throws IOException {
    final byte[] b=new byte[data.length * 2];
    int total=0;
    for (int n=0; n != -1; n=stream.read(b)) {
      assertFalse("closed",closed);
      for (int i=0; i < n; i++) {
        assertEquals("read(b)",data[total + i],b[i]);
      }
      total+=n;
    }
    assertEquals("read(b)",data.length,total);
    assertTrue("closed",closed);
    assertEquals("read(b)",-1,stream.read(b));
  }
  @Test public void testReadBufferOffsetLength() throws IOException {
    final byte[] b=new byte[data.length * 2];
    int total=0;
    for (int n=0; n != -1; n=stream.read(b,total,b.length - total)) {
      assertFalse("closed",closed);
      total+=n;
    }
    assertEquals("read(b, off, len)",data.length,total);
    for (int i=0; i < data.length; i++) {
      assertEquals("read(b, off, len)",data[i],b[i]);
    }
    assertTrue("closed",closed);
    assertEquals("read(b, off, len)",-1,stream.read(b,0,b.length));
  }
}
