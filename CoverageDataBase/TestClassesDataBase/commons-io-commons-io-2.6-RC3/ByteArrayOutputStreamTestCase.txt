/** 
 * Basic unit tests for the alternative ByteArrayOutputStream implementation.
 */
public class ByteArrayOutputStreamTestCase {
  private static final byte[] DATA;
static {
    DATA=new byte[64];
    for (byte i=0; i < 64; i++) {
      DATA[i]=i;
    }
  }
  private int writeData(  final ByteArrayOutputStream baout,  final java.io.ByteArrayOutputStream ref,  final int count){
    if (count > DATA.length) {
      throw new IllegalArgumentException("Requesting too many bytes");
    }
    if (count == 0) {
      baout.write(100);
      ref.write(100);
      return 1;
    }
 else {
      baout.write(DATA,0,count);
      ref.write(DATA,0,count);
      return count;
    }
  }
  private int writeData(  final ByteArrayOutputStream baout,  final java.io.ByteArrayOutputStream ref,  final int[] instructions){
    int written=0;
    for (    final int instruction : instructions) {
      written+=writeData(baout,ref,instruction);
    }
    return written;
  }
  private static boolean byteCmp(  final byte[] src,  final byte[] cmp){
    for (int i=0; i < cmp.length; i++) {
      if (src[i] != cmp[i]) {
        return false;
      }
    }
    return true;
  }
  private void checkByteArrays(  final byte[] expected,  final byte[] actual){
    if (expected.length != actual.length) {
      fail("Resulting byte arrays are not equally long");
    }
    if (!byteCmp(expected,actual)) {
      fail("Resulting byte arrays are not equal");
    }
  }
  private void checkStreams(  final ByteArrayOutputStream actual,  final java.io.ByteArrayOutputStream expected){
    assertEquals("Sizes are not equal",expected.size(),actual.size());
    final byte[] buf=actual.toByteArray();
    final byte[] refbuf=expected.toByteArray();
    checkByteArrays(buf,refbuf);
  }
  @Test public void testToInputStream() throws IOException {
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream();
    writeData(baout,ref,32);
    for (int i=0; i < 128; i++) {
      writeData(baout,ref,64);
    }
    final InputStream in=baout.toInputStream();
    byte refData[]=ref.toByteArray();
    writeData(baout,ref,new int[]{2,4,8,16});
    byte baoutData[]=IOUtils.toByteArray(in);
    assertEquals(8224,baoutData.length);
    checkByteArrays(refData,baoutData);
    baoutData=IOUtils.toByteArray(baout.toInputStream());
    refData=ref.toByteArray();
    assertEquals(8254,baoutData.length);
    checkByteArrays(refData,baoutData);
    baout.close();
    in.close();
  }
  @Test public void testToInputStreamWithReset() throws IOException {
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream();
    writeData(baout,ref,32);
    for (int i=0; i < 128; i++) {
      writeData(baout,ref,64);
    }
    final InputStream in=baout.toInputStream();
    byte refData[]=ref.toByteArray();
    baout.reset();
    ref.reset();
    writeData(baout,ref,new int[]{2,4,8,16});
    byte baoutData[]=IOUtils.toByteArray(in);
    assertEquals(8224,baoutData.length);
    checkByteArrays(refData,baoutData);
    baoutData=IOUtils.toByteArray(baout.toInputStream());
    refData=ref.toByteArray();
    assertEquals(30,baoutData.length);
    checkByteArrays(refData,baoutData);
    baout.close();
    in.close();
  }
  @Test public void testStream() throws Exception {
    int written;
    final ByteArrayOutputStream baout=new ByteArrayOutputStream(32);
    final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream();
    written=writeData(baout,ref,new int[]{4,10,22});
    assertEquals(36,written);
    checkStreams(baout,ref);
    written=writeData(baout,ref,new int[]{20,12});
    assertEquals(32,written);
    checkStreams(baout,ref);
    baout.reset();
    ref.reset();
    written=writeData(baout,ref,new int[]{5,47,33,60,1,0,8});
    assertEquals(155,written);
    checkStreams(baout,ref);
    baout.reset();
    written=baout.write(new ByteArrayInputStream(ref.toByteArray()));
    assertEquals(155,written);
    checkStreams(baout,ref);
    final ByteArrayOutputStream baout1=new ByteArrayOutputStream(32);
    ref.writeTo(baout1);
    final java.io.ByteArrayOutputStream ref1=new java.io.ByteArrayOutputStream();
    baout.writeTo(ref1);
    checkStreams(baout1,ref1);
    final String baoutString=baout.toString("ASCII");
    final String refString=ref.toString("ASCII");
    assertEquals("ASCII decoded String must be equal",refString,baoutString);
    final ByteArrayOutputStream baos1=new ByteArrayOutputStream();
    final ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    assertSame(baos1.toByteArray(),baos2.toByteArray());
    baos1.close();
    baos2.close();
    baout.close();
    baout1.close();
  }
}
