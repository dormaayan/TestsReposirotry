/** 
 * {@link FileAlterationMonitor} Test Case.
 */
public class FileAlterationMonitorTestCase extends AbstractMonitorTestCase {
  /** 
 * Construct a new test case.
 */
  public FileAlterationMonitorTestCase(){
    listener=new CollectionFileListener(false);
  }
  /** 
 * Test default constructor.
 */
  @Test public void testDefaultConstructor(){
    final FileAlterationMonitor monitor=new FileAlterationMonitor();
    assertEquals("Interval",10000,monitor.getInterval());
  }
  /** 
 * Test add/remove observers.
 */
  @Test public void testAddRemoveObservers(){
    FileAlterationObserver[] observers=null;
    FileAlterationMonitor monitor=null;
    monitor=new FileAlterationMonitor(123,observers);
    assertEquals("Interval",123,monitor.getInterval());
    assertFalse("Observers[1]",monitor.getObservers().iterator().hasNext());
    observers=new FileAlterationObserver[1];
    monitor=new FileAlterationMonitor(456,observers);
    assertFalse("Observers[2]",monitor.getObservers().iterator().hasNext());
    monitor.addObserver(null);
    assertFalse("Observers[3]",monitor.getObservers().iterator().hasNext());
    monitor.removeObserver(null);
    final FileAlterationObserver observer=new FileAlterationObserver("foo");
    monitor.addObserver(observer);
    final Iterator<FileAlterationObserver> it=monitor.getObservers().iterator();
    assertTrue("Observers[4]",it.hasNext());
    assertEquals("Added",observer,it.next());
    assertFalse("Observers[5]",it.hasNext());
    monitor.removeObserver(observer);
    assertFalse("Observers[6]",monitor.getObservers().iterator().hasNext());
  }
  /** 
 * Test checkAndNotify() method
 * @throws Exception
 */
  @Test public void testMonitor() throws Exception {
    final long interval=100;
    listener.clear();
    final FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);
    assertEquals("Interval",interval,monitor.getInterval());
    monitor.start();
    try {
      monitor.start();
      fail("Expected IllegalStateException");
    }
 catch (    final IllegalStateException e) {
    }
    checkCollectionsEmpty("A");
    File file1=touch(new File(testDir,"file1.java"));
    checkFile("Create",file1,listener.getCreatedFiles());
    listener.clear();
    checkCollectionsEmpty("B");
    file1=touch(file1);
    checkFile("Update",file1,listener.getChangedFiles());
    listener.clear();
    checkCollectionsEmpty("C");
    file1.delete();
    checkFile("Delete",file1,listener.getDeletedFiles());
    listener.clear();
    monitor.stop();
    try {
      monitor.stop();
      fail("Expected IllegalStateException");
    }
 catch (    final IllegalStateException e) {
    }
  }
  /** 
 * Test using a thread factory.
 * @throws Exception
 */
  @Test public void testThreadFactory() throws Exception {
    final long interval=100;
    listener.clear();
    final FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);
    monitor.setThreadFactory(Executors.defaultThreadFactory());
    assertEquals("Interval",interval,monitor.getInterval());
    monitor.start();
    checkCollectionsEmpty("A");
    final File file2=touch(new File(testDir,"file2.java"));
    checkFile("Create",file2,listener.getCreatedFiles());
    listener.clear();
    checkCollectionsEmpty("B");
    file2.delete();
    checkFile("Delete",file2,listener.getDeletedFiles());
    listener.clear();
    monitor.stop();
  }
  /** 
 * Check all the File Collections have the expected sizes.
 */
  private void checkFile(  final String label,  final File file,  final Collection<File> files){
    for (int i=0; i < 20; i++) {
      if (files.contains(file)) {
        return;
      }
      TestUtils.sleepQuietly(pauseTime);
    }
    fail(label + " " + file+ " not found");
  }
}
