@SuppressWarnings("deprecation") public class CopyUtilsTest {
  private static final int FILE_SIZE=1024 * 4 + 1;
  private final byte[] inData=TestUtils.generateTestData(FILE_SIZE);
  @Test public void testCtor(){
    new CopyUtils();
  }
  @Test public void copy_byteArrayToOutputStream() throws Exception {
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    CopyUtils.copy(inData,out);
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @Test public void copy_byteArrayToWriter() throws Exception {
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    final Writer writer=new java.io.OutputStreamWriter(out,"US-ASCII");
    CopyUtils.copy(inData,writer);
    writer.flush();
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @Test public void testCopy_byteArrayToWriterWithEncoding() throws Exception {
    final String inDataStr="data";
    final String charsetName="UTF-8";
    final StringWriter writer=new StringWriter();
    CopyUtils.copy(inDataStr.getBytes(charsetName),writer,charsetName);
    assertEquals(inDataStr,writer.toString());
  }
  @SuppressWarnings("resource") @Test public void testCopy_inputStreamToOutputStream() throws Exception {
    InputStream in=new ByteArrayInputStream(inData);
    in=new YellOnCloseInputStream(in);
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    final int count=CopyUtils.copy(in,out);
    assertEquals("Not all bytes were read",0,in.available());
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
    assertEquals(inData.length,count);
  }
  @SuppressWarnings("resource") @Test public void copy_inputStreamToWriter() throws Exception {
    InputStream in=new ByteArrayInputStream(inData);
    in=new YellOnCloseInputStream(in);
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    final Writer writer=new java.io.OutputStreamWriter(out,"US-ASCII");
    CopyUtils.copy(in,writer);
    writer.flush();
    assertEquals("Not all bytes were read",0,in.available());
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @Test public void copy_inputStreamToWriterWithEncoding() throws Exception {
    final String inDataStr="data";
    final String charsetName="UTF-8";
    final StringWriter writer=new StringWriter();
    CopyUtils.copy(new ByteArrayInputStream(inDataStr.getBytes(charsetName)),writer,charsetName);
    assertEquals(inDataStr,writer.toString());
  }
  @SuppressWarnings("resource") @Test public void testCopy_readerToOutputStream() throws Exception {
    InputStream in=new ByteArrayInputStream(inData);
    in=new YellOnCloseInputStream(in);
    final Reader reader=new java.io.InputStreamReader(in,"US-ASCII");
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    CopyUtils.copy(reader,out);
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @SuppressWarnings("resource") @Test public void copy_readerToWriter() throws Exception {
    InputStream in=new ByteArrayInputStream(inData);
    in=new YellOnCloseInputStream(in);
    final Reader reader=new java.io.InputStreamReader(in,"US-ASCII");
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    final Writer writer=new java.io.OutputStreamWriter(out,"US-ASCII");
    final int count=CopyUtils.copy(reader,writer);
    writer.flush();
    assertEquals("The number of characters returned by copy is wrong",inData.length,count);
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @Test public void copy_stringToOutputStream() throws Exception {
    final String str=new String(inData,"US-ASCII");
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    CopyUtils.copy(str,out);
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
  @Test public void copy_stringToWriter() throws Exception {
    final String str=new String(inData,"US-ASCII");
    final ByteArrayOutputStream baout=new ByteArrayOutputStream();
    final OutputStream out=new YellOnFlushAndCloseOutputStream(baout,false,true);
    final Writer writer=new java.io.OutputStreamWriter(out,"US-ASCII");
    CopyUtils.copy(str,writer);
    writer.flush();
    assertEquals("Sizes differ",inData.length,baout.size());
    assertTrue("Content differs",Arrays.equals(inData,baout.toByteArray()));
  }
}
