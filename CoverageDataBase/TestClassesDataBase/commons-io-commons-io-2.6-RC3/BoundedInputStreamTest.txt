/** 
 * Tests for  {@link BoundedInputStream}.
 */
public class BoundedInputStreamTest {
  @Test public void testReadSingle() throws Exception {
    BoundedInputStream bounded;
    final byte[] helloWorld="Hello World".getBytes();
    final byte[] hello="Hello".getBytes();
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),helloWorld.length);
    for (int i=0; i < helloWorld.length; i++) {
      assertEquals("limit = length byte[" + i + "]",helloWorld[i],bounded.read());
    }
    assertEquals("limit = length end",-1,bounded.read());
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),helloWorld.length + 1);
    for (int i=0; i < helloWorld.length; i++) {
      assertEquals("limit > length byte[" + i + "]",helloWorld[i],bounded.read());
    }
    assertEquals("limit > length end",-1,bounded.read());
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),hello.length);
    for (int i=0; i < hello.length; i++) {
      assertEquals("limit < length byte[" + i + "]",hello[i],bounded.read());
    }
    assertEquals("limit < length end",-1,bounded.read());
  }
  @Test public void testReadArray() throws Exception {
    BoundedInputStream bounded;
    final byte[] helloWorld="Hello World".getBytes();
    final byte[] hello="Hello".getBytes();
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld));
    compare("limit = -1",helloWorld,IOUtils.toByteArray(bounded));
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),0);
    compare("limit = 0",new byte[0],IOUtils.toByteArray(bounded));
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),helloWorld.length);
    compare("limit = length",helloWorld,IOUtils.toByteArray(bounded));
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),helloWorld.length + 1);
    compare("limit > length",helloWorld,IOUtils.toByteArray(bounded));
    bounded=new BoundedInputStream(new ByteArrayInputStream(helloWorld),helloWorld.length - 6);
    compare("limit < length",hello,IOUtils.toByteArray(bounded));
  }
  private void compare(  final String msg,  final byte[] expected,  final byte[] actual){
    assertEquals(msg + " length",expected.length,actual.length);
    for (int i=0; i < expected.length; i++) {
      assertEquals(msg + " byte[" + i+ "]",expected[i],actual[i]);
    }
  }
}
