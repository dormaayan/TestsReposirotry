public abstract class IOFileFilterAbstractTestCase {
  public static void assertFileFiltering(  final int testNumber,  final IOFileFilter filter,  final File file,  final boolean expected) throws Exception {
    assertEquals("test " + testNumber + " Filter(File) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file,expected,filter.accept(file));
  }
  public static void assertFilenameFiltering(  final int testNumber,  final IOFileFilter filter,  final File file,  final boolean expected) throws Exception {
    assertEquals("test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file,expected,filter.accept(file.getParentFile(),file.getName()));
  }
  public static void assertFiltering(  final int testNumber,  final IOFileFilter filter,  final File file,  final boolean expected) throws Exception {
    assertEquals("test " + testNumber + " Filter(File) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file,expected,filter.accept(file));
    if (file != null && file.getParentFile() != null) {
      assertEquals("test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file,expected,filter.accept(file.getParentFile(),file.getName()));
    }
 else     if (file == null) {
      assertEquals("test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for null",expected,filter.accept(file));
    }
  }
  public static void assertTrueFiltersInvoked(  final int testNumber,  final TesterTrueFileFilter[] filters,  final boolean[] invoked){
    for (int i=1; i < filters.length; i++) {
      assertEquals("test " + testNumber + " filter "+ i+ " invoked",invoked[i - 1],filters[i].isInvoked());
    }
  }
  public static void assertFalseFiltersInvoked(  final int testNumber,  final TesterFalseFileFilter[] filters,  final boolean[] invoked){
    for (int i=1; i < filters.length; i++) {
      assertEquals("test " + testNumber + " filter "+ i+ " invoked",invoked[i - 1],filters[i].isInvoked());
    }
  }
  public static File determineWorkingDirectoryPath(  final String key,  final String defaultPath){
    final String workingPathName=System.getProperty(key,defaultPath);
    return new File(workingPathName);
  }
  public static void resetFalseFilters(  final TesterFalseFileFilter[] filters){
    for (    final TesterFalseFileFilter filter : filters) {
      if (filter != null) {
        filter.reset();
      }
    }
  }
  public static void resetTrueFilters(  final TesterTrueFileFilter[] filters){
    for (    final TesterTrueFileFilter filter : filters) {
      if (filter != null) {
        filter.reset();
      }
    }
  }
class TesterTrueFileFilter extends TrueFileFilter {
    private static final long serialVersionUID=1828930358172422914L;
    private boolean invoked;
    @Override public boolean accept(    final File file){
      setInvoked(true);
      return super.accept(file);
    }
    @Override public boolean accept(    final File file,    final String str){
      setInvoked(true);
      return super.accept(file,str);
    }
    public boolean isInvoked(){
      return this.invoked;
    }
    public void setInvoked(    final boolean invoked){
      this.invoked=invoked;
    }
    public void reset(){
      setInvoked(false);
    }
  }
class TesterFalseFileFilter extends FalseFileFilter {
    private static final long serialVersionUID=-3603047664010401872L;
    private boolean invoked;
    @Override public boolean accept(    final File file){
      setInvoked(true);
      return super.accept(file);
    }
    @Override public boolean accept(    final File file,    final String str){
      setInvoked(true);
      return super.accept(file,str);
    }
    public boolean isInvoked(){
      return this.invoked;
    }
    public void setInvoked(    final boolean invoked){
      this.invoked=invoked;
    }
    public void reset(){
      setInvoked(false);
    }
  }
}
