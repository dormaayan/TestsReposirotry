public class AndFileFilterTestCase extends ConditionalFileFilterAbstractTestCase {
  private static final String DEFAULT_WORKING_PATH="./AndFileFilterTestCase/";
  private static final String WORKING_PATH_NAME_PROPERTY_KEY=AndFileFilterTestCase.class.getName() + ".workingDirectory";
  private List<List<IOFileFilter>> testFilters;
  private List<boolean[]> testTrueResults;
  private List<boolean[]> testFalseResults;
  private List<Boolean> testFileResults;
  private List<Boolean> testFilenameResults;
  @Override protected IOFileFilter buildFilterUsingAdd(  final List<IOFileFilter> filters){
    final AndFileFilter filter=new AndFileFilter();
    for (    final IOFileFilter filter1 : filters) {
      filter.addFileFilter(filter1);
    }
    return filter;
  }
  @Override protected IOFileFilter buildFilterUsingConstructor(  final List<IOFileFilter> filters){
    return new AndFileFilter(filters);
  }
  @Override protected ConditionalFileFilter getConditionalFileFilter(){
    return new AndFileFilter();
  }
  @Override protected String getDefaultWorkingPath(){
    return DEFAULT_WORKING_PATH;
  }
  @Override protected List<boolean[]> getFalseResults(){
    return this.testFalseResults;
  }
  @Override protected List<Boolean> getFileResults(){
    return this.testFileResults;
  }
  @Override protected List<Boolean> getFilenameResults(){
    return this.testFilenameResults;
  }
  @Override protected List<List<IOFileFilter>> getTestFilters(){
    return this.testFilters;
  }
  @Override protected List<boolean[]> getTrueResults(){
    return this.testTrueResults;
  }
  @Override protected String getWorkingPathNamePropertyKey(){
    return WORKING_PATH_NAME_PROPERTY_KEY;
  }
  @Before public void setUpTestFilters(){
    this.testFilters=new ArrayList<>();
    this.testTrueResults=new ArrayList<>();
    this.testFalseResults=new ArrayList<>();
    this.testFileResults=new ArrayList<>();
    this.testFilenameResults=new ArrayList<>();
{
      testFilters.add(0,null);
      testTrueResults.add(0,null);
      testFalseResults.add(0,null);
      testFileResults.add(0,null);
      testFilenameResults.add(0,null);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(trueFilters[1]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      final boolean[] trueResults=new boolean[]{true,true,true};
      final boolean[] falseResults=new boolean[]{false,false,false};
      testFilters.add(1,filters);
      testTrueResults.add(1,trueResults);
      testFalseResults.add(1,falseResults);
      testFileResults.add(1,Boolean.TRUE);
      testFilenameResults.add(1,Boolean.TRUE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(falseFilters[1]);
      filters.add(trueFilters[1]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[2]);
      filters.add(falseFilters[3]);
      final boolean[] trueResults=new boolean[]{false,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(2,filters);
      testTrueResults.add(2,trueResults);
      testFalseResults.add(2,falseResults);
      testFileResults.add(2,Boolean.FALSE);
      testFilenameResults.add(2,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(trueFilters[1]);
      filters.add(falseFilters[1]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[2]);
      filters.add(falseFilters[3]);
      final boolean[] trueResults=new boolean[]{true,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(3,filters);
      testTrueResults.add(3,trueResults);
      testFalseResults.add(3,falseResults);
      testFileResults.add(3,Boolean.FALSE);
      testFilenameResults.add(3,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(trueFilters[1]);
      filters.add(trueFilters[2]);
      filters.add(falseFilters[1]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[2]);
      filters.add(falseFilters[3]);
      final boolean[] trueResults=new boolean[]{true,true,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(4,filters);
      testTrueResults.add(4,trueResults);
      testFalseResults.add(4,falseResults);
      testFileResults.add(4,Boolean.FALSE);
      testFilenameResults.add(4,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(falseFilters[1]);
      filters.add(trueFilters[1]);
      filters.add(falseFilters[2]);
      filters.add(falseFilters[3]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      final boolean[] trueResults=new boolean[]{false,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(5,filters);
      testTrueResults.add(5,trueResults);
      testFalseResults.add(5,falseResults);
      testFileResults.add(5,Boolean.FALSE);
      testFilenameResults.add(5,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(trueFilters[1]);
      filters.add(falseFilters[1]);
      filters.add(falseFilters[2]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[3]);
      final boolean[] trueResults=new boolean[]{true,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(6,filters);
      testTrueResults.add(6,trueResults);
      testFalseResults.add(6,falseResults);
      testFileResults.add(6,Boolean.FALSE);
      testFilenameResults.add(6,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(falseFilters[1]);
      filters.add(falseFilters[2]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[3]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      final boolean[] trueResults=new boolean[]{false,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(7,filters);
      testTrueResults.add(7,trueResults);
      testFalseResults.add(7,falseResults);
      testFileResults.add(7,Boolean.FALSE);
      testFilenameResults.add(7,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(trueFilters[1]);
      filters.add(trueFilters[2]);
      filters.add(trueFilters[3]);
      filters.add(falseFilters[1]);
      final boolean[] trueResults=new boolean[]{true,true,true};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(8,filters);
      testTrueResults.add(8,trueResults);
      testFalseResults.add(8,falseResults);
      testFileResults.add(8,Boolean.FALSE);
      testFilenameResults.add(8,Boolean.FALSE);
    }
{
      final List<IOFileFilter> filters=new ArrayList<>();
      filters.add(falseFilters[1]);
      filters.add(falseFilters[2]);
      filters.add(falseFilters[3]);
      final boolean[] trueResults=new boolean[]{false,false,false};
      final boolean[] falseResults=new boolean[]{true,false,false};
      testFilters.add(9,filters);
      testTrueResults.add(9,trueResults);
      testFalseResults.add(9,falseResults);
      testFileResults.add(9,Boolean.FALSE);
      testFilenameResults.add(9,Boolean.FALSE);
    }
  }
}
