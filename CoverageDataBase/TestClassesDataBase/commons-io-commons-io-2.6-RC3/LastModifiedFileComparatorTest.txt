/** 
 * Test case for  {@link LastModifiedFileComparator}.
 */
public class LastModifiedFileComparatorTest extends ComparatorAbstractTestCase {
  @Before public void setUp() throws Exception {
    comparator=(AbstractFileComparator)LastModifiedFileComparator.LASTMODIFIED_COMPARATOR;
    reverse=LastModifiedFileComparator.LASTMODIFIED_REVERSE;
    final File dir=getTestDirectory();
    final File olderFile=new File(dir,"older.txt");
    if (!olderFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + olderFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output2=new BufferedOutputStream(new FileOutputStream(olderFile))){
      TestUtils.generateTestData(output2,0);
    }
     final File equalFile=new File(dir,"equal.txt");
    if (!equalFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + equalFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output1=new BufferedOutputStream(new FileOutputStream(equalFile))){
      TestUtils.generateTestData(output1,0);
    }
     do {
      TestUtils.sleepQuietly(300);
      equalFile.setLastModified(System.currentTimeMillis());
    }
 while (olderFile.lastModified() == equalFile.lastModified());
    final File newerFile=new File(dir,"newer.txt");
    if (!newerFile.getParentFile().exists()) {
      throw new IOException("Cannot create file " + newerFile + " as the parent directory does not exist");
    }
    try (final BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(newerFile))){
      TestUtils.generateTestData(output,0);
    }
     do {
      TestUtils.sleepQuietly(300);
      newerFile.setLastModified(System.currentTimeMillis());
    }
 while (equalFile.lastModified() == newerFile.lastModified());
    equalFile1=equalFile;
    equalFile2=equalFile;
    lessFile=olderFile;
    moreFile=newerFile;
  }
}
