public class CompositeRequestDataValueProcessorTest {
  private CompositeRequestDataValueProcessor compositeRequestDataValueProcessor;
  private HttpServletRequest request=new MockHttpServletRequest();
  RequestDataValueProcessorAdaptor requestDataValueProcessor=mock(RequestDataValueProcessorAdaptor.class);
  @Before public void setup(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor(requestDataValueProcessor);
  }
  @Test public void testProcessActionSameActionAndResult01(){
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString())).thenReturn("action");
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString(),anyString())).thenReturn("action");
    String result=compositeRequestDataValueProcessor.processAction(request,"action");
    assertThat(result,is("action"));
  }
  @Test public void testProcessActionDifferectActionAndResult01(){
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString())).thenReturn("other_action");
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString(),anyString())).thenReturn("other_action");
    String result=compositeRequestDataValueProcessor.processAction(request,"action");
    assertThat(result,is("other_action"));
  }
  @Test public void testProcessActionNoProcessors01(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor();
    String result=compositeRequestDataValueProcessor.processAction(request,"action");
    assertThat(result,is("action"));
  }
  @Test public void testProcessActionSameActionAndResult02(){
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString())).thenReturn("action");
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString(),anyString())).thenReturn("action");
    String result=compositeRequestDataValueProcessor.processAction(request,"action","method");
    assertThat(result,is("action"));
  }
  @Test public void testProcessActionDifferectActionAndResult02(){
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString())).thenReturn("other_action");
    when(requestDataValueProcessor.processAction((HttpServletRequest)(anyObject()),anyString(),anyString())).thenReturn("other_action");
    String result=compositeRequestDataValueProcessor.processAction(request,"action","method");
    assertThat(result,is("other_action"));
  }
  @Test public void testProcessActionNoProcessors02(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor();
    String result=compositeRequestDataValueProcessor.processAction(request,"action","method");
    assertThat(result,is("action"));
  }
  @Test public void testProcessFormFieldValueSameValueAndResult(){
    when(requestDataValueProcessor.processFormFieldValue((HttpServletRequest)(anyObject()),anyString(),anyString(),anyString())).thenReturn("value");
    String result=compositeRequestDataValueProcessor.processFormFieldValue(request,"","value","");
    assertThat(result,is("value"));
  }
  @Test public void testProcessFormFieldValueDifferentValueAndResult(){
    when(requestDataValueProcessor.processFormFieldValue((HttpServletRequest)(anyObject()),anyString(),anyString(),anyString())).thenReturn("other_value");
    String result=compositeRequestDataValueProcessor.processFormFieldValue(request,"","value","");
    assertThat(result,is("other_value"));
  }
  @Test public void testProcessFormFieldValueNoProcessors(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor();
    String result=compositeRequestDataValueProcessor.processFormFieldValue(request,"","value","");
    assertThat(result,is("value"));
  }
  @Test public void testGetExtraHiddenFieldsNullMapFromProcessorResult(){
    when(requestDataValueProcessor.getExtraHiddenFields((HttpServletRequest)(anyObject()))).thenReturn(null);
    Map<String,String> map=compositeRequestDataValueProcessor.getExtraHiddenFields(request);
    assertNotNull(map);
  }
  @Test public void testGetExtraHiddenFieldsNotNullMapFromProcessorResult(){
    when(requestDataValueProcessor.getExtraHiddenFields((HttpServletRequest)(anyObject()))).thenReturn(new HashMap<String,String>());
    Map<String,String> map=compositeRequestDataValueProcessor.getExtraHiddenFields(request);
    assertNotNull(map);
  }
  @Test public void testGetExtraHiddenFieldsNoProcessors(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor();
    Map<String,String> map=compositeRequestDataValueProcessor.getExtraHiddenFields(request);
    assertNotNull(map);
  }
  @Test public void testProcessUrlSameUrlAndResult(){
    when(requestDataValueProcessor.processUrl((HttpServletRequest)(anyObject()),anyString())).thenReturn("http://localhost:8080/test");
    String result=compositeRequestDataValueProcessor.processUrl(request,"http://localhost:8080/test");
    assertThat(result,is("http://localhost:8080/test"));
  }
  @Test public void testProcessUrlDifferentUrlAndResult(){
    when(requestDataValueProcessor.processUrl((HttpServletRequest)(anyObject()),anyString())).thenReturn("http://localhost:9999/test");
    String result=compositeRequestDataValueProcessor.processUrl(request,"http://localhost:8080/test");
    assertThat(result,is("http://localhost:9999/test"));
  }
  @Test public void testProcessUrlNoProcessors(){
    compositeRequestDataValueProcessor=new CompositeRequestDataValueProcessor();
    String result=compositeRequestDataValueProcessor.processUrl(request,"http://localhost:8080/test");
    assertThat(result,is("http://localhost:8080/test"));
  }
}
