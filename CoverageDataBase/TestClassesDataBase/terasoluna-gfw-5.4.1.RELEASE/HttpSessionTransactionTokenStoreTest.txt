/** 
 * Test class for HttpSessionTransactionTokenStore
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"classpath:test-context.xml"}) public class HttpSessionTransactionTokenStoreTest {
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  @Autowired ApplicationContext applicationContext;
  @Autowired ConfigurableApplicationContext context;
  HttpSessionTransactionTokenStore store;
  @Before public void setUp() throws Exception {
    request=new MockHttpServletRequest();
    response=new MockHttpServletResponse();
    ServletRequestAttributes attributes=new ServletRequestAttributes(request);
    RequestContextHolder.setRequestAttributes(attributes);
  }
  /** 
 * tokenHolder is null
 */
  @Test public void testGetAndClear01(){
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken token=new TransactionToken("TransactionToken");
    store=new HttpSessionTransactionTokenStore();
    String actuals=store.getAndClear(token);
    assertNull(actuals);
  }
  /** 
 * tokenHolder is not null
 */
  @Test public void testGetAndClear02(){
    HttpSession session=new MockHttpSession();
    TransactionToken token=new TransactionToken("tokenName","tokenKey","tokenValue");
    session.setAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + token.getTokenName() + token.getTokenKey(),token);
    request.setSession(session);
    store=new HttpSessionTransactionTokenStore();
    store.store(token);
    String actuals=store.getAndClear(token);
    assertThat(actuals,is(token.getTokenValue()));
    assertNotNull(session.getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + token.getTokenName() + token.getTokenKey()));
  }
  @Test(expected=IllegalArgumentException.class) public void testGetAndClear_tokenIsNull() throws Exception {
    try {
      store=new HttpSessionTransactionTokenStore();
      store.getAndClear(null);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("token must not be null"));
      throw e;
    }
  }
  @Test public void testRemove(){
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken token=new TransactionToken("tokenName","tokenKey","tokenValue");
    store=new HttpSessionTransactionTokenStore();
    store.store(token);
    store.remove(token);
    assertNull(session.getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + token.getTokenName() + token.getTokenKey()));
  }
  @Test(expected=IllegalArgumentException.class) public void testRemove_tokenIsNull() throws Exception {
    try {
      store=new HttpSessionTransactionTokenStore();
      store.remove(null);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("token must not be null"));
      throw e;
    }
  }
  /** 
 * create a new Token key (stored token is as it is the same as sizePerTokenName)
 */
  @Test public void testCreateAndReserveTokenKey_storedToken_is_as_same_as_sizePerTokenName() throws InterruptedException {
    store=new HttpSessionTransactionTokenStore(4,4);
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
    store.store(tokenA);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
    store.store(tokenB);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
    store.store(tokenC);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenD=new TransactionToken("tokenName","tokenKeyD","tokenValueD");
    store.store(tokenD);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
    store.store(token1);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
    store.store(token2);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
    store.store(token3);
    String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
    Enumeration<String> enumeration=session.getAttributeNames();
    while (enumeration.hasMoreElements()) {
      System.out.println(enumeration.nextElement());
    }
    assertNotNull(actual);
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenD)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
  }
  /** 
 * create a new Token key (stored token is as it is the same as sizePerTokenName)
 */
  @Test public void testCreateAndReserveTokenKey_storedToken_is_greater_than_sizePerTokenName() throws InterruptedException {
    store=new HttpSessionTransactionTokenStore(4,4);
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
    store.store(tokenA);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
    store.store(tokenB);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
    store.store(tokenC);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenD=new TransactionToken("tokenName","tokenKeyD","tokenValueE");
    store.store(tokenD);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenE=new TransactionToken("tokenName","tokenKeyE","tokenValueD");
    store.store(tokenE);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
    store.store(token1);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
    store.store(token2);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
    store.store(token3);
    String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
    Enumeration<String> enumeration=session.getAttributeNames();
    while (enumeration.hasMoreElements()) {
      System.out.println(enumeration.nextElement());
    }
    assertNotNull(actual);
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenD)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenE)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
  }
  /** 
 * create a new Token key (stored token is as it is the same as sizePerTokenName)
 */
  @Test public void testCreateAndReserveTokenKey_storedToken_is_greater_than_sizePerTokenName2() throws InterruptedException {
    store=new HttpSessionTransactionTokenStore(4,4);
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
    store.store(tokenA);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
    store.store(tokenB);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
    store.store(tokenC);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenD=new TransactionToken("tokenName","tokenKeyD","tokenValueD");
    store.store(tokenD);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenE=new TransactionToken("tokenName","tokenKeyE","tokenValueE");
    store.store(tokenE);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken tokenF=new TransactionToken("tokenName","tokenKeyF","tokenValueF");
    store.store(tokenF);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
    store.store(token1);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
    store.store(token2);
    TimeUnit.MILLISECONDS.sleep(1);
    TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
    store.store(token3);
    String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
    Enumeration<String> enumeration=session.getAttributeNames();
    while (enumeration.hasMoreElements()) {
      System.out.println(enumeration.nextElement());
    }
    assertNotNull(actual);
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(nullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenD)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenE)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenF)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
  }
  /** 
 * create a new Token key (stored token is less than sizePerTokenName)
 */
  @Test public void testCreateAndReserveTokenKey_storedToken_isLessThan_sizePerTokenName(){
    store=new HttpSessionTransactionTokenStore(5);
    HttpSession session=new MockHttpSession();
    request.setSession(session);
    TransactionToken tokenA=new TransactionToken("tokenName","tokenKeyA","tokenValueA");
    store.store(tokenA);
    TransactionToken tokenB=new TransactionToken("tokenName","tokenKeyB","tokenValueB");
    store.store(tokenB);
    TransactionToken tokenC=new TransactionToken("tokenName","tokenKeyC","tokenValueC");
    store.store(tokenC);
    TransactionToken token1=new TransactionToken("tokenName1","tokenKey1","tokenValue1");
    store.store(token1);
    TransactionToken token2=new TransactionToken("tokenName2","tokenKey2","tokenValue2");
    store.store(token2);
    TransactionToken token3=new TransactionToken("tokenName3","tokenKey3","tokenValue3");
    store.store(token3);
    String actual=store.createAndReserveTokenKey(tokenA.getTokenName());
    assertNotNull(actual);
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenA)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenB)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(tokenC)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token1)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token2)),is(notNullValue()));
    assertThat(session.getAttribute(store.createSessionAttributeName(token3)),is(notNullValue()));
  }
  @Test(expected=IllegalStateException.class) public void testCreateAndReserveTokenKey_generate_failed() throws Exception {
    store=new HttpSessionTransactionTokenStore(new TokenStringGenerator(){
      @Override public String generate(      String seed){
        return "xxxxx";
      }
    }
,5,5);
    MockHttpSession session=new MockHttpSession();
    request.setSession(session);
    session.setAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + "foo" + TransactionToken.TOKEN_STRING_SEPARATOR+ "xxxxx","already in!");
    try {
      store.createAndReserveTokenKey("foo");
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("token key generation failed within retry count 5"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testStore_token_isNull() throws Exception {
    try {
      store=new HttpSessionTransactionTokenStore(5);
      store.store(null);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("token must not be null"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testConstructor_generator_isNull() throws Exception {
    try {
      new HttpSessionTransactionTokenStore(null,10,10);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("generator must not be null"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testConstructor_transactionTokensPerTokenName_isZero() throws Exception {
    try {
      new HttpSessionTransactionTokenStore(new TokenStringGenerator(),0,1);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("transactionTokenSizePerTokenName must be greater than 0"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testConstructor_transactionTokensPerTokenName_isNegative() throws Exception {
    try {
      new HttpSessionTransactionTokenStore(new TokenStringGenerator(),-1,0);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("transactionTokenSizePerTokenName must be greater than 0"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testConstructor_retryCreateTokenName_isZero() throws Exception {
    try {
      new HttpSessionTransactionTokenStore(new TokenStringGenerator(),1,0);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("retryCreateTokenName must be greater than 0"));
      throw e;
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testConstructor_retryCreateTokenName_isNegative() throws Exception {
    try {
      new HttpSessionTransactionTokenStore(new TokenStringGenerator(),1,-1);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),is("retryCreateTokenName must be greater than 0"));
      throw e;
    }
  }
}
