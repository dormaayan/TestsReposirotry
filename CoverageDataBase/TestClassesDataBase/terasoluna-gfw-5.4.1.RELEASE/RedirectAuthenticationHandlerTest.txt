@SuppressWarnings("deprecation") public class RedirectAuthenticationHandlerTest {
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  Authentication auth;
  @Before public void setUp() throws Exception {
    request=new MockHttpServletRequest();
    request.setContextPath("/foo");
    response=new MockHttpServletResponse();
    auth=mock(Authentication.class);
  }
  /** 
 * Redirect attribute name was changed
 */
  @Test public void testOnAuthenticationSuccess_SetConstParam() throws Exception {
    String changeAttrName="hoge";
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.setTargetUrlParameter(changeAttrName);
    redireHandler.afterPropertiesSet();
    String redirectURI="/foo/test/terasoluna?";
    request.setParameter(changeAttrName,redirectURI);
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(redirectURI));
  }
  @Test public void testOnAuthenticationSuccessTargetUrlParameterIsNull() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.afterPropertiesSet();
    String expectedRedirectURL="/foo/";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  /** 
 * redirected in the name of the default attributes
 */
  @Test public void testOnAuthenticationSuccess_SetRedirectTo() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.afterPropertiesSet();
    String redirectURI="/foo/test/terasoluna?";
    request.setParameter("redirectTo",redirectURI);
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(redirectURI));
  }
  /** 
 * parameter is not available, the redirect in the default path
 */
  @Test public void testOnAuthenticationSuccess_NotSetRedirectTo() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.afterPropertiesSet();
    String expectedRedirectURL="/foo/";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  /** 
 * parameter is blank, the redirect in the default path
 */
  @Test public void testOnAuthenticationSuccess_SetRedirectToBlank() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.afterPropertiesSet();
    String redirectURI="";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="/foo/";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  /** 
 * parameter is blank, the redirect in the default path
 */
  @Test public void testOnAuthenticationSuccess_SetAbsolutePath() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.afterPropertiesSet();
    String redirectURI="http://localhost/foo/bar";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="bar";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  @Test public void testOnAuthenticationSuccess_SetNullRedirectToRedirectStrategy() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    String redirectURI="http://localhost/foo/bar";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="http://localhost/foo/bar";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  @Test public void testOnAuthenticationSuccess_SetNullRedirectToRedirectStrategyAndSetContextRelative() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    DefaultRedirectStrategy redirectStrategy=new DefaultRedirectStrategy();
    redirectStrategy.setContextRelative(true);
    redireHandler.setRedirectStrategy(redirectStrategy);
    String redirectURI="http://localhost/foo/bar";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="bar";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  /** 
 * test if default path is returned when illegal redirect path is set
 */
  @Test public void testOnAuthenticationSuccess_SetIllegalUrlWhenUseDefaultRedirectToRedirectStrategy() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    String redirectURI="http://google.com";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="http://google.com";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
  @Test public void testOnAuthenticationSuccess_SetCustomeRedirectToRedirectStrategy() throws Exception {
    RedirectAuthenticationHandler redireHandler=new RedirectAuthenticationHandler();
    redireHandler.setRedirectToRedirectStrategy(new RedirectStrategy(){
      @Override public void sendRedirect(      HttpServletRequest request,      HttpServletResponse response,      String url) throws IOException {
        response.sendRedirect("http://google.com");
      }
    }
);
    redireHandler.afterPropertiesSet();
    String redirectURI="/foo/bar";
    request.setParameter("redirectTo",redirectURI);
    String expectedRedirectURL="http://google.com";
    redireHandler.onAuthenticationSuccess(request,response,auth);
    assertThat(response.getRedirectedUrl(),is(expectedRedirectURL));
  }
}
