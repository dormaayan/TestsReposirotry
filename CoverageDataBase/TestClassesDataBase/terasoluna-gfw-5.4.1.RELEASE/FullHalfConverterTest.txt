public class FullHalfConverterTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void unsymmetric(){
    FullHalfConverter converter=new FullHalfConverter(new FullHalfPairsBuilder().pair("‐","-").pair("—","-").pair("ー","-").pair("－","-").build());
    assertThat(converter.toHalfwidth("‐—ー－"),is("----"));
    assertThat(converter.toFullwidth("----"),is("‐‐‐‐"));
  }
  @Test public void unsymmetric_reversed(){
    FullHalfConverter converter=new FullHalfConverter(new FullHalfPairsBuilder().pair("‐","-").pair("‐","—").pair("‐","ｰ").build());
    assertThat(converter.toHalfwidth("‐‐‐"),is("---"));
    assertThat(converter.toFullwidth("-—ｰ"),is("‐‐‐"));
  }
  @Test public void testWithCustomAppenadablePredicate(){
    FullHalfConverter converter=new FullHalfConverter(new FullHalfPairsBuilder().pair("バ","ﾊﾞ").pair("ハ","ﾊ").pair("゛","ﾞ").pair("゜","ﾟ").appendablePredicate(new FullHalfPairs.AppendablePredicate(){
      @Override public boolean isAppendable(      char c){
        return c == 'ﾞ';
      }
    }
).build());
    assertThat(converter.toFullwidth("ﾊﾞ"),is("バ"));
    assertThat(converter.toFullwidth("ﾊﾟ"),is("ハ゜"));
  }
  @Test public void testNull(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("pairs must not be null.");
    new FullHalfConverter(null);
  }
}
