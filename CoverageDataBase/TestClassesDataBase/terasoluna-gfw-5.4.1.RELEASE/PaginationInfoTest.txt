public class PaginationInfoTest {
  private Page<String> page;
  private final String pathTmpl="terasoluna";
  private final String queryTmpl="value=test&page={page}&size={size}";
  @Before public void setup(){
    PageRequest pageable=new PageRequest(5,5);
    List<String> mockedList=new ArrayList<String>();
    mockedList.add("terasoluna");
    mockedList.add("terasoluna");
    mockedList.add("terasoluna");
    mockedList.add("terasoluna");
    mockedList.add("terasoluna");
    page=new PageImpl<String>(mockedList,pageable,31L);
  }
  /** 
 * Sort Null set
 */
  @Test public void testCreateAttributeMap_SortNull(){
    int page=1;
    int size=1;
    Map<String,Object> attributesMap=PaginationInfo.createAttributeMap(page,size,null);
    assertThat(Integer.valueOf(attributesMap.get("page").toString()),is(page));
    assertThat(Integer.valueOf(attributesMap.get("size").toString()),is(size));
    assertNull(attributesMap.get("sortOrderProperty"));
    assertNull(attributesMap.get("sortOrderDirection"));
  }
  /** 
 * Sort Set
 */
  @Test public void testCreateAttributeMap_SortSet(){
    int page=1;
    int size=1;
    Sort mockedSort=new Sort(Direction.DESC,"id");
    Map<String,Object> attributesMap=PaginationInfo.createAttributeMap(page,size,mockedSort);
    assertThat(Integer.valueOf(attributesMap.get("page").toString()),is(page));
    assertThat(Integer.valueOf(attributesMap.get("size").toString()),is(size));
    assertThat(attributesMap.get("sortOrderProperty").toString(),is("id"));
    assertThat(attributesMap.get("sortOrderDirection").toString(),is("DESC"));
  }
  @Test public void testCreateAttributeMapfail(){
    int page=1;
    int size=1;
    Sort sort=mock(Sort.class);
    Iterator<Order> orders=mock(Iterator.class);
    when(sort.iterator()).thenReturn(orders);
    when(orders.hasNext()).thenReturn(false);
    Map<String,Object> attributesMap=PaginationInfo.createAttributeMap(page,size,sort);
    assertThat(Integer.valueOf(attributesMap.get("page").toString()),is(page));
    assertThat(Integer.valueOf(attributesMap.get("size").toString()),is(size));
    assertNull(attributesMap.get("sortOrderProperty"));
    assertNull(attributesMap.get("sortOrderDirection"));
  }
  @Test public void testGetCurrent(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,10);
    int currentNum=info.getCurrent();
    assertThat(currentNum,is(5));
  }
  @Test public void testGetPathTmpl(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,10);
    String path=info.getPathTmpl();
    assertThat(path,is(pathTmpl));
  }
  @Test public void testGetQueryTmpl(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,10);
    String query=info.getQueryTmpl();
    assertThat(query,is(queryTmpl));
  }
  @Test public void testGetMaxDisplayCount(){
    int maxDisplayCount=0;
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,maxDisplayCount);
    int getMaxCountNum=info.getMaxDisplayCount();
    assertThat(getMaxCountNum,is(maxDisplayCount));
  }
  @Test public void testGetPageUri(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,10);
    UriComponents pathQueryStr=info.getPageUri();
    String expectedUri=pathTmpl + "?" + queryTmpl;
    assertThat(pathQueryStr.toUriString(),is(expectedUri));
  }
  @Test public void testGetFirstUrl(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    String expectedURL="terasoluna?value=test&page=0&size=5";
    String firstURL=info.getFirstUrl();
    assertThat(firstURL,is(expectedURL));
  }
  @Test public void testGetLastUrl(){
    List<String> mockedList=new ArrayList<String>();
    PageRequest pageable=new PageRequest(2,2);
    page=new PageImpl<String>(mockedList,pageable,4L);
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    String expectedURL="terasoluna?value=test&page=1&size=2";
    String lastURL=info.getLastUrl();
    assertThat(lastURL,is(expectedURL));
  }
  @Test public void testGetPreviousUrl(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    String expectedURL="terasoluna?value=test&page=4&size=5";
    String previousURL=info.getPreviousUrl();
    assertThat(previousURL,is(expectedURL));
  }
  @Test public void testGetNextUrl(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    String expectedURL="terasoluna?value=test&page=6&size=5";
    String nextURL=info.getNextUrl();
    assertThat(nextURL,is(expectedURL));
  }
  /** 
 * current page not first
 */
  @Test public void testIsFirstPage_NotFirst(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isFirstPage();
    assertFalse(result);
  }
  /** 
 * current page first
 */
  @Test public void testIsFirstPage_First(){
    List<String> mockedList=new ArrayList<String>();
    page=new PageImpl<String>(mockedList);
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isFirstPage();
    assertTrue(result);
  }
  /** 
 * current page not last
 */
  @Test public void testIsLastPage_NotLast(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isLastPage();
    assertFalse(result);
  }
  /** 
 * current page last
 */
  @Test public void testIsLastPage_Last(){
    List<String> mockedList=new ArrayList<String>();
    PageRequest pageable=new PageRequest(2,2);
    page=new PageImpl<String>(mockedList,pageable,6L);
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isLastPage();
    assertTrue(result);
  }
  /** 
 * parameter number current page
 */
  @Test public void testIsCurrent_Current(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isCurrent(5);
    assertTrue(result);
  }
  /** 
 * parameter number not current page
 */
  @Test public void testIsCurrent_NotCurrent(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,0);
    boolean result=info.isCurrent(1);
    assertFalse(result);
  }
  /** 
 * total pages is smaller than max display count
 */
  @Test public void testGetBeginAndEnd_totalPagesIsSmallerThanMaxDisplayCount(){
    int maxDisplayCount=10;
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,maxDisplayCount);
    BeginAndEnd endNumBig=info.getBeginAndEnd();
    assertThat(endNumBig.getBegin(),is(0));
    assertThat(endNumBig.getEnd(),is(6));
  }
  /** 
 * total pages is greater than max display count
 */
  @Test public void testGetBeginAndEnd_totalPagesIsGreaterThanMaxDisplayCount(){
    int maxDisplayCount=3;
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,maxDisplayCount);
    BeginAndEnd endNumBig=info.getBeginAndEnd();
    assertThat(endNumBig.getBegin(),is(4));
    assertThat(endNumBig.getEnd(),is(6));
  }
  /** 
 * max display count is zero (page link that move to a specific page is not displayed)
 */
  @Test public void testGetBeginAndEnd_maxDisplayCountIsZero(){
    int maxDisplayCount=0;
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,maxDisplayCount);
    BeginAndEnd endNumBig=info.getBeginAndEnd();
    assertThat(endNumBig.getBegin(),is(5));
    assertThat(endNumBig.getEnd(),is(4));
  }
  @Test public void issue12_testGetPageUrl_criteriaQueryIsEmpty(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,"",false,10);
    String expectedURL="terasoluna?value=test&page=0&size=5";
    assertThat(info.getPageUrl(0),is(expectedURL));
  }
  @Test public void issue12_testGetPageUrl_criteriaQueryIsSpecified(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,"a=%2B",false,10);
    String expectedURL="terasoluna?value=test&page=0&size=5&a=%2B";
    assertThat(info.getPageUrl(0),is(expectedURL));
  }
  @Test public void issue12_testGetPageUrl_criteriaQueryIsSpecified_startWithQuestionMark(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,"?a=%2B",false,10);
    String expectedURL="terasoluna?value=test&page=1&size=5&a=%2B";
    assertThat(info.getPageUrl(1),is(expectedURL));
    assertThat(info.getCriteriaQuery(),is("a=%2B"));
  }
  @Test public void issue12_testGetPageUrl_criteriaQueryIsSpecified_startWithAndMark(){
    PaginationInfo info=new PaginationInfo(page,pathTmpl,queryTmpl,"&a=%2B",false,10);
    String expectedURL="terasoluna?value=test&page=2&size=5&a=%2B";
    assertThat(info.getPageUrl(2),is(expectedURL));
    assertThat(info.getCriteriaQuery(),is("a=%2B"));
  }
  @Test public void issue12_testGetPageUrl_criteriaQueryIsSpecified_queryTmplNotSpecified(){
    PaginationInfo info=new PaginationInfo(page,"/{page}/{size}",null,"a=<>&\"'a1",false,10);
    String expectedURL="/3/5?a=&lt;&gt;&amp;&quot;&#39;a1";
    assertThat(info.getPageUrl(3),is(expectedURL));
  }
  @Test public void issue12_testGetPageUrl_disableHtmlEscapeOfCriteriaQueryIsTrue_queryTmplNotSpecified(){
    PaginationInfo info=new PaginationInfo(page,"/{page}/{size}",null,"a=<>&\"'a1",true,10);
    String expectedURL="/3/5?a=<>&\"'a1";
    assertThat(info.getPageUrl(3),is(expectedURL));
  }
}
