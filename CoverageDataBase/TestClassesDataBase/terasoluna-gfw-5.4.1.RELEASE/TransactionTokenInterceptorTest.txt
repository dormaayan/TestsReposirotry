@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"classpath:test-context.xml"}) public class TransactionTokenInterceptorTest {
  @Autowired ConfigurableApplicationContext context;
  TransactionTokenInterceptor interceptor;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  @Before public void setUp() throws Exception {
    request=new MockHttpServletRequest();
    request.setRequestURI("/token/first");
    request.setMethod("GET");
    response=new MockHttpServletResponse();
    ServletRequestAttributes attributes=new ServletRequestAttributes(request);
    RequestContextHolder.setRequestAttributes(attributes);
    interceptor=new TransactionTokenInterceptor();
  }
  @After public void tearDown() throws Exception {
  }
  @Test public void testPreHandleIncorrectHandler() throws Exception {
    boolean result=interceptor.preHandle(request,response,null);
    assertTrue(result);
  }
  @Test public void testPreHandleWithoutTokenValidate() throws Exception {
    boolean result=interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("first",SampleForm.class,Model.class)));
    assertTrue(result);
  }
  @Test public void testPreHandleWithTokenValidate() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
    tokenStore.store(inputToken);
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    boolean result=interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)));
    assertTrue(result);
    assertNotNull(request.getAttribute(TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME));
  }
  @Test(expected=InvalidTransactionTokenException.class) public void testPreHandleWithTokenValidateFail() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)));
  }
  @Test public void testPreHandleTokenIsSentInHiddenFieldAtBeginPhase() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("tokenName1","111","222");
    tokenStore.store(inputToken);
    assertThat(tokenStore.getSession().getAttribute(tokenStore.createSessionAttributeName(inputToken)),is(notNullValue()));
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"tokenName1~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("first",SampleForm.class,Model.class)));
    assertThat(tokenStore.getSession().getAttribute(tokenStore.createSessionAttributeName(inputToken)),is(nullValue()));
  }
  @Test public void testPreHandleValidTokenOnCheck() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
    tokenStore.store(inputToken);
    assertThat(tokenStore.getSession().getAttribute(tokenStore.createSessionAttributeName(inputToken)),is(notNullValue()));
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    boolean result=interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("fifth",SampleForm.class,Model.class)));
    assertTrue(result);
    TransactionTokenContext transactionTokenCtx=(TransactionTokenContext)request.getAttribute(TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME);
    TransactionToken token=transactionTokenCtx.getReceivedToken();
    assertNotNull(token);
    assertThat(token.getTokenName(),is("testTokenAttr"));
    assertThat(token.getTokenKey(),is("111"));
    assertThat(token.getTokenValue(),is("222"));
  }
  @Test public void testValidateToken01(){
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("tokenName1","111","222");
    tokenStore.store(inputToken);
    TransactionTokenInfo tokenInfo=new TransactionTokenInfo("tokenName1",TransactionTokenType.IN);
    boolean result=interceptor.validateToken(inputToken,tokenStore,tokenInfo);
    assertTrue(result);
    result=interceptor.validateToken(inputToken,tokenStore,tokenInfo);
    assertFalse(result);
  }
  @Test public void testValidateToken02(){
    HttpSessionTransactionTokenStore tokenStore=mock(HttpSessionTransactionTokenStore.class);
    TransactionToken inputToken=new TransactionToken("tokenName1","111","222");
    TransactionTokenInfo tokenInfo=new TransactionTokenInfo("tokenName1",TransactionTokenType.IN);
    when(tokenStore.getAndClear((TransactionToken)anyObject())).thenReturn("differentValue");
    boolean result=interceptor.validateToken(inputToken,tokenStore,tokenInfo);
    assertFalse(result);
  }
  @Test public void testNonParameterizedConstructor(){
    interceptor=new TransactionTokenInterceptor();
    assertNotNull(interceptor);
  }
  @Test public void testIntConstructor(){
    interceptor=new TransactionTokenInterceptor(10);
    assertNotNull(interceptor);
  }
  @Test public void testCreateReceivedToken(){
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"a~b~c");
    TransactionToken token=interceptor.createReceivedToken(request);
    assertThat(token.getTokenName(),is("a"));
  }
  @Test public void testRemoveEmptyToken(){
    try {
      interceptor.removeToken(new TransactionToken(""));
      interceptor.removeToken(new TransactionToken("a~b~c"));
    }
 catch (    Exception ex) {
      fail();
    }
  }
  @Test public void testPostHandleIncorrectHandler() throws Exception {
    try {
      interceptor.postHandle(request,response,null,null);
    }
 catch (    Exception ex) {
      fail();
    }
  }
  @Test public void testPostHandleWithRemoveToken() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
    tokenStore.store(inputToken);
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)));
    interceptor.postHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)),null);
    assertNull(tokenStore.getSession().getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + inputToken.getTokenName() + "~"+ inputToken.getTokenKey()));
  }
  @Test public void testPostHandleWithCreateToken() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("tokenName1","111","222");
    tokenStore.store(inputToken);
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"tokenName1~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("first",SampleForm.class,Model.class)));
    interceptor.postHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)),null);
    assertNotNull(request.getAttribute(TransactionTokenInterceptor.NEXT_TOKEN_REQUEST_ATTRIBUTE_NAME));
    TransactionToken nextToken=(TransactionToken)request.getAttribute(TransactionTokenInterceptor.NEXT_TOKEN_REQUEST_ATTRIBUTE_NAME);
    assertNotNull(tokenStore.getSession().getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + nextToken.getTokenName() + "~"+ nextToken.getTokenKey()));
  }
  @Test public void testPostHandleWithUpdateToken() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
    tokenStore.store(inputToken);
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("second",SampleForm.class,Model.class,TransactionTokenContext.class)));
    interceptor.postHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)),null);
    assertNotNull(tokenStore.getSession().getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + inputToken.getTokenName() + "~"+ inputToken.getTokenKey()));
    assertNotNull(request.getAttribute(TransactionTokenInterceptor.NEXT_TOKEN_REQUEST_ATTRIBUTE_NAME));
  }
  @Test public void testPostHandleWithKeepToken() throws Exception {
    HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
    TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
    tokenStore.store(inputToken);
    request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
    interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
    interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("fifth",SampleForm.class,Model.class)));
    interceptor.postHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("fifth",SampleForm.class,Model.class)),null);
    TransactionToken nextToken=(TransactionToken)request.getAttribute(TransactionTokenInterceptor.NEXT_TOKEN_REQUEST_ATTRIBUTE_NAME);
    assertNotNull(nextToken);
    assertThat(nextToken.getTokenName(),is("testTokenAttr"));
    assertThat(nextToken.getTokenKey(),is("111"));
    assertThat(nextToken.getTokenValue(),is("222"));
    assertThat(tokenStore.getAndClear(nextToken),is("222"));
  }
  @Test public void testPostHandleWithNoneOperation() throws Exception {
    TransactionTokenContextImpl context=mock(TransactionTokenContextImpl.class);
    request.setAttribute(TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME,context);
    when(context.getReserveCommand()).thenReturn(TransactionTokenContextImpl.ReserveCommand.NONE);
    try {
      interceptor.postHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)),null);
    }
 catch (    Exception e) {
      fail();
    }
  }
  @Test public void testAfterCompletionWithoutException(){
    try {
      interceptor.afterCompletion(request,response,null,null);
    }
 catch (    Exception e) {
      fail();
    }
  }
  @Test public void testAfterCompletionWithException(){
    try {
      HttpSessionTransactionTokenStore tokenStore=new HttpSessionTransactionTokenStore();
      TransactionToken inputToken=new TransactionToken("testTokenAttr","111","222");
      tokenStore.store(inputToken);
      request.setParameter(TransactionTokenInterceptor.TOKEN_REQUEST_PARAMETER,"testTokenAttr~111~222");
      interceptor=new TransactionTokenInterceptor(new TokenStringGenerator(),new TransactionTokenInfoStore(),tokenStore);
      interceptor.preHandle(request,response,new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("third",SampleForm.class,Model.class)));
      assertNotNull(tokenStore.getSession().getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + inputToken.getTokenName() + "~"+ inputToken.getTokenKey()));
      Exception ex=new InvalidTransactionTokenException();
      interceptor.afterCompletion(request,response,null,ex);
      assertNull(tokenStore.getSession().getAttribute(HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + inputToken.getTokenName() + "~"+ inputToken.getTokenKey()));
    }
 catch (    Exception e) {
      fail();
    }
  }
  @Test public void testAfterCompletionWithExceptionHasNoTransactionTokenContextImpl(){
    try {
      interceptor.afterCompletion(request,response,null,new Exception());
    }
 catch (    Exception e) {
      fail();
    }
  }
}
