public class TransactionTokenInfoStoreTest {
  TransactionTokenInfoStore store;
  @Before public void setup(){
    store=new TransactionTokenInfoStore();
  }
  @Test public void testCreateTransactionTokenInfo01() throws Exception {
    HandlerMethod handlerMethod=new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("fourth",SampleForm.class,Model.class));
    TransactionTokenInfo tokenInfo=store.createTransactionTokenInfo(handlerMethod);
    assertNotNull(tokenInfo);
  }
  @Test public void testCreateTransactionTokenInfo02() throws Exception {
    HandlerMethod handlerMethod=new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("first",SampleForm.class,Model.class));
    TransactionTokenInfo tokenInfo=store.createTransactionTokenInfo(handlerMethod);
    assertNotNull(tokenInfo);
  }
  @Test public void testCreateTokenInfoName01() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=mock(TransactionTokenCheck.class);
    when(methodAnnotation.value()).thenReturn("test");
    when(classAnnotation.value()).thenReturn("test");
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testCreateTokenInfoName02() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=null;
    when(methodAnnotation.value()).thenReturn("test");
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testCreateTokenInfoName03() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=null;
    when(methodAnnotation.value()).thenReturn("");
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testCreateTokenInfoName04() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=null;
    when(methodAnnotation.value()).thenReturn(null);
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testCreateTokenInfoName05() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=mock(TransactionTokenCheck.class);
    when(methodAnnotation.value()).thenReturn("test");
    when(classAnnotation.value()).thenReturn("");
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testCreateTokenInfoName06() throws Exception {
    TransactionTokenCheck methodAnnotation=mock(TransactionTokenCheck.class);
    TransactionTokenCheck classAnnotation=mock(TransactionTokenCheck.class);
    when(methodAnnotation.value()).thenReturn("test");
    when(classAnnotation.value()).thenReturn(null);
    assertNotNull(store.createTokenName(classAnnotation,methodAnnotation));
  }
  @Test public void testGetTransactionTokenInfo() throws NoSuchMethodException, SecurityException {
    HandlerMethod handlerMethod=new HandlerMethod(new TransactionTokenSampleController(),TransactionTokenSampleController.class.getDeclaredMethod("first",SampleForm.class,Model.class));
    assertNotNull(store.getTransactionTokenInfo(handlerMethod));
  }
  @Test public void testNamespaceCreateTransactionTokenInfo() throws Exception {
    HandlerMethod handlerMethod=new HandlerMethod(new TransactionTokenSampleNamespaceController(),TransactionTokenSampleNamespaceController.class.getDeclaredMethod("first"));
    TransactionTokenInfo tokenInfo=store.createTransactionTokenInfo(handlerMethod);
    assertThat(tokenInfo.getTokenName(),containsString("testTokenAttrByNameSpace"));
  }
}
