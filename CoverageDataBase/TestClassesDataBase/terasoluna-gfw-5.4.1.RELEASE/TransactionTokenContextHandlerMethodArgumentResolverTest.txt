/** 
 * Test class for TransactionTokenContextHandlerMethodArgumentResolver
 */
public class TransactionTokenContextHandlerMethodArgumentResolverTest {
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
  }
  /** 
 * case of supportsParameter returns true
 */
  @Test public void testSupportsParameter01(){
    TransactionTokenContextHandlerMethodArgumentResolver resolver=new TransactionTokenContextHandlerMethodArgumentResolver();
    MethodParameter parameter=mock(MethodParameter.class);
    Mockito.<Class<?>>when(parameter.getParameterType()).thenReturn(TransactionTokenContext.class);
    boolean result=resolver.supportsParameter(parameter);
    assertThat(result,is(true));
  }
  /** 
 * case of supportsParameter returns false
 */
  @Test public void testSupportsParameter02(){
    TransactionTokenContextHandlerMethodArgumentResolver resolver=new TransactionTokenContextHandlerMethodArgumentResolver();
    MethodParameter parameter=mock(MethodParameter.class);
    Mockito.<Class<?>>when(parameter.getParameterType()).thenReturn(Object.class);
    boolean result=resolver.supportsParameter(parameter);
    assertThat(result,is(false));
  }
  /** 
 * case of resolveArgument
 */
  @Test public void testResolveArgument01(){
    TransactionTokenContextHandlerMethodArgumentResolver resolver=new TransactionTokenContextHandlerMethodArgumentResolver();
    MethodParameter parameter=mock(MethodParameter.class);
    ModelAndViewContainer mavContainer=mock(ModelAndViewContainer.class);
    NativeWebRequest webRequest=mock(NativeWebRequest.class);
    WebDataBinderFactory binderFactory=mock(WebDataBinderFactory.class);
    String str=new String("testResolveArgument01");
    when(webRequest.getAttribute(TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME,RequestAttributes.SCOPE_REQUEST)).thenReturn(str);
    Object result=null;
    try {
      result=resolver.resolveArgument(parameter,mavContainer,webRequest,binderFactory);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    assertThat(result,is(instanceOf(String.class)));
  }
}
