public class ExceptionLoggingFilterTest {
  /** 
 * instance of test target.
 */
  private ExceptionLoggingFilter testTarget;
  /** 
 * mock instance of http servlet requset.
 */
  private MockHttpServletRequest mockRequest;
  /** 
 * mock instance of http servlet response.
 */
  private MockHttpServletResponse mockResponse;
  /** 
 * mock instance of filter chain.
 */
  private FilterChain mockFilterChain;
  /** 
 * mock instance of exception logger.
 */
  private ExceptionLogger mockExceptionLogger;
  /** 
 * setup all test case.
 * @throws Exception
 */
  @Before public void setup() throws Exception {
    this.testTarget=new ExceptionLoggingFilter();
    this.mockExceptionLogger=spy(new ExceptionLogger());
    mockExceptionLogger.afterPropertiesSet();
    testTarget.setExceptionLogger(mockExceptionLogger);
    testTarget.afterPropertiesSet();
    this.mockRequest=new MockHttpServletRequest();
    this.mockResponse=new MockHttpServletResponse();
    this.mockFilterChain=mock(FilterChain.class);
  }
  @Test public void testDoFilter_normal() throws IOException, ServletException {
    testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    verify(mockFilterChain,times(1)).doFilter(mockRequest,mockResponse);
  }
  @Test public void testDoFilter_occur_ioexception() throws IOException, ServletException {
    IOException occurException=new IOException("io exception.");
    doThrow(occurException).when(mockFilterChain).doFilter(mockRequest,mockResponse);
    try {
      testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    }
 catch (    IOException e) {
      assertSame(occurException,e);
    }
    verify(mockExceptionLogger,times(1)).error(occurException);
  }
  @Test public void testDoFilter_occur_servletexception() throws IOException, ServletException {
    ServletException occurException=new ServletException("servlet exception.");
    doThrow(occurException).when(mockFilterChain).doFilter(mockRequest,mockResponse);
    try {
      testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    }
 catch (    ServletException e) {
      assertSame(occurException,e);
    }
    verify(mockExceptionLogger,times(1)).error(occurException);
  }
  @Test public void testDoFilter_occur_runtimeexception() throws IOException, ServletException {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    doThrow(occurException).when(mockFilterChain).doFilter(mockRequest,mockResponse);
    try {
      testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    }
 catch (    NullPointerException e) {
      assertSame(occurException,e);
    }
    verify(mockExceptionLogger,times(1)).error(occurException);
  }
  @Test public void testDoFilter_occur_error() throws IOException, ServletException {
    OutOfMemoryError occurError=new OutOfMemoryError("out of memory error.");
    doThrow(occurError).when(mockFilterChain).doFilter(mockRequest,mockResponse);
    try {
      testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    }
 catch (    OutOfMemoryError e) {
      assertSame(occurError,e);
    }
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testDoFilter_occur_ioexception_exceptionLogger_is_default() throws IOException, ServletException {
    testTarget=new ExceptionLoggingFilter();
    testTarget.afterPropertiesSet();
    this.mockExceptionLogger=spy(testTarget.getExceptionLogger());
    testTarget.setExceptionLogger(mockExceptionLogger);
    IOException occurException=new IOException("io exception.");
    doThrow(occurException).when(mockFilterChain).doFilter(mockRequest,mockResponse);
    try {
      testTarget.doFilter(mockRequest,mockResponse,mockFilterChain);
    }
 catch (    IOException e) {
      assertSame(occurException,e);
    }
    verify(mockExceptionLogger,times(1)).error(occurException);
  }
}
