public class FullHalfPairsBuilderTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void testFullIsNull(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("fullwidth must be 1 length string (fullwidth = null)");
    new FullHalfPairsBuilder().pair(null,"a").build();
  }
  @Test public void testFullIsEmptyString(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("fullwidth must be 1 length string (fullwidth = )");
    new FullHalfPairsBuilder().pair("","a").build();
  }
  @Test public void testFullIsTwoString(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("fullwidth must be 1 length string (fullwidth = aa)");
    new FullHalfPairsBuilder().pair("aa","a").build();
  }
  @Test public void testHalfIsNull(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("halfwidth must be 1 or 2 length string (halfwidth = null)");
    new FullHalfPairsBuilder().pair("a",null).build();
  }
  @Test public void testHalfIsEmptyString(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("halfwidth must be 1 or 2 length string (halfwidth = )");
    new FullHalfPairsBuilder().pair("a","").build();
  }
  @Test public void testHalfIsThreeString(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("halfwidth must be 1 or 2 length string (halfwidth = aaa)");
    new FullHalfPairsBuilder().pair("a","aaa").build();
  }
  @Test public void testSamePairIsIgnored(){
    Set<FullHalfPair> set=new FullHalfPairsBuilder().pair("ａ","a").pair("ａ","a").build().pairs();
    assertThat(set.size(),is(1));
  }
}
