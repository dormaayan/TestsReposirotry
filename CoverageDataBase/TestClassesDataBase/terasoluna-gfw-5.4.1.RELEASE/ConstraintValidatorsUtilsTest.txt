public class ConstraintValidatorsUtilsTest {
  @Test public void testConstraintValidatorsUtils() throws Exception {
    Constructor<ConstraintValidatorsUtils> constructor=ConstraintValidatorsUtils.class.getDeclaredConstructor();
    assertThat(constructor.isAccessible(),is(false));
    constructor.setAccessible(true);
    assertThat(constructor.newInstance(),notNullValue());
  }
  @Test public void testGetPropertyValueBeanAndPropertyNameNotNull() throws Exception {
    FooBean foo=new FooBean();
    foo.setBar("test");
    Object o=ConstraintValidatorsUtils.getPropertyValue(foo,"bar");
    assertThat(o,notNullValue());
  }
  @Test public void testGetPropertyValueBeanNull() throws Exception {
    Object o=ConstraintValidatorsUtils.getPropertyValue(null,"bar");
    assertThat(o,nullValue());
  }
  @Test public void testGetPropertyValuePropertyNameNull() throws Exception {
    Object o=ConstraintValidatorsUtils.getPropertyValue(new FooBean(),null);
    assertThat(o,nullValue());
  }
  @Test public void testIsEmptyValueNull() throws Exception {
    boolean b=ConstraintValidatorsUtils.isEmpty(null);
    assertThat(b,is(true));
  }
  @Test public void testIsEmptyValueBlank() throws Exception {
    boolean b=ConstraintValidatorsUtils.isEmpty("");
    assertThat(b,is(true));
  }
  @Test public void testIsEmptyValueNotNull() throws Exception {
    boolean b=ConstraintValidatorsUtils.isEmpty("test");
    assertThat(b,is(false));
  }
class FooBean {
    private String bar;
    public String getBar(){
      return bar;
    }
    public void setBar(    String bar){
      this.bar=bar;
    }
  }
}
