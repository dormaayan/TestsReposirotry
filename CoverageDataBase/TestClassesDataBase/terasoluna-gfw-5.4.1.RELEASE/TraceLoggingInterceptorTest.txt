@ContextConfiguration(locations="classpath:/test-context.xml") @RunWith(SpringJUnit4ClassRunner.class) public class TraceLoggingInterceptorTest {
  @Inject NamedParameterJdbcTemplate jdbcTemplate;
  TraceLoggingInterceptor interceptor;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  Method[] method;
  TraceLoggingInterceptorController controller;
  ModelAndView model;
  Logger logger=(Logger)LoggerFactory.getLogger(TraceLoggingInterceptor.class);
  @BeforeClass public static void setUpBeforeClass() throws Exception {
  }
  @Before public void setUp() throws Exception {
    new SimpleDriverDataSource(Driver.load(),"jdbc:h2:mem:terasolung-gfw-web;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:h2.sql'","sa","").getConnection().close();
    request=new MockHttpServletRequest();
    response=new MockHttpServletResponse();
    controller=new TraceLoggingInterceptorController();
    method=controller.getClass().getMethods();
    model=mock(ModelAndView.class);
    interceptor=new TraceLoggingInterceptor();
  }
  @After public void tearDown() throws Exception {
  }
  /** 
 * PreHandleHttpServletRequestHttpServletResponseObject<br> Log output
 * @throws Exception
 * @throws NoSuchMethodException
 */
  @Test public void testPreHandle_LogOutput() throws Exception {
    HandlerMethod paramHandler=new HandlerMethod(controller,TraceLoggingInterceptorController.class.getMethod("createForm"));
    try {
      interceptor.preHandle(request,response,paramHandler);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String logMessage=jdbcTemplate.queryForObject("SELECT FORMATTED_MESSAGE FROM LOGGING_EVENT WHERE EVENT_ID=:id",Collections.singletonMap("id",1),String.class);
    Long startTime=(Long)request.getAttribute(TraceLoggingInterceptor.class.getName() + ".startTime");
    assertThat(logMessage,is("[START CONTROLLER] TraceLoggingInterceptorController.createForm()"));
    assertThat(startTime,notNullValue());
  }
  /** 
 * PreHandleHttpServletRequestHttpServletResponseObject<br> parameter not handlermethod
 */
  @Test public void testPreHandle_ParamNotHandler(){
    Object paramHandler=new Object();
    try {
      interceptor.preHandle(request,response,paramHandler);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    Long startTime=(Long)request.getAttribute(TraceLoggingInterceptor.class.getName() + ".startTime");
    long count=jdbcTemplate.queryForObject("SELECT COUNT(*) FROM LOGGING_EVENT",Collections.singletonMap("",""),Long.class);
    assertThat(startTime,nullValue());
    assertThat(count,is(0L));
  }
  @Test public void testPreHandleIsTraceEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    Object paramHandler=new Object();
    try {
      interceptor.preHandle(request,response,paramHandler);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    Long startTime=(Long)request.getAttribute(TraceLoggingInterceptor.class.getName() + ".startTime");
    long count=jdbcTemplate.queryForObject("SELECT COUNT(*) FROM LOGGING_EVENT",Collections.singletonMap("",""),Long.class);
    assertThat(startTime,nullValue());
    assertThat(count,is(0L));
    assertThat(logger.isDebugEnabled(),is(false));
    LogLevelChangeUtil.resetLogLevel();
  }
  /** 
 * Normal Log Output
 */
  @Test public void testPostHandle_NormalLogOutput() throws Exception {
    HandlerMethod paramHandler=new HandlerMethod(controller,TraceLoggingInterceptorController.class.getMethod("createForm"));
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String logMessage1=jdbcTemplate.queryForObject("SELECT FORMATTED_MESSAGE FROM LOGGING_EVENT WHERE EVENT_ID=:id",Collections.singletonMap("id",1),String.class);
    String logMessage2=jdbcTemplate.queryForObject("SELECT FORMATTED_MESSAGE FROM LOGGING_EVENT WHERE EVENT_ID=:id",Collections.singletonMap("id",2),String.class);
    assertThat(logMessage1,is("[END CONTROLLER  ] TraceLoggingInterceptorController.createForm()-> view=null, model={}"));
    assertThat(logMessage2.startsWith("[HANDLING TIME   ] TraceLoggingInterceptorController.createForm()->"),is(true));
  }
  /** 
 * Normal Log Output
 */
  @Ignore @Test public void testPostHandle_NormalLogOutput_ViewNotNull(){
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    HandlerMethod paramHandler=new HandlerMethod(controller,method[3]);
    View view=mock(View.class);
    when(model.getView()).thenReturn(view);
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="TraceLoggingInterceptorController.second(SampleForm,Model)->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    verifyLogging(expectedLogStr,levelList,2);
  }
  /** 
 * Normal Log Output
 */
  @Ignore @Test public void testPostHandle_NormalLogOutput_ModelNull(){
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    HandlerMethod paramHandler=new HandlerMethod(controller,method[0]);
    try {
      interceptor.postHandle(request,response,paramHandler,null);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="TraceLoggingInterceptorController.createForm()->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    verifyLogging(expectedLogStr,levelList,2);
  }
  /** 
 * Warn Log Output
 */
  @Ignore @Test public void testPostHandle_WarnlLogOutput(){
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    HandlerMethod paramHandler=new HandlerMethod(controller,method[0]);
    try {
      interceptor.setWarnHandlingNanos(1L);
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="TraceLoggingInterceptorController.createForm()->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    levelList.add(Level.WARN);
    verifyLogging(expectedLogStr,levelList,2);
  }
  /** 
 * not started
 */
  @Ignore @Test public void testPostHandle_NotStarted(){
    HandlerMethod paramHandler=new HandlerMethod(controller,method[0]);
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="TraceLoggingInterceptorController.createForm()->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    verifyLogging(expectedLogStr,levelList,1);
  }
  /** 
 * not handler
 */
  @Ignore @Test public void testPostHandle_NotHandler(){
    Object paramHandler=new Object();
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    final String expectedLogStr="TraceLoggingInterceptorController.createForm()->";
  }
  /** 
 * not handler Normal log output
 */
  @Ignore @Test public void testPostHandle_NotHandler_Normal(){
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    Object paramHandler=new Object();
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="[HANDLING TIME   ]->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    verifyLogging(expectedLogStr,levelList,1);
  }
  /** 
 * not handler warn log output
 */
  @Ignore @Test public void testPostHandle_NotHandler_Warn(){
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    Object paramHandler=new Object();
    try {
      interceptor.setWarnHandlingNanos(1L);
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="[HANDLING TIME   ]->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.WARN);
    verifyLogging(expectedLogStr,levelList,1);
  }
  @Test public void testPostHandleNullStartAttr() throws Exception {
    HandlerMethod paramHandler=new HandlerMethod(controller,TraceLoggingInterceptorController.class.getMethod("createForm"));
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",null);
    try {
      interceptor.postHandle(request,response,paramHandler,null);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    String expectedLogStr="TraceLoggingInterceptorController.createForm()->";
    List<Level> levelList=new ArrayList<Level>();
    levelList.add(Level.TRACE);
    verifyLogging(expectedLogStr,levelList,2);
  }
  @Test public void testIsEnabledLogLevelIsWarnEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    HandlerMethod paramHandler=new HandlerMethod(controller,TraceLoggingInterceptorController.class.getMethod("createForm"));
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    assertThat(logger.isDebugEnabled(),is(false));
    LogLevelChangeUtil.resetLogLevel();
  }
  @Test public void testIsEnabledLogLevelIsTraceEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    HandlerMethod paramHandler=new HandlerMethod(controller,TraceLoggingInterceptorController.class.getMethod("createForm"));
    long startTime=System.nanoTime();
    request.setAttribute(TraceLoggingInterceptor.class.getName() + ".startTime",startTime);
    try {
      interceptor.postHandle(request,response,paramHandler,model);
    }
 catch (    Exception e) {
      fail("illegal case");
    }
    assertThat(logger.isDebugEnabled(),is(false));
    LogLevelChangeUtil.resetLogLevel();
  }
  /** 
 * verify logging.
 * @param expectedLogMessage expected log message.
 * @param expectedLogLevel expected log level.
 * @param expectedCallCount expected call count
 */
  private void verifyLogging(  final String expectedLogMessage,  final List<Level> expectedLogLevel,  final int expectedCallCount){
  }
}
