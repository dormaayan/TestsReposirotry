public class HandlerExceptionResolverLoggingInterceptorTest {
  /** 
 * instance of test target.
 */
  private HandlerExceptionResolverLoggingInterceptor testTarget;
  /** 
 * Mock object of ExceptionLogger.
 */
  private ExceptionLogger mockExceptionLogger;
  /** 
 * Mock object of MethodInvocation.
 */
  private MethodInvocation mockMethodInvocation;
  /** 
 * mock instance of Appender.
 */
  private Appender<ILoggingEvent> mockAppender;
  private Logger applicationLogger;
  /** 
 * setup all test case.
 * @throws Exception
 */
  @Before public void setup() throws Exception {
    this.testTarget=new HandlerExceptionResolverLoggingInterceptor();
    mockMethodInvocation=mock(MethodInvocation.class);
    mockExceptionLogger=mock(ExceptionLogger.class);
    testTarget.setExceptionLogger(mockExceptionLogger);
    testTarget.afterPropertiesSet();
    @SuppressWarnings("unchecked") Appender<ILoggingEvent> mockAppender=mock(Appender.class);
    this.mockAppender=mockAppender;
    this.applicationLogger=(Logger)LoggerFactory.getLogger(HandlerExceptionResolverLoggingInterceptor.class);
    applicationLogger.addAppender(mockAppender);
  }
  @Test public void testInvoke_return_value_is_null() throws Throwable {
    when(mockMethodInvocation.proceed()).thenReturn(null);
    testTarget.invoke(mockMethodInvocation);
    verify(mockMethodInvocation,times(1)).proceed();
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testInvoke_not_HandlerExceptionResolver() throws Throwable {
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn("none HandlerExceptionResolver.");
    testTarget.invoke(mockMethodInvocation);
    verify(mockMethodInvocation,times(1)).proceed();
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
    verifyLogging("target object does not implement the HandlerExceptionResolver interface. target object is 'java.lang.String'.",Level.WARN);
  }
  @Test public void testInvoke_not_HandlerExceptionResolver_and_loglevel_under() throws Throwable {
    applicationLogger.setLevel(Level.ERROR);
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn("none HandlerExceptionResolver.");
    testTarget.invoke(mockMethodInvocation);
    verify(mockMethodInvocation,times(1)).proceed();
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
    verify(mockAppender,times(0)).doAppend((ILoggingEvent)any());
    applicationLogger.setLevel(Level.DEBUG);
  }
  @Test public void testInvoke_ExceptionHandlerExceptionResolver_responseCode_1xx() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    ExceptionHandlerExceptionResolver resolver=new ExceptionHandlerExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(100);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_DefaultHandlerExceptionResolver_responseCode_2xx() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    DefaultHandlerExceptionResolver resolver=new DefaultHandlerExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(200);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_ResponseStatusExceptionResolver_responseCode_3xx() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    ResponseStatusExceptionResolver resolver=new ResponseStatusExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(300);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_SystemExceptionResolver_responseCode_4xx() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(400);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).warn((Exception)any());
  }
  @Test public void testInvoke_SystemExceptionResolver_BusinessException() throws Throwable {
    BusinessException occurException=new BusinessException("error.");
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,null,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testInvoke_SystemExceptionResolver_ResourceNotFoundException() throws Throwable {
    ResourceNotFoundException occurException=new ResourceNotFoundException("error.");
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,null,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testInvoke_SystemExceptionResolver_ResourceNotFoundException_not_ignore_responseCode_5xx() throws Throwable {
    ResourceNotFoundException occurException=new ResourceNotFoundException("error.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(500);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.setIgnoreExceptions(null);
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).error((Exception)any());
  }
  @Test public void testInvoke_SystemExceptionResolver_ignoreExceptions_is_multi() throws Throwable {
    FileNotFoundException occurException1=new FileNotFoundException("error.");
    DuplicateKeyException occurException2=new DuplicateKeyException("error.");
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,null,null,occurException1},new Object[]{null,null,null,occurException2});
    Set<Class<? extends Exception>> ignoreExceptions=new HashSet<Class<? extends Exception>>();
    ignoreExceptions.add(DataAccessException.class);
    ignoreExceptions.add(IOException.class);
    testTarget.setIgnoreExceptions(ignoreExceptions);
    testTarget.invoke(mockMethodInvocation);
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testInvoke_responseCode_199() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    ExceptionHandlerExceptionResolver resolver=new ExceptionHandlerExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(199);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_responseCode_299() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    DefaultHandlerExceptionResolver resolver=new DefaultHandlerExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(299);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_responseCode_399() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    ResponseStatusExceptionResolver resolver=new ResponseStatusExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(399);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  @Test public void testInvoke_responseCode_499() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(499);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).warn((Exception)any());
  }
  @Test public void testInvoke_responseCode_599() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(599);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).error((Exception)any());
  }
  @Test public void testInvoke_responseCode_under_100() throws Throwable {
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    SystemExceptionResolver resolver=new SystemExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(99);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(0)).log((Exception)any());
    verify(mockExceptionLogger,times(0)).info((Exception)any());
    verify(mockExceptionLogger,times(0)).warn((Exception)any());
    verify(mockExceptionLogger,times(0)).error((Exception)any());
  }
  @Test public void testafterPropertiesSet() throws Throwable {
    testTarget=new HandlerExceptionResolverLoggingInterceptor();
    testTarget.afterPropertiesSet();
    this.mockExceptionLogger=spy(testTarget.getExceptionLogger());
    testTarget.setExceptionLogger(mockExceptionLogger);
    NullPointerException occurException=new NullPointerException("null pointer exception.");
    HttpServletResponse mockResponse=mock(HttpServletResponse.class);
    ExceptionHandlerExceptionResolver resolver=new ExceptionHandlerExceptionResolver();
    when(mockMethodInvocation.proceed()).thenReturn("viewname");
    when(mockMethodInvocation.getThis()).thenReturn(resolver);
    when(mockResponse.getStatus()).thenReturn(100);
    when(mockMethodInvocation.getArguments()).thenReturn(new Object[]{null,mockResponse,null,occurException});
    testTarget.invoke(mockMethodInvocation);
    verify(mockExceptionLogger,times(1)).info((Exception)any());
  }
  /** 
 * verify logging.
 * @param expectedLogMessage expected log message.
 * @param expectedLogLevel expected log level.
 */
  private void verifyLogging(  final String expectedLogMessage,  final Level expectedLogLevel){
    verify(mockAppender).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
      @Override public boolean matches(      Object argument){
        return ((LoggingEvent)argument).getFormattedMessage().equals(expectedLogMessage);
      }
    }
));
    verify(mockAppender).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
      @Override public boolean matches(      Object argument){
        return expectedLogLevel.equals(((LoggingEvent)argument).getLevel());
      }
    }
));
  }
}
