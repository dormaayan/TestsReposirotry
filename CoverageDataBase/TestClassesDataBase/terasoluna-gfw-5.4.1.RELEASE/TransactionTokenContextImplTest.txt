public class TransactionTokenContextImplTest {
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
  }
  @Test public void TestTransactionTokenContextImpl01(){
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa");
    ReserveCommand expectedCommand=ReserveCommand.CREATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(beginTransactionToken));
  }
  @Test public void TestTransactionTokenContextImpl02(){
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa","key","value");
    ReserveCommand expectedCommand=ReserveCommand.UPDATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(beginTransactionToken));
  }
  @Test public void TestTransactionTokenContextImpl03(){
    TransactionTokenInfo inTransactionToken=new TransactionTokenInfo("testTokenAttribute2",TransactionTokenType.IN);
    TransactionToken receivedToken=new TransactionToken("bbb");
    ReserveCommand expectedCommand=ReserveCommand.CREATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(inTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(inTransactionToken));
  }
  @Test public void TestTransactionTokenContextImpl04(){
    TransactionTokenInfo inTransactionToken=new TransactionTokenInfo("testTokenAttribute2",TransactionTokenType.IN);
    TransactionToken receivedToken=new TransactionToken("bbb","key","value");
    ReserveCommand expectedCommand=ReserveCommand.UPDATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(inTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(inTransactionToken));
  }
  @Test public void TestTransactionTokenContextImpl05(){
    TransactionTokenInfo endTransactionToken=new TransactionTokenInfo("testTokenAttribute3",TransactionTokenType.END);
    TransactionToken receivedToken=new TransactionToken("ccc");
    ReserveCommand expectedCommand=ReserveCommand.NONE;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(endTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(endTransactionToken));
  }
  @Test public void TestTransactionTokenContextImpl06(){
    TransactionTokenInfo endTransactionToken=new TransactionTokenInfo("testTokenAttribute3",TransactionTokenType.END);
    TransactionToken receivedToken=new TransactionToken("ccc","key","value");
    ReserveCommand expectedCommand=ReserveCommand.REMOVE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(endTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(endTransactionToken));
  }
  @Test public void testTransactionTokenContextImpl07(){
    TransactionTokenInfo checkTransactionToken=new TransactionTokenInfo("checkToken",TransactionTokenType.CHECK);
    TransactionToken receivedToken=new TransactionToken("namespace","key","value");
    ReserveCommand expectedCommand=ReserveCommand.KEEP_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(checkTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(checkTransactionToken));
  }
  @Test public void testTransactionTokenContextImpl08(){
    TransactionTokenInfo updateTransactionToken=new TransactionTokenInfo("updateToken",TransactionTokenType.CHECK);
    TransactionToken receivedToken=new TransactionToken("namespace","key","");
    ReserveCommand expectedCommand=ReserveCommand.KEEP_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(updateTransactionToken,receivedToken);
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
    assertThat(contextImpl.getReceivedToken(),is(receivedToken));
    assertThat(contextImpl.getTokenInfo(),is(updateTransactionToken));
  }
  @Test public void TestCreateToken01(){
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa","key","value");
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand expectedCommand=ReserveCommand.REMOVE_TOKEN;
    contextImpl.createToken();
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCreateToken02(){
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa");
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand expectedCommand=ReserveCommand.NONE;
    contextImpl.createToken();
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestRemoveToken01(){
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa","key","value");
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand expectedCommand=ReserveCommand.REMOVE_TOKEN;
    contextImpl.removeToken();
    ReserveCommand resultCommand=contextImpl.getReserveCommand();
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation01() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa");
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    ReserveCommand expectedCommand=ReserveCommand.CREATE_TOKEN;
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation02() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo beginTransactionToken=new TransactionTokenInfo("testTokenAttribute1",TransactionTokenType.BEGIN);
    TransactionToken receivedToken=new TransactionToken("aaa","key","value");
    ReserveCommand expectedCommand=ReserveCommand.UPDATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(beginTransactionToken,receivedToken);
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation03() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo inTransactionToken=new TransactionTokenInfo("testTokenAttribute2",TransactionTokenType.IN);
    TransactionToken receivedToken=new TransactionToken("bbb");
    ReserveCommand expectedCommand=ReserveCommand.CREATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(inTransactionToken,receivedToken);
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation04() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo inTransactionToken=new TransactionTokenInfo("testTokenAttribute2",TransactionTokenType.IN);
    TransactionToken receivedToken=new TransactionToken("bbb","key","value");
    ReserveCommand expectedCommand=ReserveCommand.UPDATE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(inTransactionToken,receivedToken);
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation05() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo endTransactionToken=new TransactionTokenInfo("testTokenAttribute3",TransactionTokenType.END);
    TransactionToken receivedToken=new TransactionToken("ccc");
    ReserveCommand expectedCommand=ReserveCommand.NONE;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(endTransactionToken,receivedToken);
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
  @Test public void TestCancelReservation06() throws IllegalArgumentException, IllegalAccessException {
    TransactionTokenInfo endTransactionToken=new TransactionTokenInfo("testTokenAttribute3",TransactionTokenType.END);
    TransactionToken receivedToken=new TransactionToken("ccc","key","value");
    ReserveCommand expectedCommand=ReserveCommand.REMOVE_TOKEN;
    TransactionTokenContextImpl contextImpl=new TransactionTokenContextImpl(endTransactionToken,receivedToken);
    contextImpl.cancelReservation();
    Field field=ReflectionUtils.findField(TransactionTokenContextImpl.class,"defaultCommand");
    ReflectionUtils.makeAccessible(field);
    ReserveCommand resultCommand=(ReserveCommand)field.get(contextImpl);
    assertThat(resultCommand,is(expectedCommand));
  }
}
