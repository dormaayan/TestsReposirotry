public class HttpSessionEventLoggingListenerTest {
  private MockHttpSession mockHttpSession;
  private HttpSessionEventLoggingListener listener;
  private HttpSessionEvent httpSessionEvent;
  private Appender<ILoggingEvent> mockAppender;
  private HttpSessionBindingEvent sessionBindingEvent;
  private Logger logger;
  @Before public void setup() throws Exception {
    mockHttpSession=new MockHttpSession();
    httpSessionEvent=new HttpSessionEvent(mockHttpSession);
    sessionBindingEvent=new HttpSessionBindingEvent(mockHttpSession,"terasoluna","AA");
    listener=new HttpSessionEventLoggingListener();
    @SuppressWarnings("unchecked") Appender<ILoggingEvent> mockAppender=mock(Appender.class);
    this.mockAppender=mockAppender;
    logger=(Logger)LoggerFactory.getLogger(HttpSessionEventLoggingListener.class);
    logger.addAppender(mockAppender);
  }
  @After public void tearDown() throws Exception {
    LogLevelChangeUtil.resetLogLevel();
  }
  /** 
 * session passivate logging
 */
  @Test public void testSessionWillPassivate(){
    String passivateStr="SESSIONID#" + mockHttpSession.getId() + " sessionWillPassivate : "+ mockHttpSession.toString();
    listener.sessionWillPassivate(httpSessionEvent);
    verifyLogging(passivateStr,Level.DEBUG);
  }
  @Test public void testSessionWillPassivateIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.sessionWillPassivate(httpSessionEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * session DidActivate logging
 */
  @Test public void testSessionDidActivate(){
    String didActivateStr="SESSIONID#" + mockHttpSession.getId() + " sessionDidActivate : "+ mockHttpSession.toString();
    listener.sessionDidActivate(httpSessionEvent);
    verifyLogging(didActivateStr,Level.DEBUG);
  }
  @Test public void testSessionDidActivateIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.sessionDidActivate(httpSessionEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * attribute add logging
 */
  @Test public void testAttributeAdded(){
    String attributeAddedStr="SESSIONID#" + mockHttpSession.getId() + " attributeAdded : terasoluna=AA";
    listener.attributeAdded(sessionBindingEvent);
    verifyLogging(attributeAddedStr,Level.DEBUG);
  }
  @Test public void testAttributeAddedIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.attributeAdded(sessionBindingEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * attribute removed logging
 */
  @Test public void testAttributeRemoved(){
    String attributeRemovedStr="SESSIONID#" + mockHttpSession.getId() + " attributeRemoved : terasoluna=AA";
    listener.attributeRemoved(sessionBindingEvent);
    verifyLogging(attributeRemovedStr,Level.DEBUG);
  }
  @Test public void testAttributeRemovedIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.attributeRemoved(sessionBindingEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * attribute replaced logging
 */
  @Test public void testAttributeReplaced(){
    String attributeRemovedStr="SESSIONID#" + mockHttpSession.getId() + " attributeReplaced : terasoluna=AA";
    listener.attributeReplaced(sessionBindingEvent);
    verifyLogging(attributeRemovedStr,Level.TRACE);
  }
  @Test public void testAttributeReplacedisTraceEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.attributeReplaced(sessionBindingEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * session create logging
 */
  @Test public void testSessionCreated(){
    String sessionCreatedStr="SESSIONID#" + mockHttpSession.getId() + " sessionCreated : "+ mockHttpSession.toString();
    listener.sessionCreated(httpSessionEvent);
    verifyLogging(sessionCreatedStr,Level.DEBUG);
  }
  @Test public void testSessionCreatedIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.sessionCreated(httpSessionEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * session Destroyed logging
 */
  @Test public void testSessionDestroyed(){
    String sessionDestroyedStr="SESSIONID#" + mockHttpSession.getId() + " sessionDestroyed : "+ mockHttpSession.toString();
    listener.sessionDestroyed(httpSessionEvent);
    verifyLogging(sessionDestroyedStr,Level.DEBUG);
  }
  @Test public void testSessionDestroyedIsDebugEnabledFalse() throws Exception {
    LogLevelChangeUtil.setLogLevel(LogLevelChangeUtil.LogLevel.INFO);
    listener.sessionDestroyed(httpSessionEvent);
    assertThat(logger.isDebugEnabled(),is(false));
  }
  /** 
 * verify logging.
 * @param expectedLogMessage expected log message.
 * @param expectedLogLevel expected log level.
 */
  private void verifyLogging(  final String expectedLogMessage,  final Level expectedLogLevel){
    verify(mockAppender).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
      @Override public boolean matches(      Object argument){
        return ((LoggingEvent)argument).getFormattedMessage().equals(expectedLogMessage);
      }
    }
));
    verify(mockAppender).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
      @Override public boolean matches(      Object argument){
        return expectedLogLevel.equals(((LoggingEvent)argument).getLevel());
      }
    }
));
  }
}
