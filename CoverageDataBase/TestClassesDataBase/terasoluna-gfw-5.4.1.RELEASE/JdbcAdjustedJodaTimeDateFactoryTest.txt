@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"classpath:test-context.xml"}) @Transactional @Rollback public class JdbcAdjustedJodaTimeDateFactoryTest {
  @Autowired NamedParameterJdbcTemplate jdbcTemplate;
  @Autowired DataSource dataSource;
  @Before public void setUp() throws Exception {
    jdbcTemplate.getJdbcOperations().execute("CREATE TABLE system_adjusted_date(diff long)");
  }
  @After public void tearDown() throws Exception {
    jdbcTemplate.getJdbcOperations().execute("DROP TABLE system_adjusted_date");
  }
  @Test public void testNewDateTime01() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",30));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setDataSource(dataSource);
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    DateTime now=new DateTime();
    DateTime result=dateFactory.newDateTime();
    assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
  }
  @Test public void testNewDateTime03() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",30));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setDataSource(dataSource);
    dateFactory.setUseCache(false);
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    dateFactory.afterPropertiesSet();
{
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
{
      jdbcTemplate.update("UPDATE system_adjusted_date SET diff = :diff",Collections.singletonMap("diff",60));
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(60));
    }
  }
  @Test public void testNewDateTime04() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",30));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setDataSource(dataSource);
    dateFactory.setUseCache(true);
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    dateFactory.afterPropertiesSet();
{
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
{
      jdbcTemplate.update("UPDATE system_adjusted_date SET diff = :diff",Collections.singletonMap("diff",60));
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
{
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
  }
  @Test public void testNewDateTime05() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",30));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setDataSource(dataSource);
    dateFactory.setUseCache(true);
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    dateFactory.afterPropertiesSet();
{
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
{
      jdbcTemplate.update("UPDATE system_adjusted_date SET diff = :diff",Collections.singletonMap("diff",60));
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
    }
{
      dateFactory.reload();
      DateTime now=new DateTime();
      DateTime result=dateFactory.newDateTime();
      assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(60));
    }
  }
  /** 
 * Testing the case when adjustment value fetched from DB is null.
 * @throws Exception
 */
  @Test public void testNewDateTime06() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",null));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setDataSource(dataSource);
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    DateTime now=new DateTime();
    DateTime result=dateFactory.newDateTime();
    assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(0));
  }
  @Test public void testNewDateTime_setJdbcTemaplteDirectly() throws Exception {
    jdbcTemplate.update("INSERT INTO system_adjusted_date(diff) VALUES (:diff)",Collections.singletonMap("diff",30));
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setJdbcTemplate(new JdbcTemplate(dataSource));
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    DateTime now=new DateTime();
    DateTime result=dateFactory.newDateTime();
    assertThat((int)(Math.round(result.getMillis() - now.getMillis()) / 60.0 / 1000.0),is(30));
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterProperitesSet_jdbcTemplateAndDataSourceIsNull() throws Exception {
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setAdjustedValueQuery("SELECT diff * 60 * 1000 FROM system_adjusted_date");
    dateFactory.setDataSource(null);
    dateFactory.setJdbcTemplate(null);
    dateFactory.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterProperitesSet_adjustedValueQueryIsNull() throws Exception {
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setAdjustedValueQuery(null);
    dateFactory.setDataSource(dataSource);
    dateFactory.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterProperitesSet_adjustedValueQueryIsEmpty() throws Exception {
    JdbcAdjustedJodaTimeDateFactory dateFactory=new JdbcAdjustedJodaTimeDateFactory();
    dateFactory.setAdjustedValueQuery("");
    dateFactory.setDataSource(dataSource);
    dateFactory.afterPropertiesSet();
  }
}
