@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"classpath:test-context.xml"}) @Transactional @Rollback public class JdbcSequencerTest {
  @Autowired NamedParameterJdbcTemplate jdbcTemplate;
  @Autowired DataSource dataSource;
  @Before public void setUp() throws Exception {
    jdbcTemplate.getJdbcOperations().execute("CREATE SEQUENCE TEST_SEQ START WITH 1 INCREMENT BY 1");
  }
  @Test public void testGetNext01(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setDataSource(dataSource);
    jdbcSequencer.setNextValueQuery("SELECT nextval('TEST_SEQ')");
    jdbcSequencer.setCurrentValueQuery("SELECT currval('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
    String nextVal1=jdbcSequencer.getNext();
    String nextVal2=jdbcSequencer.getNext();
    assertThat(nextVal1,is(String.valueOf(1)));
    assertThat(nextVal2,is(String.valueOf(2)));
  }
  @Test public void testGetCurrent01(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setDataSource(dataSource);
    jdbcSequencer.setCurrentValueQuery("SELECT CURRVAL('TEST_SEQ')");
    jdbcSequencer.setNextValueQuery("SELECT NEXTVAL('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
    String currentVal1=jdbcSequencer.getCurrent();
    String nextVal=jdbcSequencer.getNext();
    String currentVal2=jdbcSequencer.getCurrent();
    assertThat(currentVal1,is(String.valueOf(0)));
    assertThat(nextVal,is(String.valueOf(1)));
    assertThat(currentVal2,is(String.valueOf(1)));
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_jdbcTemplateIsNullAndDataSourceIsNull(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(null);
    jdbcSequencer.setDataSource(null);
    jdbcSequencer.setNextValueQuery("SELECT nextval('TEST_SEQ')");
    jdbcSequencer.setCurrentValueQuery("SELECT currval('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_sequecnceClasIsNull(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(new JdbcTemplate(dataSource));
    jdbcSequencer.setNextValueQuery("SELECT nextval('TEST_SEQ')");
    jdbcSequencer.setCurrentValueQuery("SELECT currval('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(null);
    jdbcSequencer.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_NextValueQueryIsEmpty(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(new JdbcTemplate(dataSource));
    jdbcSequencer.setNextValueQuery("");
    jdbcSequencer.setCurrentValueQuery("SELECT currval('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_NextValueQueryIsNull(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(new JdbcTemplate(dataSource));
    jdbcSequencer.setNextValueQuery(null);
    jdbcSequencer.setCurrentValueQuery("SELECT currval('TEST_SEQ')");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_CurrentValueQueryIsEmpty(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(new JdbcTemplate(dataSource));
    jdbcSequencer.setNextValueQuery("SELECT nextval('TEST_SEQ')");
    jdbcSequencer.setCurrentValueQuery("");
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
  }
  @Test(expected=IllegalArgumentException.class) public void testAfterPropertiesSet_CurrentValueQueryIsNull(){
    JdbcSequencer<String> jdbcSequencer=new JdbcSequencer<String>();
    jdbcSequencer.setJdbcTemplate(new JdbcTemplate(dataSource));
    jdbcSequencer.setNextValueQuery("SELECT nextval('TEST_SEQ')");
    jdbcSequencer.setCurrentValueQuery(null);
    jdbcSequencer.setSequenceClass(String.class);
    jdbcSequencer.afterPropertiesSet();
  }
}
