public class JspTagUtilsTest {
  @Test public void testJspTagUtils() throws Exception {
    Constructor<JspTagUtils> constructor=JspTagUtils.class.getDeclaredConstructor();
    assertThat(constructor.isAccessible(),is(false));
    constructor.setAccessible(true);
    assertThat(constructor.newInstance(),notNullValue());
    constructor.setAccessible(false);
  }
  @Test public void toBoolean_valueIsTrue() throws JspException {
    assertThat(JspTagUtils.toBoolean("true",false,null),is(true));
    assertThat(JspTagUtils.toBoolean("TRUE",false,null),is(true));
    assertThat(JspTagUtils.toBoolean("TrUe",false,null),is(true));
  }
  @Test public void toBoolean_valueIsFalse() throws JspException {
    assertThat(JspTagUtils.toBoolean("false",true,null),is(false));
    assertThat(JspTagUtils.toBoolean("FALSE",true,null),is(false));
    assertThat(JspTagUtils.toBoolean("FaLsE",true,null),is(false));
  }
  @Test public void toBoolean_valueIsNullOrBlankOrWhitespace() throws JspException {
    assertThat(JspTagUtils.toBoolean(null,Boolean.TRUE,null),is(true));
    assertThat(JspTagUtils.toBoolean("",Boolean.FALSE,null),is(false));
  }
  @Test public void toBoolean_valueIsNotTrueOrFalse() throws JspException {
    try {
      JspTagUtils.toBoolean("on",true,"field1");
      fail("should be occurred JspTagException.");
    }
 catch (    JspTagException e) {
      assertThat(e.getMessage(),is("The value of field1 must be either true or false."));
    }
    try {
      JspTagUtils.toBoolean("off",false,"field2");
      fail("should be occurred JspTagException.");
    }
 catch (    JspTagException e) {
      assertThat(e.getMessage(),is("The value of field2 must be either true or false."));
    }
  }
}
