public class JerseyIgnoreRequestUserAgentHeaderFilterTest {
  @ClassRule public static final DropwizardAppRule<Configuration> APP_RULE=new DropwizardAppRule<>(TestApplication.class,Resources.getResource("yaml/jerseyIgnoreRequestUserAgentHeaderFilterTest.yml").getPath());
  private final URI testUri=URI.create("http://localhost:" + APP_RULE.getLocalPort());
  private JerseyClientBuilder clientBuilder;
  private JerseyClientConfiguration clientConfiguration;
  @Before public void setup(){
    clientConfiguration=new JerseyClientConfiguration();
    clientConfiguration.setConnectionTimeout(Duration.milliseconds(1000L));
    clientConfiguration.setTimeout(Duration.milliseconds(2500L));
    clientBuilder=new JerseyClientBuilder(new MetricRegistry()).using(clientConfiguration).using(Executors.newSingleThreadExecutor(),Jackson.newObjectMapper());
  }
  @Test public void clientIsSetRequestIsNotSet(){
    clientConfiguration.setUserAgent(Optional.of("ClientUserAgentHeaderValue"));
    assertThat(clientBuilder.using(clientConfiguration).build("ClientName").target(testUri + "/user_agent").request().get(String.class)).isEqualTo("ClientUserAgentHeaderValue");
  }
  @Test public void clientIsNotSetRequestIsSet(){
    assertThat(clientBuilder.build("ClientName").target(testUri + "/user_agent").request().header("User-Agent","RequestUserAgentHeaderValue").get(String.class)).isEqualTo("RequestUserAgentHeaderValue");
  }
  @Test public void clientIsNotSetRequestIsNotSet(){
    assertThat(clientBuilder.build("ClientName").target(testUri + "/user_agent").request().get(String.class)).isEqualTo("ClientName");
  }
  @Test public void clientIsSetRequestIsSet(){
    clientConfiguration.setUserAgent(Optional.of("ClientUserAgentHeaderValue"));
    assertThat(clientBuilder.build("ClientName").target(testUri + "/user_agent").request().header("User-Agent","RequestUserAgentHeaderValue").get(String.class)).isEqualTo("RequestUserAgentHeaderValue");
  }
@Path("/") public static class TestResource {
    @GET @Path("user_agent") public String getReturnUserAgentHeader(    @HeaderParam("User-Agent") String userAgentHeader){
      return userAgentHeader;
    }
  }
public static class TestApplication extends Application<Configuration> {
    public static void main(    String[] args) throws Exception {
      new TestApplication().run(args);
    }
    @Override public void run(    Configuration configuration,    Environment environment) throws Exception {
      environment.jersey().register(TestResource.class);
    }
  }
}
