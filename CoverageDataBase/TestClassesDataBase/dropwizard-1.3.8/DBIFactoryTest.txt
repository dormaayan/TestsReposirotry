public class DBIFactoryTest {
  @Test public void testDefaultConfiguration(){
    final DBI dbi=mock(DBI.class);
    final PooledDataSourceFactory configuration=mock(PooledDataSourceFactory.class);
    final Deque<Class<?>> af=new LinkedList<>();
    final Deque<Class<?>> cm=new LinkedList<>();
    final Deque<Class<?>> cf=new LinkedList<>();
    Mockito.doAnswer(invocation -> {
      final ArgumentFactory<?> x=invocation.getArgument(0);
      af.addLast(x.getClass());
      return null;
    }
).when(dbi).registerArgumentFactory(Mockito.isA(ArgumentFactory.class));
    Mockito.doAnswer(invocation -> {
      final ResultColumnMapper<?> x=invocation.getArgument(0);
      cm.addLast(x.getClass());
      return null;
    }
).when(dbi).registerColumnMapper(Mockito.isA(ResultColumnMapper.class));
    Mockito.doAnswer(invocation -> {
      final ContainerFactory<?> x=invocation.getArgument(0);
      cf.addLast(x.getClass());
      return null;
    }
).when(dbi).registerContainerFactory(Mockito.isA(ContainerFactory.class));
    when(configuration.getDriverClass()).thenReturn("io.dropwizard.fake.driver.Driver");
    final DBIFactory test=new DBIFactory();
    test.configure(dbi,configuration);
    assertFalse(cm.isEmpty());
    assertFalse(cf.isEmpty());
    assertFalse(af.isEmpty());
    assertEquals(GuavaOptionalArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalDoubleArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalIntArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalLongArgumentFactory.class,af.removeFirst());
    assertEquals(JodaDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(LocalDateArgumentFactory.class,af.removeFirst());
    assertEquals(LocalDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(InstantArgumentFactory.class,af.removeFirst());
    assertEquals(OffsetDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(ZonedDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalJodaTimeArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalLocalDateArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalLocalDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalInstantArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalOffsetTimeArgumentFactory.class,af.removeFirst());
    assertEquals(GuavaOptionalZonedTimeArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalJodaTimeArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalLocalDateArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalLocalDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalInstantArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalOffsetDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalZonedDateTimeArgumentFactory.class,af.removeFirst());
    assertEquals(OptionalDoubleMapper.class,cm.removeFirst());
    assertEquals(OptionalIntMapper.class,cm.removeFirst());
    assertEquals(OptionalLongMapper.class,cm.removeFirst());
    assertEquals(JodaDateTimeMapper.class,cm.removeFirst());
    assertEquals(LocalDateMapper.class,cm.removeFirst());
    assertEquals(LocalDateTimeMapper.class,cm.removeFirst());
    assertEquals(InstantMapper.class,cm.removeFirst());
    assertEquals(OffsetDateTimeMapper.class,cm.removeFirst());
    assertEquals(ZonedDateTimeMapper.class,cm.removeFirst());
    assertEquals(ImmutableListContainerFactory.class,cf.removeFirst());
    assertEquals(ImmutableSetContainerFactory.class,cf.removeFirst());
    assertEquals(GuavaOptionalContainerFactory.class,cf.removeFirst());
    assertEquals(OptionalContainerFactory.class,cf.removeFirst());
    assertTrue(cm.isEmpty());
    assertTrue(cf.isEmpty());
    assertTrue(af.isEmpty());
  }
}
