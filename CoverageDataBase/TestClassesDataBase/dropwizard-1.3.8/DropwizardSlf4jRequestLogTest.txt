public class DropwizardSlf4jRequestLogTest {
static {
    BootstrapLogging.bootstrap();
  }
  @SuppressWarnings("unchecked") private final Appender<ILoggingEvent> appender=mock(Appender.class);
  private final AppenderAttachableImpl<ILoggingEvent> appenders=new AppenderAttachableImpl<>();
  private final DropwizardSlf4jRequestLog slf4jRequestLog=new DropwizardSlf4jRequestLog(appenders,TimeZone.getTimeZone("UTC"));
  private final Request request=mock(Request.class);
  private final Response response=mock(Response.class,RETURNS_DEEP_STUBS);
  private final HttpChannelState channelState=mock(HttpChannelState.class);
  @Before public void setUp() throws Exception {
    when(channelState.isInitial()).thenReturn(true);
    when(request.getRemoteAddr()).thenReturn("10.0.0.1");
    when(request.getTimeStamp()).thenReturn(TimeUnit.SECONDS.toMillis(1353042047));
    when(request.getMethod()).thenReturn("GET");
    when(request.getHttpURI()).thenReturn(new HttpURI("/test/things?yay"));
    when(request.getProtocol()).thenReturn("HTTP/1.1");
    when(request.getHttpChannelState()).thenReturn(channelState);
    when(request.getTimeStamp()).thenReturn(TimeUnit.SECONDS.toMillis(1353042048));
    when(response.getCommittedMetaData().getStatus()).thenReturn(200);
    when(response.getHttpChannel().getBytesWritten()).thenReturn(8290L);
    appenders.addAppender(appender);
    slf4jRequestLog.start();
  }
  @After public void tearDown() throws Exception {
    slf4jRequestLog.stop();
  }
  @Test public void logsRequestsToTheAppenders() throws Exception {
    final ILoggingEvent event=logAndCapture();
    assertThat(event.getFormattedMessage()).startsWith("10.0.0.1");
    assertThat(event.getLevel()).isEqualTo(Level.INFO);
  }
  private ILoggingEvent logAndCapture(){
    slf4jRequestLog.log(request,response);
    final ArgumentCaptor<ILoggingEvent> captor=ArgumentCaptor.forClass(ILoggingEvent.class);
    verify(appender,timeout(1000)).doAppend(captor.capture());
    return captor.getValue();
  }
}
