public static class PolymorphicPrincipalInjectedResourceConfig extends AbstractAuthResourceConfig {
  public PolymorphicPrincipalInjectedResourceConfig(){
    register(PolymorphicPrincipalEntityResource.class);
    packages("io.dropwizard.jersey.jackson");
  }
  @Override protected Class<? extends Principal> getPrincipalClass(){
    throw new AssertionError("getPrincipalClass must not be invoked");
  }
  @Override protected ContainerRequestFilter getAuthFilter(){
    return requestContext -> {
      throw new AssertionError("getAuthFilter result must not be invoked");
    }
;
  }
  @Override protected AbstractBinder getAuthBinder(){
    return new PolymorphicAuthValueFactoryProvider.Binder<>(ImmutableSet.of(JsonPrincipal.class,NullPrincipal.class));
  }
  @Override protected DynamicFeature getAuthDynamicFeature(  ContainerRequestFilter authFilter){
    final Authenticator<BasicCredentials,JsonPrincipal> jsonAuthenticator=credentials -> {
      if (credentials.getUsername().equals(JSON_USERNAME)) {
        return Optional.of(new JsonPrincipal(credentials.getUsername()));
      }
 else {
        return Optional.empty();
      }
    }
;
    final Authenticator<BasicCredentials,NullPrincipal> nullAuthenticator=credentials -> {
      if (credentials.getUsername().equals(NULL_USERNAME)) {
        return Optional.of(new NullPrincipal());
      }
 else {
        return Optional.empty();
      }
    }
;
    final BasicCredentialAuthFilter jsonAuthFilter=new BasicCredentialAuthFilter.Builder<JsonPrincipal>().setAuthenticator(jsonAuthenticator).buildAuthFilter();
    final BasicCredentialAuthFilter nullAuthFilter=new BasicCredentialAuthFilter.Builder<NullPrincipal>().setAuthenticator(nullAuthenticator).buildAuthFilter();
    return new PolymorphicAuthDynamicFeature<Principal>(ImmutableMap.of(JsonPrincipal.class,jsonAuthFilter,NullPrincipal.class,nullAuthFilter));
  }
}
