public class ErrorEntityWriterTest extends AbstractJerseyTest {
public static class ErrorEntityWriterTestResourceConfig extends DropwizardResourceConfig {
    public ErrorEntityWriterTestResourceConfig(){
      super(true,new MetricRegistry());
      register(DefaultLoggingExceptionMapper.class);
      register(DefaultJacksonMessageBodyProvider.class);
      register(ExceptionResource.class);
      register(new ErrorEntityWriter<ErrorMessage,String>(MediaType.TEXT_HTML_TYPE,String.class){
        @Override protected String getRepresentation(        ErrorMessage entity){
          return "<!DOCTYPE html><html><body>" + entity.getMessage() + "</body></html>";
        }
      }
);
    }
  }
  @Override protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
    return new GrizzlyWebTestContainerFactory();
  }
  @Override protected DeploymentContext configureDeployment(){
    final ResourceConfig rc=new ErrorEntityWriterTestResourceConfig();
    return ServletDeploymentContext.builder(rc).initParam(ServletProperties.JAXRS_APPLICATION_CLASS,ErrorEntityWriterTestResourceConfig.class.getName()).build();
  }
  @Test public void formatsErrorsAsHtml(){
    try {
      target("/exception/html-exception").request(MediaType.TEXT_HTML_TYPE).get(String.class);
      failBecauseExceptionWasNotThrown(WebApplicationException.class);
    }
 catch (    WebApplicationException e) {
      final Response response=e.getResponse();
      assertThat(response.getStatus()).isEqualTo(400);
      assertThat(response.getMediaType()).isEqualTo(MediaType.TEXT_HTML_TYPE);
      assertThat(response.readEntity(String.class)).isEqualTo("<!DOCTYPE html><html><body>BIFF</body></html>");
    }
  }
}
