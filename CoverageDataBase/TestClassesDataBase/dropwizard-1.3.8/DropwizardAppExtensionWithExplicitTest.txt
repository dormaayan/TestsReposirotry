@ExtendWith(DropwizardExtensionsSupport.class) public class DropwizardAppExtensionWithExplicitTest {
  public static final DropwizardAppExtension<TestConfiguration> EXTENSION;
static {
    TestConfiguration config=new TestConfiguration("stuff!","extra");
    DefaultServerFactory sf=(DefaultServerFactory)config.getServerFactory();
    ((HttpConnectorFactory)sf.getApplicationConnectors().get(0)).setPort(0);
    ((HttpConnectorFactory)sf.getAdminConnectors().get(0)).setPort(0);
    EXTENSION=new DropwizardAppExtension<>(TestApplication.class,config);
  }
  @Test public void runWithExplicitConfig(){
    Map<?,?> response=EXTENSION.client().target("http://localhost:" + EXTENSION.getLocalPort() + "/test").request().get(Map.class);
    Assertions.assertEquals(ImmutableMap.of("message","stuff!"),response);
  }
public static class TestApplication extends Application<TestConfiguration> {
    @Override public void run(    TestConfiguration configuration,    Environment environment) throws Exception {
      environment.jersey().register(new TestResource(configuration.getMessage()));
    }
  }
@Path("test") @Produces(MediaType.APPLICATION_JSON) public static class TestResource {
    private final String message;
    public TestResource(    String m){
      message=m;
    }
    @GET public Response get(){
      return Response.ok(ImmutableMap.of("message",message)).build();
    }
  }
}
