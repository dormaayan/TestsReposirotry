public class ExceptionMapperBinderTest {
  private SimpleServerFactory http;
  private final ObjectMapper objectMapper=Jackson.newObjectMapper();
  private Validator validator=BaseValidator.newValidator();
  private Environment environment=new Environment("testEnvironment",objectMapper,validator,new MetricRegistry(),ClassLoader.getSystemClassLoader());
  @Before public void setUp() throws Exception {
    objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,FileAppenderFactory.class,SyslogAppenderFactory.class,HttpConnectorFactory.class);
    http=(SimpleServerFactory)new YamlConfigurationFactory<>(ServerFactory.class,validator,objectMapper,"dw").build(new File(Resources.getResource("yaml/simple_server.yml").toURI()));
  }
  @Test public void testOverrideDefaultExceptionMapper() throws Exception {
    environment.jersey().register(new TestValidationResource());
    environment.jersey().register(new MyJerseyExceptionMapper());
    final Server server=http.build(environment);
    server.start();
    final int port=((AbstractNetworkConnector)server.getConnectors()[0]).getLocalPort();
    assertThat(httpRequest("GET","http://localhost:" + port + "/service/test")).isEqualTo("alright!");
    server.stop();
  }
private static class MyJerseyExceptionMapper implements ExceptionMapper<JerseyViolationException> {
    @Override public Response toResponse(    JerseyViolationException e){
      return Response.ok("alright!").build();
    }
  }
@Path("/test") @Produces("application/json") private static class TestValidationResource {
    @GET public String get(    @NotEmpty @QueryParam("foo") String foo){
      return foo;
    }
  }
}
