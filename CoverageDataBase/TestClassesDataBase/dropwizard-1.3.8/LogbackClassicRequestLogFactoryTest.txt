public class LogbackClassicRequestLogFactoryTest {
static {
    BootstrapLogging.bootstrap();
  }
  private RequestLogFactory requestLog;
  @Before public void setUp() throws Exception {
    final ObjectMapper objectMapper=Jackson.newObjectMapper();
    objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,FileAppenderFactory.class,SyslogAppenderFactory.class);
    this.requestLog=new YamlConfigurationFactory<>(RequestLogFactory.class,BaseValidator.newValidator(),objectMapper,"dw").build(new File(Resources.getResource("yaml/logbackClassicRequestLog.yml").toURI()));
  }
  @Test public void testDeserialized(){
    LogbackClassicRequestLogFactory classicRequestLogFactory=(LogbackClassicRequestLogFactory)requestLog;
    assertThat(classicRequestLogFactory.getTimeZone()).isEqualTo(TimeZone.getTimeZone("Europe/Amsterdam"));
    assertThat(classicRequestLogFactory.getAppenders()).hasSize(3).extractingResultOf("getClass").contains(ConsoleAppenderFactory.class,FileAppenderFactory.class,SyslogAppenderFactory.class);
  }
  @Test public void testBuild(){
    final RequestLog requestLog=this.requestLog.build("classic-request-log");
    assertThat(requestLog).isInstanceOf(DropwizardSlf4jRequestLog.class);
  }
  @Test public void isDiscoverable() throws Exception {
    assertThat(new DiscoverableSubtypeResolver().getDiscoveredSubtypes()).contains(LogbackClassicRequestLogFactory.class);
  }
}
