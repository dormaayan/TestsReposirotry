/** 
 * Configured JDBI client for the database
 */
public class DBIClient extends ExternalResource {
  private final TimeZone dbTimeZone;
  @Nullable private DBI dbi;
  private List<LifeCycle> managedObjects=ImmutableList.of();
  public DBIClient(  TimeZone dbTimeZone){
    this.dbTimeZone=dbTimeZone;
  }
  public DBI getDbi(){
    return requireNonNull(dbi);
  }
  @Override protected void before() throws Throwable {
    final Environment environment=new Environment("test",Jackson.newObjectMapper(),Validators.newValidator(),new MetricRegistry(),getClass().getClassLoader());
    final DataSourceFactory dataSourceFactory=new DataSourceFactory();
    dataSourceFactory.setDriverClass("org.h2.Driver");
    dataSourceFactory.setUrl("jdbc:h2:tcp://localhost/fldb");
    dataSourceFactory.setUser("sa");
    dataSourceFactory.setPassword("");
    final DBIFactory dbiFactory=new DBIFactory(){
      @Override protected Optional<TimeZone> databaseTimeZone(){
        return Optional.of(dbTimeZone);
      }
    }
;
    dbi=dbiFactory.build(environment,dataSourceFactory,"test-jdbi-time-zones");
    managedObjects=environment.lifecycle().getManagedObjects();
    for (    LifeCycle managedObject : managedObjects) {
      managedObject.start();
    }
  }
  @Override protected void after(){
    try {
      for (      LifeCycle managedObject : managedObjects) {
        managedObject.stop();
      }
    }
 catch (    Exception e) {
      throw new IllegalStateException(e);
    }
  }
}
