@SuppressWarnings("unchecked") public class AppenderFactoryCustomLayoutTest {
static {
    BootstrapLogging.bootstrap();
  }
  private final ObjectMapper objectMapper=Jackson.newObjectMapper();
  private final YamlConfigurationFactory<ConsoleAppenderFactory> factory=new YamlConfigurationFactory<>(ConsoleAppenderFactory.class,BaseValidator.newValidator(),objectMapper,"dw-layout");
  private static File loadResource() throws URISyntaxException {
    return new File(Resources.getResource("yaml/appender_with_custom_layout.yml").toURI());
  }
  @Before public void setUp() throws Exception {
    objectMapper.registerSubtypes(TestLayoutFactory.class);
  }
  @Test public void testLoadAppenderWithCustomLayout() throws Exception {
    final ConsoleAppenderFactory<ILoggingEvent> appender=factory.build(loadResource());
    assertThat(appender.getLayout()).isNotNull().isInstanceOf(TestLayoutFactory.class);
    TestLayoutFactory layoutFactory=(TestLayoutFactory)appender.getLayout();
    assertThat(layoutFactory).isNotNull().extracting(TestLayoutFactory::isIncludeSeparator).contains(true);
  }
  @Test public void testBuildAppenderWithCustomLayout() throws Exception {
    AsyncAppender appender=(AsyncAppender)factory.build(loadResource()).build(new LoggerContext(),"test-custom-layout",new DropwizardLayoutFactory(),new NullLevelFilterFactory<>(),new AsyncLoggingEventAppenderFactory());
    ConsoleAppender consoleAppender=(ConsoleAppender)appender.getAppender("console-appender");
    LayoutWrappingEncoder encoder=(LayoutWrappingEncoder)consoleAppender.getEncoder();
    assertThat(encoder.getLayout()).isInstanceOf(TestLayoutFactory.TestLayout.class);
  }
}
