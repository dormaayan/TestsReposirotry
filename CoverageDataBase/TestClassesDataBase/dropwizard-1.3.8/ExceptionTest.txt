@RunWith(Parameterized.class) public static class ExceptionTest {
  @Parameterized.Parameters(name="{0}") public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[][]{{new EOFException(),BadMessageException.class},{new ZipException(),BadMessageException.class},{new IOException(),IOException.class}});
  }
  private final InputStream delegate=Mockito.mock(InputStream.class);
  private final ZipExceptionHandlingInputStream in=new ZipExceptionHandlingInputStream(delegate,"gzip");
  private final Exception t;
  private final Class<? extends Exception> expected;
  public ExceptionTest(  Exception t,  Class<? extends Exception> expected){
    this.t=t;
    this.expected=expected;
  }
  @Test public void testReadBytes() throws Exception {
    doThrow(t).when(delegate).read(Mockito.any(byte[].class),anyInt(),anyInt());
    byte[] buffer=new byte[20];
    try {
      in.read(buffer,4,16);
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).read(same(buffer),eq(4),eq(16));
      verifyNoMoreInteractions(delegate);
    }
  }
  @Test public void testReadByte() throws Exception {
    doThrow(t).when(delegate).read();
    try {
      in.read();
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).read();
      verifyNoMoreInteractions(delegate);
    }
  }
  @Test public void testSkip() throws Exception {
    doThrow(t).when(delegate).skip(anyLong());
    try {
      in.skip(42L);
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).skip(42L);
      verifyNoMoreInteractions(delegate);
    }
  }
  @Test public void testAvailable() throws Exception {
    doThrow(t).when(delegate).available();
    try {
      in.available();
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).available();
      verifyNoMoreInteractions(delegate);
    }
  }
  @Test public void testClose() throws Exception {
    doThrow(t).when(delegate).close();
    try {
      in.close();
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).close();
      verifyNoMoreInteractions(delegate);
    }
  }
  @Test public void testReset() throws Exception {
    doThrow(t).when(delegate).reset();
    try {
      in.reset();
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(expected);
      verify(delegate).reset();
      verifyNoMoreInteractions(delegate);
    }
  }
}
