public class BootstrapTest {
  private final Application<Configuration> application=new Application<Configuration>(){
    @Override public void run(    Configuration configuration,    Environment environment) throws Exception {
    }
  }
;
  private Bootstrap<Configuration> bootstrap;
  @Before public void setUp(){
    bootstrap=new Bootstrap<>(application);
  }
  @Test public void hasAnApplication() throws Exception {
    assertThat(bootstrap.getApplication()).isEqualTo(application);
  }
  @Test public void hasAnObjectMapper() throws Exception {
    assertThat(bootstrap.getObjectMapper()).isNotNull();
  }
  @Test public void hasHealthCheckRegistry(){
    assertThat(bootstrap.getHealthCheckRegistry()).isNotNull();
  }
  @Test public void defaultsToUsingFilesForConfiguration() throws Exception {
    assertThat(bootstrap.getConfigurationSourceProvider()).isInstanceOfAny(FileConfigurationSourceProvider.class);
  }
  @Test public void defaultsToUsingTheDefaultClassLoader() throws Exception {
    assertThat(bootstrap.getClassLoader()).isEqualTo(Thread.currentThread().getContextClassLoader());
  }
  @Test public void comesWithJvmInstrumentation() throws Exception {
    bootstrap.registerMetrics();
    assertThat(bootstrap.getMetricRegistry().getNames()).contains("jvm.buffers.mapped.capacity","jvm.threads.count","jvm.memory.heap.usage","jvm.attribute.vendor","jvm.classloader.loaded","jvm.filedescriptor");
  }
  @Test public void defaultsToDefaultConfigurationFactoryFactory() throws Exception {
    assertThat(bootstrap.getConfigurationFactoryFactory()).isInstanceOf(DefaultConfigurationFactoryFactory.class);
  }
  @Test public void bringsYourOwnMetricRegistry(){
    final MetricRegistry newRegistry=new MetricRegistry(){
      @Override public Histogram histogram(      String name){
        Histogram existed=(Histogram)getMetrics().get(name);
        return existed != null ? existed : new Histogram(new UniformReservoir());
      }
    }
;
    bootstrap.setMetricRegistry(newRegistry);
    bootstrap.registerMetrics();
    assertThat(newRegistry.getNames()).contains("jvm.buffers.mapped.capacity","jvm.threads.count","jvm.memory.heap.usage","jvm.attribute.vendor","jvm.classloader.loaded","jvm.filedescriptor");
  }
  @Test public void defaultsToDefaultValidatorFactory() throws Exception {
    assertThat(bootstrap.getValidatorFactory()).isInstanceOf(ValidatorFactoryImpl.class);
    ValidatorFactoryImpl validatorFactory=(ValidatorFactoryImpl)bootstrap.getValidatorFactory();
    assertThat(validatorFactory.getValidatedValueHandlers()).extractingResultOf("getClass").containsSubsequence(GuavaOptionalValidatedValueUnwrapper.class,OptionalDoubleValidatedValueUnwrapper.class,OptionalIntValidatedValueUnwrapper.class,OptionalLongValidatedValueUnwrapper.class,NonEmptyStringParamUnwrapper.class,ParamValidatorUnwrapper.class);
  }
  @Test public void canUseCustomValidatorFactory() throws Exception {
    ValidatorFactory factory=Validation.byProvider(HibernateValidator.class).configure().buildValidatorFactory();
    bootstrap.setValidatorFactory(factory);
    assertThat(bootstrap.getValidatorFactory()).isSameAs(factory);
  }
  @Test public void canUseCustomObjectMapper(){
    final ObjectMapper minimalObjectMapper=Jackson.newMinimalObjectMapper();
    bootstrap.setObjectMapper(minimalObjectMapper);
    assertThat(bootstrap.getObjectMapper()).isSameAs(minimalObjectMapper);
  }
  @Test public void canUseCustomHealthCheckRegistry(){
    final HealthCheckRegistry healthCheckRegistry=new HealthCheckRegistry();
    bootstrap.setHealthCheckRegistry(healthCheckRegistry);
    assertThat(bootstrap.getHealthCheckRegistry()).isSameAs(healthCheckRegistry);
  }
}
