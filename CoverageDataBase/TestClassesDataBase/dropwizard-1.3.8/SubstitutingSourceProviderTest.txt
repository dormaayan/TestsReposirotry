public class SubstitutingSourceProviderTest {
  @Test public void shouldSubstituteCorrectly() throws IOException {
    StrLookup<?> dummyLookup=new StrLookup<Object>(){
      @Override public String lookup(      String key){
        return "baz";
      }
    }
;
    DummySourceProvider dummyProvider=new DummySourceProvider();
    SubstitutingSourceProvider provider=new SubstitutingSourceProvider(dummyProvider,new StrSubstitutor(dummyLookup));
    String results=new String(ByteStreams.toByteArray(provider.open("foo: ${bar}")),StandardCharsets.UTF_8);
    assertThat(results).isEqualTo("foo: baz");
    try {
      dummyProvider.lastStream.read();
      failBecauseExceptionWasNotThrown(IOException.class);
    }
 catch (    IOException e) {
      assertThat(e).hasMessage("Stream closed");
    }
  }
  @Test public void shouldSubstituteOnlyExistingVariables() throws IOException {
    StrLookup<?> dummyLookup=new StrLookup<Object>(){
      @Override @Nullable public String lookup(      String key){
        return null;
      }
    }
;
    SubstitutingSourceProvider provider=new SubstitutingSourceProvider(new DummySourceProvider(),new StrSubstitutor(dummyLookup));
    String results=new String(ByteStreams.toByteArray(provider.open("foo: ${bar}")),StandardCharsets.UTF_8);
    assertThat(results).isEqualTo("foo: ${bar}");
  }
  @Test public void shouldSubstituteWithDefaultValue() throws IOException {
    StrLookup<?> dummyLookup=new StrLookup<Object>(){
      @Override @Nullable public String lookup(      String key){
        return null;
      }
    }
;
    SubstitutingSourceProvider provider=new SubstitutingSourceProvider(new DummySourceProvider(),new StrSubstitutor(dummyLookup));
    String results=new String(ByteStreams.toByteArray(provider.open("foo: ${bar:-default}")),StandardCharsets.UTF_8);
    assertThat(results).isEqualTo("foo: default");
  }
private static class DummySourceProvider implements ConfigurationSourceProvider {
    public InputStream lastStream=new ByteArrayInputStream(new byte[]{});
    @Override public InputStream open(    String s) throws IOException {
      lastStream=new BufferedInputStream(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));
      return lastStream;
    }
  }
}
