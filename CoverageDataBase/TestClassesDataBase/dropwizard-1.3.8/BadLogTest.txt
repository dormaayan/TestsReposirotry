public class BadLogTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(BadLogTest.class);
  private static ByteArrayOutputStream out;
  private static ByteArrayOutputStream err;
  private static PrintStream oldOut=System.out;
  private static PrintStream oldErr=System.err;
  @Rule public TemporaryFolder folder=new TemporaryFolder();
  @Before public void setup() throws Exception {
    out=new ByteArrayOutputStream();
    err=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    System.setErr(new PrintStream(err));
  }
  @After public void teardown(){
    System.setOut(oldOut);
    System.setErr(oldErr);
  }
  @Test public void thatLoggingIsntBrokenOnCleanup() throws Exception {
    BadLogApp.runMe(new String[]{"server"});
    LOGGER.info("I'm after the test");
    Thread.sleep(100);
    assertThat(new String(out.toByteArray(),UTF_8)).contains("Mayday we're going down").contains("I'm after the test");
    assertThat(new String(err.toByteArray(),UTF_8)).contains("I'm a bad app");
  }
  @Test public void testSupportShouldResetLogging() throws Exception {
    final Path logFile=folder.newFile("example.log").toPath();
    Files.write(logFile,new byte[]{});
    final String configPath=ResourceHelpers.resourceFilePath("badlog/config.yaml");
    final DropwizardTestSupport<Configuration> app=new DropwizardTestSupport<>(BadLogApp.class,configPath,ConfigOverride.config("logging.appenders[0].currentLogFilename",logFile.toString()));
    assertThatThrownBy(app::before).hasMessage("I'm a bad app");
    app.getApplication().run("server",configPath);
    app.after();
    assertThat(new String(out.toByteArray(),UTF_8)).doesNotContain("Mayday we're going down");
    out.reset();
    final String contents=new String(Files.readAllBytes(logFile),UTF_8);
    assertThat(contents).contains("Mayday we're going down");
    Files.write(logFile,new byte[]{});
    final DropwizardTestSupport<Configuration> app2=new DropwizardTestSupport<>(BadLogApp.class,new Configuration());
    assertThatThrownBy(app2::before).hasMessage("I'm a bad app");
    app2.getApplication().run("server");
    app2.after();
    assertThat(new String(out.toByteArray(),UTF_8)).contains("Mayday we're going down");
    out.reset();
    final String contents2=new String(Files.readAllBytes(logFile),UTF_8);
    assertThat(contents2).doesNotContain("Mayday we're going down");
    Files.write(logFile,new byte[]{});
    final DropwizardTestSupport<Configuration> app3=new DropwizardTestSupport<>(BadLogApp.class,configPath,ConfigOverride.config("logging.appenders[0].currentLogFilename",logFile.toString()));
    assertThatThrownBy(app3::before).hasMessage("I'm a bad app");
    app3.getApplication().run("server",configPath);
    app3.after();
    assertThat(new String(out.toByteArray(),UTF_8)).doesNotContain("Mayday we're going down");
    final String contents3=new String(Files.readAllBytes(logFile),UTF_8);
    assertThat(contents3).contains("Mayday we're going down");
  }
}
