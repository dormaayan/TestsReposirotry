@RunWith(Parameterized.class) public class ApiTckTestCase extends TestDataProvider {
  private static final String INPUT_FILE_NAME="input.raml";
  private static final String OUTPUT_FILE_NAME="api-tck.json";
  public ApiTckTestCase(  File input,  File expected,  String name){
    super(input,expected,name);
  }
  @Test public void runTest() throws IOException {
    if (!expectedOutput.exists()) {
      return;
    }
    final RamlBuilder builder=new RamlBuilder();
    final Node raml=builder.build(input);
    assertThat(raml,notNullValue());
    dump=new TckEmitter().dump(raml);
    dump=wrapTck(dump);
    expected=IOUtils.toString(new FileInputStream(this.expectedOutput));
    Assert.assertTrue(jsonEquals(dump,expected));
  }
  private String wrapTck(  String dump){
    return "{\n" + "    \"document\": " + indent(dump) + ",\n"+ "    \"errors\": []\n"+ "}\n";
  }
  private String indent(  String dump){
    return dump.replace("\n","\n    ");
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> data() throws URISyntaxException {
    return getData(ApiTckTestCase.class.getResource("").toURI(),INPUT_FILE_NAME,OUTPUT_FILE_NAME);
  }
  protected String[] getKeysToFilter(){
    return new String[]{"__METADATA__","RAMLVersion"};
  }
}
