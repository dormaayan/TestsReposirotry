@RunWith(Parameterized.class) public class SuggesterTestCase extends TestDataProvider {
  public static final String CURSOR_KEYWORD="<cursor>";
  public static final String INPUT_FILE_NAME="input.raml";
  public static final String OUTPUT_FILE_NAME="output.json";
  public SuggesterTestCase(  File input,  File expectedOutput,  String name){
    super(input,expectedOutput,name);
  }
  @Test public void verifySuggestion() throws IOException {
    final RamlSuggester ramlSuggester=new RamlSuggester();
    String content=IOUtils.toString(new FileInputStream(input),"UTF-8");
    if (IS_OS_WINDOWS) {
      content=content.replace(IOUtils.LINE_SEPARATOR_WINDOWS,IOUtils.LINE_SEPARATOR_UNIX);
    }
    final int offset=content.indexOf(CURSOR_KEYWORD);
    final String document=content.substring(0,offset) + content.substring(offset + CURSOR_KEYWORD.length());
    final List<Suggestion> suggestions=ramlSuggester.suggestions(document,offset - 1).getSuggestions();
    final ObjectWriter ow=new ObjectMapper().disableDefaultTyping().writer().withDefaultPrettyPrinter();
    dump=ow.writeValueAsString(suggestions);
    expected=IOUtils.toString(new FileInputStream(this.expectedOutput));
    Assert.assertTrue(jsonEquals(dump,expected));
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> getData() throws URISyntaxException {
    return getData(SuggesterTestCase.class.getResource("").toURI(),INPUT_FILE_NAME,OUTPUT_FILE_NAME);
  }
}
