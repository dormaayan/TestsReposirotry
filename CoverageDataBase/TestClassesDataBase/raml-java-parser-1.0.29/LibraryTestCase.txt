public class LibraryTestCase {
  @Test public void library() throws IOException {
    File input=new File("src/test/resources/org/raml/v2/api/v10/library/assets-lib.raml");
    assertTrue(input.isFile());
    RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input);
    assertFalse(ramlModelResult.hasErrors());
    assertThat(ramlModelResult.getFragment(),is(RamlFragment.Library));
    Library library=ramlModelResult.getLibrary();
    assertThat(library.types(),hasSize(4));
    assertThat(library.traits(),hasSize(1));
  }
  @Test public void cyclicLibraryDependency() throws IOException {
    File input=new File("src/test/resources/org/raml/v2/api/v10/cyclic-uses/file1.raml");
    assertTrue(input.isFile());
    RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input);
    assertTrue(ramlModelResult.hasErrors());
    assertTrue(ramlModelResult.getValidationResults().size() == 1);
    assertEquals("Cyclic dependency loading file: src/test/resources/org/raml/v2/api/v10/cyclic-uses/file1.raml",ramlModelResult.getValidationResults().get(0).getMessage());
  }
  @Test public void selfCyclic() throws IOException {
    File input=new File("src/test/resources/org/raml/v2/api/v10/cyclic-uses/file3.raml");
    assertTrue(input.isFile());
    RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input);
    assertTrue(ramlModelResult.hasErrors());
    assertTrue(ramlModelResult.getValidationResults().size() == 1);
    assertEquals("Cyclic dependency loading file: src/test/resources/org/raml/v2/api/v10/cyclic-uses/file3.raml",ramlModelResult.getValidationResults().get(0).getMessage());
  }
}
