@RunWith(Parameterized.class) public class ApiModelParserTestCase extends TestDataProvider {
  public ApiModelParserTestCase(  File input,  File expectedOutput,  String name){
    super(input,expectedOutput,name);
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> getData() throws URISyntaxException {
    return getData(ApiModelParserTestCase.class.getResource("").toURI(),"input.raml","model.json");
  }
  @Test public void parseRamlFromFile() throws Exception {
    final RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input);
    validateModel(ramlModelResult);
  }
  @Test public void parseRamlFromUri() throws Exception {
    final RamlModelResult ramlModelResult=new RamlModelBuilder().buildApi(input.toURI().toString());
    validateModel(ramlModelResult);
  }
  private void validateModel(  RamlModelResult ramlModelResult) throws Exception {
    final List<ValidationResult> validationResults=ramlModelResult.getValidationResults();
    final StringWriter out=new StringWriter();
    final JsonWriter jsonWriter=new JsonWriter(out);
    jsonWriter.setIndent(" ");
    if (validationResults.isEmpty()) {
      dumpApiToJson(ramlModelResult,jsonWriter);
    }
 else {
      dumpApiErrorsToJson(validationResults,jsonWriter);
    }
    dump=out.toString();
    dump=StringUtils.replace(dump,"\\r\\n","\\n");
    dump=StringUtils.replace(dump,"\\r","\\n");
    expected=IOUtils.toString(new FileInputStream(expectedOutput),"UTF-8");
    Assert.assertTrue(jsonEquals(dump,expected));
  }
  private void dumpApiErrorsToJson(  List<ValidationResult> validationResults,  JsonWriter jsonWriter) throws IOException {
    jsonWriter.beginObject();
    jsonWriter.name("errors");
    jsonWriter.beginArray();
    for (    ValidationResult error : validationResults) {
      jsonWriter.value(error.getMessage());
    }
    jsonWriter.endArray();
    jsonWriter.endObject();
  }
  private void dumpApiToJson(  RamlModelResult ramlModelResult,  JsonWriter jsonWriter) throws Exception {
    if (ramlModelResult.isVersion10()) {
      if (ramlModelResult.getFragment() == RamlFragment.Library) {
        dumpToJson(Library.class,ramlModelResult.getLibrary(),jsonWriter);
      }
 else       if (ramlModelResult.getFragment() == RamlFragment.DataType) {
        dumpToJson(TypeDeclaration.class,ramlModelResult.getTypeDeclaration(),jsonWriter);
      }
 else       if (ramlModelResult.getFragment() == RamlFragment.SecurityScheme) {
        dumpToJson(SecurityScheme.class,ramlModelResult.getSecurityScheme(),jsonWriter);
      }
 else       if (ramlModelResult.getFragment() == RamlFragment.Trait) {
        dumpToJson(Trait.class,ramlModelResult.getTrait(),jsonWriter);
      }
 else       if (ramlModelResult.getFragment() == RamlFragment.ResourceType) {
        dumpToJson(ResourceType.class,ramlModelResult.getResourceType(),jsonWriter);
      }
 else       if (ramlModelResult.getFragment() == RamlFragment.NamedExample) {
        dumpToJson(ExampleSpec.class,ramlModelResult.getExampleSpec(),jsonWriter);
      }
 else {
        dumpToJson(org.raml.v2.api.model.v10.api.Api.class,ramlModelResult.getApiV10(),jsonWriter);
      }
    }
 else {
      dumpToJson(org.raml.v2.api.model.v08.api.Api.class,ramlModelResult.getApiV08(),jsonWriter);
    }
  }
  private void dumpToJson(  Type definitionClass,  Object value,  JsonWriter jsonWriter) throws IOException, InvocationTargetException, IllegalAccessException {
    if (value == null) {
      jsonWriter.nullValue();
    }
 else     if (value instanceof String) {
      jsonWriter.value(value.toString());
    }
 else     if (value instanceof Number) {
      jsonWriter.value((Number)value);
    }
 else     if (value instanceof Boolean) {
      jsonWriter.value((Boolean)value);
    }
 else     if (value.getClass().isEnum()) {
      jsonWriter.value(value.toString());
    }
 else     if (value instanceof List) {
      jsonWriter.beginArray();
      for (      java.lang.Object o : ((List)value)) {
        final Class<?> genericListType;
        if (o != null && o.getClass().getInterfaces().length > 0) {
          genericListType=o.getClass().getInterfaces()[0];
        }
 else {
          genericListType=(Class<?>)((ParameterizedType)definitionClass).getActualTypeArguments()[0];
        }
        dumpToJson(genericListType,o,jsonWriter);
      }
      jsonWriter.endArray();
    }
 else {
      jsonWriter.beginObject();
      final Method[] declaredMethods=ModelUtils.toClass(definitionClass).getMethods();
      HashMap<String,Class<?>[]> methodsMap=new HashMap<String,Class<?>[]>();
      Arrays.sort(declaredMethods,new Comparator<Method>(){
        @Override public int compare(        Method o1,        Method o2){
          return o1.getName().compareTo(o2.getName());
        }
      }
);
      for (      Method declaredMethod : declaredMethods) {
        String name=declaredMethod.getName();
        Class<?>[] parameters=declaredMethod.getParameterTypes();
        if (methodsMap.put(name,parameters) == null) {
          if (parameters.length == 0) {
            if (!isRecursiveMethod(declaredMethod)) {
              final Object methodResult=declaredMethod.invoke(value);
              jsonWriter.name(name);
              dumpToJson(declaredMethod.getGenericReturnType(),methodResult,jsonWriter);
            }
          }
        }
      }
      jsonWriter.endObject();
    }
  }
  private boolean isRecursiveMethod(  Method declaredMethod){
    return (declaredMethod.getName().startsWith("parent") && !declaredMethod.getName().startsWith("parentTypes")) || (declaredMethod.getDeclaringClass().getSimpleName().equals("Method") && declaredMethod.getName().equals("resource"));
  }
}
