@RunWith(Parameterized.class) public class InternalTckTestCase extends TestDataProvider {
  private static final String INPUT_FILE_NAME="input.raml";
  private static final String OUTPUT_FILE_NAME="output.json";
  public InternalTckTestCase(  File input,  File expected,  String name){
    super(input,expected,name);
  }
  @Test public void runTest() throws IOException {
    if (!expectedOutput.exists()) {
      return;
    }
    final RamlBuilder builder=new RamlBuilder();
    final Node raml=builder.build(input);
    assertThat(raml,notNullValue());
    List<ErrorNode> errorNodes=raml.findDescendantsWith(ErrorNode.class);
    assertThat(errorNodes,hasSize(0));
    dump=new TckEmitter().dump(raml);
    expected=IOUtils.toString(new FileInputStream(this.expectedOutput));
    Assert.assertTrue(jsonEquals(dump,expected));
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> data() throws URISyntaxException {
    Collection<Object[]> data=getData(InternalTckTestCase.class.getResource("").toURI(),INPUT_FILE_NAME,OUTPUT_FILE_NAME);
    data.addAll(getData(InternalTckTestCase.class.getResource("../api").toURI(),INPUT_FILE_NAME,OUTPUT_FILE_NAME));
    return data;
  }
}
