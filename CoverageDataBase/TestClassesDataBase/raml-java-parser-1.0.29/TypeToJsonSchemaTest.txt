@RunWith(Parameterized.class) public class TypeToJsonSchemaTest extends TestDataProvider {
  public TypeToJsonSchemaTest(  File input,  File expectedOutput,  String name){
    super(input,expectedOutput,name);
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> getData() throws URISyntaxException {
    return getData(TypeToJsonSchemaTest.class.getResource("").toURI(),"input.raml","output.json");
  }
  @Test public void test() throws IOException, SAXException {
    final RamlBuilder builder=new RamlBuilder();
    final Node build=builder.build(input);
    final List<TypeDeclarationField> fields=build.findDescendantsWith(TypeDeclarationField.class);
    for (    TypeDeclarationField field : fields) {
      if (field.getName().equals("root")) {
        final ResolvedType resolvedType=((TypeDeclarationNode)field.getValue()).getResolvedType();
        JsonObject actual=new TypeToJsonSchemaVisitor().transform(resolvedType);
        dump=actual.toString();
        expected=IOUtils.toString(new FileInputStream(expectedOutput));
        assertTrue(jsonEquals(dump,expected));
        return;
      }
    }
    fail("No type called root was found");
  }
}
