@RunWith(Parameterized.class) public class SchemaGeneratorTest extends TestDataProvider {
  private static final String SCHEMA_FILE_NAME="schema.json";
  private static final String EXAMPLE_FILE_NAME="input.json";
  public SchemaGeneratorTest(  File input,  File expectedOutput,  String name){
    super(input,expectedOutput,name);
  }
  @Test public void verifyJson() throws IOException, ProcessingException {
    String content=IOUtils.toString(input.toURI());
    ExternalSchemaTypeExpressionNode node=new ExternalSchemaTypeExpressionNode(content);
    Position position=Mockito.mock(Position.class);
    Mockito.when(position.getIncludedResourceUri()).thenReturn(input.toURI().toString());
    node.setStartPosition(position);
    node.setEndPosition(position);
    JsonSchemaExternalType jsonSchemaExternalType=(JsonSchemaExternalType)node.generateDefinition();
    JsonSchema jsonSchema=SchemaGenerator.generateJsonSchema(jsonSchemaExternalType);
    ProcessingReport report=jsonSchema.validate(new ObjectMapper().disableDefaultTyping().readTree(expectedOutput));
    assertTrue(report.isSuccess());
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> getData() throws URISyntaxException {
    return getData(SchemaGeneratorTest.class.getResource("").toURI(),SCHEMA_FILE_NAME,EXAMPLE_FILE_NAME);
  }
}
