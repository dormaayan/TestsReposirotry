/** 
 * Unit test for  {@link Jackson2Helper}.
 * @author edgar.espina
 * @since 0.1.0
 */
public class Jackson2HelperTest {
  @Test public void toJSON() throws IOException {
    Handlebars handlebars=new Handlebars();
    handlebars.registerHelper("@json",Jackson2Helper.INSTANCE);
    Template template=handlebars.compileInline("{{@json this}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\"title\":\"First Post\",\"body\":\"...\",\"comments\":[]}",result);
  }
  @Test public void toPrettyJSON() throws IOException {
    Handlebars handlebars=new Handlebars();
    handlebars.registerHelper("@json",Jackson2Helper.INSTANCE);
    Template template=handlebars.compileInline("{{@json this pretty=true}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\n" + "  \"title\" : \"First Post\",\n" + "  \"body\" : \"...\",\n"+ "  \"comments\" : [ ]\n"+ "}",result);
  }
  @Test public void toJSONViewInclusive() throws IOException {
    Handlebars handlebars=new Handlebars();
    handlebars.registerHelper("@json",Jackson2Helper.INSTANCE);
    Template template=handlebars.compileInline("{{@json this view=\"com.github.jknack.handlebars.Blog$Views$Public\"}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\"title\":\"First Post\",\"body\":\"...\",\"comments\":[]}",result);
  }
  @Test public void toJSONViewExclusive() throws IOException {
    Handlebars handlebars=new Handlebars();
    ObjectMapper mapper=new ObjectMapper();
    mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false);
    handlebars.registerHelper("@json",new Jackson2Helper(mapper));
    Template template=handlebars.compileInline("{{@json this view=\"com.github.jknack.handlebars.Blog$Views$Public\"}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\"title\":\"First Post\"}",result);
  }
  @Test public void toJSONAliasViewExclusive() throws IOException {
    Handlebars handlebars=new Handlebars();
    ObjectMapper mapper=new ObjectMapper();
    mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false);
    handlebars.registerHelper("@json",new Jackson2Helper(mapper).viewAlias("myView",Public.class));
    Template template=handlebars.compileInline("{{@json this view=\"myView\"}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\"title\":\"First Post\"}",result);
  }
  @Test(expected=HandlebarsException.class) public void jsonViewNotFound() throws IOException {
    Handlebars handlebars=new Handlebars();
    ObjectMapper mapper=new ObjectMapper();
    mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false);
    handlebars.registerHelper("@json",new Jackson2Helper(mapper));
    Template template=handlebars.compileInline("{{@json this view=\"missing.ViewClass\"}}");
    CharSequence result=template.apply(new Blog("First Post","..."));
    assertEquals("{\"title\":\"First Post\"}",result);
  }
  @Test public void escapeHtml() throws IOException {
    Handlebars handlebars=new Handlebars();
    handlebars.registerHelper("@json",Jackson2Helper.INSTANCE);
    Map<String,String> model=new HashMap<String,String>();
    model.put("script","<script text=\"text/javascript\"></script>");
    assertEquals("{\"script\":\"<script text=\\\"text/javascript\\\"></script>\"}",handlebars.compileInline("{{@json this}}").apply(model));
    assertEquals("{\"script\":\"\\u003Cscript text=\\\"text/javascript\\\"\\u003E\\u003C/script\\u003E\"}",handlebars.compileInline("{{@json this escapeHTML=true}}").apply(model));
  }
}
