@RunWith(Parameterized.class) public class InheritanceTest {
  static Handlebars handlebars=new Handlebars(new ClassPathTemplateLoader("/inheritance"));
static {
    handlebars.setPrettyPrint(true);
  }
  private String name;
  public InheritanceTest(  final String name){
    this.name=name;
  }
  @Test public void inheritance() throws IOException {
    try {
      Template template=handlebars.compile(name);
      CharSequence result=template.apply(new Object());
      String expected=FileUtils.readFileToString(new File("src/test/resources/inheritance/" + name + ".expected"));
      assertEquals(expected,result);
    }
 catch (    HandlebarsException ex) {
      Handlebars.error(ex.getMessage());
      throw ex;
    }
  }
  @Parameters public static Collection<Object[]> data(){
    Collection<Object[]> data=Arrays.asList(new Object[]{"home"},new Object[]{"about"},new Object[]{"base"});
    return data;
  }
  static String toString(  final InputStream input) throws IOException {
    StringBuilder buffer=new StringBuilder(1024 * 4);
    int ch;
    while ((ch=input.read()) != -1) {
      buffer.append((char)ch);
    }
    buffer.trimToSize();
    input.close();
    return buffer.toString();
  }
}
