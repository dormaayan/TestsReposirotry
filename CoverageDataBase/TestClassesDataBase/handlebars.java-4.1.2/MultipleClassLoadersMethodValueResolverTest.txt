public class MultipleClassLoadersMethodValueResolverTest {
  private final static String CLASS_NAME="TestClass";
  @Rule public TemporaryFolder temp=new TemporaryFolder();
  private MethodValueResolver resolver=new MethodValueResolver();
  @Before public void compileTestClass() throws IOException, URISyntaxException {
    String sourceFileName=CLASS_NAME + ".java";
    File sourceFile=temp.newFile(sourceFileName);
    URL sourceFileResourceUrl=getClass().getResource(sourceFileName).toURI().toURL();
    copyURLToFile(sourceFileResourceUrl,sourceFile);
    JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
    compiler.run(null,null,null,"-d",temp.getRoot().getAbsolutePath(),sourceFile.getAbsolutePath());
  }
  @Test public void canResolveMethodsFromTheSameClassLoadedByDistinctClassLoaders() throws Exception {
    Assert.assertEquals(resolver.resolve(loadTestClassWithDistinctClassLoader().newInstance(),"getField"),"value");
    Assert.assertEquals(resolver.resolve(loadTestClassWithDistinctClassLoader().newInstance(),"getField"),"value");
  }
  private Class<?> loadTestClassWithDistinctClassLoader() throws Exception {
    URL[] classpath={temp.getRoot().toURI().toURL()};
    URLClassLoader loader=new URLClassLoader(classpath);
    Class<?> clazz=loader.loadClass(CLASS_NAME);
    loader.close();
    return clazz;
  }
}
