/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestCompositeUnaryProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return Composite.procedure(NoOp.instance(),Constant.TRUE);
  }
  public void testRun() throws Exception {
    Composite.procedure(NoOp.instance(),Identity.instance()).run(null);
  }
  @SuppressWarnings("unchecked") public void testNullNotAllowed() throws Exception {
    try {
      new CompositeUnaryProcedure(null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      new CompositeUnaryProcedure<Object>(NoOp.instance()).of(null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  public void testOf() throws Exception {
    Composite.procedure(NoOp.instance()).of(Identity.instance()).run(null);
  }
  public void testEquals() throws Exception {
    CompositeUnaryProcedure<Object> f=Composite.procedure(NoOp.instance());
    assertEquals(f,f);
    CompositeUnaryProcedure<Object> g=Composite.procedure(NoOp.instance());
    assertObjectsAreEqual(f,g);
    for (int i=0; i < 3; i++) {
      f=f.of(Constant.of("x"));
      assertObjectsAreNotEqual(f,g);
      g=g.of(Constant.of("x"));
      assertObjectsAreEqual(f,g);
      f=f.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreNotEqual(f,g);
      g=g.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreEqual(f,g);
    }
    assertObjectsAreNotEqual(f,Constant.FALSE);
  }
}
