/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryCompositeBinaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("left"),RightIdentity.FUNCTION);
  }
  @Test @SuppressWarnings("unchecked") public void testEvaluateRaw() throws Exception {
    BinaryFunction f=new BinaryCompositeBinaryFunction(RightIdentity.FUNCTION,Constant.of("K"),RightIdentity.FUNCTION);
    assertEquals("right",f.evaluate("left","right"));
    assertNull("right",f.evaluate("left",null));
    assertEquals("right",f.evaluate(null,"right"));
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<String,String,String> f=new BinaryCompositeBinaryFunction<String,String,String>(RightIdentity.<String,String>function(),Constant.of("K"),RightIdentity.<String,String>function());
    assertEquals("right",f.evaluate("left","right"));
    assertNull("right",f.evaluate("left",null));
    assertEquals("right",f.evaluate(null,"right"));
  }
  @Test public void testEvaluateObject() throws Exception {
    BinaryFunction<Object,Object,Object> f=new BinaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("K"),RightIdentity.FUNCTION);
    assertEquals("right",f.evaluate("left","right"));
    assertNull("right",f.evaluate("left",null));
    assertEquals("right",f.evaluate(null,"right"));
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=new BinaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),Constant.of("right"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new BinaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new BinaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new BinaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,RightIdentity.FUNCTION,Constant.of("right")));
    assertObjectsAreNotEqual(f,new BinaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),RightIdentity.FUNCTION));
  }
}
