/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestCompositeUnaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return Composite.predicate(Constant.TRUE);
  }
  @Test public void testTest() throws Exception {
    assertTrue(Composite.predicate(Constant.TRUE).test(null));
    assertTrue(Composite.predicate(Constant.TRUE,Constant.of(3)).test("xyzzy"));
    assertFalse(Composite.predicate(Constant.FALSE,Constant.of(4)).test("xyzzy"));
  }
  @Test @SuppressWarnings("unchecked") public void testNullNotAllowed() throws Exception {
    try {
      new CompositeUnaryPredicate(null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      Composite.function(Constant.TRUE,null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testOf() throws Exception {
    CompositeUnaryPredicate<Object> f=new CompositeUnaryPredicate<Object>(Constant.TRUE);
    assertTrue(f.test(null));
    for (int i=0; i < 10; i++) {
      f=f.of(Constant.FALSE);
      assertTrue(f.test(null));
    }
  }
  @Test public void testEquals() throws Exception {
    CompositeUnaryPredicate<Object> f=new CompositeUnaryPredicate<Object>(Constant.TRUE);
    assertEquals(f,f);
    CompositeUnaryPredicate<Object> g=new CompositeUnaryPredicate<Object>(Constant.TRUE);
    assertObjectsAreEqual(f,g);
    for (int i=0; i < 3; i++) {
      f=f.of(Constant.of("x"));
      assertObjectsAreNotEqual(f,g);
      g=g.of(Constant.of("x"));
      assertObjectsAreEqual(f,g);
      f=f.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreNotEqual(f,g);
      g=g.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreEqual(f,g);
    }
    assertObjectsAreNotEqual(f,Constant.FALSE);
  }
}
