/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestPredicateFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new PredicateFunction(Constant.of(true));
  }
  @Test public void testTestWhenTrue() throws Exception {
    Function<Boolean> f=new PredicateFunction(Constant.TRUE);
    assertEquals(Boolean.TRUE,f.evaluate());
  }
  @Test public void testTestWhenFalse() throws Exception {
    Function<Boolean> f=new PredicateFunction(Constant.FALSE);
    assertEquals(Boolean.FALSE,f.evaluate());
  }
  @Test public void testEquals() throws Exception {
    Function<Boolean> f=new PredicateFunction(Constant.TRUE);
    assertEquals(f,f);
    assertObjectsAreEqual(f,new PredicateFunction(Constant.TRUE));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new PredicateFunction(Constant.FALSE));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(FunctionPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(PredicateFunction.adapt(Constant.TRUE));
  }
}
