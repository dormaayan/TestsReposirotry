/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIsLessThan extends BaseComparisonPredicateTest {
  protected Object makeFunctor(){
    return new IsLessThan<Comparable<?>>();
  }
  @Test public void testTest() throws Exception {
    IsLessThan<Integer> p=new IsLessThan<Integer>();
    assertTrue(p.test(new Integer(2),new Integer(4)));
    assertTrue(p.test(new Integer(3),new Integer(4)));
    assertFalse(p.test(new Integer(4),new Integer(4)));
    assertFalse(p.test(new Integer(5),new Integer(4)));
    assertFalse(p.test(new Integer(6),new Integer(4)));
  }
  @Test public void testInstance(){
    assertFalse(IsLessThan.instance(new Integer(7)).test(new Integer(8)));
    assertTrue(IsLessThan.instance(new Integer(7)).test(new Integer(6)));
  }
  @Test @SuppressWarnings("unchecked") public void testEquals() throws Exception {
    IsLessThan<Comparable<?>> p=new IsLessThan<Comparable<?>>();
    assertEquals(p,p);
    assertObjectsAreEqual(p,new IsLessThan<Comparable<?>>());
    assertObjectsAreEqual(p,new IsLessThan<Comparable<?>>(new ComparableComparator()));
    assertObjectsAreEqual(p,IsLessThan.instance());
    assertObjectsAreNotEqual(p,Constant.FALSE);
  }
}
