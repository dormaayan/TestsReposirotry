/** 
 * @version $Revision$ $Date$
 * @author Herve Quiroz
 */
public class TestDoWhileProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new DoWhileProcedure(NoOp.INSTANCE,Constant.FALSE);
  }
public class ListRemoveFirstProcedure implements Procedure {
    protected List<Object> list;
    public ListRemoveFirstProcedure(    List<Object> list){
      this.list=list;
    }
    public void run(){
      list.remove(0);
    }
  }
  private List<Object> getList(){
    List<Object> list=new LinkedList<Object>();
    list.add("a");
    list.add("b");
    list.add("c");
    list.add("d");
    return list;
  }
  @Test public void testLoopWithAction() throws Exception {
    List<Object> list=getList();
    Procedure action=new ListRemoveFirstProcedure(list);
    Predicate condition=new Not(new BoundPredicate(new IsEmpty<List<Object>>(),list));
    Procedure procedure=new DoWhileProcedure(action,condition);
    assertTrue("The condition should be true before running the loop",condition.test());
    assertFalse("The list should not be empty then",list.isEmpty());
    procedure.run();
    assertFalse("The condition should be false after running the loop",condition.test());
    assertTrue("The list should be empty then",list.isEmpty());
    list=getList();
    action=new ListRemoveFirstProcedure(list);
    condition=new Predicate(){
      private int count=2;
      public boolean test(){
        return count-- > 0;
      }
    }
;
    procedure=new DoWhileProcedure(action,condition);
    procedure.run();
    assertFalse("The list should not contain \"a\" anymore",list.contains("a"));
    assertFalse("The list should not contain \"b\" anymore",list.contains("b"));
    assertFalse("The list should not contain \"c\" anymore",list.contains("c"));
    assertTrue("The list should still contain \"d\"",list.contains("d"));
  }
  @Test public void testLoopForNothing(){
    List<Object> list=getList();
    Procedure action=new ListRemoveFirstProcedure(list);
    Procedure procedure=new DoWhileProcedure(action,Constant.FALSE);
    assertTrue("The list should contain 4 elements before runnning the loop",list.size() == 4);
    procedure.run();
    assertTrue("The list should contain 3 elements after runnning the loop",list.size() == 3);
  }
}
