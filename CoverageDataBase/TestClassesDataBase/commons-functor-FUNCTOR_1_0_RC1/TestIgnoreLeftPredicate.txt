/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIgnoreLeftPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IgnoreLeftPredicate<Object,Object>(Constant.TRUE);
  }
  @Test public void testEvaluate() throws Exception {
    BinaryPredicate<Object,Boolean> p=new IgnoreLeftPredicate<Object,Boolean>(new UnaryFunctionUnaryPredicate<Boolean>(Identity.<Boolean>instance()));
    assertTrue(p.test(null,Boolean.TRUE));
    assertTrue(!p.test(null,Boolean.FALSE));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Boolean> p=new IgnoreLeftPredicate<Object,Boolean>(new UnaryFunctionUnaryPredicate<Boolean>(Identity.<Boolean>instance()));
    assertEquals(p,p);
    assertObjectsAreEqual(p,new IgnoreLeftPredicate<Object,Boolean>(new UnaryFunctionUnaryPredicate<Boolean>(Identity.<Boolean>instance())));
    assertObjectsAreNotEqual(p,Constant.TRUE);
    assertObjectsAreNotEqual(p,new IgnoreLeftPredicate<Object,Object>(Constant.FALSE));
    assertObjectsAreNotEqual(p,Constant.FALSE);
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(IgnoreLeftPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(IgnoreLeftPredicate.adapt(Constant.TRUE));
  }
}
