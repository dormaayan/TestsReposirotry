/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryPredicateUnaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryPredicateUnaryFunction<Object>(Constant.TRUE);
  }
  @Test public void testTestWhenTrue() throws Exception {
    UnaryFunction<Object,Boolean> f=new UnaryPredicateUnaryFunction<Object>(Constant.TRUE);
    assertEquals(Boolean.TRUE,f.evaluate(null));
  }
  @Test public void testTestWhenFalse() throws Exception {
    UnaryFunction<Object,Boolean> f=new UnaryPredicateUnaryFunction<Object>(Constant.FALSE);
    assertEquals(Boolean.FALSE,f.evaluate(null));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Boolean> f=new UnaryPredicateUnaryFunction<Object>(Constant.TRUE);
    assertEquals(f,f);
    assertObjectsAreEqual(f,new UnaryPredicateUnaryFunction<Object>(Constant.TRUE));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new UnaryPredicateUnaryFunction<Object>(Constant.FALSE));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(UnaryFunctionUnaryPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(UnaryPredicateUnaryFunction.adapt(Constant.TRUE));
  }
}
