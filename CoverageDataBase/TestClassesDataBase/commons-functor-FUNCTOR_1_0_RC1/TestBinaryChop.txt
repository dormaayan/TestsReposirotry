/** 
 * Examples of binary search implementations. A binary search algorithm is the same strategy used in that number guessing game, where one player picks a number between 1 and 100, and the second player tries to guess it. Each time the second player guesses a number, the first player tells whether the chosen number is higher, lower or equal to the guess. An effective strategy for this sort of game is always guess the midpoint between what you know to be the lowest and highest possible number.  This will find the number in log2(N) guesses (when N = 100, this is at most 7 guesses). For example, suppose the first player (secretly) picks the number 63.  The guessing goes like this: P1> I'm thinking of a number between 1 and 100. P2> Is it 50? P1> Higher. P2> 75? P1> Lower. P2> 62? P1> Higher. P2> 68? P1> Lower. P2> 65? P1> Lower. P2> 63? P1> That's it. Dave Thomas's Kata Two asks us to implement a binary search algorithm in several ways.  Here we'll use this as an opportunity to consider some common approaches and explore some functor based approaches as well. See http://pragprog.com/pragdave/Practices/Kata/KataTwo.rdoc,v for more information on this Kata.
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestBinaryChop {
  /** 
 * This is Dave's test case, plus a quick check of searching a fairly large list, just to make sure the time and space requirements are reasonable.
 */
  private void chopTest(  BinaryChop chopper){
    assertEquals(-1,chopper.find(3,new int[0]));
    assertEquals(-1,chopper.find(3,new int[]{1}));
    assertEquals(0,chopper.find(1,new int[]{1}));
    assertEquals(0,chopper.find(1,new int[]{1,3,5}));
    assertEquals(1,chopper.find(3,new int[]{1,3,5}));
    assertEquals(2,chopper.find(5,new int[]{1,3,5}));
    assertEquals(-1,chopper.find(0,new int[]{1,3,5}));
    assertEquals(-1,chopper.find(2,new int[]{1,3,5}));
    assertEquals(-1,chopper.find(4,new int[]{1,3,5}));
    assertEquals(-1,chopper.find(6,new int[]{1,3,5}));
    assertEquals(0,chopper.find(1,new int[]{1,3,5,7}));
    assertEquals(1,chopper.find(3,new int[]{1,3,5,7}));
    assertEquals(2,chopper.find(5,new int[]{1,3,5,7}));
    assertEquals(3,chopper.find(7,new int[]{1,3,5,7}));
    assertEquals(-1,chopper.find(0,new int[]{1,3,5,7}));
    assertEquals(-1,chopper.find(2,new int[]{1,3,5,7}));
    assertEquals(-1,chopper.find(4,new int[]{1,3,5,7}));
    assertEquals(-1,chopper.find(6,new int[]{1,3,5,7}));
    assertEquals(-1,chopper.find(8,new int[]{1,3,5,7}));
    List largeList=(List)(new IntegerRange(0,100001).toCollection());
    assertEquals(-1,chopper.find(new Integer(-5),largeList));
    assertEquals(100000,chopper.find(new Integer(100000),largeList));
    assertEquals(0,chopper.find(new Integer(0),largeList));
    assertEquals(50000,chopper.find(new Integer(50000),largeList));
  }
  /** 
 * In practice, one would most likely use the binary search method already available in java.util.Collections, but that's not really the point of this exercise.
 */
  @Test public void testBuiltIn(){
    chopTest(new BaseBinaryChop(){
      public int find(      Object seeking,      List list){
        int result=Collections.binarySearch(list,seeking);
        return result >= 0 ? result : -1;
      }
    }
);
  }
  /** 
 * Here's a basic iterative approach. We set the lower or upper bound to the midpoint until there's only one element between the lower and upper bound.  Then the lower bound is where the element would be found if it existed in the list. We add an additional comparision at the end so that we can return -1 if the element is not yet in the list.
 */
  @Test public void testIterative(){
    chopTest(new BaseBinaryChop(){
      public int find(      Object seeking,      List list){
        int high=list.size();
        int low=0;
        while (high - low > 1) {
          int mid=(high + low) / 2;
          if (greaterThan(list,mid,seeking)) {
            high=mid;
          }
 else {
            low=mid;
          }
        }
        return list.isEmpty() ? -1 : (equals(list,low,seeking) ? low : -1);
      }
    }
);
  }
interface Loop extends Predicate, Procedure, Function {
    /** 
 * The terminating condition. 
 */
    boolean test();
    /** 
 * The loop body. 
 */
    void run();
    /** 
 * The result of executing the loop. 
 */
    Object evaluate();
  }
  @Test public void testIterativeWithInvariants(){
    chopTest(new BaseBinaryChop(){
      public int find(      final Object seeking,      final List list){
        Loop loop=new Loop(){
          int high=list.size();
          int low=0;
          /** 
 * Our terminating condition. 
 */
          public boolean test(){
            return (high - low) <= 1;
          }
          /** 
 * Our loop body. 
 */
          public void run(){
            int mid=(high + low) / 2;
            if (greaterThan(list,mid,seeking)) {
              high=mid;
            }
 else {
              low=mid;
            }
          }
          /** 
 * A way of returning the result at the end of the loop.
 */
          public Object evaluate(){
            return new Integer(list.isEmpty() ? -1 : (BaseBinaryChop.equals(list,low,seeking) ? low : -1));
          }
        }
;
        new UntilDo(loop,loop).run();
        return ((Number)loop.evaluate()).intValue();
      }
    }
);
  }
class BinarySearchLoop extends EiffelStyleLoop {
    BinarySearchLoop(    Object aSeeking,    List aList){
      seeking=aSeeking;
      list=aList;
      from(new Procedure(){
        public void run(){
          low=0;
          high=list.size();
        }
      }
);
      invariant(new Predicate(){
        public boolean test(){
          return high == 0 || low < high;
        }
      }
);
      variant(new Function(){
        public Object evaluate(){
          return new Integer(high - low);
        }
      }
);
      until(new Predicate(){
        public boolean test(){
          return high - low <= 1;
        }
      }
);
      loop(new Procedure(){
        public void run(){
          int mid=(high + low) / 2;
          if (BaseBinaryChop.greaterThan(list,mid,seeking)) {
            high=mid;
          }
 else {
            low=mid;
          }
        }
      }
);
    }
    int getResult(){
      return list.isEmpty() ? -1 : BaseBinaryChop.equals(list,low,seeking) ? low : -1;
    }
    private int high;
    private int low;
    private final Object seeking;
    private final List list;
  }
  @Test public void testIterativeWithInvariantsAndAssertions(){
    chopTest(new BaseBinaryChop(){
      public int find(      Object seeking,      List list){
        BinarySearchLoop loop=new BinarySearchLoop(seeking,list);
        loop.run();
        return loop.getResult();
      }
    }
);
  }
  /** 
 * A recursive version of that implementation uses method parameters to track the upper and lower bounds.
 */
  @Test public void testRecursive(){
    chopTest(new BaseBinaryChop(){
      public int find(      Object seeking,      List list){
        return find(seeking,list,0,list.size());
      }
      private int find(      Object seeking,      List list,      int low,      int high){
        if (high - low > 1) {
          int mid=(high + low) / 2;
          if (greaterThan(list,mid,seeking)) {
            return find(seeking,list,low,mid);
          }
 else {
            return find(seeking,list,mid,high);
          }
        }
 else {
          return list.isEmpty() ? -1 : (equals(list,low,seeking) ? low : -1);
        }
      }
    }
);
  }
  /** 
 * We can use the Algorithms.recuse method to implement that as tail recursion. Here the anonymous Function implemenation holds this itermediate state, rather than the VM's call stack. Arguably this is more like a continuation than tail recursion, since there is a bit of state to be tracked.
 */
  @Test public void testTailRecursive(){
    chopTest(new BaseBinaryChop(){
      public int find(      final Object seeking,      final List list){
        return ((Number)new RecursiveEvaluation(new Function(){
          public Object evaluate(){
            if (high - low > 1) {
              int mid=(high + low) / 2;
              if (greaterThan(list,mid,seeking)) {
                high=mid;
              }
 else {
                low=mid;
              }
              return this;
            }
 else {
              return list.isEmpty() ? BaseBinaryChop.NEGATIVE_ONE : (BaseBinaryChop.equals(list,low,seeking) ? new Integer(low) : BaseBinaryChop.NEGATIVE_ONE);
            }
          }
          int high=list.size();
          int low=0;
        }
).evaluate()).intValue();
      }
    }
);
  }
  /** 
 * One fun functional approach is to "slice" up the list as we search,  looking at smaller and smaller slices until we've found the element we're looking for. Note that while any given call to this recursive function may only be looking at a sublist, we need to return the index in the overall list. Hence we'll split out a method so that we can pass the offset in the original list as a parameter. With all of the subList creation, this approach is probably less efficient than either the iterative or the recursive implemenations above.
 */
  @Test public void testRecursive2(){
    chopTest(new BaseBinaryChop(){
      public int find(      Object seeking,      List list){
        return find(seeking,list,0);
      }
      private int find(      Object seeking,      List list,      int offset){
        if (list.isEmpty()) {
          return -1;
        }
        if (list.size() == 1) {
          return (equals(list,0,seeking) ? offset : -1);
        }
 else {
          int mid=list.size() / 2;
          if (greaterThan(list,mid,seeking)) {
            return find(seeking,list.subList(0,mid),offset);
          }
 else {
            return find(seeking,list.subList(mid,list.size()),offset + mid);
          }
        }
      }
    }
);
  }
  /** 
 * We can do that using tail recursion as well. Again, the anonymous Function implemenation holds the "continuation" state.
 */
  @Test public void testTailRecursive2(){
    chopTest(new BaseBinaryChop(){
      public int find(      final Object seeking,      final List list){
        return ((Number)new RecursiveEvaluation(new Function(){
          public Object evaluate(){
            if (sublist.isEmpty()) {
              return BaseBinaryChop.NEGATIVE_ONE;
            }
            if (sublist.size() == 1) {
              return (BaseBinaryChop.equals(sublist,0,seeking) ? new Integer(offset) : BaseBinaryChop.NEGATIVE_ONE);
            }
 else {
              int mid=sublist.size() / 2;
              if (greaterThan(sublist,mid,seeking)) {
                sublist=sublist.subList(0,mid);
              }
 else {
                sublist=sublist.subList(mid,sublist.size());
                offset+=mid;
              }
              return this;
            }
          }
          int offset=0;
          List sublist=list;
        }
).evaluate()).intValue();
      }
    }
);
  }
}
