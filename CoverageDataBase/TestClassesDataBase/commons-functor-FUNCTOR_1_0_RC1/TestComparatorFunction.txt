/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestComparatorFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return ComparatorFunction.INSTANCE;
  }
  @Test public void testEvaluate(){
    ComparatorFunction<Integer> f=ComparatorFunction.<Integer>instance();
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE)))).intValue() == 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MAX_VALUE),new Integer(1)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MAX_VALUE),new Integer(0)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MAX_VALUE),new Integer(-1)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MAX_VALUE),new Integer(Integer.MIN_VALUE)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(1),new Integer(Integer.MAX_VALUE)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(1),new Integer(1)))).intValue() == 0);
    assertTrue(((Integer)(f.evaluate(new Integer(1),new Integer(0)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(1),new Integer(-1)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(1),new Integer(Integer.MIN_VALUE)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(0),new Integer(Integer.MAX_VALUE)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(0),new Integer(1)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(0),new Integer(0)))).intValue() == 0);
    assertTrue(((Integer)(f.evaluate(new Integer(0),new Integer(-1)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(0),new Integer(Integer.MIN_VALUE)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(-1),new Integer(Integer.MAX_VALUE)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(-1),new Integer(1)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(-1),new Integer(0)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(-1),new Integer(-1)))).intValue() == 0);
    assertTrue(((Integer)(f.evaluate(new Integer(-1),new Integer(Integer.MIN_VALUE)))).intValue() > 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MIN_VALUE),new Integer(Integer.MAX_VALUE)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MIN_VALUE),new Integer(1)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MIN_VALUE),new Integer(0)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MIN_VALUE),new Integer(-1)))).intValue() < 0);
    assertTrue(((Integer)(f.evaluate(new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE)))).intValue() == 0);
  }
  @Test @SuppressWarnings("unchecked") public void testEquals(){
    ComparatorFunction<Comparable<?>> f=ComparatorFunction.instance();
    assertObjectsAreEqual(f,f);
    assertObjectsAreEqual(f,new ComparatorFunction<Comparable<?>>(ComparableComparator.instance()));
    assertObjectsAreNotEqual(f,new ComparatorFunction(Collections.reverseOrder()));
  }
}
