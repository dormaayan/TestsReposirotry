/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryCompositeBinaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryCompositeBinaryPredicate<Boolean,Boolean>(RightIdentity.PREDICATE,Constant.FALSE,new Identity<Boolean>());
  }
  @Test public void testEvaluate() throws Exception {
    BinaryPredicate<Boolean,Boolean> f=new UnaryCompositeBinaryPredicate<Boolean,Boolean>(RightIdentity.PREDICATE,Constant.FALSE,new Identity<Boolean>());
    assertEquals(true,f.test(Boolean.TRUE,Boolean.TRUE));
    assertEquals(true,f.test(null,Boolean.TRUE));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Boolean,Boolean> f=new UnaryCompositeBinaryPredicate<Boolean,Boolean>(LeftIdentity.PREDICATE,Constant.TRUE,Constant.FALSE);
    assertEquals(f,f);
    assertObjectsAreEqual(f,new UnaryCompositeBinaryPredicate<Boolean,Boolean>(LeftIdentity.PREDICATE,Constant.TRUE,Constant.FALSE));
    assertObjectsAreNotEqual(f,new UnaryCompositeBinaryPredicate<Boolean,Boolean>(RightIdentity.PREDICATE,Constant.TRUE,Constant.FALSE));
    assertObjectsAreNotEqual(f,new UnaryCompositeBinaryPredicate<Boolean,Boolean>(LeftIdentity.PREDICATE,new Identity<Boolean>(),Constant.TRUE));
  }
}
