/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestTransposedProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new TransposedProcedure<Object,Object>(NoOp.INSTANCE);
  }
  @Test public void testEvaluate() throws Exception {
    LeftNotNullCounter counter=new LeftNotNullCounter();
    BinaryProcedure<Object,Object> p=new TransposedProcedure<Object,Object>(counter);
    assertEquals(0,counter.count);
    p.run(null,"not null");
    assertEquals(1,counter.count);
    p.run("not null",null);
    assertEquals(1,counter.count);
  }
  @Test public void testEquals() throws Exception {
    BinaryProcedure<Object,Object> p=new TransposedProcedure<Object,Object>(NoOp.INSTANCE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new TransposedProcedure<Object,Object>(NoOp.INSTANCE));
    assertObjectsAreEqual(p,TransposedProcedure.transpose(NoOp.INSTANCE));
    assertObjectsAreNotEqual(p,new TransposedProcedure<Object,Object>(new TransposedProcedure<Object,Object>(NoOp.INSTANCE)));
    assertObjectsAreNotEqual(p,NoOp.INSTANCE);
  }
  @Test public void testTransposeNull() throws Exception {
    assertNull(TransposedProcedure.transpose(null));
  }
  @Test public void testTranspose() throws Exception {
    assertNotNull(TransposedProcedure.transpose(NoOp.INSTANCE));
  }
static class LeftNotNullCounter implements BinaryProcedure<Object,Object> {
    public void run(    Object a,    Object b){
      if (null != a) {
        count++;
      }
    }
    public int count=0;
  }
}
