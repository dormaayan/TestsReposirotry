/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalUnaryProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalUnaryProcedure<Object>(Constant.TRUE,NoOp.INSTANCE,NoOp.INSTANCE);
  }
  @Test public void testRun() throws Exception {
    RunCounter left=new RunCounter();
    RunCounter right=new RunCounter();
    ConditionalUnaryProcedure<Object> p=new ConditionalUnaryProcedure<Object>(Identity.INSTANCE,left,right);
    assertEquals(0,left.count);
    assertEquals(0,right.count);
    p.run(Boolean.TRUE);
    assertEquals(1,left.count);
    assertEquals(0,right.count);
    p.run(Boolean.FALSE);
    assertEquals(1,left.count);
    assertEquals(1,right.count);
    p.run(Boolean.TRUE);
    assertEquals(2,left.count);
    assertEquals(1,right.count);
  }
  @Test public void testEquals() throws Exception {
    ConditionalUnaryProcedure<Object> p=new ConditionalUnaryProcedure<Object>(Identity.INSTANCE,NoOp.INSTANCE,NoOp.INSTANCE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new ConditionalUnaryProcedure<Object>(Identity.INSTANCE,NoOp.INSTANCE,NoOp.INSTANCE));
    assertObjectsAreNotEqual(p,new ConditionalUnaryProcedure<Object>(Constant.TRUE,NoOp.INSTANCE,NoOp.INSTANCE));
  }
static class RunCounter implements UnaryProcedure<Object> {
    public void run(    Object obj){
      count++;
    }
    public int count=0;
  }
}
