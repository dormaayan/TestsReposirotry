/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalBinaryProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalBinaryProcedure<Object,Object>(Constant.TRUE,NoOp.instance(),NoOp.instance());
  }
  @Test public void testRun() throws Exception {
    RunCounter left=new RunCounter();
    RunCounter right=new RunCounter();
    ConditionalBinaryProcedure<Boolean,Object> p=new ConditionalBinaryProcedure<Boolean,Object>(LeftIdentity.PREDICATE,left,right);
    assertEquals(0,left.count);
    assertEquals(0,right.count);
    p.run(true,null);
    assertEquals(1,left.count);
    assertEquals(0,right.count);
    p.run(false,null);
    assertEquals(1,left.count);
    assertEquals(1,right.count);
    p.run(true,null);
    assertEquals(2,left.count);
    assertEquals(1,right.count);
  }
  @Test public void testEquals() throws Exception {
    ConditionalBinaryProcedure<?,?> p=new ConditionalBinaryProcedure<Boolean,Object>(LeftIdentity.PREDICATE,NoOp.instance(),NoOp.instance());
    assertEquals(p,p);
    assertObjectsAreEqual(p,new ConditionalBinaryProcedure<Boolean,Object>(LeftIdentity.PREDICATE,NoOp.instance(),NoOp.instance()));
    assertObjectsAreNotEqual(p,new ConditionalBinaryProcedure<Object,Object>(Constant.TRUE,NoOp.instance(),NoOp.instance()));
  }
static class RunCounter implements BinaryProcedure<Object,Object> {
    public void run(    Object left,    Object right){
      count++;
    }
    public int count=0;
  }
}
