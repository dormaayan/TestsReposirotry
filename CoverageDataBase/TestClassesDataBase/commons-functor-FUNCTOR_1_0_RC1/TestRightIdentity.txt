/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestRightIdentity extends BaseFunctorTest {
  protected Object makeFunctor(){
    return RightIdentity.FUNCTION;
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<Object,Object,Object> f=RightIdentity.FUNCTION;
    assertNull(f.evaluate(null,null));
    assertNull(f.evaluate("xyzzy",null));
    assertEquals("xyzzy",f.evaluate("abcdefg","xyzzy"));
    assertEquals("xyzzy",f.evaluate(null,"xyzzy"));
    assertEquals(new Integer(3),f.evaluate(null,new Integer(3)));
    Object obj=new Long(12345L);
    assertSame(obj,f.evaluate(null,obj));
    assertSame(obj,f.evaluate(obj,obj));
  }
  @Test public void testTest() throws Exception {
    BinaryPredicate<Object,Boolean> p=RightIdentity.PREDICATE;
    assertTrue(p.test(null,Boolean.TRUE));
    assertTrue(!p.test(null,Boolean.FALSE));
    try {
      p.test(null,null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=RightIdentity.FUNCTION;
    assertEquals(f,f);
    assertObjectsAreEqual(f,RightIdentity.function());
    assertObjectsAreNotEqual(f,new Identity<Object>());
    assertObjectsAreNotEqual(f,LeftIdentity.function());
    assertObjectsAreNotEqual(f,Constant.TRUE);
    assertObjectsAreNotEqual(f,Constant.of("abcde"));
  }
  @Test public void testConstant() throws Exception {
    assertEquals(RightIdentity.function(),RightIdentity.function());
  }
}
