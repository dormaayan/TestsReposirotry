/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestFunctionProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new FunctionProcedure(Constant.of("K"));
  }
  @Test public void testRun() throws Exception {
class EvaluateCounter implements Function<Integer> {
      int count=0;
      public Integer evaluate(){
        return count++;
      }
    }
    EvaluateCounter counter=new EvaluateCounter();
    Procedure p=new FunctionProcedure(counter);
    assertEquals(0,counter.count);
    p.run();
    assertEquals(1,counter.count);
    p.run();
    assertEquals(2,counter.count);
  }
  @Test public void testEquals() throws Exception {
    Procedure p=new FunctionProcedure(Constant.of("K"));
    assertEquals(p,p);
    assertObjectsAreEqual(p,new FunctionProcedure(Constant.of("K")));
    assertObjectsAreNotEqual(p,NoOp.INSTANCE);
    assertObjectsAreNotEqual(p,new FunctionProcedure(Constant.of("J")));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(FunctionProcedure.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(FunctionProcedure.adapt(Constant.of("K")));
  }
}
