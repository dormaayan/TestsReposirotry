/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestLeftBoundFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new LeftBoundFunction<Object,Object>(RightIdentity.FUNCTION,"xyzzy");
  }
  @Test public void testEvaluate() throws Exception {
    UnaryFunction<Object,Object> f=new LeftBoundFunction<Object,Object>(RightIdentity.FUNCTION,"foo");
    assertEquals("xyzzy",f.evaluate("xyzzy"));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Object> f=new LeftBoundFunction<Object,Object>(RightIdentity.FUNCTION,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new LeftBoundFunction<Object,Object>(RightIdentity.FUNCTION,"xyzzy"));
    assertObjectsAreNotEqual(f,Constant.of("xyzzy"));
    assertObjectsAreNotEqual(f,new LeftBoundFunction<Object,Object>(LeftIdentity.FUNCTION,"xyzzy"));
    assertObjectsAreNotEqual(f,new LeftBoundFunction<Object,Object>(RightIdentity.FUNCTION,"bar"));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(LeftBoundFunction.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(LeftBoundFunction.bind(RightIdentity.FUNCTION,"xyzzy"));
    assertNotNull(LeftBoundFunction.bind(RightIdentity.FUNCTION,null));
  }
}
