/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryAnd extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryAnd<Object>(Constant.TRUE,Constant.TRUE);
  }
  @Test public void testTrue() throws Exception {
    assertTrue((new UnaryAnd<Object>()).test("xyzzy"));
    assertTrue((new UnaryAnd<Object>(Constant.TRUE)).test("xyzzy"));
    assertTrue((new UnaryAnd<Object>(Constant.TRUE,Constant.TRUE)).test("xyzzy"));
    assertTrue((new UnaryAnd<Object>(Constant.TRUE,Constant.TRUE,Constant.TRUE)).test("xyzzy"));
    UnaryAnd<Object> p=new UnaryAnd<Object>(Constant.TRUE);
    assertTrue(p.test("xyzzy"));
    for (int i=0; i < 10; i++) {
      p.and(Constant.TRUE);
      assertTrue(p.test("xyzzy"));
    }
    UnaryAnd<Object> q=new UnaryAnd<Object>(Constant.TRUE);
    assertTrue(q.test("xyzzy"));
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test("xyzzy"));
    }
    UnaryAnd<Object> r=new UnaryAnd<Object>(p,q);
    assertTrue(r.test("xyzzy"));
  }
  @Test public void testFalse() throws Exception {
    assertFalse(new UnaryAnd<Object>(Constant.FALSE).test("xyzzy"));
    assertFalse(new UnaryAnd<Object>(Constant.TRUE,Constant.FALSE).test("xyzzy"));
    assertFalse(new UnaryAnd<Object>(Constant.TRUE,Constant.TRUE,Constant.FALSE).test("xyzzy"));
    UnaryAnd<Object> p=new UnaryAnd<Object>(Constant.FALSE);
    assertTrue(!p.test("xyzzy"));
    for (int i=0; i < 10; i++) {
      p.and(Constant.TRUE);
      assertTrue(!p.test("xyzzy"));
    }
    UnaryAnd<Object> q=new UnaryAnd<Object>(Constant.TRUE);
    assertTrue(q.test("xyzzy"));
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test("xyzzy"));
    }
    UnaryAnd<Object> r=new UnaryAnd<Object>(p,q);
    assertTrue(!r.test("xyzzy"));
  }
  @Test public void testDuplicateAdd() throws Exception {
    UnaryPredicate<Object> p=Constant.TRUE;
    UnaryAnd<Object> q=new UnaryAnd<Object>(p,p);
    assertTrue(q.test("xyzzy"));
    for (int i=0; i < 10; i++) {
      q.and(p);
      assertTrue(q.test("xyzzy"));
    }
  }
  @Test public void testEquals() throws Exception {
    UnaryAnd<Object> p=new UnaryAnd<Object>();
    assertEquals(p,p);
    UnaryAnd<Object> q=new UnaryAnd<Object>();
    assertObjectsAreEqual(p,q);
    for (int i=0; i < 3; i++) {
      p.and(Constant.truePredicate());
      assertObjectsAreNotEqual(p,q);
      q.and(Constant.truePredicate());
      assertObjectsAreEqual(p,q);
      p.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
      assertObjectsAreNotEqual(p,q);
      q.and(new UnaryAnd<Object>(Constant.truePredicate(),Constant.falsePredicate()));
      assertObjectsAreEqual(p,q);
    }
    assertObjectsAreNotEqual(p,Constant.truePredicate());
  }
}
