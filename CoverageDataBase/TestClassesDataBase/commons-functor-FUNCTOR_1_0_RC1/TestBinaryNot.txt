/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryNot extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryNot<Object,Object>(Constant.TRUE);
  }
  @Test public void testTest() throws Exception {
    BinaryPredicate<Object,Object> truePred=new BinaryNot<Object,Object>(Constant.FALSE);
    assertTrue(truePred.test(null,null));
    assertTrue(truePred.test("xyzzy","abcde"));
    assertTrue(truePred.test("xyzzy",new Integer(3)));
  }
  @Test public void testEquals() throws Exception {
    BinaryNot<Object,Object> p=new BinaryNot<Object,Object>(Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new BinaryNot<Object,Object>(Constant.TRUE));
    assertObjectsAreEqual(p,BinaryNot.not(Constant.TRUE));
    assertObjectsAreNotEqual(p,new BinaryNot<Object,Object>(Constant.FALSE));
    assertObjectsAreNotEqual(p,Constant.TRUE);
  }
  @Test public void testNotNull() throws Exception {
    assertNull(BinaryNot.not(null));
  }
  @Test public void testNotNotNull() throws Exception {
    assertNotNull(BinaryNot.not(Constant.truePredicate()));
  }
}
