/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestMax extends BaseFunctorTest {
  protected Object makeFunctor(){
    return Max.instance();
  }
  private Integer MIN=new Integer(Integer.MIN_VALUE);
  private Integer MINUS_TWO=new Integer(-2);
  private Integer ZERO=new Integer(0);
  private Integer ONE=new Integer(1);
  private Integer MAX=new Integer(Integer.MAX_VALUE);
  @Test public void testEvaluate(){
    Max<Integer> f=Max.instance();
    assertEquals(ONE,f.evaluate(ONE,ONE));
    assertEquals(ONE,f.evaluate(ZERO,ONE));
    assertEquals(ONE,f.evaluate(ONE,ZERO));
    assertEquals(MAX,f.evaluate(ONE,MAX));
    assertEquals(MAX,f.evaluate(MIN,MAX));
    assertEquals(MINUS_TWO,f.evaluate(MIN,MINUS_TWO));
  }
  @Test @SuppressWarnings("unchecked") public void testEquals(){
    Max<Comparable<?>> f=Max.instance();
    assertObjectsAreEqual(f,f);
    assertObjectsAreEqual(f,Max.instance());
    assertObjectsAreEqual(f,new Max<Comparable<?>>(ComparableComparator.INSTANCE));
    assertObjectsAreNotEqual(f,new Max<Comparable<?>>(Collections.<Comparable<?>>reverseOrder()));
  }
}
