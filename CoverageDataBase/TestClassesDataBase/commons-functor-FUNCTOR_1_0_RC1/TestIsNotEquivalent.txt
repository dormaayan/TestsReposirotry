/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIsNotEquivalent extends BaseComparisonPredicateTest {
  protected Object makeFunctor(){
    return IsNotEquivalent.instance();
  }
  @Test public void testTest() throws Exception {
    IsNotEquivalent<Integer> p=new IsNotEquivalent<Integer>();
    assertTrue(p.test(new Integer(2),new Integer(4)));
    assertTrue(p.test(new Integer(3),new Integer(4)));
    assertTrue(!p.test(new Integer(4),new Integer(4)));
    assertTrue(p.test(new Integer(5),new Integer(4)));
    assertTrue(p.test(new Integer(6),new Integer(4)));
  }
  @Test public void testInstance(){
    assertTrue(!IsNotEquivalent.instance(new Integer(7)).test(new Integer(7)));
    assertTrue(IsNotEquivalent.instance(new Integer(7)).test(new Integer(8)));
  }
  @Test @SuppressWarnings("unchecked") public void testEquals() throws Exception {
    IsNotEquivalent<Comparable<?>> p=new IsNotEquivalent<Comparable<?>>();
    assertEquals(p,p);
    assertObjectsAreEqual(p,new IsNotEquivalent<Comparable<?>>(new ComparableComparator()));
    assertObjectsAreEqual(p,IsNotEquivalent.instance());
    assertObjectsAreNotEqual(p,Constant.FALSE);
  }
}
