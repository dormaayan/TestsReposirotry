/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalProcedure(Constant.TRUE,NoOp.INSTANCE,NoOp.INSTANCE);
  }
  @Test public void testRun() throws Exception {
{
      RunCounter left=new RunCounter();
      RunCounter right=new RunCounter();
      ConditionalProcedure p=new ConditionalProcedure(Constant.TRUE,left,right);
      assertEquals(0,left.count);
      assertEquals(0,right.count);
      p.run();
      assertEquals(1,left.count);
      assertEquals(0,right.count);
      p.run();
      assertEquals(2,left.count);
      assertEquals(0,right.count);
      p.run();
      assertEquals(3,left.count);
      assertEquals(0,right.count);
    }
{
      RunCounter left=new RunCounter();
      RunCounter right=new RunCounter();
      ConditionalProcedure p=new ConditionalProcedure(Constant.FALSE,left,right);
      assertEquals(0,left.count);
      assertEquals(0,right.count);
      p.run();
      assertEquals(0,left.count);
      assertEquals(1,right.count);
      p.run();
      assertEquals(0,left.count);
      assertEquals(2,right.count);
      p.run();
      assertEquals(0,left.count);
      assertEquals(3,right.count);
    }
  }
  @Test public void testEquals() throws Exception {
    ConditionalProcedure p=new ConditionalProcedure(Constant.FALSE,NoOp.INSTANCE,NoOp.INSTANCE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new ConditionalProcedure(Constant.FALSE,NoOp.INSTANCE,NoOp.INSTANCE));
    assertObjectsAreNotEqual(p,new ConditionalProcedure(Constant.TRUE,NoOp.INSTANCE,NoOp.INSTANCE));
  }
static class RunCounter implements Procedure {
    public void run(){
      count++;
    }
    public int count=0;
  }
}
