/** 
 * @version $Revision$ $Date$
 * @author Matt Benson
 */
public class TestIsNotSame extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsNotSame<Object,Object>();
  }
  @Test public void testTest() throws Exception {
    IsNotSame<Object,Object> p=new IsNotSame<Object,Object>();
    assertFalse("For symmetry, two nulls should be same",p.test(null,null));
    assertFalse(p.test("foo","foo"));
    assertTrue(p.test(null,"foo"));
    assertTrue(p.test("foo",null));
    assertTrue(p.test(new Integer(3),new Integer(3)));
    assertTrue(p.test(null,new Integer(3)));
    assertTrue(p.test(new Integer(3),null));
    assertTrue(p.test(new Integer(3),new Integer(4)));
    assertTrue(p.test(new Integer(4),new Integer(3)));
    assertTrue(p.test("3",new Integer(3)));
    assertTrue(p.test(new Integer(3),"3"));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Object> f=new IsNotSame<Object,Object>();
    assertEquals(f,f);
    assertObjectsAreEqual(f,new IsNotSame<Object,Object>());
    assertObjectsAreEqual(f,IsNotSame.instance());
    assertObjectsAreNotEqual(f,Constant.truePredicate());
  }
  @Test public void testConstant() throws Exception {
    assertEquals(IsNotSame.instance(),IsNotSame.instance());
    assertNotSame(IsNotSame.instance(),IsNotSame.instance());
    assertSame(IsNotSame.INSTANCE,IsNotSame.INSTANCE);
  }
}
