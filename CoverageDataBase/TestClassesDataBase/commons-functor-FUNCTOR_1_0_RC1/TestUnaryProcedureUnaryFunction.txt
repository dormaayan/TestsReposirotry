/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryProcedureUnaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryProcedureUnaryFunction<Object,Object>(NoOp.INSTANCE);
  }
  @Test public void testEvaluate() throws Exception {
    UnaryFunction<Object,Object> f=new UnaryProcedureUnaryFunction<Object,Object>(NoOp.INSTANCE);
    assertNull(f.evaluate(null));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Object> f=new UnaryProcedureUnaryFunction<Object,Object>(NoOp.INSTANCE);
    assertEquals(f,f);
    assertObjectsAreEqual(f,new UnaryProcedureUnaryFunction<Object,Object>(NoOp.INSTANCE));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new UnaryProcedureUnaryFunction<Object,Object>(new UnaryProcedure<Object>(){
      public void run(      Object a){
      }
    }
));
    assertObjectsAreNotEqual(f,Constant.of(null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(UnaryFunctionUnaryProcedure.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(UnaryProcedureUnaryFunction.adapt(new NoOp()));
  }
}
