/** 
 * @version $Revision$ $Date$
 * @author Matt Benson
 */
public class TestBinaryPredicateUnaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryPredicateUnaryPredicate<Object>(IsSame.INSTANCE);
  }
  @Test public void testTestWhenTrue() throws Exception {
    UnaryPredicate<Object> p=new BinaryPredicateUnaryPredicate<Object>(IsSame.INSTANCE);
    assertTrue(p.test(null));
  }
  @Test public void testTestWhenFalse() throws Exception {
    UnaryPredicate<Object> p=new BinaryPredicateUnaryPredicate<Object>(IsNotSame.INSTANCE);
    assertFalse(p.test(null));
  }
  @Test public void testEquals() throws Exception {
    UnaryPredicate<Object> p=new BinaryPredicateUnaryPredicate<Object>(IsSame.INSTANCE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new BinaryPredicateUnaryPredicate<Object>(IsSame.INSTANCE));
    assertObjectsAreNotEqual(p,Constant.truePredicate());
    assertObjectsAreNotEqual(p,new BinaryPredicateUnaryPredicate<Object>(IsNotSame.INSTANCE));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BinaryPredicateUnaryPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BinaryPredicateUnaryPredicate.adapt(Constant.TRUE));
  }
}
