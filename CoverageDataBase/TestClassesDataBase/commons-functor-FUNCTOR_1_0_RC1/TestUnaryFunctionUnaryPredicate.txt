/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryFunctionUnaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryFunctionUnaryPredicate<Object>(Constant.TRUE);
  }
  @Test public void testTestWhenTrue() throws Exception {
    UnaryPredicate<Object> p=new UnaryFunctionUnaryPredicate<Object>(Constant.TRUE);
    assertTrue(p.test(null));
  }
  @Test public void testTestWhenFalse() throws Exception {
    UnaryPredicate<Object> p=new UnaryFunctionUnaryPredicate<Object>(Constant.FALSE);
    assertTrue(!p.test(null));
  }
  @Test public void testEquals() throws Exception {
    UnaryPredicate<Object> p=new UnaryFunctionUnaryPredicate<Object>(Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new UnaryFunctionUnaryPredicate<Object>(Constant.TRUE));
    assertObjectsAreNotEqual(p,Constant.TRUE);
    assertObjectsAreNotEqual(p,new UnaryFunctionUnaryPredicate<Object>(Constant.FALSE));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(UnaryFunctionUnaryPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(UnaryFunctionUnaryPredicate.adapt(Constant.TRUE));
  }
}
