/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestCompositeUnaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return Composite.function(Constant.of(3));
  }
  @Test public void testEvaluate() throws Exception {
    assertEquals(new Integer(4),(new CompositeUnaryFunction<Object,Integer>(Constant.of(4))).evaluate(null));
    assertEquals(new Integer(4),(Composite.function(Constant.of(4)).of(Constant.of(3)).evaluate("xyzzy")));
    assertEquals(new Integer(3),(new CompositeUnaryFunction<Object,Integer>(Constant.of(3)).of(Constant.of(4)).evaluate("xyzzy")));
  }
  @Test public void testOf() throws Exception {
    UnaryFunction<Object,Integer> uf=new UnaryFunction<Object,Integer>(){
      public Integer evaluate(      Object obj){
        if (obj instanceof Integer) {
          return (((Integer)obj).intValue()) + 1;
        }
 else {
          return 1;
        }
      }
    }
;
    CompositeUnaryFunction<Object,Integer> f=null;
    for (int i=0; i < 10; i++) {
      f=f == null ? new CompositeUnaryFunction<Object,Integer>(uf) : f.of(uf);
      assertEquals(Integer.valueOf(i + 1),f.evaluate(null));
    }
  }
  @Test public void testEquals() throws Exception {
    CompositeUnaryFunction<Object,String> f=new CompositeUnaryFunction<Object,String>(Constant.of("x"));
    assertEquals(f,f);
    CompositeUnaryFunction<Object,String> g=new CompositeUnaryFunction<Object,String>(Constant.of("x"));
    assertObjectsAreEqual(f,g);
    for (int i=0; i < 3; i++) {
      f=f.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreNotEqual(f,g);
      g=g.of(Constant.of("y")).of(Constant.of("z"));
      assertObjectsAreEqual(f,g);
    }
    assertObjectsAreNotEqual(f,Constant.of("y"));
  }
}
