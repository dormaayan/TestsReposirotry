/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class FlexiMapExample {
  @Test public void testBasicMap(){
    Map map=makeBasicMap();
    Object key="key";
    Object value=new Integer(3);
    map.put(key,value);
    assertEquals(value,map.get(key));
  }
  @Test public void testBasicMapReturnsNullForMissingKey(){
    Map map=makeBasicMap();
    assertNull(map.get("key"));
  }
  @Test public void testBasicMapAllowsNull(){
    Map map=makeBasicMap();
    Object key="key";
    Object value=null;
    map.put(key,value);
    assertNull(map.get(key));
  }
  @Test public void testBasicMapAllowsMultipleTypes(){
    Map map=makeBasicMap();
    map.put("key-1","value-1");
    map.put(new Integer(2),"value-2");
    map.put("key-3",new Integer(3));
    map.put(new Integer(4),new Integer(4));
    assertEquals("value-1",map.get("key-1"));
    assertEquals("value-2",map.get(new Integer(2)));
    assertEquals(new Integer(3),map.get("key-3"));
    assertEquals(new Integer(4),map.get(new Integer(4)));
  }
  @Test public void testBasicMapStoresOnlyOneValuePerKey(){
    Map map=makeBasicMap();
    assertNull(map.put("key","value-1"));
    assertEquals("value-1",map.get("key"));
    assertEquals("value-1",map.put("key","value-2"));
    assertEquals("value-2",map.get("key"));
  }
  @Test public void testForbidNull(){
    Map map=makeNullForbiddenMap();
    map.put("key","value");
    map.put("key2",new Integer(2));
    try {
      map.put("key3",null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public void testNullDefaultsToZero(){
    Map map=makeDefaultValueForNullMap(new Integer(0));
    assertEquals(new Integer(0),map.get("key"));
    map.put("key",null);
    assertEquals(new Integer(0),map.get("key"));
  }
  @Test public void testIntegerValuesOnly(){
    Map map=makeTypeConstrainedMap(Integer.class);
    map.put("key",new Integer(2));
    assertEquals(new Integer(2),map.get("key"));
    try {
      map.put("key2","value");
      fail("Expected ClassCastException");
    }
 catch (    ClassCastException e) {
    }
  }
  @Test public void testMultiMap(){
    Map map=makeMultiMap();
    map.put("key","value 1");
{
      Collection result=(Collection)(map.get("key"));
      assertEquals(1,result.size());
      assertEquals("value 1",result.iterator().next());
    }
    map.put("key","value 2");
{
      Collection result=(Collection)(map.get("key"));
      assertEquals(2,result.size());
      Iterator iter=result.iterator();
      assertEquals("value 1",iter.next());
      assertEquals("value 2",iter.next());
    }
    map.put("key","value 3");
{
      Collection result=(Collection)(map.get("key"));
      assertEquals(3,result.size());
      Iterator iter=result.iterator();
      assertEquals("value 1",iter.next());
      assertEquals("value 2",iter.next());
      assertEquals("value 3",iter.next());
    }
  }
  @Test public void testStringConcatMap(){
    Map map=makeStringConcatMap();
    map.put("key","value 1");
    assertEquals("value 1",map.get("key"));
    map.put("key","value 2");
    assertEquals("value 1, value 2",map.get("key"));
    map.put("key","value 3");
    assertEquals("value 1, value 2, value 3",map.get("key"));
  }
static class FlexiMap implements Map {
    public FlexiMap(    BinaryFunction putfn,    BinaryFunction getfn){
      onPut=null == putfn ? RightIdentity.function() : putfn;
      onGet=null == getfn ? RightIdentity.function() : getfn;
      proxiedMap=new HashMap();
    }
    public Object get(    Object key){
      return onGet.evaluate(key,proxiedMap.get(key));
    }
    public Object put(    Object key,    Object value){
      Object oldvalue=proxiedMap.get(key);
      proxiedMap.put(key,onPut.evaluate(oldvalue,value));
      return onGet.evaluate(key,oldvalue);
    }
    public void clear(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public boolean containsKey(    Object key){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public boolean containsValue(    Object value){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public Set entrySet(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public boolean isEmpty(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public Set keySet(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public void putAll(    Map t){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public Object remove(    Object key){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public int size(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    public Collection values(){
      throw new UnsupportedOperationException("Left as an exercise for the reader.");
    }
    private BinaryFunction onPut=null;
    private BinaryFunction onGet=null;
    private Map proxiedMap=null;
  }
  private Map makeBasicMap(){
    return new HashMap();
  }
  private Map makeNullForbiddenMap(){
    return new FlexiMap(IgnoreLeftFunction.adapt(Conditional.function(IsNull.instance(),throwNPE,Identity.instance())),null);
  }
  private Map makeDefaultValueForNullMap(  Object defaultValue){
    return new FlexiMap(null,IgnoreLeftFunction.adapt(Conditional.function(IsNull.instance(),new Constant(defaultValue),Identity.instance())));
  }
  private Map makeTypeConstrainedMap(  Class clazz){
    return new FlexiMap(IgnoreLeftFunction.adapt(Conditional.function(IsInstance.of(clazz),Identity.instance(),throwCCE)),null);
  }
  private Map makeMultiMap(){
    return new FlexiMap(new BinaryFunction(){
      public Object evaluate(      Object oldval,      Object newval){
        List list=null;
        if (null == oldval) {
          list=new ArrayList();
        }
 else {
          list=(List)oldval;
        }
        list.add(newval);
        return list;
      }
    }
,null);
  }
  private Map makeStringConcatMap(){
    return new FlexiMap(new BinaryFunction(){
      public Object evaluate(      Object oldval,      Object newval){
        StringBuffer buf=null;
        if (null == oldval) {
          buf=new StringBuffer();
        }
 else {
          buf=(StringBuffer)oldval;
          buf.append(", ");
        }
        buf.append(newval);
        return buf;
      }
    }
,new BinaryFunction(){
      public Object evaluate(      Object key,      Object val){
        if (null == val) {
          return null;
        }
 else {
          return ((StringBuffer)val).toString();
        }
      }
    }
);
  }
private abstract class UniversalFunctor implements Procedure, UnaryProcedure, BinaryProcedure, Function, UnaryFunction, BinaryFunction {
    public abstract void run();
    public void run(    Object obj){
      run();
    }
    public void run(    Object left,    Object right){
      run();
    }
    public Object evaluate(){
      run();
      return null;
    }
    public Object evaluate(    Object obj){
      run();
      return null;
    }
    public Object evaluate(    Object left,    Object right){
      run();
      return null;
    }
  }
  private UniversalFunctor throwNPE=new UniversalFunctor(){
    public void run(){
      throw new NullPointerException();
    }
  }
;
  private UniversalFunctor throwCCE=new UniversalFunctor(){
    public void run(){
      throw new ClassCastException();
    }
  }
;
}
