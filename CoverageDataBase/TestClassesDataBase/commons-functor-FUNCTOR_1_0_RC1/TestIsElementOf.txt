/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 * @author Jason Horman
 */
@SuppressWarnings("unchecked") public class TestIsElementOf extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsElementOf();
  }
  @Test public void testTestCollection() throws Exception {
    ArrayList list=new ArrayList();
    list.add(new Integer(5));
    list.add(new Integer(10));
    list.add(new Integer(15));
    UnaryPredicate p=IsElementOf.instance(list);
    assertTrue(p.test(new Integer(5)));
    assertTrue(p.test(new Integer(10)));
    assertTrue(p.test(new Integer(15)));
    assertTrue(!p.test(new Integer(4)));
    assertTrue(!p.test(new Integer(11)));
  }
  @Test public void testTestArray() throws Exception {
    int[] list=new int[]{5,10,15};
    UnaryPredicate p=IsElementOf.instance(list);
    assertTrue(p.test(new Integer(5)));
    assertTrue(p.test(new Integer(10)));
    assertTrue(p.test(new Integer(15)));
    assertTrue(!p.test(new Integer(4)));
    assertTrue(!p.test(new Integer(11)));
  }
  @Test public void testTestArrayWithNull() throws Exception {
    assertTrue(!IsElementOf.instance().test(null,new int[]{5,10,15}));
    assertTrue(IsElementOf.instance().test(null,new Integer[]{new Integer(5),null,new Integer(15)}));
    assertTrue(IsElementOf.instance().test(new Integer(15),new Integer[]{new Integer(5),null,new Integer(15)}));
  }
  @Test public void testWrapNull(){
    try {
      IsElementOf.instance(null);
      fail("expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public void testWrapNonCollection(){
    try {
      IsElementOf.instance(new Integer(3));
      fail("expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testTestNull(){
    try {
      IsElementOf.instance().test(new Integer(5),null);
      fail("expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testTestNonCollection(){
    try {
      IsElementOf.instance().test(new Integer(5),new Long(5));
      fail("expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testEquals() throws Exception {
    IsElementOf p1=new IsElementOf();
    assertObjectsAreEqual(p1,p1);
    assertObjectsAreEqual(p1,new IsElementOf());
    assertObjectsAreEqual(p1,IsElementOf.instance());
    assertSame(IsElementOf.instance(),IsElementOf.instance());
    assertObjectsAreNotEqual(p1,Constant.falsePredicate());
  }
}
