/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIsInstance extends BaseFunctorTest {
  protected Object makeFunctor(){
    return IsInstance.of(String.class);
  }
  @Test public void testTest() throws Exception {
    BinaryPredicate<Object,Class<?>> p=IsInstance.INSTANCE;
    assertFalse(p.test(null,Number.class));
    assertFalse(p.test("foo",Number.class));
    assertTrue(p.test(3,Number.class));
    assertTrue(p.test(3L,Number.class));
  }
  @Test public void testBoundTest() throws Exception {
    UnaryPredicate<Object> p=IsInstance.of(Number.class);
    assertFalse(p.test(null));
    assertFalse(p.test("foo"));
    assertTrue(p.test(3));
    assertTrue(p.test(3L));
  }
  @Test public void testInstanceOfNull() throws Exception {
    BinaryPredicate<Object,Class<?>> p=new IsInstance<Object>();
    try {
      p.test("foo",null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Class<?>> p=IsInstance.INSTANCE;
    assertEquals(p,p);
    assertObjectsAreEqual(p,IsInstance.instance());
    assertObjectsAreNotEqual(p,Constant.truePredicate());
  }
  @Test public void testBoundEquals() throws Exception {
    UnaryPredicate<Object> p=IsInstance.of(Object.class);
    assertEquals(p,p);
    assertObjectsAreEqual(p,IsInstance.of(Object.class));
    assertObjectsAreNotEqual(p,Constant.truePredicate());
    assertObjectsAreNotEqual(p,IsInstance.of(null));
    assertObjectsAreNotEqual(p,IsInstance.of(String.class));
  }
}
