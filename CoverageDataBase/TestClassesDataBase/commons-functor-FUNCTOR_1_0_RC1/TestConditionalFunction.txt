/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalFunction<Object>(Constant.TRUE,Constant.of("left"),Constant.of("right"));
  }
  @Test public void testEvaluate() throws Exception {
{
      ConditionalFunction<Object> f=new ConditionalFunction<Object>(Constant.TRUE,Constant.of("left"),Constant.of("right"));
      assertEquals("left",f.evaluate());
    }
{
      ConditionalFunction<Object> f=new ConditionalFunction<Object>(Constant.FALSE,Constant.of("left"),Constant.of("right"));
      assertEquals("right",f.evaluate());
    }
  }
  @Test public void testEquals() throws Exception {
    ConditionalFunction<Object> f=new ConditionalFunction<Object>(Constant.TRUE,Constant.of("left"),Constant.of("right"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new ConditionalFunction<Object>(Constant.TRUE,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new ConditionalFunction<Object>(Constant.TRUE,Constant.of(null),Constant.of("right")));
    assertObjectsAreNotEqual(f,new ConditionalFunction<Object>(Constant.TRUE,Constant.of("left"),Constant.of(null)));
  }
}
