/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryCompositeBinaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("left"),Identity.instance());
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<Object,Object,Object> f=new UnaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("K"),Identity.instance());
    assertEquals("right",f.evaluate("left","right"));
    assertNull("right",f.evaluate("left",null));
    assertEquals("right",f.evaluate(null,"right"));
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=new UnaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),Constant.of("right"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new UnaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new UnaryCompositeBinaryFunction<Object,Object,Object>(RightIdentity.FUNCTION,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new UnaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Identity.instance(),Constant.of("right")));
    assertObjectsAreNotEqual(f,new UnaryCompositeBinaryFunction<Object,Object,Object>(LeftIdentity.FUNCTION,Constant.of("left"),Identity.instance()));
  }
}
