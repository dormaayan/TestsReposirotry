/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestLeftBoundProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new LeftBoundProcedure<Object>(NoOp.INSTANCE,"xyzzy");
  }
  @Test public void testRun() throws Exception {
    UnaryProcedure<Object> p=new LeftBoundProcedure<Object>(new BinaryFunctionBinaryProcedure<Object,Object>(RightIdentity.FUNCTION),"foo");
    p.run(Boolean.TRUE);
    p.run(Boolean.FALSE);
  }
  @Test public void testEquals() throws Exception {
    UnaryProcedure<Object> f=new LeftBoundProcedure<Object>(NoOp.INSTANCE,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new LeftBoundProcedure<Object>(NoOp.INSTANCE,"xyzzy"));
    assertObjectsAreNotEqual(f,new NoOp());
    assertObjectsAreNotEqual(f,new LeftBoundProcedure<Object>(new BinaryFunctionBinaryProcedure<Object,Object>(RightIdentity.FUNCTION),"xyzzy"));
    assertObjectsAreNotEqual(f,new LeftBoundProcedure<Object>(NoOp.INSTANCE,"foo"));
    assertObjectsAreNotEqual(f,new LeftBoundProcedure<Object>(NoOp.INSTANCE,null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(LeftBoundProcedure.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(LeftBoundProcedure.bind(new NoOp(),"xyzzy"));
    assertNotNull(LeftBoundProcedure.bind(new NoOp(),null));
  }
}
