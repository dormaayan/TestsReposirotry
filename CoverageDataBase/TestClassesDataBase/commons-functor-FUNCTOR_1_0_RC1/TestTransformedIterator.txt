/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestTransformedIterator extends BaseFunctorTest {
  public Object makeFunctor(){
    List list=new ArrayList();
    list.add("xyzzy");
    return TransformedIterator.transform(list.iterator(),Identity.instance());
  }
  @Before public void setUp() throws Exception {
    list=new ArrayList();
    negatives=new ArrayList();
    for (int i=0; i < 10; i++) {
      list.add(new Integer(i));
      negatives.add(new Integer(i * -1));
    }
  }
  @After public void tearDown() throws Exception {
    list=null;
    negatives=null;
  }
  @Test public void testBasicTransform(){
    Iterator expected=negatives.iterator();
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    while (expected.hasNext()) {
      assertTrue(testing.hasNext());
      assertEquals(expected.next(),testing.next());
    }
    assertTrue(!testing.hasNext());
  }
  @Test public void testEmptyList(){
    Iterator testing=new TransformedIterator(Collections.EMPTY_LIST.iterator(),negate);
    assertTrue(!testing.hasNext());
  }
  @Test public void testNextWithoutHasNext(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    Iterator expected=negatives.iterator();
    while (expected.hasNext()) {
      assertEquals(expected.next(),testing.next());
    }
    assertTrue(!(testing.hasNext()));
  }
  @Test public void testNextAfterEndOfList(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    Iterator expected=negatives.iterator();
    while (expected.hasNext()) {
      assertEquals(expected.next(),testing.next());
    }
    try {
      testing.next();
      fail("ExpectedNoSuchElementException");
    }
 catch (    NoSuchElementException e) {
    }
  }
  @Test public void testNextOnEmptyList(){
    Iterator testing=new TransformedIterator(Collections.EMPTY_LIST.iterator(),negate);
    try {
      testing.next();
      fail("ExpectedNoSuchElementException");
    }
 catch (    NoSuchElementException e) {
    }
  }
  @Test public void testRemoveBeforeNext(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    try {
      testing.remove();
      fail("IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void testRemoveAfterNext(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    testing.next();
    testing.remove();
    try {
      testing.remove();
      fail("IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void testRemoveAll(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    while (testing.hasNext()) {
      testing.next();
      testing.remove();
    }
    assertTrue(list.isEmpty());
  }
  @Test public void testRemoveWithoutHasNext(){
    Iterator testing=new TransformedIterator(list.iterator(),negate);
    for (int i=0, m=list.size(); i < m; i++) {
      testing.next();
      testing.remove();
    }
    assertTrue(list.isEmpty());
  }
  @Test public void testTransformWithNullIteratorReturnsNull(){
    assertNull(TransformedIterator.transform(null,negate));
  }
  @Test public void testTransformWithNullPredicateReturnsIdentity(){
    Iterator iter=list.iterator();
    assertSame(iter,TransformedIterator.maybeTransform(iter,null));
  }
  @Test public void testConstructorProhibitsNull(){
    try {
      new TransformedIterator(null,null);
      fail("ExpectedNullPointerException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      new TransformedIterator(null,negate);
      fail("ExpectedNullPointerException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      new TransformedIterator(list.iterator(),null);
      fail("ExpectedNullPointerException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  private List list=null;
  private List negatives=null;
  private UnaryFunction negate=new UnaryFunction(){
    public Object evaluate(    Object obj){
      return new Integer(((Number)obj).intValue() * -1);
    }
  }
;
}
