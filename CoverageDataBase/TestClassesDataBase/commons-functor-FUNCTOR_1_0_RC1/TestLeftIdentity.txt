/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestLeftIdentity extends BaseFunctorTest {
  protected Object makeFunctor(){
    return LeftIdentity.FUNCTION;
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<Object,Object,Object> f=LeftIdentity.FUNCTION;
    assertNull(f.evaluate(null,null));
    assertNull(f.evaluate(null,"xyzzy"));
    assertEquals("xyzzy",f.evaluate("xyzzy","abcdefg"));
    assertEquals("xyzzy",f.evaluate("xyzzy",null));
    assertEquals(new Integer(3),f.evaluate(new Integer(3),null));
    Object obj=new Long(12345L);
    assertSame(obj,f.evaluate(obj,null));
    assertSame(obj,f.evaluate(obj,obj));
  }
  @Test public void testTest() throws Exception {
    BinaryPredicate<Boolean,Object> p=LeftIdentity.PREDICATE;
    assertTrue(p.test(Boolean.TRUE,null));
    assertTrue(!p.test(Boolean.FALSE,null));
    try {
      p.test(null,null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException npe) {
    }
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=LeftIdentity.<Object,Object>function();
    assertEquals(f,f);
    assertObjectsAreEqual(f,LeftIdentity.FUNCTION);
    assertObjectsAreEqual(f,LeftIdentity.FUNCTION);
    assertObjectsAreNotEqual(f,RightIdentity.FUNCTION);
    assertObjectsAreNotEqual(f,Constant.of("abcde"));
    assertObjectsAreNotEqual(f,Constant.of(true));
  }
  @Test public void testConstant() throws Exception {
    assertEquals(LeftIdentity.function(),LeftIdentity.function());
  }
}
