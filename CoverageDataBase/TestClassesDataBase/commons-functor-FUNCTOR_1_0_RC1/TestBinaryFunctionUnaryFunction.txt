/** 
 * @version $Revision$ $Date$
 * @author Matt Benson
 */
public class TestBinaryFunctionUnaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryFunctionUnaryFunction<Object,Object>(BinaryPredicateBinaryFunction.adapt(IsSame.INSTANCE));
  }
  @Test public void testTestWhenTrue() throws Exception {
    UnaryFunction<Object,Boolean> f=new BinaryFunctionUnaryFunction<Object,Boolean>(BinaryPredicateBinaryFunction.adapt(IsSame.INSTANCE));
    assertTrue(f.evaluate(null));
  }
  @Test public void testTestWhenFalse() throws Exception {
    UnaryFunction<Object,Boolean> f=new BinaryFunctionUnaryFunction<Object,Boolean>(BinaryPredicateBinaryFunction.adapt(IsNotSame.INSTANCE));
    assertFalse(f.evaluate(null));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Boolean> f=new BinaryFunctionUnaryFunction<Object,Boolean>(BinaryPredicateBinaryFunction.adapt(IsSame.INSTANCE));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new BinaryFunctionUnaryFunction<Object,Boolean>(BinaryPredicateBinaryFunction.adapt(IsSame.INSTANCE)));
    assertObjectsAreNotEqual(f,Constant.truePredicate());
    assertObjectsAreNotEqual(f,new BinaryFunctionUnaryFunction<Object,Boolean>(BinaryPredicateBinaryFunction.adapt(IsNotSame.INSTANCE)));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BinaryFunctionUnaryFunction.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BinaryFunctionUnaryFunction.adapt(Constant.TRUE));
  }
}
