class BinarySearchLoop extends EiffelStyleLoop {
  BinarySearchLoop(  Object aSeeking,  List aList){
    seeking=aSeeking;
    list=aList;
    from(new Procedure(){
      public void run(){
        low=0;
        high=list.size();
      }
    }
);
    invariant(new Predicate(){
      public boolean test(){
        return high == 0 || low < high;
      }
    }
);
    variant(new Function(){
      public Object evaluate(){
        return new Integer(high - low);
      }
    }
);
    until(new Predicate(){
      public boolean test(){
        return high - low <= 1;
      }
    }
);
    loop(new Procedure(){
      public void run(){
        int mid=(high + low) / 2;
        if (BaseBinaryChop.greaterThan(list,mid,seeking)) {
          high=mid;
        }
 else {
          low=mid;
        }
      }
    }
);
  }
  int getResult(){
    return list.isEmpty() ? -1 : BaseBinaryChop.equals(list,low,seeking) ? low : -1;
  }
  private int high;
  private int low;
  private final Object seeking;
  private final List list;
}
