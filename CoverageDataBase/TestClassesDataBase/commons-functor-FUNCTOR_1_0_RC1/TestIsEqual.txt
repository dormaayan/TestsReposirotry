/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIsEqual extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsEqual<Object,Object>();
  }
  @Test public void testTest() throws Exception {
    IsEqual<Object,Object> p=new IsEqual<Object,Object>();
    assertTrue("For symmetry, two nulls should be equal",p.test(null,null));
    assertTrue(p.test("foo","foo"));
    assertFalse(p.test(null,"foo"));
    assertFalse(p.test("foo",null));
    assertTrue(p.test(new Integer(3),new Integer(3)));
    assertFalse(p.test(null,new Integer(3)));
    assertFalse(p.test(new Integer(3),null));
    assertFalse(p.test(new Integer(3),new Integer(4)));
    assertFalse(p.test(new Integer(4),new Integer(3)));
    assertFalse(p.test("3",new Integer(3)));
    assertFalse(p.test(new Integer(3),"3"));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Object> f=new IsEqual<Object,Object>();
    assertEquals(f,f);
    assertObjectsAreEqual(f,new IsEqual<Object,Object>());
    assertObjectsAreEqual(f,IsEqual.instance());
    assertObjectsAreNotEqual(f,Constant.truePredicate());
  }
  @Test public void testConstant() throws Exception {
    assertEquals(IsEqual.instance(),IsEqual.instance());
    assertNotSame(IsEqual.instance(),IsEqual.instance());
    assertSame(IsEqual.INSTANCE,IsEqual.INSTANCE);
  }
}
