/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryAnd extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryAnd<Object,Object>(Constant.TRUE,Constant.TRUE);
  }
  @Test public void testTrue() throws Exception {
    assertTrue((new BinaryAnd<String,Integer>()).test("xyzzy",3));
    assertTrue((new BinaryAnd<String,Integer>(Constant.TRUE)).test("xyzzy",3));
    assertTrue((new BinaryAnd<String,Integer>(Constant.TRUE,Constant.TRUE)).test("xyzzy",3));
    assertTrue((new BinaryAnd<String,Integer>(Constant.TRUE,Constant.TRUE,Constant.TRUE)).test("xyzzy",3));
    BinaryAnd<String,Integer> p=new BinaryAnd<String,Integer>(Constant.TRUE);
    assertTrue(p.test("xyzzy",3));
    for (int i=0; i < 10; i++) {
      p.and(Constant.TRUE);
      assertTrue(p.test("xyzzy",3));
    }
    BinaryAnd<String,Integer> q=new BinaryAnd<String,Integer>(Constant.TRUE);
    assertTrue(q.test("xyzzy",3));
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test("xyzzy",3));
    }
    BinaryAnd<String,Integer> r=new BinaryAnd<String,Integer>(p,q);
    assertTrue(r.test("xyzzy",3));
  }
  @Test public void testFalse() throws Exception {
    assertTrue(!(new BinaryAnd<String,Integer>(Constant.FALSE)).test("xyzzy",3));
    assertTrue(!(new BinaryAnd<String,Integer>(Constant.TRUE,Constant.FALSE)).test("xyzzy",3));
    assertTrue(!(new BinaryAnd<String,Integer>(Constant.TRUE,Constant.TRUE,Constant.FALSE)).test("xyzzy",3));
    BinaryAnd<String,Integer> p=new BinaryAnd<String,Integer>(Constant.FALSE);
    assertTrue(!p.test("xyzzy",3));
    for (int i=0; i < 10; i++) {
      p.and(Constant.FALSE);
      assertTrue(!p.test("xyzzy",3));
    }
    BinaryAnd<String,Integer> q=new BinaryAnd<String,Integer>(Constant.TRUE);
    assertTrue(q.test("xyzzy",3));
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test("xyzzy",3));
    }
    BinaryAnd<String,Integer> r=new BinaryAnd<String,Integer>(p,q);
    assertTrue(!r.test("xyzzy",3));
  }
  @Test public void testDuplicateAdd() throws Exception {
    BinaryPredicate<Object,Object> p=Constant.TRUE;
    BinaryAnd<String,Integer> q=new BinaryAnd<String,Integer>(p,p);
    assertTrue(q.test("xyzzy",3));
    for (int i=0; i < 10; i++) {
      q.and(p);
      assertTrue(q.test("xyzzy",3));
    }
  }
  @Test public void testEquals() throws Exception {
    BinaryAnd<Object,Object> p=new BinaryAnd<Object,Object>();
    assertEquals(p,p);
    BinaryAnd<Object,Object> q=new BinaryAnd<Object,Object>();
    assertObjectsAreEqual(p,q);
    BinaryOr<Object,Object> r=new BinaryOr<Object,Object>();
    assertObjectsAreNotEqual(p,r);
    for (int i=0; i < 3; i++) {
      p.and(Constant.truePredicate());
      assertObjectsAreNotEqual(p,q);
      q.and(Constant.truePredicate());
      assertObjectsAreEqual(p,q);
      p.and(new BinaryAnd<Object,Object>(Constant.truePredicate(),Constant.falsePredicate()));
      assertObjectsAreNotEqual(p,q);
      q.and(new BinaryAnd<Object,Object>(Constant.truePredicate(),Constant.falsePredicate()));
      assertObjectsAreEqual(p,q);
    }
    assertObjectsAreNotEqual(p,Constant.truePredicate());
  }
}
