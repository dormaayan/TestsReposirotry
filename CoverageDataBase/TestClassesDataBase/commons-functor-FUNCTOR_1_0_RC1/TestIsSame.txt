/** 
 * @version $Revision$ $Date$
 * @author Matt Benson
 */
public class TestIsSame extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsSame<Object,Object>();
  }
  @Test public void testTest() throws Exception {
    IsSame<Object,Object> p=new IsSame<Object,Object>();
    assertTrue("For symmetry, two nulls should be same",p.test(null,null));
    assertTrue(p.test("foo","foo"));
    assertFalse(p.test(null,"foo"));
    assertFalse(p.test("foo",null));
    assertFalse(p.test(new Integer(3),new Integer(3)));
    assertFalse(p.test(null,new Integer(3)));
    assertFalse(p.test(new Integer(3),null));
    assertFalse(p.test(new Integer(3),new Integer(4)));
    assertFalse(p.test(new Integer(4),new Integer(3)));
    assertFalse(p.test("3",new Integer(3)));
    assertFalse(p.test(new Integer(3),"3"));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Object> f=new IsSame<Object,Object>();
    assertEquals(f,f);
    assertObjectsAreEqual(f,new IsSame<Object,Object>());
    assertObjectsAreEqual(f,IsSame.instance());
    assertObjectsAreNotEqual(f,Constant.truePredicate());
  }
  @Test public void testConstant() throws Exception {
    assertEquals(IsSame.instance(),IsSame.instance());
    assertNotSame(IsSame.instance(),IsSame.instance());
    assertSame(IsSame.INSTANCE,IsSame.INSTANCE);
  }
}
