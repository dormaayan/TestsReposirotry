/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestLeftBoundPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new LeftBoundPredicate<Object>(Constant.TRUE,"xyzzy");
  }
  @Test public void testTest() throws Exception {
    UnaryPredicate<Boolean> p=new LeftBoundPredicate<Boolean>(new BinaryFunctionBinaryPredicate<Object,Boolean>(RightIdentity.<Object,Boolean>function()),"foo");
    assertEquals(true,p.test(Boolean.TRUE));
    assertEquals(false,p.test(Boolean.FALSE));
  }
  @Test public void testEquals() throws Exception {
    UnaryPredicate<Boolean> p=new LeftBoundPredicate<Boolean>(Constant.TRUE,"xyzzy");
    assertEquals(p,p);
    assertObjectsAreEqual(p,new LeftBoundPredicate<Boolean>(Constant.TRUE,"xyzzy"));
    assertObjectsAreNotEqual(p,Constant.TRUE);
    assertObjectsAreNotEqual(p,new LeftBoundPredicate<Boolean>(Constant.FALSE,"xyzzy"));
    assertObjectsAreNotEqual(p,new LeftBoundPredicate<Boolean>(Constant.TRUE,"foo"));
    assertObjectsAreNotEqual(p,new LeftBoundPredicate<Boolean>(Constant.TRUE,null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(LeftBoundPredicate.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(LeftBoundPredicate.bind(Constant.FALSE,"xyzzy"));
    assertNotNull(LeftBoundPredicate.bind(Constant.FALSE,null));
  }
}
