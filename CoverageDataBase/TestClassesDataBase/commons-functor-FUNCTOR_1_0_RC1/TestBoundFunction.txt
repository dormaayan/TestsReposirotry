/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBoundFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BoundFunction<Object>(Identity.INSTANCE,"xyzzy");
  }
  @Test public void testEvaluate() throws Exception {
    Function<Object> f=new BoundFunction<Object>(Identity.INSTANCE,"xyzzy");
    assertEquals("xyzzy",f.evaluate());
  }
  @Test public void testEquals() throws Exception {
    Function<Object> f=new BoundFunction<Object>(Identity.INSTANCE,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new BoundFunction<Object>(Identity.INSTANCE,"xyzzy"));
    assertObjectsAreNotEqual(f,Constant.of("xyzzy"));
    assertObjectsAreNotEqual(f,new BoundFunction<Object>(Identity.INSTANCE,"foo"));
    assertObjectsAreNotEqual(f,new BoundFunction<Object>(Constant.of("xyzzy"),"foo"));
    assertObjectsAreNotEqual(f,new BoundFunction<Object>(Identity.INSTANCE,null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BoundFunction.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BoundFunction.bind(Identity.INSTANCE,"xyzzy"));
    assertNotNull(BoundFunction.bind(Identity.INSTANCE,null));
  }
}
