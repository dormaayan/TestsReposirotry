/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestTransposedPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new TransposedPredicate<Object,Object>(Constant.TRUE);
  }
  @Test public void testEvaluate() throws Exception {
    BinaryPredicate<Boolean,Boolean> p=new TransposedPredicate<Boolean,Boolean>(BinaryFunctionBinaryPredicate.adapt(LeftIdentity.<Boolean,Boolean>function()));
    assertEquals(true,p.test(Boolean.FALSE,Boolean.TRUE));
    assertEquals(false,p.test(Boolean.TRUE,Boolean.FALSE));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Object> p=new TransposedPredicate<Object,Object>(Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new TransposedPredicate<Object,Object>(Constant.TRUE));
    assertObjectsAreEqual(p,TransposedPredicate.transpose(Constant.TRUE));
    assertObjectsAreNotEqual(p,new TransposedPredicate<Object,Object>(Constant.FALSE));
    assertObjectsAreNotEqual(p,Constant.TRUE);
  }
  @Test public void testTransposeNull() throws Exception {
    assertNull(TransposedPredicate.transpose(null));
  }
  @Test public void testTranspose() throws Exception {
    assertNotNull(TransposedPredicate.transpose(Constant.TRUE));
  }
}
