/** 
 * Dave Thomas's Kata One asks us to think about how one might implement pricing rules: "Some things in supermarkets have simple prices: this can of beans costs $0.65. Other things have more complex prices. For example: o three for a dollar (so what?s the price if I buy 4, or 5?) o $1.99/pound (so what does 4 ounces cost?) o buy two, get one free (so does the third item have a price?)" Functors provide one approach to this sort of problem, and in this example we'll demonstrate some simple cases. See http://pragprog.com/pragdave/Practices/Kata/KataOne.rdoc,v for more information on this Kata.
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class SupermarketPricingExample {
  @Test public void testConstantPricePerUnit() throws Exception {
{
      Product beans=new Product("Can of Beans","SKU-0001",ToMoney.from(Multiply.by(65)));
      assertEquals(new Money(0 * 65),beans.getPrice(0));
      assertEquals(new Money(1 * 65),beans.getPrice(1));
      assertEquals(new Money(2 * 65),beans.getPrice(2));
      assertEquals(new Money(3 * 65),beans.getPrice(3));
    }
{
      Product beans=new Product("Can of Beans","SKU-0001",65);
      assertEquals(new Money(0 * 65),beans.getPrice(0));
      assertEquals(new Money(1 * 65),beans.getPrice(1));
      assertEquals(new Money(2 * 65),beans.getPrice(2));
      assertEquals(new Money(3 * 65),beans.getPrice(3));
    }
  }
  @Test public void testFourForADollar_A() throws Exception {
    Product banana=new Product("Banana","SKU-0002",ToMoney.from(new ConditionalUnaryFunction<Integer,Number>(IsGreaterThan.instance(new Integer(3)),Multiply.by(25),Multiply.by(33))));
    assertEquals(new Money(0 * 33),banana.getPrice(0));
    assertEquals(new Money(1 * 33),banana.getPrice(1));
    assertEquals(new Money(2 * 33),banana.getPrice(2));
    assertEquals(new Money(3 * 33),banana.getPrice(3));
    assertEquals(new Money(4 * 25),banana.getPrice(4));
    assertEquals(new Money(5 * 25),banana.getPrice(5));
    assertEquals(new Money(6 * 25),banana.getPrice(6));
    assertEquals(new Money(7 * 25),banana.getPrice(7));
    assertEquals(new Money(8 * 25),banana.getPrice(8));
  }
  @Test public void testFourForADollar_B() throws Exception {
    Product banana=new Product("Banana","SKU-0002",ToMoney.from(new BinaryFunctionUnaryFunction<Integer,Number>(new UnaryCompositeBinaryFunction<Integer,Integer,Number>(Add.instance(),Composite.function(Multiply.by(100),Divide.by(4)),Composite.function(Multiply.by(33),Mod.by(4))))));
    assertEquals(new Money(0 * 33 + 0 * 25),banana.getPrice(0));
    assertEquals(new Money(1 * 33 + 0 * 25),banana.getPrice(1));
    assertEquals(new Money(2 * 33 + 0 * 25),banana.getPrice(2));
    assertEquals(new Money(3 * 33 + 0 * 25),banana.getPrice(3));
    assertEquals(new Money(0 * 33 + 4 * 25),banana.getPrice(4));
    assertEquals(new Money(1 * 33 + 4 * 25),banana.getPrice(5));
    assertEquals(new Money(2 * 33 + 4 * 25),banana.getPrice(6));
    assertEquals(new Money(3 * 33 + 4 * 25),banana.getPrice(7));
    assertEquals(new Money(0 * 33 + 8 * 25),banana.getPrice(8));
  }
  @Test public void testBuyTwoGetOneFree_1() throws Exception {
    Product apple=new Product("Apple","SKU-0003",ToMoney.from(Composite.function(Multiply.by(40),BinaryFunctionUnaryFunction.adapt(new UnaryCompositeBinaryFunction<Number,Number,Number>(Subtract.instance(),new Identity<Number>(),Divide.by(3))))));
    assertEquals(new Money(0 * 40),apple.getPrice(0));
    assertEquals(new Money(1 * 40),apple.getPrice(1));
    assertEquals(new Money(2 * 40),apple.getPrice(2));
    assertEquals(new Money(2 * 40),apple.getPrice(3));
    assertEquals(new Money(3 * 40),apple.getPrice(4));
    assertEquals(new Money(4 * 40),apple.getPrice(5));
    assertEquals(new Money(4 * 40),apple.getPrice(6));
    assertEquals(new Money(5 * 40),apple.getPrice(7));
    assertEquals(new Money(6 * 40),apple.getPrice(8));
    assertEquals(new Money(6 * 40),apple.getPrice(9));
    assertEquals(new Money(7 * 40),apple.getPrice(10));
  }
class BuyNGetMFree implements UnaryFunction<Number,Number> {
    public BuyNGetMFree(    int n,    int m,    int costPerUnit){
      this.n=n;
      this.m=m;
      this.costPerUnit=costPerUnit;
    }
    public Number evaluate(    Number num){
      int quantity=num.intValue();
      int cost=0;
      while (quantity >= n) {
        cost+=n * costPerUnit;
        quantity-=n;
        quantity-=Math.min(quantity,m);
      }
      cost+=quantity * costPerUnit;
      return new Integer(cost);
    }
    private int n, m, costPerUnit;
  }
  @Test public void testBuyTwoGetOneFree_2() throws Exception {
    Product apple=new Product("Apple","SKU-0003",ToMoney.from(new BuyNGetMFree(2,1,40)));
    assertEquals(new Money(0 * 40),apple.getPrice(0));
    assertEquals(new Money(1 * 40),apple.getPrice(1));
    assertEquals(new Money(2 * 40),apple.getPrice(2));
    assertEquals(new Money(2 * 40),apple.getPrice(3));
    assertEquals(new Money(3 * 40),apple.getPrice(4));
    assertEquals(new Money(4 * 40),apple.getPrice(5));
    assertEquals(new Money(4 * 40),apple.getPrice(6));
    assertEquals(new Money(5 * 40),apple.getPrice(7));
    assertEquals(new Money(6 * 40),apple.getPrice(8));
    assertEquals(new Money(6 * 40),apple.getPrice(9));
    assertEquals(new Money(7 * 40),apple.getPrice(10));
  }
  @Test public void testBuyThreeGetTwoFree() throws Exception {
    Product apple=new Product("Apple","SKU-0003",ToMoney.from(new BuyNGetMFree(3,2,40)));
    assertEquals(new Money(0 * 40),apple.getPrice(0));
    assertEquals(new Money(1 * 40),apple.getPrice(1));
    assertEquals(new Money(2 * 40),apple.getPrice(2));
    assertEquals(new Money(3 * 40),apple.getPrice(3));
    assertEquals(new Money(3 * 40),apple.getPrice(4));
    assertEquals(new Money(3 * 40),apple.getPrice(5));
    assertEquals(new Money(4 * 40),apple.getPrice(6));
    assertEquals(new Money(5 * 40),apple.getPrice(7));
    assertEquals(new Money(6 * 40),apple.getPrice(8));
    assertEquals(new Money(6 * 40),apple.getPrice(9));
    assertEquals(new Money(6 * 40),apple.getPrice(10));
    assertEquals(new Money(7 * 40),apple.getPrice(11));
  }
  @Test public void testBuyTwoGetFiveFree() throws Exception {
    Product apple=new Product("Apple","SKU-0003",ToMoney.from(new BuyNGetMFree(2,5,40)));
    assertEquals(new Money(0 * 40),apple.getPrice(0));
    assertEquals(new Money(1 * 40),apple.getPrice(1));
    assertEquals(new Money(2 * 40),apple.getPrice(2));
    assertEquals(new Money(2 * 40),apple.getPrice(3));
    assertEquals(new Money(2 * 40),apple.getPrice(4));
    assertEquals(new Money(2 * 40),apple.getPrice(5));
    assertEquals(new Money(2 * 40),apple.getPrice(6));
    assertEquals(new Money(2 * 40),apple.getPrice(7));
    assertEquals(new Money(3 * 40),apple.getPrice(8));
    assertEquals(new Money(4 * 40),apple.getPrice(9));
    assertEquals(new Money(4 * 40),apple.getPrice(10));
    assertEquals(new Money(4 * 40),apple.getPrice(11));
    assertEquals(new Money(4 * 40),apple.getPrice(12));
    assertEquals(new Money(4 * 40),apple.getPrice(13));
    assertEquals(new Money(4 * 40),apple.getPrice(14));
    assertEquals(new Money(5 * 40),apple.getPrice(15));
  }
}
