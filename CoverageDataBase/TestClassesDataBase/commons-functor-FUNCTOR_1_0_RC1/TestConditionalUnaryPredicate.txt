/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalUnaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalUnaryPredicate<Object>(Constant.TRUE,Constant.FALSE,Constant.TRUE);
  }
  @Test public void testTest() throws Exception {
    ConditionalUnaryPredicate<Object> p=new ConditionalUnaryPredicate<Object>(Identity.INSTANCE,Constant.TRUE,Constant.FALSE);
    assertTrue(p.test(Boolean.TRUE));
    assertTrue(!p.test(Boolean.FALSE));
  }
  @Test public void testEquals() throws Exception {
    ConditionalUnaryPredicate<Object> p=new ConditionalUnaryPredicate<Object>(Identity.INSTANCE,Constant.TRUE,Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new ConditionalUnaryPredicate<Object>(Identity.INSTANCE,Constant.TRUE,Constant.TRUE));
    assertObjectsAreNotEqual(p,new ConditionalUnaryPredicate<Object>(Identity.INSTANCE,Constant.FALSE,Constant.TRUE));
    assertObjectsAreNotEqual(p,new ConditionalUnaryPredicate<Object>(Constant.TRUE,Constant.TRUE,Constant.TRUE));
  }
}
