/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestSize extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new Size();
  }
  @Test public void testEvaluate() throws Exception {
    assertEquals(new Integer(0),Size.instance().evaluate(Collections.EMPTY_LIST));
    assertEquals(new Integer(0),Size.instance().evaluate(Collections.EMPTY_SET));
{
      List list=new ArrayList();
      assertEquals(new Integer(0),Size.instance().evaluate(list));
      for (int i=0; i < 2; i++) {
        assertEquals(new Integer(i),Size.instance().evaluate(list));
        list.add(new Integer(i));
        assertEquals(new Integer(i + 1),Size.instance().evaluate(list));
      }
    }
{
      Set set=new HashSet();
      assertEquals(new Integer(0),Size.instance().evaluate(set));
      for (int i=0; i < 2; i++) {
        assertEquals(new Integer(i),Size.instance().evaluate(set));
        set.add(new Integer(i));
        assertEquals(new Integer(i + 1),Size.instance().evaluate(set));
      }
    }
  }
  @Test public void testEvaluateNull() throws Exception {
    try {
      Size.instance().evaluate(null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testEvaluateNonCollection() throws Exception {
    try {
      Size.instance().evaluate(new Integer(3));
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testEvaluateArray() throws Exception {
    assertEquals(new Integer(10),Size.instance().evaluate(new int[10]));
    assertEquals(new Integer(7),Size.instance().evaluate(new String[7]));
  }
  @Test public void testEvaluateString() throws Exception {
    assertEquals(new Integer("xyzzy".length()),Size.instance().evaluate("xyzzy"));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction f=new Size();
    assertEquals(f,f);
    assertObjectsAreEqual(f,new Size());
    assertObjectsAreEqual(f,Size.instance());
    assertSame(Size.instance(),Size.instance());
    assertObjectsAreNotEqual(f,new Constant(null));
    assertTrue(!f.equals((Size)null));
  }
}
