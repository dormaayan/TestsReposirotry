/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestUnaryNot extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnaryNot<Object>(Constant.TRUE);
  }
  @Test public void testTest() throws Exception {
    UnaryPredicate<Object> truePred=new UnaryNot<Object>(Constant.FALSE);
    assertTrue(truePred.test(null));
    assertTrue(truePred.test("xyzzy"));
    assertTrue(truePred.test(new Integer(3)));
  }
  @Test public void testEquals() throws Exception {
    UnaryNot<Object> p=new UnaryNot<Object>(Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new UnaryNot<Object>(Constant.TRUE));
    assertObjectsAreEqual(p,UnaryNot.not(Constant.TRUE));
    assertObjectsAreNotEqual(p,new UnaryNot<Object>(Constant.FALSE));
    assertObjectsAreNotEqual(p,Constant.TRUE);
  }
  @Test public void testNotNull() throws Exception {
    assertNull(UnaryNot.not(null));
  }
  @Test public void testNotNotNull() throws Exception {
    assertNotNull(UnaryNot.not(Constant.truePredicate()));
  }
}
