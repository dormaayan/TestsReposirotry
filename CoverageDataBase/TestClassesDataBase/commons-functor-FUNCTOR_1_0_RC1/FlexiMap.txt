static class FlexiMap implements Map {
  public FlexiMap(  BinaryFunction putfn,  BinaryFunction getfn){
    onPut=null == putfn ? RightIdentity.function() : putfn;
    onGet=null == getfn ? RightIdentity.function() : getfn;
    proxiedMap=new HashMap();
  }
  public Object get(  Object key){
    return onGet.evaluate(key,proxiedMap.get(key));
  }
  public Object put(  Object key,  Object value){
    Object oldvalue=proxiedMap.get(key);
    proxiedMap.put(key,onPut.evaluate(oldvalue,value));
    return onGet.evaluate(key,oldvalue);
  }
  public void clear(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public boolean containsKey(  Object key){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public boolean containsValue(  Object value){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public Set entrySet(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public boolean isEmpty(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public Set keySet(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public void putAll(  Map t){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public Object remove(  Object key){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public int size(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  public Collection values(){
    throw new UnsupportedOperationException("Left as an exercise for the reader.");
  }
  private BinaryFunction onPut=null;
  private BinaryFunction onGet=null;
  private Map proxiedMap=null;
}
