/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestOffset extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new Offset(3);
  }
  @Test public void testZero() throws Exception {
    Predicate p=new Offset(0);
    assertTrue(p.test());
    assertTrue(p.test());
    assertTrue(p.test());
  }
  @Test public void testBadArgs() throws Exception {
    try {
      new Offset(-1);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testTestNullary() throws Exception {
    Predicate p=new Offset(3);
    assertTrue(!p.test());
    assertTrue(!p.test());
    assertTrue(!p.test());
    assertTrue(p.test());
  }
  @Test public void testTestUnary() throws Exception {
    UnaryPredicate<Object> p=new Offset(3);
    assertTrue(!p.test(null));
    assertTrue(!p.test(null));
    assertTrue(!p.test(null));
    assertTrue(p.test(null));
  }
  @Test public void testTestBinary() throws Exception {
    BinaryPredicate<Object,Object> p=new Offset(3);
    assertTrue(!p.test(null,null));
    assertTrue(!p.test(null,null));
    assertTrue(!p.test(null,null));
    assertTrue(p.test(null,null));
  }
}
