/** 
 * Tests the Base Generator class.
 * @author Jason Horman (jason@jhorman.org)
 */
@SuppressWarnings("unchecked") public class TestBaseGenerator {
  private Generator simpleGenerator=null;
  @Before public void setUp() throws Exception {
    simpleGenerator=new BaseGenerator(){
      public void run(      UnaryProcedure proc){
        for (int i=0; i < 5; i++) {
          proc.run(new Integer(i));
          if (isStopped()) {
            break;
          }
        }
      }
    }
;
    list=new ArrayList();
    evens=new ArrayList();
    doubled=new ArrayList();
    listWithDuplicates=new ArrayList();
    sum=0;
    for (int i=0; i < 10; i++) {
      list.add(new Integer(i));
      doubled.add(new Integer(i * 2));
      listWithDuplicates.add(new Integer(i));
      listWithDuplicates.add(new Integer(i));
      sum+=i;
      if (i % 2 == 0) {
        evens.add(new Integer(i));
      }
    }
  }
  @After public void tearDown() throws Exception {
    simpleGenerator=null;
    list=null;
    evens=null;
    listWithDuplicates=null;
    sum=0;
  }
  @Test public void testSimpleGenerator(){
    final StringBuffer result=new StringBuffer();
    simpleGenerator.run(new UnaryProcedure(){
      public void run(      Object obj){
        result.append(obj);
      }
    }
);
    assertEquals("01234",result.toString());
  }
  @Test public void testStop(){
    final StringBuffer result=new StringBuffer();
    simpleGenerator.run(new UnaryProcedure(){
      int i=0;
      public void run(      Object obj){
        result.append(obj);
        if (i++ > 1) {
          simpleGenerator.stop();
        }
      }
    }
);
    assertEquals("012",result.toString());
  }
  @Test public void testWrappingGenerator(){
    final StringBuffer result=new StringBuffer();
    final Generator gen=new BaseGenerator(simpleGenerator){
      public void run(      final UnaryProcedure proc){
        Generator wrapped=getWrappedGenerator();
        assertSame(simpleGenerator,wrapped);
        wrapped.run(new UnaryProcedure(){
          public void run(          Object obj){
            proc.run(new Integer(((Integer)obj).intValue() + 1));
          }
        }
);
      }
    }
;
    gen.run(new UnaryProcedure(){
      public void run(      Object obj){
        result.append(obj);
      }
    }
);
    assertEquals("12345",result.toString());
    final StringBuffer result2=new StringBuffer();
    gen.run(new UnaryProcedure(){
      int i=0;
      public void run(      Object obj){
        result2.append(obj);
        if (i++ > 1) {
          gen.stop();
        }
      }
    }
);
    assertEquals("123",result2.toString());
  }
  @Test public void testTo(){
    Collection col=(Collection)simpleGenerator.to(new CollectionTransformer());
    assertEquals("[0, 1, 2, 3, 4]",col.toString());
    Collection fillThis=new LinkedList();
    col=(Collection)simpleGenerator.to(new CollectionTransformer(fillThis));
    assertSame(fillThis,col);
    assertEquals("[0, 1, 2, 3, 4]",col.toString());
    col=simpleGenerator.toCollection();
    assertEquals("[0, 1, 2, 3, 4]",col.toString());
    assertEquals("[0, 1, 2, 3, 4]",col.toString());
    fillThis=new LinkedList();
    col=simpleGenerator.to(fillThis);
    assertSame(fillThis,col);
    assertEquals("[0, 1, 2, 3, 4]",col.toString());
  }
  private List list=null;
  private List doubled=null;
  private List evens=null;
  private List listWithDuplicates=null;
  private int sum=0;
static class Summer implements UnaryProcedure {
    public void run(    Object that){
      sum+=((Number)that).intValue();
    }
    public int sum=0;
  }
}
