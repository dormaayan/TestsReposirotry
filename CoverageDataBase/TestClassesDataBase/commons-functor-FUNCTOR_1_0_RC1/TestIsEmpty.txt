/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestIsEmpty extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsEmpty();
  }
  @Test public void testTest() throws Exception {
    assertTrue(IsEmpty.instance().test(Collections.EMPTY_LIST));
    assertTrue(IsEmpty.instance().test(Collections.EMPTY_SET));
{
      List list=new ArrayList();
      assertTrue(IsEmpty.instance().test(list));
      list.add("Xyzzy");
      assertTrue(!IsEmpty.instance().test(list));
    }
{
      Set set=new HashSet();
      assertTrue(IsEmpty.instance().test(set));
      set.add("Xyzzy");
      assertTrue(!IsEmpty.instance().test(set));
    }
  }
  @Test public void testTestNull() throws Exception {
    try {
      IsEmpty.instance().test(null);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testTestNonCollection() throws Exception {
    try {
      IsEmpty.instance().test(new Integer(3));
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testTestArray() throws Exception {
    assertTrue(!IsEmpty.instance().test(new int[10]));
    assertTrue(!IsEmpty.instance().test(new Object[10]));
    assertTrue(IsEmpty.instance().test(new int[0]));
    assertTrue(IsEmpty.instance().test(new Object[0]));
  }
  @Test public void testTestString() throws Exception {
    assertTrue(!IsEmpty.instance().test("xyzzy"));
    assertTrue(IsEmpty.instance().test(""));
  }
  @Test public void testTestMap() throws Exception {
    Map map=new HashMap();
    assertTrue(IsEmpty.instance().test(map));
    map.put("x","y");
    assertTrue(!IsEmpty.instance().test(map));
  }
  @Test public void testEquals() throws Exception {
    UnaryPredicate p=new IsEmpty();
    assertEquals(p,p);
    assertObjectsAreEqual(p,new IsEmpty());
    assertObjectsAreEqual(p,IsEmpty.instance());
    assertObjectsAreNotEqual(p,new Constant(true));
  }
}
