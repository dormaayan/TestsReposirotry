/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIgnoreLeftFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IgnoreLeftFunction<Object,Object,Object>(Constant.of("xyzzy"));
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<String,String,String> f=new IgnoreLeftFunction<String,String,String>(new Identity<String>());
    assertNull(f.evaluate(null,null));
    assertNull(f.evaluate("xyzzy",null));
    assertEquals("xyzzy",f.evaluate(null,"xyzzy"));
    assertEquals("xyzzy",f.evaluate("abc","xyzzy"));
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,String> f=new IgnoreLeftFunction<Object,Object,String>(Constant.of("xyzzy"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new IgnoreLeftFunction<Object,Object,String>(Constant.of("xyzzy")));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new IgnoreLeftFunction<Object,Object,String>(Constant.<String>of(null)));
    assertObjectsAreNotEqual(f,Constant.of(null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(IgnoreLeftFunction.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(IgnoreLeftFunction.adapt(Constant.of("xyzzy")));
  }
}
