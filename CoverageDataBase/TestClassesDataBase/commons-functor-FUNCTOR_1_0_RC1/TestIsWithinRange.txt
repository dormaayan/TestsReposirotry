/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 * @author Jason Horman
 */
public class TestIsWithinRange extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new IsWithinRange<Integer>(new Integer(5),new Integer(10));
  }
  @Test public void testTest() throws Exception {
    IsWithinRange<Integer> p=new IsWithinRange<Integer>(new Integer(5),new Integer(10));
    assertTrue(p.test(new Integer(5)));
    assertTrue(p.test(new Integer(6)));
    assertTrue(p.test(new Integer(7)));
    assertTrue(p.test(new Integer(8)));
    assertTrue(p.test(new Integer(9)));
    assertTrue(p.test(new Integer(10)));
    assertTrue(!p.test(new Integer(4)));
    assertTrue(!p.test(new Integer(11)));
  }
  @Test public void testInvalidRange(){
    try {
      new IsWithinRange<Integer>(new Integer(5),new Integer(4));
      fail("should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("should have thrown IllegalArgumentException, not " + e);
    }
    try {
      new IsWithinRange<Integer>(new Integer(5),null);
      fail("should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("should have thrown IllegalArgumentException, not " + e);
    }
  }
  @Test public void testEquals() throws Exception {
    IsWithinRange<Integer> p1=new IsWithinRange<Integer>(new Integer(5),new Integer(10));
    IsWithinRange<Integer> p2=new IsWithinRange<Integer>(new Integer(5),new Integer(10));
    assertEquals(p1,p2);
    p2=new IsWithinRange<Integer>(new Integer(5),new Integer(11));
    assertTrue(!p1.equals(p2));
    p2=new IsWithinRange<Integer>(new Integer(6),new Integer(10));
    assertTrue(!p1.equals(p2));
  }
  @Test public void testFactory() throws Exception {
    IsWithinRange<Integer> p=IsWithinRange.instance(new Integer(5),new Integer(10));
    assertTrue(p.test(new Integer(5)));
    assertTrue(p.test(new Integer(6)));
    assertTrue(p.test(new Integer(7)));
    assertTrue(p.test(new Integer(8)));
    assertTrue(p.test(new Integer(9)));
    assertTrue(p.test(new Integer(10)));
    assertTrue(!p.test(new Integer(4)));
    assertTrue(!p.test(new Integer(11)));
  }
}
