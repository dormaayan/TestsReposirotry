/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConditionalBinaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new ConditionalBinaryFunction<Object,Object,String>(Constant.TRUE,Constant.of("left"),Constant.of("right"));
  }
  @Test public void testEvaluate() throws Exception {
    ConditionalBinaryFunction<Boolean,Object,String> f=new ConditionalBinaryFunction<Boolean,Object,String>(LeftIdentity.PREDICATE,Constant.of("left"),Constant.of("right"));
    assertEquals("left",f.evaluate(Boolean.TRUE,null));
    assertEquals("right",f.evaluate(Boolean.FALSE,null));
  }
  @Test public void testEquals() throws Exception {
    ConditionalBinaryFunction<Boolean,Object,String> f=new ConditionalBinaryFunction<Boolean,Object,String>(LeftIdentity.PREDICATE,Constant.of("left"),Constant.of("right"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new ConditionalBinaryFunction<Boolean,Object,String>(LeftIdentity.PREDICATE,Constant.of("left"),Constant.of("right")));
    assertObjectsAreNotEqual(f,new ConditionalBinaryFunction<Boolean,Object,Object>(LeftIdentity.PREDICATE,Constant.of(null),Constant.of("right")));
    assertObjectsAreNotEqual(f,new ConditionalBinaryFunction<Boolean,Object,String>(Constant.TRUE,Constant.of("left"),Constant.of("right")));
  }
}
