/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestConstant extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new Constant<Object>("K");
  }
  @Test public void testEvaluate() throws Exception {
    Constant<Object> f=new Constant<Object>("xyzzy");
    assertEquals("xyzzy",f.evaluate());
    assertEquals("xyzzy",f.evaluate(null));
    assertEquals("xyzzy",f.evaluate(null,null));
    assertEquals("xyzzy",f.evaluate());
    assertEquals("xyzzy",f.evaluate("foo"));
    assertEquals("xyzzy",f.evaluate("foo",new Integer(2)));
  }
  @Test public void testEvaluateConstantNull() throws Exception {
    Constant<Object> f=new Constant<Object>(null);
    assertNull(f.evaluate());
    assertNull(f.evaluate(null));
    assertNull(f.evaluate(null,null));
    assertNull(f.evaluate());
    assertNull(f.evaluate("foo"));
    assertNull(f.evaluate("foo",new Integer(2)));
  }
  @Test public void testConstantTrue() throws Exception {
    Constant<Object> truePred=new Constant<Object>(true);
    assertTrue(truePred.test());
    assertTrue(truePred.test(null));
    assertTrue(truePred.test(null,null));
    assertTrue(truePred.test());
    assertTrue(truePred.test("foo"));
    assertTrue(truePred.test("foo",new Integer(2)));
  }
  @Test public void testConstantFalse() throws Exception {
    Constant<Object> falsePred=new Constant<Object>(false);
    assertTrue(!falsePred.test());
    assertTrue(!falsePred.test(null));
    assertTrue(!falsePred.test(null,null));
    assertTrue(!falsePred.test());
    assertTrue(!falsePred.test("foo"));
    assertTrue(!falsePred.test("foo",new Integer(2)));
  }
  @Test public void testEquals() throws Exception {
    Constant<Object> f=new Constant<Object>("xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new Constant<Object>("xyzzy"));
    assertObjectsAreNotEqual(f,new Constant<Object>("abcde"));
    assertObjectsAreNotEqual(f,new Constant<Object>(null));
  }
  @Test public void testConstants() throws Exception {
    assertEquals(Constant.predicate(true),Constant.TRUE);
    assertEquals(Constant.truePredicate(),Constant.TRUE);
    assertSame(Constant.truePredicate(),Constant.TRUE);
    assertEquals(Constant.predicate(true),Constant.TRUE);
    assertSame(Constant.predicate(true),Constant.TRUE);
    assertEquals(Constant.falsePredicate(),Constant.FALSE);
    assertSame(Constant.falsePredicate(),Constant.FALSE);
    assertEquals(Constant.predicate(false),Constant.FALSE);
    assertSame(Constant.predicate(false),Constant.FALSE);
  }
}
