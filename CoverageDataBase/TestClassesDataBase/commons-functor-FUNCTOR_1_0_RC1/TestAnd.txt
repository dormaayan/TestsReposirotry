/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestAnd extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new And(Constant.TRUE,Constant.TRUE);
  }
  @Test public void testTrue() throws Exception {
    assertTrue((new And()).test());
    assertTrue((new And(Constant.TRUE)).test());
    assertTrue((new And(Constant.TRUE,Constant.TRUE)).test());
    assertTrue((new And(Constant.TRUE,Constant.TRUE,Constant.TRUE)).test());
    And p=new And(Constant.TRUE);
    assertTrue(p.test());
    for (int i=0; i < 10; i++) {
      p.and(Constant.TRUE);
      assertTrue(p.test());
    }
    And q=new And(Constant.TRUE);
    assertTrue(q.test());
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test());
    }
    And r=new And(p,q);
    assertTrue(r.test());
  }
  @Test public void testFalse() throws Exception {
    assertTrue(!(new And(Constant.FALSE)).test());
    assertTrue(!(new And(Constant.TRUE,Constant.FALSE)).test());
    assertTrue(!(new And(Constant.TRUE,Constant.TRUE,Constant.FALSE)).test());
    And p=new And(Constant.FALSE);
    assertTrue(!p.test());
    for (int i=0; i < 10; i++) {
      p.and(Constant.FALSE);
      assertTrue(!p.test());
    }
    And q=new And(Constant.TRUE);
    assertTrue(q.test());
    for (int i=0; i < 10; i++) {
      q.and(Constant.TRUE);
      assertTrue(q.test());
    }
    And r=new And(p,q);
    assertTrue(!r.test());
  }
  @Test public void testDuplicateAdd() throws Exception {
    Predicate p=Constant.TRUE;
    And q=new And(p,p);
    assertTrue(q.test());
    for (int i=0; i < 10; i++) {
      q.and(p);
      assertTrue(q.test());
    }
  }
  @Test public void testEquals() throws Exception {
    And p=new And();
    assertEquals(p,p);
    And q=new And();
    assertObjectsAreEqual(p,q);
    for (int i=0; i < 3; i++) {
      p.and(Constant.TRUE);
      assertObjectsAreNotEqual(p,q);
      q.and(Constant.truePredicate());
      assertObjectsAreEqual(p,q);
      p.and(new And(Constant.TRUE,Constant.FALSE));
      assertObjectsAreNotEqual(p,q);
      q.and(new And(Constant.TRUE,Constant.FALSE));
      assertObjectsAreEqual(p,q);
    }
    assertObjectsAreNotEqual(p,Constant.TRUE);
  }
}
