/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryOr extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryOr<Object,Object>(Constant.FALSE,Constant.TRUE);
  }
  @Test public void testTrue() throws Exception {
    assertTrue((new BinaryOr<Object,Object>(Constant.TRUE)).test("xyzzy",new Integer(3)));
    assertTrue((new BinaryOr<Object,Object>(Constant.FALSE,Constant.TRUE)).test("xyzzy",new Integer(3)));
    assertTrue((new BinaryOr<Object,Object>(Constant.FALSE,Constant.FALSE,Constant.TRUE)).test("xyzzy",new Integer(3)));
    BinaryOr<Object,Object> p=new BinaryOr<Object,Object>(Constant.TRUE);
    assertTrue(p.test("xyzzy",new Integer(3)));
    for (int i=0; i < 10; i++) {
      p.or(Constant.of(i % 2 == 0));
      assertTrue(p.test("xyzzy",new Integer(3)));
    }
    BinaryOr<Object,Object> q=new BinaryOr<Object,Object>(Constant.TRUE);
    assertTrue(q.test("xyzzy",new Integer(3)));
    for (int i=0; i < 10; i++) {
      q.or(Constant.of(i % 2 == 0));
      assertTrue(q.test("xyzzy",new Integer(3)));
    }
    BinaryOr<Object,Object> r=new BinaryOr<Object,Object>(p,q);
    assertTrue(r.test("xyzzy",new Integer(3)));
  }
  @Test public void testFalse() throws Exception {
    assertTrue(!(new BinaryOr<Object,Object>()).test("xyzzy",new Integer(3)));
    assertTrue(!(new BinaryOr<Object,Object>(Constant.FALSE)).test("xyzzy",new Integer(3)));
    assertTrue(!(new BinaryOr<Object,Object>(Constant.FALSE,Constant.FALSE)).test("xyzzy",new Integer(3)));
    assertTrue(!(new BinaryOr<Object,Object>(Constant.FALSE,Constant.FALSE,Constant.FALSE)).test("xyzzy",new Integer(3)));
    BinaryOr<Object,Object> p=new BinaryOr<Object,Object>(Constant.FALSE);
    assertTrue(!p.test("xyzzy",new Integer(3)));
    for (int i=0; i < 10; i++) {
      p.or(Constant.FALSE);
      assertTrue(!p.test("xyzzy",new Integer(3)));
    }
    BinaryOr<Object,Object> q=new BinaryOr<Object,Object>(Constant.FALSE);
    assertTrue(!q.test("xyzzy",new Integer(3)));
    for (int i=0; i < 10; i++) {
      q.or(Constant.FALSE);
      assertTrue(!q.test("xyzzy",new Integer(3)));
    }
    BinaryOr<Object,Object> r=new BinaryOr<Object,Object>(p,q);
    assertTrue(!r.test("xyzzy",new Integer(3)));
  }
  @Test public void testDuplicateAdd() throws Exception {
    BinaryPredicate<Object,Object> p=Constant.TRUE;
    BinaryOr<Object,Object> q=new BinaryOr<Object,Object>(p,p);
    assertTrue(q.test("xyzzy",new Integer(3)));
    for (int i=0; i < 10; i++) {
      q.or(p);
      assertTrue(q.test("xyzzy",new Integer(3)));
    }
  }
  @Test public void testEquals() throws Exception {
    BinaryOr<Object,Object> p=new BinaryOr<Object,Object>();
    assertEquals(p,p);
    BinaryOr<Object,Object> q=new BinaryOr<Object,Object>();
    assertObjectsAreEqual(p,q);
    BinaryAnd<Object,Object> r=new BinaryAnd<Object,Object>();
    assertObjectsAreNotEqual(p,r);
    for (int i=0; i < 3; i++) {
      p.or(Constant.TRUE);
      assertObjectsAreNotEqual(p,q);
      q.or(Constant.TRUE);
      assertObjectsAreEqual(p,q);
      r.and(Constant.TRUE);
      assertObjectsAreNotEqual(p,r);
      p.or(new BinaryOr<Object,Object>(Constant.truePredicate(),Constant.FALSE));
      assertObjectsAreNotEqual(p,q);
      q.or(new BinaryOr<Object,Object>(Constant.truePredicate(),Constant.FALSE));
      assertObjectsAreEqual(p,q);
      r.and(new BinaryOr<Object,Object>(Constant.truePredicate(),Constant.FALSE));
      assertObjectsAreNotEqual(p,r);
    }
    assertObjectsAreNotEqual(p,Constant.TRUE);
  }
}
