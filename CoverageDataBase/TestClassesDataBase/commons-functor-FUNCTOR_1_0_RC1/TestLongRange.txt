/** 
 * @version $Revision$ $Date$
 * @author Jason Horman (jason@jhorman.org)
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestLongRange extends BaseFunctorTest {
  protected Object makeFunctor() throws Exception {
    return new LongRange(10,20);
  }
  @Test public void testGenerateListExample(){
{
      List list=(List)(new LongRange(0,10).to(new ArrayList()));
      for (int i=0; i < 10; i++) {
        assertEquals(new Long(i),list.get(i));
      }
    }
{
      List list=(List)(new LongRange(10,0).to(new ArrayList()));
      for (int i=10; i > 0; i--) {
        assertEquals(new Long(i),list.get(10 - i));
      }
    }
  }
  @Test public void testStepChecking(){
{
      new LongRange(2,2,0);
    }
{
      new LongRange(2,2,1);
    }
{
      new LongRange(2,2,-1);
    }
{
      new LongRange(0,1,10);
    }
{
      new LongRange(1,0,-10);
    }
    try {
      new LongRange(0,1,0);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      new LongRange(0,1,-1);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      new LongRange(0,-1,1);
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testObjectConstructor(){
    LongRange range=new LongRange(new Long(0),new Long(5));
    assertEquals("[0, 1, 2, 3, 4]",range.toCollection().toString());
    range=new LongRange(new Integer(0),new Long(5),new Long(1));
    assertEquals("[0, 1, 2, 3, 4]",range.toCollection().toString());
  }
  @Test public void testReverseStep(){
    LongRange range=new LongRange(10,0,-2);
    assertEquals("[10, 8, 6, 4, 2]",range.toCollection().toString());
    assertEquals("[10, 8, 6, 4, 2]",range.toCollection().toString());
  }
  @Test public void testStep(){
    LongRange range=new LongRange(0,10,2);
    assertEquals("[0, 2, 4, 6, 8]",range.toCollection().toString());
    assertEquals("[0, 2, 4, 6, 8]",range.toCollection().toString());
  }
  @Test public void testForwardRange(){
    LongRange range=new LongRange(0,5);
    assertEquals("[0, 1, 2, 3, 4]",range.toCollection().toString());
    assertEquals("[0, 1, 2, 3, 4]",range.toCollection().toString());
  }
  @Test public void testReverseRange(){
    LongRange range=new LongRange(5,0);
    assertEquals("[5, 4, 3, 2, 1]",range.toCollection().toString());
    assertEquals("[5, 4, 3, 2, 1]",range.toCollection().toString());
  }
  @Test public void testEdgeCase(){
    LongRange range=new LongRange(Long.MAX_VALUE - 3L,Long.MAX_VALUE);
    assertEquals("[9223372036854775804, 9223372036854775805, 9223372036854775806]",range.toCollection().toString());
    assertEquals("[9223372036854775804, 9223372036854775805, 9223372036854775806]",range.toCollection().toString());
  }
  @Test public void testEquals(){
    LongRange range=new LongRange(1,5);
    assertObjectsAreEqual(range,range);
    assertObjectsAreEqual(range,new LongRange(1,5));
    assertObjectsAreEqual(range,new LongRange(1,5,1));
    assertObjectsAreEqual(range,new LongRange(new Integer(1),new Long(5)));
    assertObjectsAreEqual(range,new LongRange(new Long(1),new Short((short)5),new Long(1)));
  }
}
