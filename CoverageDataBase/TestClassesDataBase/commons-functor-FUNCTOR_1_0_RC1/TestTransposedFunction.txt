/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestTransposedFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new TransposedFunction<Object,Object,Object>(LeftIdentity.FUNCTION);
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<Object,Object,Object> f=new TransposedFunction<Object,Object,Object>(LeftIdentity.FUNCTION);
    assertEquals("xyzzy",f.evaluate(null,"xyzzy"));
    assertNull(f.evaluate("xyzzy",null));
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=new TransposedFunction<Object,Object,Object>(LeftIdentity.FUNCTION);
    assertEquals(f,f);
    assertObjectsAreEqual(f,new TransposedFunction<Object,Object,Object>(LeftIdentity.FUNCTION));
    assertObjectsAreNotEqual(f,new TransposedFunction<Object,Object,Object>(RightIdentity.FUNCTION));
    assertObjectsAreNotEqual(f,Constant.of("y"));
  }
  @Test public void testTransposeNull() throws Exception {
    assertNull(TransposedFunction.transpose(null));
  }
  @Test public void testTranspose() throws Exception {
    assertNotNull(TransposedFunction.transpose(Constant.of("x")));
  }
}
