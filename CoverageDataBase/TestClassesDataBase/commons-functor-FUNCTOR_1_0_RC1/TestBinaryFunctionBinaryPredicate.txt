/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryFunctionBinaryPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryFunctionBinaryPredicate<Object,Object>(Constant.TRUE);
  }
  @Test public void testTestWhenTrue() throws Exception {
    BinaryPredicate<Object,Object> p=new BinaryFunctionBinaryPredicate<Object,Object>(Constant.TRUE);
    assertTrue(p.test(null,null));
  }
  @Test public void testTestWhenFalse() throws Exception {
    BinaryPredicate<Object,Object> p=new BinaryFunctionBinaryPredicate<Object,Object>(Constant.FALSE);
    assertFalse(p.test(null,null));
  }
  @Test public void testEquals() throws Exception {
    BinaryPredicate<Object,Object> p=new BinaryFunctionBinaryPredicate<Object,Object>(Constant.TRUE);
    assertEquals(p,p);
    assertObjectsAreEqual(p,new BinaryFunctionBinaryPredicate<Object,Object>(Constant.TRUE));
    assertObjectsAreNotEqual(p,Constant.truePredicate());
    assertObjectsAreNotEqual(p,new BinaryFunctionBinaryPredicate<Object,Object>(Constant.FALSE));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BinaryFunctionBinaryPredicate.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BinaryFunctionBinaryPredicate.adapt(Constant.TRUE));
  }
}
