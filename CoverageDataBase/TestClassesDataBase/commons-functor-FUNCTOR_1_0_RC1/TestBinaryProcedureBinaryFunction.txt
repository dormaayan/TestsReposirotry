/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryProcedureBinaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryProcedureBinaryFunction<Object,Object,Object>(NoOp.instance());
  }
  @Test public void testEvaluate() throws Exception {
    BinaryFunction<Object,Object,Object> f=new BinaryProcedureBinaryFunction<Object,Object,Object>(NoOp.instance());
    assertNull(f.evaluate(null,null));
  }
  @Test public void testEquals() throws Exception {
    BinaryFunction<Object,Object,Object> f=new BinaryProcedureBinaryFunction<Object,Object,Object>(new NoOp());
    assertEquals(f,f);
    assertObjectsAreEqual(f,new BinaryProcedureBinaryFunction<Object,Object,Object>(new NoOp()));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new BinaryProcedureBinaryFunction<Object,Object,Object>(new BinaryProcedure<Object,Object>(){
      public void run(      Object a,      Object b){
      }
    }
));
    assertObjectsAreNotEqual(f,Constant.of(null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BinaryFunctionBinaryProcedure.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BinaryProcedureBinaryFunction.adapt(NoOp.instance()));
  }
}
