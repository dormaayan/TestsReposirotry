/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public abstract class BaseComparisonPredicateTest extends BaseFunctorTest {
  @Test public final void testTestNull() throws Exception {
    @SuppressWarnings("unchecked") BinaryPredicate<Object,Object> p=(BinaryPredicate<Object,Object>)(makeFunctor());
    try {
      p.test(new Integer(2),null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
    try {
      p.test(null,new Integer(2));
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
    try {
      p.test(null,null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public final void testTestNonComparable() throws Exception {
    @SuppressWarnings("unchecked") BinaryPredicate<Object,Object> p=(BinaryPredicate<Object,Object>)(makeFunctor());
    try {
      p.test(new Integer(2),new Object());
      fail("Expected ClassCastException");
    }
 catch (    ClassCastException e) {
    }
    try {
      p.test(new Object(),new Integer(2));
      fail("Expected ClassCastException");
    }
 catch (    ClassCastException e) {
    }
    try {
      p.test(new Object(),new Object());
      fail("Expected ClassCastException");
    }
 catch (    ClassCastException e) {
    }
  }
}
