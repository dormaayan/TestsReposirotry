/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBinaryFunctionBinaryProcedure extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BinaryFunctionBinaryProcedure<Object,Object>(Constant.of("K"));
  }
  @Test public void testRun() throws Exception {
class EvaluateCounter implements BinaryFunction<Object,Object,Integer> {
      int count=0;
      public Integer evaluate(      Object a,      Object b){
        return new Integer(count++);
      }
    }
    EvaluateCounter counter=new EvaluateCounter();
    BinaryProcedure<Object,Object> p=new BinaryFunctionBinaryProcedure<Object,Object>(counter);
    assertEquals(0,counter.count);
    p.run(null,null);
    assertEquals(1,counter.count);
    p.run("x","y");
    assertEquals(2,counter.count);
  }
  @Test public void testEquals() throws Exception {
    BinaryProcedure<Object,Object> p=new BinaryFunctionBinaryProcedure<Object,Object>(Constant.of("K"));
    assertEquals(p,p);
    assertObjectsAreEqual(p,new BinaryFunctionBinaryProcedure<Object,Object>(Constant.of("K")));
    assertObjectsAreNotEqual(p,new NoOp());
    assertObjectsAreNotEqual(p,new BinaryFunctionBinaryProcedure<Object,Object>(Constant.of("J")));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BinaryFunctionBinaryProcedure.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BinaryFunctionBinaryProcedure.adapt(Constant.of("K")));
  }
}
