/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestRightBoundPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new RightBoundPredicate<Object>(Constant.TRUE,"xyzzy");
  }
  @Test public void testTest() throws Exception {
    UnaryPredicate<Boolean> f=new RightBoundPredicate<Boolean>(new BinaryFunctionBinaryPredicate<Boolean,Object>(LeftIdentity.<Boolean,Object>function()),"foo");
    assertEquals(true,f.test(Boolean.TRUE));
    assertEquals(false,f.test(Boolean.FALSE));
  }
  @Test public void testEquals() throws Exception {
    UnaryPredicate<Boolean> f=new RightBoundPredicate<Boolean>(Constant.TRUE,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new RightBoundPredicate<Boolean>(Constant.TRUE,"xyzzy"));
    assertObjectsAreNotEqual(f,Constant.TRUE);
    assertObjectsAreNotEqual(f,new RightBoundPredicate<Boolean>(Constant.FALSE,"xyzzy"));
    assertObjectsAreNotEqual(f,new RightBoundPredicate<Boolean>(Constant.TRUE,"foo"));
    assertObjectsAreNotEqual(f,new RightBoundPredicate<Boolean>(Constant.TRUE,null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(RightBoundPredicate.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(RightBoundPredicate.bind(Constant.FALSE,"xyzzy"));
    assertNotNull(RightBoundPredicate.bind(Constant.FALSE,null));
  }
}
