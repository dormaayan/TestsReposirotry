/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestIteratorToGeneratorAdapter extends BaseFunctorTest {
  public Object makeFunctor(){
    List list=new ArrayList();
    list.add("1");
    return new IteratorToGeneratorAdapter(list.iterator());
  }
  private List list=null;
  @Before public void setUp() throws Exception {
    list=new ArrayList();
    list.add("1");
    list.add("two");
    list.add("c");
  }
  @After public void tearDown() throws Exception {
    list=null;
  }
  @Test public void testAdaptNull(){
    assertNull(IteratorToGeneratorAdapter.adapt(null));
  }
  @Test public void testAdaptNonNull(){
    assertNotNull(IteratorToGeneratorAdapter.adapt(list.iterator()));
  }
  @Test public void testGenerate(){
    Iterator iter=list.iterator();
    Generator gen=new IteratorToGeneratorAdapter(iter);
    List list2=new ArrayList();
    list2.addAll(gen.toCollection());
    assertEquals(list,list2);
  }
  @Test public void testConstructNull(){
    try {
      new IteratorToGeneratorAdapter(null);
      fail("Expected NullPointerException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testEquals(){
    Iterator iter=list.iterator();
    Generator gen=new IteratorToGeneratorAdapter(iter);
    assertObjectsAreEqual(gen,gen);
    assertObjectsAreEqual(gen,new IteratorToGeneratorAdapter(iter));
  }
}
