/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestBoundPredicate extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new BoundPredicate(Constant.TRUE,"xyzzy");
  }
  @Test public void testTest() throws Exception {
{
      Predicate p=new BoundPredicate(new UnaryFunctionUnaryPredicate<Boolean>(Identity.<Boolean>instance()),Boolean.TRUE);
      assertEquals(true,p.test());
    }
{
      Predicate p=new BoundPredicate(new UnaryFunctionUnaryPredicate<Boolean>(Identity.<Boolean>instance()),Boolean.FALSE);
      assertEquals(false,p.test());
    }
  }
  @Test public void testEquals() throws Exception {
    Predicate f=new BoundPredicate(Constant.TRUE,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new BoundPredicate(Constant.TRUE,"xyzzy"));
    assertObjectsAreNotEqual(f,Constant.TRUE);
    assertObjectsAreNotEqual(f,new BoundPredicate(Constant.TRUE,"foo"));
    assertObjectsAreNotEqual(f,new BoundPredicate(Constant.FALSE,"xyzzy"));
    assertObjectsAreNotEqual(f,new BoundPredicate(Constant.TRUE,null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(BoundPredicate.bind(null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(BoundPredicate.bind(Constant.TRUE,"xyzzy"));
    assertNotNull(BoundPredicate.bind(Constant.TRUE,null));
  }
}
