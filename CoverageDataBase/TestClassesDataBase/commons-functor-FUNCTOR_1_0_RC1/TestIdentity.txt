/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestIdentity extends BaseFunctorTest {
  protected Object makeFunctor(){
    return Identity.INSTANCE;
  }
  @Test public void testEvaluate() throws Exception {
    UnaryFunction<Object,Object> f=new Identity<Object>();
    assertNull(f.evaluate(null));
    assertEquals("xyzzy",f.evaluate("xyzzy"));
    assertEquals(new Integer(3),f.evaluate(new Integer(3)));
    Object obj=new Long(12345L);
    assertSame(obj,f.evaluate(obj));
  }
  @Test public void testTest() throws Exception {
    UnaryPredicate<Object> p=new Identity<Object>();
    assertTrue(p.test(Boolean.TRUE));
    assertTrue(!p.test(Boolean.FALSE));
    try {
      p.test("true");
      fail("Expected ClassCastException");
    }
 catch (    ClassCastException e) {
    }
    try {
      p.test(null);
      fail("Expected NullPointerException");
    }
 catch (    NullPointerException e) {
    }
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Object> f=new Identity<Object>();
    assertEquals(f,f);
    assertObjectsAreEqual(f,new Identity<Object>());
    assertObjectsAreEqual(f,Identity.instance());
    assertObjectsAreNotEqual(f,Constant.of("abcde"));
  }
  @Test public void testConstant() throws Exception {
    assertEquals(Identity.instance(),Identity.instance());
  }
}
