/** 
 * @version $Revision$ $Date$
 * @author Matt Benson
 */
public class TestFullyBoundFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new FullyBoundFunction<Object>(RightIdentity.FUNCTION,null,"xyzzy");
  }
  @Test public void testEvaluate() throws Exception {
    Function<Object> f=new FullyBoundFunction<Object>(RightIdentity.FUNCTION,null,"foo");
    assertEquals("foo",f.evaluate());
  }
  @Test public void testEquals() throws Exception {
    Function<Object> f=new FullyBoundFunction<Object>(RightIdentity.FUNCTION,null,"xyzzy");
    assertEquals(f,f);
    assertObjectsAreEqual(f,new FullyBoundFunction<Object>(RightIdentity.FUNCTION,null,"xyzzy"));
    assertObjectsAreNotEqual(f,Constant.of("xyzzy"));
    assertObjectsAreNotEqual(f,new FullyBoundFunction<Object>(LeftIdentity.FUNCTION,null,"xyzzy"));
    assertObjectsAreNotEqual(f,new FullyBoundFunction<Object>(RightIdentity.FUNCTION,null,"bar"));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(FullyBoundFunction.bind(null,null,"xyzzy"));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(FullyBoundFunction.bind(RightIdentity.FUNCTION,"xyzzy","foobar"));
    assertNotNull(FullyBoundFunction.bind(RightIdentity.FUNCTION,null,null));
  }
}
