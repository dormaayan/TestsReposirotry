/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public abstract class BaseFunctorTest {
  protected abstract Object makeFunctor() throws Exception ;
  @Test public final void testObjectEquals() throws Exception {
    Object obj=makeFunctor();
    assertEquals("equals must be reflexive",obj,obj);
    assertEquals("hashCode must be reflexive",obj.hashCode(),obj.hashCode());
    assertTrue(!obj.equals(null));
    Object obj2=makeFunctor();
    if (obj.equals(obj2)) {
      assertEquals("equals implies hash equals",obj.hashCode(),obj2.hashCode());
      assertEquals("equals must be symmetric",obj2,obj);
    }
 else {
      assertTrue("equals must be symmetric",!obj2.equals(obj));
    }
  }
  @Test public final void testSerializeDeserializeThenCompare() throws Exception {
    Object obj=makeFunctor();
    if (obj instanceof Serializable) {
      ByteArrayOutputStream buffer=new ByteArrayOutputStream();
      ObjectOutputStream out=new ObjectOutputStream(buffer);
      out.writeObject(obj);
      out.close();
      ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
      Object dest=in.readObject();
      in.close();
      assertEquals("obj != deserialize(serialize(obj))",obj,dest);
      assertEquals("obj.hash != deserialize(serialize(obj.hash))",obj.hashCode(),dest.hashCode());
    }
  }
  @Test public void testToStringIsOverridden() throws Exception {
    Object obj=makeFunctor();
    assertNotNull("toString should never return null",obj.toString());
    assertTrue(obj.getClass().getName() + " should override toString(), found \"" + obj.toString()+ "\"",!obj.toString().equals(objectToString(obj)));
  }
  public static void assertObjectsAreEqual(  Object a,  Object b){
    assertEquals(a,b);
    assertEquals(b,a);
    assertEquals(a.hashCode(),b.hashCode());
    assertEquals(a.toString(),b.toString());
  }
  public static void assertObjectsAreNotEqual(  Object a,  Object b){
    assertTrue(!a.equals(b));
    assertTrue(!b.equals(a));
    assertTrue(a.hashCode() != b.hashCode());
    assertTrue(!a.toString().equals(b.toString()));
  }
  private String objectToString(  Object obj){
    return obj.getClass().getName() + "@" + Integer.toHexString(obj.hashCode());
  }
}
