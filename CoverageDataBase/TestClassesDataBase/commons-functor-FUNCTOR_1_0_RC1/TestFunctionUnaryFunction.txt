/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
public class TestFunctionUnaryFunction extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new FunctionUnaryFunction<Object,Object>(Constant.of("xyzzy"));
  }
  @Test public void testEvaluate() throws Exception {
    UnaryFunction<Object,Object> f=new FunctionUnaryFunction<Object,Object>(Constant.of("xyzzy"));
    assertEquals("xyzzy",f.evaluate(null));
    assertEquals("xyzzy",f.evaluate("abc"));
  }
  @Test public void testEquals() throws Exception {
    UnaryFunction<Object,Object> f=new FunctionUnaryFunction<Object,Object>(Constant.of("xyzzy"));
    assertEquals(f,f);
    assertObjectsAreEqual(f,new FunctionUnaryFunction<Object,Object>(Constant.of("xyzzy")));
    assertObjectsAreNotEqual(f,Constant.of("x"));
    assertObjectsAreNotEqual(f,new FunctionUnaryFunction<Object,Object>(Constant.of(null)));
    assertObjectsAreNotEqual(f,Constant.of(null));
  }
  @Test public void testAdaptNull() throws Exception {
    assertNull(FunctionUnaryFunction.adapt(null));
  }
  @Test public void testAdapt() throws Exception {
    assertNotNull(FunctionUnaryFunction.adapt(Constant.of("xyzzy")));
  }
}
