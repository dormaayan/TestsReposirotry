/** 
 * @version $Revision$ $Date$
 * @author Rodney Waldhoff
 */
@SuppressWarnings("unchecked") public class TestUnarySequence extends BaseFunctorTest {
  protected Object makeFunctor(){
    return new UnarySequence(new NoOp(),new NoOp());
  }
  @Test public void testRunZero() throws Exception {
    UnarySequence seq=new UnarySequence();
    seq.run(null);
    seq.run("xyzzy");
  }
  @Test public void testRunOne() throws Exception {
    RunCounter counter=new RunCounter();
    UnarySequence seq=new UnarySequence(counter);
    assertEquals(0,counter.count);
    seq.run(null);
    assertEquals(1,counter.count);
    seq.run("xyzzy");
    assertEquals(2,counter.count);
  }
  @Test public void testRunTwo() throws Exception {
    RunCounter[] counter={new RunCounter(),new RunCounter()};
    UnarySequence seq=new UnarySequence(counter[0],counter[1]);
    assertEquals(0,counter[0].count);
    assertEquals(0,counter[1].count);
    seq.run(null);
    assertEquals(1,counter[0].count);
    assertEquals(1,counter[1].count);
    seq.run("xyzzy");
    assertEquals(2,counter[0].count);
    assertEquals(2,counter[1].count);
  }
  @Test public void testThen() throws Exception {
    List list=new ArrayList();
    UnarySequence seq=new UnarySequence();
    seq.run(null);
    for (int i=0; i < 10; i++) {
      RunCounter counter=new RunCounter();
      seq.then(counter);
      list.add(counter);
      seq.run("xyzzy");
      for (int j=0; j < list.size(); j++) {
        assertEquals(list.size() - j,(((RunCounter)(list.get(j))).count));
      }
    }
  }
  @Test public void testEquals() throws Exception {
    UnarySequence p=new UnarySequence();
    assertEquals(p,p);
    UnarySequence q=new UnarySequence();
    assertObjectsAreEqual(p,q);
    for (int i=0; i < 3; i++) {
      p.then(new NoOp());
      assertObjectsAreNotEqual(p,q);
      q.then(new NoOp());
      assertObjectsAreEqual(p,q);
      p.then(new UnarySequence(new NoOp(),new NoOp()));
      assertObjectsAreNotEqual(p,q);
      q.then(new UnarySequence(new NoOp(),new NoOp()));
      assertObjectsAreEqual(p,q);
    }
    assertObjectsAreNotEqual(p,new NoOp());
  }
static class RunCounter implements UnaryProcedure {
    public void run(    Object that){
      count++;
    }
    public int count=0;
  }
}
