/** 
 * @author Damian Szczepanik (damianszczepanik@github)
 */
public class ReportBuilderTest extends ReportGenerator {
  private File reportDirectory;
  private File trendsFileTmp;
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Before public void setUp() throws IOException {
    reportDirectory=new File("target",String.valueOf(System.currentTimeMillis()));
    reportDirectory.mkdirs();
    new File(reportDirectory,ReportBuilder.BASE_DIRECTORY).mkdir();
    trendsFileTmp=new File(reportDirectory,"trends-tmp.json");
    FileUtils.copyFile(TRENDS_FILE,trendsFileTmp);
  }
  @After public void cleanUp() throws IOException {
    FileUtils.deleteDirectory(reportDirectory);
    if (configuration != null) {
      FileUtils.deleteDirectory(new File(configuration.getReportDirectory(),ReportBuilder.BASE_DIRECTORY));
    }
  }
  @Test public void ReportBuilder_storesFilesAndConfiguration(){
    final List<String> jsonFiles=new ArrayList<>();
    final Configuration configuration=new Configuration(null,null);
    ReportBuilder builder=new ReportBuilder(jsonFiles,configuration);
    List<String> assignedJsonReports=Deencapsulation.getField(builder,"jsonFiles");
    Configuration assignedConfiguration=Deencapsulation.getField(builder,"configuration");
    assertThat(assignedJsonReports).isSameAs(jsonFiles);
    assertThat(assignedConfiguration).isSameAs(configuration);
  }
  @Test public void generateReports_GeneratesPages(){
    List<String> jsonReports=Arrays.asList(ReportGenerator.reportFromResource(ReportGenerator.SAMPLE_JSON));
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Reportable result=builder.generateReports();
    assertThat(countHtmlFiles()).hasSize(9);
    assertThat(result).isNotNull();
  }
  @Test public void generateReports_WithTrendsFile_GeneratesPages(){
    List<String> jsonReports=Arrays.asList(ReportGenerator.reportFromResource(ReportGenerator.SAMPLE_JSON));
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    configuration.setTrendsStatsFile(trendsFileTmp);
    Reportable result=builder.generateReports();
    assertThat(countHtmlFiles()).hasSize(10);
    assertThat(result).isNotNull();
  }
  @Test public void generateReports_OnException_AppendsBuildToTrends(){
    List<String> jsonReports=Arrays.asList(ReportGenerator.reportFromResource(ReportGenerator.SAMPLE_JSON));
    Configuration configuration=new Configuration(reportDirectory,"myProject"){
      @Override public File getEmbeddingDirectory(){
        throw new IllegalStateException();
      }
    }
;
    ReportBuilder reportBuilder=new ReportBuilder(jsonReports,configuration);
    configuration.setTrendsStatsFile(trendsFileTmp);
    reportBuilder.generateReports();
    assertPageExists(reportDirectory,ReportBuilder.HOME_PAGE);
    assertThat(countHtmlFiles()).hasSize(1);
    Trends trends=Deencapsulation.invoke(reportBuilder,"loadTrends",trendsFileTmp);
    assertThat(trends.getBuildNumbers()).hasSize(4);
  }
  @Test public void generateReports_OnException_StoresEmptyTrendsFile(){
    List<String> jsonReports=Arrays.asList(ReportGenerator.reportFromResource(ReportGenerator.SAMPLE_JSON));
    Configuration configuration=new Configuration(reportDirectory,"myProject"){
      @Override public File getEmbeddingDirectory(){
        throw new IllegalStateException();
      }
    }
;
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    configuration.setTrendsStatsFile(trendsFileTmp);
    Reportable result=builder.generateReports();
    assertPageExists(reportDirectory,ReportBuilder.HOME_PAGE);
    assertThat(countHtmlFiles()).hasSize(1);
    assertThat(result).isNull();
  }
  @Test public void copyStaticResources_CopiesRequiredFiles(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(Collections.<String>emptyList(),configuration);
    Deencapsulation.invoke(builder,"copyStaticResources");
    Collection<File> files=FileUtils.listFiles(reportDirectory,null,true);
    assertThat(files).hasSize(21);
  }
  @Test public void createEmbeddingsDirectory_CreatesDirectory(){
    File subDirectory=new File(reportDirectory,"sub");
    Configuration configuration=new Configuration(subDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(Collections.<String>emptyList(),configuration);
    Deencapsulation.invoke(builder,"createEmbeddingsDirectory");
    assertThat(subDirectory).exists();
  }
  @Test public void copyResources_OnInvalidPath_ThrowsException(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(Collections.<String>emptyList(),configuration);
    File dir=new File(reportDirectory,ReportBuilder.BASE_DIRECTORY);
    try {
      Deencapsulation.invoke(builder,"copyResources",dir.getAbsolutePath(),new String[]{"someFile"});
      fail("Copying should fail!");
    }
 catch (    ValidationException|NullPointerException e) {
    }
  }
  @Test public void collectPages_CollectsPages(){
    setUpWithJson(SAMPLE_JSON);
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Deencapsulation.setField(builder,"reportResult",new ReportResult(features,configuration));
    Deencapsulation.invoke(builder,"generatePages",new Trends());
    assertThat(countHtmlFiles(configuration).length).isEqualTo(9);
  }
  @Test public void collectPages_OnExistingTrendsFile_CollectsPages(){
    setUpWithJson(SAMPLE_JSON);
    configuration.setTrendsStatsFile(trendsFileTmp);
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Deencapsulation.setField(builder,"reportResult",new ReportResult(features,configuration));
    Deencapsulation.invoke(builder,"generatePages",new Trends());
    assertThat(countHtmlFiles(configuration).length).isEqualTo(10);
  }
  @Test public void updateAndSaveTrends_ReturnsUpdatedTrends(){
    setUpWithJson(SAMPLE_JSON);
    final String buildNumber="my build";
    configuration.setBuildNumber(buildNumber);
    configuration.setTrendsStatsFile(trendsFileTmp);
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Deencapsulation.setField(builder,"reportResult",reportResult);
    Trends trends=Deencapsulation.invoke(builder,"updateAndSaveTrends",reportResult.getFeatureReport());
    assertThat(trends.getBuildNumbers()).hasSize(4);
    assertThat(trends.getBuildNumbers()).endsWith(buildNumber);
    assertThat(trends.getFailedScenarios()).hasSize(4);
    assertThat(trends.getFailedScenarios()).endsWith(reportResult.getFeatureReport().getFailedScenarios());
  }
  @Test public void updateAndSaveTrends_OnTrendsLimit_ReturnsUpdatedTrends(){
    final int trendsLimit=2;
    setUpWithJson(SAMPLE_JSON);
    final String buildNumber="my build";
    configuration.setBuildNumber(buildNumber);
    configuration.setTrends(trendsFileTmp,trendsLimit);
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Deencapsulation.setField(builder,"reportResult",reportResult);
    Trends trends=Deencapsulation.invoke(builder,"updateAndSaveTrends",reportResult.getFeatureReport());
    assertThat(trends.getBuildNumbers()).hasSize(trendsLimit);
    assertThat(trends.getBuildNumbers()).endsWith(buildNumber);
    assertThat(trends.getFailedScenarios()).hasSize(trendsLimit);
    assertThat(trends.getFailedScenarios()).endsWith(reportResult.getFeatureReport().getFailedScenarios());
  }
  @Test public void loadTrends_ReturnsTrends(){
    Trends trends=Deencapsulation.invoke(ReportBuilder.class,"loadTrends",TRENDS_FILE);
    assertThat(trends.getBuildNumbers()).containsExactly("01_first","other build","05last");
    assertThat(trends.getPassedFeatures()).containsExactly(9,18,25);
    assertThat(trends.getFailedFeatures()).containsExactly(1,2,5);
    assertThat(trends.getTotalFeatures()).containsExactly(10,20,30);
    assertThat(trends.getPassedScenarios()).containsExactly(10,20,20);
    assertThat(trends.getFailedScenarios()).containsExactly(10,20,20);
    assertThat(trends.getTotalScenarios()).containsExactly(10,2,5);
    assertThat(trends.getPassedFeatures()).containsExactly(9,18,25);
    assertThat(trends.getFailedSteps()).containsExactly(10,30,50);
    assertThat(trends.getSkippedSteps()).containsExactly(100,300,500);
    assertThat(trends.getPendingSteps()).containsExactly(1000,3000,5000);
    assertThat(trends.getUndefinedSteps()).containsExactly(10000,30000,50000);
    assertThat(trends.getTotalSteps()).containsExactly(100000,300000,500000);
  }
  @Test public void loadTrends_OnMissingTrendsFile_ThrowsException(){
    File noExistingTrendsFile=new File("anyNoExisting?File");
    thrown.expect(ValidationException.class);
    Deencapsulation.invoke(ReportBuilder.class,"loadTrends",noExistingTrendsFile);
  }
  @Test public void loadOrCreateTrends_ReturnsLoadedTrends(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    configuration.setTrendsStatsFile(trendsFileTmp);
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Trends trends=Deencapsulation.invoke(builder,"loadOrCreateTrends");
    assertThat(trends.getBuildNumbers()).containsExactly("01_first","other build","05last");
  }
  @Test public void loadOrCreateTrends_OnMissingTrendsFile_ReturnsEmptyTrends(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    configuration.setTrendsStatsFile(new File("missing?file"));
    Trends trends=Deencapsulation.invoke(builder,"loadOrCreateTrends");
    assertThat(trends.getBuildNumbers()).hasSize(0);
  }
  @Test public void loadOrCreateTrends_OnInvalidTrendsFile_ReturnsEmptyTrends(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Trends trends=Deencapsulation.invoke(builder,"loadOrCreateTrends");
    assertThat(trends.getBuildNumbers()).hasSize(0);
  }
  @Test public void loadTrends_OnInvalidTrendsFormatFile_ThrowsExceptions(){
    File notTrendJsonFile=new File(reportFromResource(SAMPLE_JSON));
    thrown.expect(ValidationException.class);
    thrown.expectMessage(endsWith("could not be parsed as file with trends!"));
    Deencapsulation.invoke(ReportBuilder.class,"loadTrends",notTrendJsonFile);
  }
  @Test public void loadTrends_OnInvalidTrendsFile_ThrowsExceptions(){
    File directoryFile=new File(".");
    thrown.expect(ValidationException.class);
    thrown.expectMessage(containsString("java.io.FileNotFoundException"));
    Deencapsulation.invoke(ReportBuilder.class,"loadTrends",directoryFile);
  }
  @Test public void appendToTrends_AppendsDataToTrends(){
    final String buildNumber="1";
    final int failedFeature=1;
    final int totalFeature=2;
    final int failedScenario=3;
    final int totalScenario=4;
    final int failedStep=5;
    final int totalStep=6;
    configuration=new Configuration(null,null);
    configuration.setBuildNumber(buildNumber);
    final Reportable reportable=new OverviewReport(){
      @Override public int getFailedFeatures(){
        return failedFeature;
      }
      @Override public int getFeatures(){
        return totalFeature;
      }
      @Override public int getFailedScenarios(){
        return failedScenario;
      }
      @Override public int getScenarios(){
        return totalScenario;
      }
      @Override public int getFailedSteps(){
        return failedStep;
      }
      @Override public int getSteps(){
        return totalStep;
      }
    }
;
    ReportResult reportResult=new ReportResult(Collections.<Feature>emptyList(),configuration){
      @Override public Reportable getFeatureReport(){
        return reportable;
      }
    }
;
    ReportBuilder reportBuilder=new ReportBuilder(null,configuration);
    Deencapsulation.setField(reportBuilder,"reportResult",reportResult);
    Trends trends=new Trends();
    Deencapsulation.invoke(reportBuilder,"appendToTrends",trends,reportable);
    assertThat(trends.getBuildNumbers()).containsExactly(buildNumber);
    assertThat(trends.getFailedFeatures()).containsExactly(failedFeature);
    assertThat(trends.getTotalFeatures()).containsExactly(totalFeature);
    assertThat(trends.getFailedScenarios()).containsExactly(failedScenario);
    assertThat(trends.getTotalScenarios()).containsExactly(totalScenario);
    assertThat(trends.getFailedSteps()).containsExactly(failedStep);
    assertThat(trends.getTotalSteps()).containsExactly(totalStep);
  }
  @Test public void saveTrends_OnInvalidFile_ThrowsException(){
    ReportBuilder builder=new ReportBuilder(jsonReports,configuration);
    Trends trends=new Trends();
    File directoryFile=new File(".");
    thrown.expect(ValidationException.class);
    thrown.expectMessage(startsWith("Could not save updated trends "));
    Deencapsulation.invoke(builder,"saveTrends",trends,directoryFile);
  }
  @Test public void generateErrorPage_GeneratesErrorPage(){
    Configuration configuration=new Configuration(reportDirectory,"myProject");
    ReportBuilder builder=new ReportBuilder(Collections.<String>emptyList(),configuration);
    Deencapsulation.invoke(builder,"generateErrorPage",new Exception());
    assertPageExists(reportDirectory,ReportBuilder.HOME_PAGE);
  }
  private File[] countHtmlFiles(  Configuration configuration){
    FileFilter fileFilter=new WildcardFileFilter("*.html");
    File dir=new File(configuration.getReportDirectory(),ReportBuilder.BASE_DIRECTORY);
    return dir.listFiles(fileFilter);
  }
  private File[] countHtmlFiles(){
    FileFilter fileFilter=new WildcardFileFilter("*.html");
    File dir=new File(reportDirectory,ReportBuilder.BASE_DIRECTORY);
    return dir.listFiles(fileFilter);
  }
  private static void assertPageExists(  File reportDirectory,  String fileName){
    File errorPage=new File(reportDirectory,ReportBuilder.BASE_DIRECTORY + File.separatorChar + fileName);
    assertThat(errorPage).exists();
  }
}
