/** 
 * @author Damian Szczepanik (damianszczepanik@github)
 */
public class SortingFactoryTest extends PageTest {
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Before public void setUp(){
    setUpWithJson(SAMPLE_JSON);
  }
  @Test public void sortFeatures_OnNATURAL_ReturnsSameList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.NATURAL);
    List<Feature> featureList=sortingFactory.sortFeatures(features);
    assertThat(featureList).containsExactly(features.get(0),features.get(1));
  }
  @Test public void sortFeatures_OnALPHABETICAL_ReturnsSortedList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.ALPHABETICAL);
    List<Feature> featureList=sortingFactory.sortFeatures(features);
    assertThat(featureList).containsExactly(features.get(0),features.get(1));
  }
  @Test public void sortFeatures_OnINVALID_ThrowsException(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.INVALID);
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(buildErrorMessage());
    sortingFactory.sortFeatures(features);
  }
  @Test public void sortTags_OnNATURAL_ReturnsSameList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.NATURAL);
    List<TagObject> tagObjects=sortingFactory.sortTags(tags);
    assertThat(tagObjects).containsExactly(tags.get(0),tags.get(1),tags.get(2));
  }
  @Test public void sortTags_OnALPHABETICAL_ReturnsSameList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.ALPHABETICAL);
    List<TagObject> tagObjects=sortingFactory.sortTags(tags);
    assertThat(tagObjects).containsExactly(tags.get(0),tags.get(1),tags.get(2));
  }
  @Test public void sortTags_OnINVALID_ThrowsException(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.INVALID);
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(buildErrorMessage());
    sortingFactory.sortTags(tags);
  }
  @Test public void sortSteps_OnNATURAL_ReturnsSameList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.NATURAL);
    List<StepObject> stepObjects=sortingFactory.sortSteps(steps);
    assertThat(stepObjects).hasSize(16);
    assertThat(stepObjects).first().isEqualTo(steps.get(0));
    assertThat(stepObjects).last().isEqualTo(steps.get(15));
  }
  @Test public void sortSteps_OnALPHABETICAL_ReturnsSameList(){
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.ALPHABETICAL);
    List<StepObject> stepObjects=sortingFactory.sortSteps(steps);
    assertThat(stepObjects).hasSize(16);
    assertThat(stepObjects).first().isEqualTo(steps.get(0));
    assertThat(stepObjects).last().isEqualTo(steps.get(15));
  }
  @Test public void sortSteps_OnINVALID_ThrowsException(){
    SortingMethod sortingMethod=SortingMethod.INVALID;
    SortingFactory sortingFactory=new SortingFactory(sortingMethod);
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(buildErrorMessage());
    sortingFactory.sortSteps(steps);
  }
  @Test public void createUnknownMethodException_CreatesException(){
    SortingMethod invalidSorthingMethod=SortingMethod.ALPHABETICAL;
    SortingFactory sortingFactory=new SortingFactory(SortingMethod.ALPHABETICAL);
    Exception e=Deencapsulation.invoke(sortingFactory,"createUnknownMethodException",invalidSorthingMethod);
    assertThat(e).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage("Unsupported sorting method: " + invalidSorthingMethod);
  }
  private String buildErrorMessage(){
    return "Unsupported sorting method: " + SortingMethod.INVALID;
  }
}
