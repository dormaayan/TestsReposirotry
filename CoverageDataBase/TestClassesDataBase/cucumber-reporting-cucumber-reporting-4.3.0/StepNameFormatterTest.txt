public class StepNameFormatterTest extends PageTest {
  @Before public void setUp(){
    setUpWithJson(SAMPLE_JSON);
  }
  @Test public void format_OnNoArgument_ReturnsUnchangedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[1];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo(step.getName());
  }
  @Test public void format_OnLastPosition_ReturnsFormattedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[0];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the account balance is <arg>100</arg>");
  }
  @Test public void format_ReturnsFormattedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[4];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the ATM should dispense <arg>10</arg> monetary units");
  }
  @Test public void format_StartPosition_ReturnsFormattedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[2];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("<arg>100</arg> is contained in the machine");
  }
  @Test public void format_OnMultipleArguments_ReturnsFormattedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[3];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the Account Holder requests <arg>10</arg>, entering PIN <arg>1234</arg>");
  }
  @Test public void format_OnEmptyValue_ReturnsUnchangedValue(){
    Step step=features.get(0).getElements()[1].getSteps()[3];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the Account Holder requests <arg>10</arg>, entering PIN <arg>1234</arg>");
  }
  @Test public void format_optionalArgumentNotMatched(){
    Step step=features.get(1).getElements()[0].getSteps()[0];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the account balance is <arg>100</arg>");
  }
  @Test public void format_ReturnsEscapedValues(){
    Step step=features.get(1).getElements()[0].getSteps()[1];
    String formatted=StepNameFormatter.format(step.getName(),step.getMatch().getArguments(),"<arg>","</arg>");
    assertThat(formatted).isEqualTo("the card is valid");
  }
  @Test public void format_shouldEscape(){
    String text="I press <ON> & <C> simulatenously";
    String formatted=StepNameFormatter.format(text,null,"<arg>","</arg>");
    assertThat(formatted).isEqualTo("I press &lt;ON&gt; &amp; &lt;C&gt; simulatenously");
  }
}
