/** 
 * @author Damian Szczepanik (damianszczepanik@github)
 */
public class OverviewReportTest {
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Test public void incFeaturesFor_AddsFeatures(){
    OverviewReport refReport=buildSampleReport();
    OverviewReport report=buildSampleReport();
    report.incFeaturesFor(Status.FAILED);
    assertThat(report.getFeatures()).isEqualTo(refReport.getFeatures() + 1);
    assertThat(report.getPassedFeatures()).isEqualTo(refReport.getPassedFeatures());
    assertThat(report.getFailedFeatures()).isEqualTo(refReport.getFailedFeatures() + 1);
  }
  @Test public void incScenarioFor_AddsScenario(){
    OverviewReport refReport=buildSampleReport();
    OverviewReport report=buildSampleReport();
    report.incScenarioFor(Status.FAILED);
    assertThat(report.getScenarios()).isEqualTo(refReport.getScenarios() + 1);
    assertThat(report.getPassedScenarios()).isEqualTo(refReport.getPassedScenarios());
    assertThat(report.getFailedScenarios()).isEqualTo(refReport.getFailedScenarios() + 1);
  }
  @Test public void getFeatures_ReturnsFeaturesCount(){
    OverviewReport report=buildSampleReport();
    int featuresSize=report.getFeatures();
    assertThat(featuresSize).isEqualTo(1);
  }
  @Test public void getPassedFeatures_ReturnsPassedFeaturesCount(){
    OverviewReport report=buildSampleReport();
    int featuresSize=report.getPassedFeatures();
    assertThat(featuresSize).isEqualTo(0);
  }
  @Test public void getFailedFeatures_ReturnsFAiledFeaturesCount(){
    OverviewReport report=buildSampleReport();
    int featuresSize=report.getFailedFeatures();
    assertThat(featuresSize).isEqualTo(1);
  }
  @Test public void getScenarios_ReturnsNumberOfScenarios(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getScenarios()).isEqualTo(2);
  }
  @Test public void getXXXScenarios_ReturnsNumberOfScenariosForStatus(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getPassedScenarios()).isEqualTo(1);
    assertThat(report.getFailedScenarios()).isZero();
  }
  @Test public void incStepsFor_AddsScenario(){
    OverviewReport refReport=buildSampleReport();
    OverviewReport report=buildSampleReport();
    report.incStepsFor(Status.FAILED);
    assertThat(report.getSteps()).isEqualTo(refReport.getSteps() + 1);
    assertThat(report.getPassedSteps()).isEqualTo(refReport.getPassedSteps());
    assertThat(report.getFailedSteps()).isEqualTo(refReport.getFailedSteps() + 1);
  }
  @Test public void getSteps_ReturnsNumberOfSteps(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getSteps()).isEqualTo(2);
  }
  @Test public void getXXXSteps_ReturnsNumberOfStepsForStatus(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getPassedSteps()).isZero();
    assertThat(report.getFailedSteps()).isEqualTo(1);
    assertThat(report.getSkippedSteps()).isZero();
    assertThat(report.getPendingSteps()).isEqualTo(1);
    assertThat(report.getUndefinedSteps()).isZero();
  }
  @Test public void incDuration_AddsDuration(){
    long offset=5555555;
    OverviewReport RefReport=buildSampleReport();
    OverviewReport report=buildSampleReport();
    report.incDurationBy(offset);
    assertThat(report.getDuration()).isEqualTo(RefReport.getDuration() + offset);
  }
  @Test public void getDuration_ReturnsDuration(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getDuration()).isEqualTo(1234567L);
  }
  @Test public void getFormattedDuration_ReturnsFormattedDuration(){
    OverviewReport report=buildSampleReport();
    assertThat(report.getFormattedDuration()).isEqualTo("0.001");
  }
  @Test public void getName_ThrowsException(){
    OverviewReport report=buildSampleReport();
    thrown.expect(NotImplementedException.class);
    report.getName();
  }
  @Test public void getStatus_ThrowsException(){
    OverviewReport report=buildSampleReport();
    thrown.expect(NotImplementedException.class);
    report.getStatus();
  }
  private static OverviewReport buildSampleReport(){
    OverviewReport report=new OverviewReport();
    report.incDurationBy(1234567L);
    report.incFeaturesFor(Status.FAILED);
    report.incScenarioFor(Status.PASSED);
    report.incScenarioFor(Status.UNDEFINED);
    report.incStepsFor(Status.FAILED);
    report.incStepsFor(Status.PENDING);
    return report;
  }
}
