/** 
 * @author Damian Szczepanik (damianszczepanik@github)
 */
public class FeaturesAlphabeticalComparatorTest extends PageTest {
  private final Comparator<Feature> comparator=new FeaturesAlphabeticalComparator();
  @Before public void setUp(){
    setUpWithJson(SAMPLE_JSON);
  }
  @Test public void compareTo_OnSameFeature_ReturnsZero(){
    Feature feature1=features.get(0);
    Feature feature2=features.get(0);
    int result=comparator.compare(feature1,feature2);
    assertThat(result).isZero();
  }
  @Test public void compareTo_OnSameName_ReturnsNotZero(){
    Feature feature1=features.get(0);
    Feature feature2=buildFeature(feature1.getName(),"myId","myFile.json");
    int result=comparator.compare(feature1,feature2);
    assertThat(result).isEqualTo(feature1.getId().compareTo(feature2.getId()));
  }
  @Test public void compareTo_OnSameNameAndId_ReturnsNotZero(){
    Feature feature1=features.get(0);
    Feature feature2=buildFeature(feature1.getName(),feature1.getId(),"myFile.json");
    int result=comparator.compare(feature1,feature2);
    assertThat(result).isEqualTo(feature1.getReportFileName().compareTo(feature2.getReportFileName()));
  }
  @Test public void compareTo_OnDifferentName_ReturnsNotZero(){
    Feature feature1=features.get(0);
    Feature feature2=buildFeature(feature1.getName() + "_",feature1.getId(),feature1.getReportFileName());
    int result=comparator.compare(feature1,feature2);
    assertThat(result).isEqualTo(feature1.getName().compareTo(feature2.getName()));
  }
  private static Feature buildFeature(  final String name,  final String id,  final String reportFileName){
    Feature feature=new Feature();
    Deencapsulation.setField(feature,"name",name);
    Deencapsulation.setField(feature,"id",id);
    Deencapsulation.setField(feature,"reportFileName",reportFileName);
    return feature;
  }
}
