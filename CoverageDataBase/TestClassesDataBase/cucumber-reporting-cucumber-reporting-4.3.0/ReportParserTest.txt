/** 
 * @author Damian Szczepanik (damianszczepanik@github)
 */
public class ReportParserTest extends ReportGenerator {
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Test public void parseJsonResults_ReturnsFeatureFiles(){
    initWithJson(SAMPLE_JSON,SIMPLE_JSON);
    ReportParser reportParser=new ReportParser(configuration);
    List<Feature> features=reportParser.parseJsonFiles(jsonReports);
    assertThat(features).hasSize(3);
  }
  @Test public void parseJsonResults_OnNoFeatures_ThrowsException(){
    initWithJson(EMPTY_JSON);
    ReportParser reportParser=new ReportParser(configuration);
    thrown.expect(ValidationException.class);
    thrown.expectMessage("Passed files have no features!");
    reportParser.parseJsonFiles(jsonReports);
  }
  @Test public void parseJsonResults_OnNoReport_ThrowsException(){
    initWithJson();
    ReportParser reportParser=new ReportParser(configuration);
    thrown.expect(ValidationException.class);
    thrown.expectMessage("None report file was added!");
    reportParser.parseJsonFiles(jsonReports);
  }
  @Test public void parseJsonResults_OnInvalidReport_ThrowsException(){
    initWithJson(INVALID_REPORT_JSON);
    ReportParser reportParser=new ReportParser(configuration);
    thrown.expect(ValidationException.class);
    thrown.expectMessage(endsWith("is not proper Cucumber report!"));
    reportParser.parseJsonFiles(jsonReports);
  }
  @Test public void parseJsonResults_OnNoExistingFile_ThrowsException(){
    final String invalidFile="?no-existing%file.json";
    initWithJson(EMPTY_JSON);
    jsonReports.add(invalidFile);
    ReportParser reportParser=new ReportParser(configuration);
    thrown.expect(ValidationException.class);
    thrown.expectMessage(containsString(invalidFile));
    reportParser.parseJsonFiles(jsonReports);
  }
  @Test public void parseJsonResults_OnEmptyFile_SkipsJSONReport(){
    initWithJson(EMPTY_FILE_JSON,SAMPLE_JSON);
    configuration.addReducingMethod(ReducingMethod.SKIP_EMPTY_JSON_FILES);
    ReportParser reportParser=new ReportParser(configuration);
    List<Feature> features=reportParser.parseJsonFiles(jsonReports);
    assertThat(features).hasSize(2);
  }
  @Test public void parsePropertyFiles_EmptyProperties(){
    initWithProperties(EMPTY_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    assertThat(configuration.getClassifications()).isEmpty();
  }
  @Test public void parsePropertyFiles_Populates_One_File(){
    initWithProperties(SAMPLE_ONE_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    assertThat(configuration.getClassifications()).hasSize(5);
  }
  @Test public void parsePropertyFiles_Populates_Two_Files(){
    initWithProperties(SAMPLE_ONE_PROPERTIES,SAMPLE_TWO_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    List<Map.Entry<String,String>> returnedClassifications=configuration.getClassifications();
    assertThat(returnedClassifications).hasSize(8);
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("AutUiVersion","1.25.3"),Index.atIndex(1));
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("firefoxVersion","56.0"),Index.atIndex(4));
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("Proxy","http=//172.22.240.68:18717"),Index.atIndex(6));
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("NpmVersion","5.3.0"),Index.atIndex(7));
  }
  @Test public void parsePropertyFiles_Populates_Two_Files_One_Empty(){
    initWithProperties(SAMPLE_ONE_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    classificationFiles.add("");
    reportParser.parseClassificationsFiles(classificationFiles);
    List<Map.Entry<String,String>> returnedClassifications=configuration.getClassifications();
    assertThat(returnedClassifications).hasSize(5);
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("AutUiVersion","1.25.3"),Index.atIndex(1));
    assertThat(returnedClassifications).contains(new AbstractMap.SimpleEntry<>("firefoxVersion","56.0"),Index.atIndex(4));
  }
  @Test public void parsePropertyFiles_Populates_Check_Content_Integrity_And_Order(){
    initWithProperties(SAMPLE_TWO_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    List<Map.Entry<String,String>> classifications=configuration.getClassifications();
    assertThat(classifications).hasSize(3);
    assertThat(classifications).containsExactly(entry("NodeJsVersion","8.5.0"),entry("Proxy","http=//172.22.240.68:18717"),entry("NpmVersion","5.3.0"));
  }
  @Test public void parsePropertyFiles_Populates_Check_Duplicates(){
    initWithProperties(DUPLICATE_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    List<Map.Entry<String,String>> classifications=configuration.getClassifications();
    assertThat(classifications).hasSize(1);
    assertThat(classifications).containsExactly(entry("BaseUrl_QA","[Internal=https://internal.test.com, External=https://external.test.com]"));
  }
  @Test public void parsePropertyFiles_Populates_Check_Special_Characters(){
    initWithProperties(SPECIAL_CHARACTERS_PROPERTIES);
    ReportParser reportParser=new ReportParser(configuration);
    reportParser.parseClassificationsFiles(classificationFiles);
    List<Map.Entry<String,String>> classifications=configuration.getClassifications();
    assertThat(classifications).hasSize(6);
    assertThat(classifications).containsExactly(entry("website","https://en.wikipedia.org/"),entry("language","English"),entry("message","Welcome to Wikipedia!"),entry("key with spaces","This is the value that could be looked up with the key \"key with spaces\"."),entry("tab","\t"),entry("path","c:\\wiki\\templates"));
  }
  @Test public void parsePropertyFiles_OnInvalidFilePath_ThrowsException(){
    final String invalidFile="?on-invalid-file-path.properties";
    initWithProperties(EMPTY_PROPERTIES);
    classificationFiles.add(invalidFile);
    ReportParser reportParser=new ReportParser(configuration);
    thrown.expect(ValidationException.class);
    thrown.expectMessage(containsString(invalidFile));
    thrown.expectMessage(endsWith("doesn't exist or the properties file is invalid!"));
    reportParser.parseClassificationsFiles(classificationFiles);
  }
}
