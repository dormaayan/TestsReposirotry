/** 
 * @author M.P. Korstanje (mpkorstanje@github)
 */
public class EscapeHtmlReferenceTest {
  private static final String SOME_REFERENCE="someReference";
  private final ReferenceInsertionEventHandler insertionEventHandler=new EscapeHtmlReference();
  @Test public void referenceInsert_returnNormalText(){
    String normalText="a plain statement";
    Object result=insertionEventHandler.referenceInsert(SOME_REFERENCE,normalText);
    assertThat(result).isEqualTo(normalText);
  }
  @Test public void referenceInsert_shouldEscapeHtmlForAnyLabel(){
    String html="<b>a bold statement</b>";
    Object result=insertionEventHandler.referenceInsert(SOME_REFERENCE,html);
    assertThat(result).isEqualTo(escapeHtml(html));
  }
  @Test public void referenceInsert_shouldNotEscapeWithSpecialTag(){
    String html="<b>a bold statement</b>";
    Object result=insertionEventHandler.referenceInsert("$_noescape_" + SOME_REFERENCE,html);
    assertThat(result).isEqualTo(html);
  }
  @Test public void referenceInsert_shouldReturnNullForNull(){
    String html=null;
    Object result=insertionEventHandler.referenceInsert(SOME_REFERENCE,html);
    assertThat(result).isNull();
  }
  @Test public void referenceInsert_shouldSanitize(){
    String html="<a href=\"www.example.com\" rel=\"nofollow noopener noreferrer\">a hyper web reference</a>";
    Object result=insertionEventHandler.referenceInsert("$_sanitize_" + SOME_REFERENCE,html);
    assertThat(result).isEqualTo(html);
  }
}
