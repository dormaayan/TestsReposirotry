public class SimpleXmlConverterFactoryTest {
interface Service {
    @GET("/") Call<MyObject> get();
    @POST("/") Call<MyObject> post(    @Body MyObject impl);
    @GET("/") Call<String> wrongClass();
  }
  @Rule public final MockWebServer server=new MockWebServer();
  private Service service;
  @Before public void setUp(){
    Format format=new Format(0,null,new HyphenStyle(),Verbosity.HIGH);
    Persister persister=new Persister(format);
    Retrofit retrofit=new Retrofit.Builder().baseUrl(server.url("/")).addConverterFactory(SimpleXmlConverterFactory.create(persister)).build();
    service=retrofit.create(Service.class);
  }
  @Test public void bodyWays() throws IOException, InterruptedException {
    server.enqueue(new MockResponse().setBody("<my-object><message>hello world</message><count>10</count></my-object>"));
    Call<MyObject> call=service.post(new MyObject("hello world",10));
    Response<MyObject> response=call.execute();
    MyObject body=response.body();
    assertThat(body.getMessage()).isEqualTo("hello world");
    assertThat(body.getCount()).isEqualTo(10);
    RecordedRequest request=server.takeRequest();
    assertThat(request.getBody().readUtf8()).isEqualTo("<my-object><message>hello world</message><count>10</count></my-object>");
    assertThat(request.getHeader("Content-Type")).isEqualTo("application/xml; charset=UTF-8");
  }
  @Test public void deserializeWrongValue() throws IOException {
    server.enqueue(new MockResponse().setBody("<myObject><foo/><bar/></myObject>"));
    Call<?> call=service.get();
    try {
      call.execute();
      fail();
    }
 catch (    RuntimeException e) {
      assertThat(e.getCause()).isInstanceOf(ElementException.class).hasMessageStartingWith("Element 'foo' does not have a match in class retrofit2.MyObject");
    }
  }
  @Test public void deserializeWrongClass() throws IOException {
    server.enqueue(new MockResponse().setBody("<my-object><message>hello world</message><count>10</count></my-object>"));
    Call<?> call=service.wrongClass();
    try {
      call.execute();
      fail();
    }
 catch (    RuntimeException e) {
      assertThat(e).hasMessage("Could not deserialize body as class java.lang.String");
    }
  }
}
