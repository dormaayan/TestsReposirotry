public final class NetworkBehaviorTest {
  private final NetworkBehavior behavior=NetworkBehavior.create(new Random(2847));
  @Test public void delayMustBePositive(){
    try {
      behavior.setDelay(-1,SECONDS);
      fail();
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("Amount must be positive value.");
    }
  }
  @Test public void varianceRestrictsRange(){
    try {
      behavior.setVariancePercent(-13);
      fail();
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("Variance percentage must be between 0 and 100.");
    }
    try {
      behavior.setVariancePercent(174);
      fail();
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("Variance percentage must be between 0 and 100.");
    }
  }
  @Test public void failureRestrictsRange(){
    try {
      behavior.setFailurePercent(-13);
      fail();
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("Failure percentage must be between 0 and 100.");
    }
    try {
      behavior.setFailurePercent(174);
      fail();
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("Failure percentage must be between 0 and 100.");
    }
  }
  @Test public void failurePercentageIsAccurate(){
    behavior.setFailurePercent(0);
    for (int i=0; i < 10000; i++) {
      assertThat(behavior.calculateIsFailure()).isFalse();
    }
    behavior.setFailurePercent(3);
    int failures=0;
    for (int i=0; i < 100000; i++) {
      if (behavior.calculateIsFailure()) {
        failures+=1;
      }
    }
    assertThat(failures).isEqualTo(2964);
  }
  @Test public void delayVarianceIsAccurate(){
    behavior.setDelay(2,SECONDS);
    behavior.setVariancePercent(0);
    for (int i=0; i < 100000; i++) {
      assertThat(behavior.calculateDelay(MILLISECONDS)).isEqualTo(2000);
    }
    behavior.setVariancePercent(40);
    long lowerBound=Integer.MAX_VALUE;
    long upperBound=Integer.MIN_VALUE;
    for (int i=0; i < 100000; i++) {
      long delay=behavior.calculateDelay(MILLISECONDS);
      if (delay > upperBound) {
        upperBound=delay;
      }
      if (delay < lowerBound) {
        lowerBound=delay;
      }
    }
    assertThat(upperBound).isEqualTo(2799);
    assertThat(lowerBound).isEqualTo(1200);
  }
}
