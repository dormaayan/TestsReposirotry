/** 
 * TestSuite for BasicManagedDataSource when using a DataSourceXAConnectionFactory (configured from a XADataSource)
 */
public class TestDataSourceXAConnectionFactory extends TestBasicDataSource {
  protected BasicManagedDataSource bmds;
  public AtomicInteger closeCounter=new AtomicInteger();
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    bmds=new BasicManagedDataSource();
    bmds.setTransactionManager(new TransactionManagerImpl());
    bmds.setXADataSource("notnull");
    final XADataSourceHandle handle=new XADataSourceHandle();
    final XADataSource xads=(XADataSource)Proxy.newProxyInstance(XADataSourceHandle.class.getClassLoader(),new Class[]{XADataSource.class},handle);
    bmds.setXaDataSourceInstance(xads);
  }
  /** 
 * Delegates everything to the BasicDataSource (ds field), except for getXAConnection which creates a BasicXAConnection.
 */
public class XADataSourceHandle implements InvocationHandler {
    @Override public Object invoke(    final Object proxy,    final Method method,    final Object[] args) throws Throwable {
      final String methodName=method.getName();
      if (methodName.equals("hashCode")) {
        return Integer.valueOf(System.identityHashCode(proxy));
      }
      if (methodName.equals("equals")) {
        return Boolean.valueOf(proxy == args[0]);
      }
      if (methodName.equals("getXAConnection")) {
        return getXAConnection();
      }
      try {
        return method.invoke(ds,args);
      }
 catch (      final InvocationTargetException e) {
        throw e.getTargetException();
      }
    }
    protected XAConnection getXAConnection() throws SQLException {
      return new TesterBasicXAConnection(ds.getConnection(),closeCounter);
    }
  }
  /** 
 * JIRA: DBCP-355
 */
  @Test public void testPhysicalClose() throws Exception {
    bmds.setMaxIdle(1);
    final Connection conn1=bmds.getConnection();
    final Connection conn2=bmds.getConnection();
    closeCounter.set(0);
    conn1.close();
    assertEquals(0,closeCounter.get());
    conn2.close();
    assertEquals(1,closeCounter.get());
    bmds.close();
    assertEquals(2,closeCounter.get());
  }
}
