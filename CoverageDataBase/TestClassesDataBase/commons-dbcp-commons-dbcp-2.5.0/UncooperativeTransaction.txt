/** 
 * Transaction that always fails enlistResource.
 */
private class UncooperativeTransaction implements Transaction {
  private final Transaction wrappedTransaction;
  public UncooperativeTransaction(  final Transaction transaction){
    this.wrappedTransaction=transaction;
  }
  @Override public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException {
    wrappedTransaction.commit();
  }
  @Override public boolean delistResource(  final XAResource arg0,  final int arg1) throws IllegalStateException, SystemException {
    return wrappedTransaction.delistResource(arg0,arg1);
  }
  @Override public int getStatus() throws SystemException {
    return wrappedTransaction.getStatus();
  }
  @Override public void registerSynchronization(  final Synchronization arg0) throws IllegalStateException, RollbackException, SystemException {
    wrappedTransaction.registerSynchronization(arg0);
  }
  @Override public void rollback() throws IllegalStateException, SystemException {
    wrappedTransaction.rollback();
  }
  @Override public void setRollbackOnly() throws IllegalStateException, SystemException {
    wrappedTransaction.setRollbackOnly();
  }
  @Override public synchronized boolean enlistResource(  final XAResource xaRes){
    return false;
  }
}
