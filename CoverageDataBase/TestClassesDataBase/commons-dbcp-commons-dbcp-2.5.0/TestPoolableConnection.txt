/** 
 */
public class TestPoolableConnection {
  private GenericObjectPool<PoolableConnection> pool=null;
  @Before public void setUp() throws Exception {
    final PoolableConnectionFactory factory=new PoolableConnectionFactory(new DriverConnectionFactory(new TesterDriver(),"jdbc:apache:commons:testdriver",null),null);
    factory.setDefaultAutoCommit(Boolean.TRUE);
    factory.setDefaultReadOnly(Boolean.TRUE);
    pool=new GenericObjectPool<>(factory);
    factory.setPool(pool);
  }
  @After public void tearDown(){
    pool.close();
  }
  @Test public void testConnectionPool() throws Exception {
    final Connection c=pool.borrowObject();
    assertNotNull("Connection should be created and should not be null",c);
    assertEquals("There should be exactly one active object in the pool",1,pool.getNumActive());
    c.close();
    assertEquals("There should now be zero active objects in the pool",0,pool.getNumActive());
  }
  @Test public void testPoolableConnectionLeak() throws Exception {
    final Connection conn=pool.borrowObject();
    ((PoolableConnection)conn).getInnermostDelegate().close();
    try {
      conn.close();
    }
 catch (    final SQLException e) {
    }
    assertEquals("The pool should have no active connections",0,pool.getNumActive());
  }
  @Test public void testClosingWrappedInDelegate() throws Exception {
    Assert.assertEquals(0,pool.getNumActive());
    final Connection conn=pool.borrowObject();
    final DelegatingConnection<Connection> outer=new DelegatingConnection<>(conn);
    Assert.assertFalse(outer.isClosed());
    Assert.assertFalse(conn.isClosed());
    Assert.assertEquals(1,pool.getNumActive());
    outer.close();
    Assert.assertTrue(outer.isClosed());
    Assert.assertTrue(conn.isClosed());
    Assert.assertEquals(0,pool.getNumActive());
    Assert.assertEquals(1,pool.getNumIdle());
  }
  @Test public void testFastFailValidation() throws Exception {
    pool.setTestOnReturn(true);
    final PoolableConnectionFactory factory=(PoolableConnectionFactory)pool.getFactory();
    factory.setFastFailValidation(true);
    final PoolableConnection conn=pool.borrowObject();
    final TesterConnection nativeConnection=(TesterConnection)conn.getInnermostDelegate();
    nativeConnection.setFailure(new SQLException("Not fatal error.","Invalid syntax."));
    try {
      conn.createStatement();
      fail("Should throw SQL exception.");
    }
 catch (    final SQLException ignored) {
      nativeConnection.setFailure(null);
    }
    conn.validate("SELECT 1",1000);
    nativeConnection.setFailure(new SQLException("Fatal connection error.","01002"));
    try {
      conn.createStatement();
      fail("Should throw SQL exception.");
    }
 catch (    final SQLException ignored) {
      nativeConnection.setFailure(null);
    }
    try {
      conn.validate("SELECT 1",1000);
      fail("Should throw SQL exception on validation.");
    }
 catch (    final SQLException notValid) {
    }
    conn.close();
    assertEquals("The pool should have no active connections",0,pool.getNumActive());
    assertEquals("The pool should have no idle connections",0,pool.getNumIdle());
  }
  @Test public void testFastFailValidationCustomCodes() throws Exception {
    pool.setTestOnReturn(true);
    final PoolableConnectionFactory factory=(PoolableConnectionFactory)pool.getFactory();
    factory.setFastFailValidation(true);
    final ArrayList<String> disconnectionSqlCodes=new ArrayList<>();
    disconnectionSqlCodes.add("XXX");
    factory.setDisconnectionSqlCodes(disconnectionSqlCodes);
    final PoolableConnection conn=pool.borrowObject();
    final TesterConnection nativeConnection=(TesterConnection)conn.getInnermostDelegate();
    nativeConnection.setFailure(new SQLException("Fatal connection error.","XXX"));
    try {
      conn.createStatement();
      fail("Should throw SQL exception.");
    }
 catch (    final SQLException ignored) {
      nativeConnection.setFailure(null);
    }
    conn.close();
    assertEquals("The pool should have no active connections",0,pool.getNumActive());
    assertEquals("The pool should have no idle connections",0,pool.getNumIdle());
  }
}
