/** 
 */
public class TestDelegatingConnection {
  private DelegatingConnection<? extends Connection> conn=null;
  private Connection delegateConn=null;
  private Connection delegateConn2=null;
  @Before public void setUp() throws Exception {
    delegateConn=new TesterConnection("test","test");
    delegateConn2=new TesterConnection("test","test");
    conn=new DelegatingConnection<>(delegateConn);
  }
  @Test public void testGetDelegate() throws Exception {
    assertEquals(delegateConn,conn.getDelegate());
  }
  @Test public void testConnectionToString() throws Exception {
    final String s=conn.toString();
    assertNotNull(s);
    assertTrue(s.length() > 0);
  }
  @Test public void testCheckOpen() throws Exception {
    conn.checkOpen();
    conn.close();
    try {
      conn.checkOpen();
      fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
    }
  }
  /** 
 * Verify fix for DBCP-241
 */
  @Test public void testCheckOpenNull() throws Exception {
    try {
      conn.close();
      conn.checkOpen();
      fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
      assertTrue(ex.getMessage().endsWith("is closed."));
    }
    try {
      conn=new DelegatingConnection<>(null);
      conn.setClosedInternal(true);
      conn.checkOpen();
      fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
      assertTrue(ex.getMessage().endsWith("is null."));
    }
    try {
      final PoolingConnection pc=new PoolingConnection(delegateConn2);
      pc.setStatementPool(new GenericKeyedObjectPool<>(pc));
      conn=new DelegatingConnection<>(pc);
      pc.close();
      conn.close();
      try (PreparedStatement ps=conn.prepareStatement("")){
      }
       fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
      assertTrue(ex.getMessage().endsWith("is closed."));
    }
    try {
      conn=new DelegatingConnection<>(new RTEGeneratingConnection());
      conn.close();
      conn.checkOpen();
      fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
      assertTrue(ex.getMessage().endsWith("is closed."));
    }
  }
  /** 
 * Delegate that will throw RTE on toString Used to validate fix for DBCP-241
 */
static class RTEGeneratingConnection extends TesterConnection {
    public RTEGeneratingConnection(){
      super("","");
    }
    @Override public String toString(){
      throw new RuntimeException("bang!");
    }
  }
  @Test public void testIsClosed() throws Exception {
    conn.checkOpen();
    assertFalse(conn.isClosed());
    conn.close();
    assertTrue(conn.isClosed());
  }
  @Test public void testIsClosedNullDelegate() throws Exception {
    conn.checkOpen();
    assertFalse(conn.isClosed());
    conn.setDelegate(null);
    assertTrue(conn.isClosed());
  }
}
