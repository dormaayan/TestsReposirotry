protected class PoolTest implements Runnable {
  /** 
 * The number of milliseconds to hold onto a database connection
 */
  private final int connHoldTime;
  private final int numStatements;
  private volatile boolean isRun;
  private String state;
  private final Thread thread;
  private Throwable thrown;
  private final Random random=new Random();
  private final long created;
  private long started;
  private long ended;
  private long preconnected;
  private long connected;
  private long postconnected;
  private int loops=0;
  private int connHash=0;
  private final boolean stopOnException;
  private final boolean loopOnce;
  public PoolTest(  final ThreadGroup threadGroup,  final int connHoldTime,  final boolean isStopOnException){
    this(threadGroup,connHoldTime,isStopOnException,false,1);
  }
  public PoolTest(  final ThreadGroup threadGroup,  final int connHoldTime,  final boolean isStopOnException,  final int numStatements){
    this(threadGroup,connHoldTime,isStopOnException,false,numStatements);
  }
  private PoolTest(  final ThreadGroup threadGroup,  final int connHoldTime,  final boolean isStopOnException,  final boolean once,  final int numStatements){
    this.loopOnce=once;
    this.connHoldTime=connHoldTime;
    stopOnException=isStopOnException;
    isRun=true;
    thrown=null;
    thread=new Thread(threadGroup,this,"Thread+" + currentThreadCount++);
    thread.setDaemon(false);
    created=timeStamp();
    this.numStatements=numStatements;
  }
  public void start(){
    thread.start();
  }
  @Override public void run(){
    started=timeStamp();
    try {
      while (isRun) {
        loops++;
        state="Getting Connection";
        preconnected=timeStamp();
        final Connection conn=getConnection();
        connHash=System.identityHashCode(((DelegatingConnection<?>)conn).getInnermostDelegate());
        connected=timeStamp();
        state="Using Connection";
        assertNotNull(conn);
        final String sql=numStatements == 1 ? "select * from dual" : "select count " + random.nextInt(numStatements - 1);
        final PreparedStatement stmt=conn.prepareStatement(sql);
        assertNotNull(stmt);
        final ResultSet rset=stmt.executeQuery();
        assertNotNull(rset);
        assertTrue(rset.next());
        state="Holding Connection";
        Thread.sleep(connHoldTime);
        state="Closing ResultSet";
        rset.close();
        state="Closing Statement";
        stmt.close();
        state="Closing Connection";
        conn.close();
        postconnected=timeStamp();
        state="Closed";
        if (loopOnce) {
          break;
        }
      }
      state=DONE;
    }
 catch (    final Throwable t) {
      thrown=t;
      if (!stopOnException) {
        throw new RuntimeException();
      }
    }
 finally {
      ended=timeStamp();
    }
  }
  public void stop(){
    isRun=false;
  }
  public Thread getThread(){
    return thread;
  }
}
