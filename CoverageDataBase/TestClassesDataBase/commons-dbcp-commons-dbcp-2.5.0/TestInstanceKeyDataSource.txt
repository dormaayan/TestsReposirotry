/** 
 */
public class TestInstanceKeyDataSource {
  private DriverAdapterCPDS pcds;
  private SharedPoolDataSource spds;
  private final static String DRIVER="org.apache.commons.dbcp2.TesterDriver";
  private final static String URL="jdbc:apache:commons:testdriver";
  private final static String USER="foo";
  private final static String PASS="bar";
  @Before public void setUp() throws ClassNotFoundException {
    pcds=new DriverAdapterCPDS();
    pcds.setDriver(DRIVER);
    pcds.setUrl(URL);
    pcds.setUser(USER);
    pcds.setPassword(PASS);
    pcds.setPoolPreparedStatements(false);
    spds=new SharedPoolDataSource();
    spds.setConnectionPoolDataSource(pcds);
  }
  @After public void tearDown() throws Exception {
    spds.close();
  }
  /** 
 * Verify that exception on setupDefaults does not leak PooledConnection JIRA: DBCP-237
 * @throws Exception
 */
  @Test public void testExceptionOnSetupDefaults() throws Exception {
    final ThrowOnSetupDefaultsDataSource tds=new ThrowOnSetupDefaultsDataSource();
    final int numConnections=tds.getNumActive();
    try {
      tds.getConnection(USER,PASS);
      fail("Expecting SQLException");
    }
 catch (    final SQLException ex) {
    }
    assertEquals(numConnections,tds.getNumActive());
    tds.close();
  }
private static class ThrowOnSetupDefaultsDataSource extends SharedPoolDataSource {
    private static final long serialVersionUID=-448025812063133259L;
    ThrowOnSetupDefaultsDataSource(){
      super();
    }
    @Override protected void setupDefaults(    final Connection connection,    final String userName) throws SQLException {
      throw new SQLException("bang!");
    }
  }
  @Test public void testConnectionPoolDataSource(){
    assertEquals(pcds,spds.getConnectionPoolDataSource());
  }
  @Test(expected=IllegalStateException.class) public void testConnectionPoolDataSourceAlreadySet(){
    spds.setConnectionPoolDataSource(new DriverAdapterCPDS());
  }
  @Test(expected=IllegalStateException.class) public void testConnectionPoolDataSourceAlreadySetUsingJndi(){
    spds=new SharedPoolDataSource();
    spds.setDataSourceName("anything");
    spds.setConnectionPoolDataSource(new DriverAdapterCPDS());
  }
  @Test public void testDataSourceName(){
    spds=new SharedPoolDataSource();
    assertNull(spds.getDataSourceName());
    spds.setDataSourceName("anything");
    assertEquals("anything",spds.getDataSourceName());
  }
  @Test(expected=IllegalStateException.class) public void testDataSourceNameAlreadySet(){
    spds.setDataSourceName("anything");
  }
  @Test(expected=IllegalStateException.class) public void testDataSourceNameAlreadySetUsingJndi(){
    spds=new SharedPoolDataSource();
    spds.setDataSourceName("anything");
    spds.setDataSourceName("anything");
  }
  @Test public void testDefaultTransactionIsolation(){
    assertEquals(InstanceKeyDataSource.UNKNOWN_TRANSACTIONISOLATION,spds.getDefaultTransactionIsolation());
    spds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    assertEquals(Connection.TRANSACTION_READ_COMMITTED,spds.getDefaultTransactionIsolation());
  }
  @Test(expected=IllegalArgumentException.class) public void testDefaultTransactionIsolationInvalid(){
    assertEquals(InstanceKeyDataSource.UNKNOWN_TRANSACTIONISOLATION,spds.getDefaultTransactionIsolation());
    spds.setDefaultTransactionIsolation(Integer.MAX_VALUE);
  }
  @Test public void testDescription(){
    spds.setDescription("anything");
    assertEquals("anything",spds.getDescription());
  }
  @Test(expected=NullPointerException.class) public void testJndiNullProperties(){
    spds.setJndiEnvironment(null);
  }
  @Test public void testJndiPropertiesNotInitialized(){
    assertNull(spds.getJndiEnvironment("name"));
    spds.setJndiEnvironment("name","king");
    assertEquals("king",spds.getJndiEnvironment("name"));
  }
  @Test public void testJndiPropertiesCleared(){
    spds.setJndiEnvironment("name","king");
    assertEquals("king",spds.getJndiEnvironment("name"));
    final Properties properties=new Properties();
    properties.setProperty("fish","kohi");
    spds.setJndiEnvironment(properties);
    assertNull(spds.getJndiEnvironment("name"));
  }
  @Test public void testJndiEnvironment(){
    assertNull(spds.getJndiEnvironment("name"));
    final Properties properties=new Properties();
    properties.setProperty("name","clarke");
    spds.setJndiEnvironment(properties);
    assertEquals("clarke",spds.getJndiEnvironment("name"));
    spds.setJndiEnvironment("name","asimov");
    assertEquals("asimov",spds.getJndiEnvironment("name"));
  }
  @Test public void testLoginTimeout(){
    spds.setLoginTimeout(10);
    assertEquals(10,spds.getLoginTimeout());
  }
  @Test public void testLogWriterAutoInitialized(){
    assertNotNull(spds.getLogWriter());
  }
  @Test public void testLogWriter(){
    spds.setLogWriter(new PrintWriter(System.out));
    assertNotNull(spds.getLogWriter());
  }
  @Test public void testValidationQuery(){
    assertNull(spds.getValidationQuery());
    spds.setValidationQuery("anything");
    assertEquals("anything",spds.getValidationQuery());
  }
  @Test(expected=IllegalStateException.class) public void testValidationQueryWithConnectionCalled() throws SQLException {
    spds.getConnection();
    assertNull(spds.getValidationQuery());
    spds.setValidationQuery("anything");
  }
  @Test public void testValidationQueryTimeout(){
    assertEquals(-1,spds.getValidationQueryTimeout());
    spds.setValidationQueryTimeout(10);
    assertEquals(10,spds.getValidationQueryTimeout());
  }
  @Test public void testRollbackAfterValidation(){
    assertFalse(spds.isRollbackAfterValidation());
    spds.setRollbackAfterValidation(true);
    assertEquals(true,spds.isRollbackAfterValidation());
  }
  @Test(expected=IllegalStateException.class) public void testRollbackAfterValidationWithConnectionCalled() throws SQLException {
    spds.getConnection();
    assertFalse(spds.isRollbackAfterValidation());
    spds.setRollbackAfterValidation(true);
    assertEquals(true,spds.isRollbackAfterValidation());
  }
  @Test public void testMaxConnLifetimeMillis(){
    assertEquals(-1,spds.getMaxConnLifetimeMillis());
    spds.setMaxConnLifetimeMillis(10);
    assertEquals(10,spds.getMaxConnLifetimeMillis());
  }
  @Test public void testDefaultReadOnly(){
    spds.setDefaultReadOnly(true);
    assertTrue(spds.isDefaultReadOnly());
    spds.setDefaultReadOnly(false);
    assertFalse(spds.isDefaultReadOnly());
  }
  @Test public void testDefaultTestOnCreate(){
    spds.setDefaultTestOnCreate(false);
    assertFalse(spds.getDefaultTestOnCreate());
    spds.setDefaultTestOnCreate(true);
    assertTrue(spds.getDefaultTestOnCreate());
  }
  @Test public void testDefaultSoftMinEvictableIdleTimeMillis(){
    spds.setDefaultSoftMinEvictableIdleTimeMillis(10);
    assertEquals(10,spds.getDefaultSoftMinEvictableIdleTimeMillis());
  }
  @Test public void testDefaultMinIdle(){
    spds.setDefaultMinIdle(10);
    assertEquals(10,spds.getDefaultMinIdle());
  }
  @Test public void testDefaultLifo(){
    spds.setDefaultLifo(true);
    assertTrue(spds.getDefaultLifo());
    spds.setDefaultLifo(false);
    assertFalse(spds.getDefaultLifo());
  }
  @Test public void testDefaultEvictionPolicyClassName(){
    spds.setDefaultEvictionPolicyClassName(Object.class.getName());
    assertEquals(Object.class.getName(),spds.getDefaultEvictionPolicyClassName());
  }
  @Test public void testDefaultBlockWhenExhausted(){
    spds.setDefaultBlockWhenExhausted(true);
    assertTrue(spds.getDefaultBlockWhenExhausted());
    spds.setDefaultBlockWhenExhausted(false);
    assertFalse(spds.getDefaultBlockWhenExhausted());
  }
  @Test public void testConnection() throws SQLException, ClassNotFoundException {
    spds=new SharedPoolDataSource();
    pcds.setDriver(DRIVER);
    pcds.setUrl(URL);
    spds.setConnectionPoolDataSource(pcds);
    final PooledConnectionAndInfo info=spds.getPooledConnectionAndInfo(null,null);
    assertNull(info.getUsername());
    assertNull(info.getPassword());
    final Connection conn=spds.getConnection();
    assertNotNull(conn);
  }
}
