/** 
 * Tests for PoolableManagedConnection.
 */
public class TestPoolableManagedConnection {
  private TransactionManager transactionManager;
  private TransactionRegistry transactionRegistry;
  private GenericObjectPool<PoolableConnection> pool;
  private Connection conn;
  private PoolableManagedConnection poolableManagedConnection;
  @Before public void setUp() throws Exception {
    transactionManager=new TransactionManagerImpl();
    final Properties properties=new Properties();
    properties.setProperty("user","userName");
    properties.setProperty("password","password");
    final ConnectionFactory connectionFactory=new DriverConnectionFactory(new TesterDriver(),"jdbc:apache:commons:testdriver",properties);
    final XAConnectionFactory xaConnectionFactory=new LocalXAConnectionFactory(transactionManager,connectionFactory);
    transactionRegistry=xaConnectionFactory.getTransactionRegistry();
    final PoolableConnectionFactory factory=new PoolableConnectionFactory(xaConnectionFactory,null);
    factory.setValidationQuery("SELECT DUMMY FROM DUAL");
    factory.setDefaultReadOnly(Boolean.TRUE);
    factory.setDefaultAutoCommit(Boolean.TRUE);
    pool=new GenericObjectPool<>(factory);
    factory.setPool(pool);
    pool.setMaxTotal(10);
    pool.setMaxWaitMillis(100);
  }
  @After public void tearDown() throws SQLException {
    if (conn != null && !conn.isClosed())     conn.close();
    if (pool != null && !pool.isClosed())     pool.close();
  }
  @Test public void testManagedConnection() throws Exception {
    assertEquals(0,pool.getNumActive());
    conn=pool.borrowObject();
    assertEquals(1,pool.getNumActive());
    poolableManagedConnection=new PoolableManagedConnection(transactionRegistry,conn,pool);
    poolableManagedConnection.close();
    assertEquals(1,pool.getNumActive());
    conn.close();
    assertEquals(0,pool.getNumActive());
  }
  @Test public void testPoolableConnection() throws Exception {
    conn=pool.borrowObject();
    assertNotNull(transactionRegistry.getXAResource(conn));
    poolableManagedConnection=new PoolableManagedConnection(transactionRegistry,conn,pool);
    poolableManagedConnection.close();
    assertNotNull(transactionRegistry.getXAResource(conn));
  }
  @Test public void testReallyClose() throws Exception {
    assertEquals(0,pool.getNumActive());
    conn=pool.borrowObject();
    assertEquals(1,pool.getNumActive());
    assertNotNull(transactionRegistry.getXAResource(conn));
    poolableManagedConnection=new PoolableManagedConnection(transactionRegistry,conn,pool);
    poolableManagedConnection.close();
    assertNotNull(transactionRegistry.getXAResource(conn));
    assertEquals(1,pool.getNumActive());
    poolableManagedConnection.reallyClose();
    try {
      assertNull(transactionRegistry.getXAResource(conn));
      fail("Transaction registry was supposed to be empty now");
    }
 catch (    final SQLException e) {
    }
    assertEquals(0,pool.getNumActive());
  }
}
