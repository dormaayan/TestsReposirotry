private static class TestConnection implements Connection {
  public boolean throwWhenGetAutoCommit=false;
  public boolean throwWhenSetAutoCommit=false;
  boolean autoCommit=false;
  boolean readOnly=false;
  public boolean committed=false;
  public boolean rolledback=false;
  public boolean closed=false;
  @Override public <T>T unwrap(  final Class<T> iface) throws SQLException {
    return null;
  }
  @Override public boolean isWrapperFor(  final Class<?> iface) throws SQLException {
    return false;
  }
  @Override public Statement createStatement() throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql) throws SQLException {
    return null;
  }
  @Override public CallableStatement prepareCall(  final String sql) throws SQLException {
    return null;
  }
  @Override public String nativeSQL(  final String sql) throws SQLException {
    return null;
  }
  @Override public void setAutoCommit(  final boolean autoCommit) throws SQLException {
    if (throwWhenSetAutoCommit) {
      throw new SQLException();
    }
    this.autoCommit=autoCommit;
  }
  @Override public boolean getAutoCommit() throws SQLException {
    if (throwWhenGetAutoCommit) {
      throw new SQLException();
    }
    return autoCommit;
  }
  @Override public void commit() throws SQLException {
    committed=true;
  }
  @Override public void rollback() throws SQLException {
    rolledback=true;
  }
  @Override public void close() throws SQLException {
    closed=true;
  }
  @Override public boolean isClosed() throws SQLException {
    return closed;
  }
  @Override public DatabaseMetaData getMetaData() throws SQLException {
    return null;
  }
  @Override public void setReadOnly(  final boolean readOnly) throws SQLException {
    this.readOnly=readOnly;
  }
  @Override public boolean isReadOnly() throws SQLException {
    return readOnly;
  }
  @Override public void setCatalog(  final String catalog) throws SQLException {
  }
  @Override public String getCatalog() throws SQLException {
    return null;
  }
  @Override public void setTransactionIsolation(  final int level) throws SQLException {
  }
  @Override public int getTransactionIsolation() throws SQLException {
    return 0;
  }
  @Override public SQLWarning getWarnings() throws SQLException {
    return null;
  }
  @Override public void clearWarnings() throws SQLException {
  }
  @Override public Statement createStatement(  final int resultSetType,  final int resultSetConcurrency) throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql,  final int resultSetType,  final int resultSetConcurrency) throws SQLException {
    return null;
  }
  @Override public CallableStatement prepareCall(  final String sql,  final int resultSetType,  final int resultSetConcurrency) throws SQLException {
    return null;
  }
  @Override public Map<String,Class<?>> getTypeMap() throws SQLException {
    return null;
  }
  @Override public void setTypeMap(  final Map<String,Class<?>> map) throws SQLException {
  }
  @Override public void setHoldability(  final int holdability) throws SQLException {
  }
  @Override public int getHoldability() throws SQLException {
    return 0;
  }
  @Override public Savepoint setSavepoint() throws SQLException {
    return null;
  }
  @Override public Savepoint setSavepoint(  final String name) throws SQLException {
    return null;
  }
  @Override public void rollback(  final Savepoint savepoint) throws SQLException {
  }
  @Override public void releaseSavepoint(  final Savepoint savepoint) throws SQLException {
  }
  @Override public Statement createStatement(  final int resultSetType,  final int resultSetConcurrency,  final int resultSetHoldability) throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql,  final int resultSetType,  final int resultSetConcurrency,  final int resultSetHoldability) throws SQLException {
    return null;
  }
  @Override public CallableStatement prepareCall(  final String sql,  final int resultSetType,  final int resultSetConcurrency,  final int resultSetHoldability) throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql,  final int autoGeneratedKeys) throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql,  final int[] columnIndexes) throws SQLException {
    return null;
  }
  @Override public PreparedStatement prepareStatement(  final String sql,  final String[] columnNames) throws SQLException {
    return null;
  }
  @Override public Clob createClob() throws SQLException {
    return null;
  }
  @Override public Blob createBlob() throws SQLException {
    return null;
  }
  @Override public NClob createNClob() throws SQLException {
    return null;
  }
  @Override public SQLXML createSQLXML() throws SQLException {
    return null;
  }
  @Override public boolean isValid(  final int timeout) throws SQLException {
    return false;
  }
  @Override public void setClientInfo(  final String name,  final String value) throws SQLClientInfoException {
  }
  @Override public void setClientInfo(  final Properties properties) throws SQLClientInfoException {
  }
  @Override public String getClientInfo(  final String name) throws SQLException {
    return null;
  }
  @Override public Properties getClientInfo() throws SQLException {
    return null;
  }
  @Override public Array createArrayOf(  final String typeName,  final Object[] elements) throws SQLException {
    return null;
  }
  @Override public Struct createStruct(  final String typeName,  final Object[] attributes) throws SQLException {
    return null;
  }
  @Override public void setSchema(  final String schema) throws SQLException {
  }
  @Override public String getSchema() throws SQLException {
    return null;
  }
  @Override public void abort(  final Executor executor) throws SQLException {
  }
  @Override public void setNetworkTimeout(  final Executor executor,  final int milliseconds) throws SQLException {
  }
  @Override public int getNetworkTimeout() throws SQLException {
    return 0;
  }
}
