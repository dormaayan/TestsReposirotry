/** 
 * TestSuite for BasicManagedDataSource
 */
public class TestBasicManagedDataSource extends TestBasicDataSource {
  @Override protected BasicDataSource createDataSource() throws Exception {
    final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource();
    basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
    return basicManagedDataSource;
  }
  /** 
 * JIRA: DBCP-294 Verify that PoolableConnections created by BasicManagedDataSource unregister themselves when reallyClosed.
 */
  @Test public void testReallyClose() throws Exception {
    final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource();
    basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
    basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
    basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
    basicManagedDataSource.setUsername("userName");
    basicManagedDataSource.setPassword("password");
    basicManagedDataSource.setMaxIdle(1);
    final ManagedConnection<?> conn=(ManagedConnection<?>)basicManagedDataSource.getConnection();
    assertNotNull(basicManagedDataSource.getTransactionRegistry().getXAResource(conn));
    final ManagedConnection<?> conn2=(ManagedConnection<?>)basicManagedDataSource.getConnection();
    conn2.close();
    conn.close();
    try {
      basicManagedDataSource.getTransactionRegistry().getXAResource(conn);
      fail("Expecting SQLException - XAResources orphaned");
    }
 catch (    final SQLException ex) {
    }
    conn2.close();
    basicManagedDataSource.close();
  }
  @Test public void testXADataSource() throws SQLException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setXADataSource("anything");
      assertEquals("anything",basicManagedDataSource.getXADataSource());
    }
   }
  @Test public void testXaDataSourceInstance() throws SQLException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      final XADataSource ds=new JdbcDataSource();
      basicManagedDataSource.setXaDataSourceInstance(ds);
      assertEquals(ds,basicManagedDataSource.getXaDataSourceInstance());
    }
   }
  @Test(expected=SQLException.class) public void testTransactionManagerNotSet() throws SQLException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.createConnectionFactory();
    }
   }
  @Test public void testSetDriverName() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setDriverClassName("adams");
      assertEquals("adams",basicManagedDataSource.getDriverClassName());
      basicManagedDataSource.setDriverClassName(null);
      assertNull(basicManagedDataSource.getDriverClassName());
    }
   }
  @Test public void testCreateXaDataSourceNewInstance() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setXADataSource(JdbcDataSource.class.getCanonicalName());
      basicManagedDataSource.setDriverClassName(Driver.class.getName());
      basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
      assertNotNull(basicManagedDataSource.createConnectionFactory());
    }
   }
  @Test public void testCreateXaDataSourceNoInstanceSetAndNoDataSource() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
      basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
      basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
      assertNotNull(basicManagedDataSource.createConnectionFactory());
    }
   }
  @Test(expected=NullPointerException.class) public void testRuntimeExceptionsAreRethrown() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
      basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
      basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
      basicManagedDataSource.setUsername("userName");
      basicManagedDataSource.setPassword("password");
      basicManagedDataSource.setMaxIdle(1);
      basicManagedDataSource.createPoolableConnectionFactory(null);
    }
   }
  @Test public void testSetXaDataSourceInstance() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
      basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
      basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
      basicManagedDataSource.setUsername("userName");
      basicManagedDataSource.setPassword("password");
      basicManagedDataSource.setMaxIdle(1);
      basicManagedDataSource.setXaDataSourceInstance(new JdbcDataSource());
      assertNotNull(basicManagedDataSource.createConnectionFactory());
    }
   }
  @Test public void testSetNullXaDataSourceInstance() throws SQLException, XAException {
    try (final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource()){
      basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
      basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
      basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
      basicManagedDataSource.setUsername("userName");
      basicManagedDataSource.setPassword("password");
      basicManagedDataSource.setMaxIdle(1);
      basicManagedDataSource.setXaDataSourceInstance(null);
      assertNull(basicManagedDataSource.getXaDataSourceInstance());
    }
   }
}
