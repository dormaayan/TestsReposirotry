/** 
 * @version $Id$
 */
public class EnvironmentUtilsTest {
  /** 
 * Tests the behaviour of the EnvironmentUtils.toStrings() when using a  {@code null} environment.
 */
  @Test public void testToStrings(){
    assertNull(EnvironmentUtils.toStrings(null));
    final Map<String,String> env=new HashMap<String,String>();
    assertArrayEquals(new String[0],EnvironmentUtils.toStrings(env));
    env.put("foo2","bar2");
    env.put("foo","bar");
    final String[] envStrings=EnvironmentUtils.toStrings(env);
    final String[] expected=new String[]{"foo2=bar2","foo=bar"};
    Arrays.sort(expected);
    Arrays.sort(envStrings);
    assertArrayEquals(expected,envStrings);
  }
  /** 
 * Test to access the environment variables of the current process. Please note that this test does not run on java-gjc.
 * @throws IOException the test failed
 */
  @Test public void testGetProcEnvironment() throws IOException {
    final Map<String,String> procEnvironment=EnvironmentUtils.getProcEnvironment();
    assertTrue("Expecting non-zero environment size",procEnvironment.size() > 0);
    final String[] envArgs=EnvironmentUtils.toStrings(procEnvironment);
    for (int i=0; i < envArgs.length; i++) {
      assertNotNull("Entry " + i + " should not be null",envArgs[i]);
      assertTrue("Entry " + i + " should not be empty",envArgs[i].length() > 0);
    }
  }
  /** 
 * On Windows platforms test that accessing environment variables can be done in a case-insensitive way, e.g. "PATH", "Path" and "path" would reference the same environment variable.
 * @throws IOException the test failed
 */
  @Test public void testGetProcEnvironmentCaseInsensitiveLookup() throws IOException {
    if (!OS.isFamilyWindows()) {
      return;
    }
    final Map<String,String> procEnvironment=EnvironmentUtils.getProcEnvironment();
    for (    final Entry<String,String> entry : procEnvironment.entrySet()) {
      final String key=entry.getKey();
      final String value=entry.getValue();
      assertEquals(value,procEnvironment.get(key.toLowerCase(Locale.ENGLISH)));
      assertEquals(value,procEnvironment.get(key.toUpperCase(Locale.ENGLISH)));
    }
    EnvironmentUtils.addVariableToEnvironment(procEnvironment,"foo=bar");
    assertEquals("bar",procEnvironment.get("FOO"));
    assertEquals("bar",procEnvironment.get("Foo"));
    assertEquals("bar",procEnvironment.get("foo"));
  }
  /** 
 * Accessing environment variables is case-sensitive or not depending on the operating system but the values of the environment variable are always case-sensitive. So make sure that this assumption holds on all operating systems.
 * @throws Exception the test failed
 */
  @Test public void testCaseInsensitiveVariableLookup() throws Exception {
    final Map<String,String> procEnvironment=EnvironmentUtils.getProcEnvironment();
    EnvironmentUtils.addVariableToEnvironment(procEnvironment,"foo=bAr");
    assertEquals("bAr",procEnvironment.get("foo"));
  }
  /** 
 * Tests the behavior of the EnvironmentUtils.toStrings() when using a  {@code null} key given to the map.
 */
  @Test public void testToStringWithNullKey(){
    final Map<String,String> env=new HashMap<String,String>();
    env.put(null,"TheNullKey");
    final String[] strings=EnvironmentUtils.toStrings(env);
    assertEquals(1,strings.length);
    assertEquals("=TheNullKey",strings[0]);
  }
  /** 
 * Tests the behavior of the EnvironmentUtils.toStrings() when using a  {@code null} value given to the map.
 */
  @Test public void testToStringWithNullValue(){
    final Map<String,String> env=new HashMap<String,String>();
    env.put("key",null);
    final String[] strings=EnvironmentUtils.toStrings(env);
    assertEquals(1,strings.length);
    assertEquals("key=",strings[0]);
  }
}
