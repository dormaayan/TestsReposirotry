public class BatchMutationTest {
  private List<String> columnFamilies;
  private BatchMutation<String> batchMutate;
  @Before public void setup(){
    columnFamilies=new ArrayList<String>();
    columnFamilies.add("Standard1");
    batchMutate=new BatchMutation<String>(StringSerializer.get());
  }
  @Test public void testAddInsertion(){
    Column column=new Column(StringSerializer.get().toByteBuffer("c_name"));
    column.setValue(StringSerializer.get().toByteBuffer("c_val"));
    column.setTimestamp(System.currentTimeMillis());
    batchMutate.addInsertion("key1",columnFamilies,column);
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=batchMutate.getMutationMap();
    assertEquals(1,mutationMap.get(StringSerializer.get().toByteBuffer("key1")).size());
    Column column2=new Column(StringSerializer.get().toByteBuffer("c_name2"));
    column2.setValue(StringSerializer.get().toByteBuffer("c_val2"));
    column2.setTimestamp(System.currentTimeMillis());
    batchMutate.addInsertion("key1",columnFamilies,column2);
    assertEquals(2,mutationMap.get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
  @Test public void testAddInsertionWithHint(){
    BatchMutation<String> batchMutate=new BatchMutation<String>(StringSerializer.get(),new BatchSizeHint(1,50));
    Column column=new Column(StringSerializer.get().toByteBuffer("c_name"));
    column.setValue(StringSerializer.get().toByteBuffer("c_val"));
    column.setTimestamp(System.currentTimeMillis());
    batchMutate.addInsertion("key1",columnFamilies,column);
    Map<ByteBuffer,Map<String,List<Mutation>>> mutMap=batchMutate.getMutationMap();
    assertEquals(1,mutMap.size());
    assertEquals(ByteBuffer.wrap("key1".getBytes()),mutMap.keySet().iterator().next());
    Map<String,List<Mutation>> cfMutMap=mutMap.values().iterator().next();
    assertEquals(1,cfMutMap.size());
    List<Mutation> cfMutList=cfMutMap.values().iterator().next();
    assertTrue(cfMutList instanceof ArrayList);
  }
  @Test public void testAddSuperInsertion(){
    Column column=new Column(StringSerializer.get().toByteBuffer("c_name"));
    column.setValue(StringSerializer.get().toByteBuffer("c_val"));
    column.setTimestamp(System.currentTimeMillis());
    SuperColumn sc=new SuperColumn(StringSerializer.get().toByteBuffer("c_name"),Arrays.asList(column));
    batchMutate.addSuperInsertion("key1",columnFamilies,sc);
    assertEquals(1,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).size());
    column=new Column(StringSerializer.get().toByteBuffer("c_name"));
    column.setValue(StringSerializer.get().toByteBuffer("c_val"));
    column.setTimestamp(System.currentTimeMillis());
    SuperColumn sc2=new SuperColumn(StringSerializer.get().toByteBuffer("c_name2"),Arrays.asList(column));
    batchMutate.addSuperInsertion("key1",columnFamilies,sc2);
    assertEquals(2,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
  @Test public void testAddDeletion(){
    Deletion deletion=new Deletion().setTimestamp(System.currentTimeMillis());
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.addToColumn_names(StringSerializer.get().toByteBuffer("c_name"));
    deletion.setPredicate(slicePredicate);
    batchMutate.addDeletion("key1",columnFamilies,deletion);
    assertEquals(1,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).size());
    deletion=new Deletion().setTimestamp(System.currentTimeMillis());
    slicePredicate=new SlicePredicate();
    slicePredicate.addToColumn_names(StringSerializer.get().toByteBuffer("c_name2"));
    deletion.setPredicate(slicePredicate);
    batchMutate.addDeletion("key1",columnFamilies,deletion);
    assertEquals(2,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
  @Test public void testIsEmpty(){
    assertTrue(batchMutate.isEmpty());
    Column c1=new Column(StringSerializer.get().toByteBuffer("c_name"));
    c1.setValue(StringSerializer.get().toByteBuffer("c_val"));
    c1.setTimestamp(System.currentTimeMillis());
    batchMutate.addInsertion("key1",columnFamilies,c1);
    assertFalse(batchMutate.isEmpty());
    CounterColumn cc1=new CounterColumn(StringSerializer.get().toByteBuffer("c_name"),13);
    batchMutate.addCounterInsertion("key1",columnFamilies,cc1);
    assertFalse(batchMutate.isEmpty());
  }
  @Test public void testAddCounterInsertion(){
    CounterColumn cc1=new CounterColumn(StringSerializer.get().toByteBuffer("c_name"),222);
    batchMutate.addCounterInsertion("key1",columnFamilies,cc1);
    Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap=batchMutate.getMutationMap();
    assertEquals(1,mutationMap.get(StringSerializer.get().toByteBuffer("key1")).size());
    CounterColumn cc2=new CounterColumn(StringSerializer.get().toByteBuffer("c_name2"),44);
    batchMutate.addCounterInsertion("key1",columnFamilies,cc2);
    assertEquals(2,mutationMap.get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
  @Test public void testAddCounterDeletion(){
    Deletion counterDeletion=new Deletion();
    SlicePredicate slicePredicate=new SlicePredicate();
    slicePredicate.addToColumn_names(StringSerializer.get().toByteBuffer("c_name"));
    counterDeletion.setPredicate(slicePredicate);
    batchMutate.addDeletion("key1",columnFamilies,counterDeletion);
    assertEquals(1,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).size());
    counterDeletion=new Deletion();
    slicePredicate=new SlicePredicate();
    slicePredicate.addToColumn_names(StringSerializer.get().toByteBuffer("c_name2"));
    counterDeletion.setPredicate(slicePredicate);
    batchMutate.addDeletion("key1",columnFamilies,counterDeletion);
    assertEquals(2,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
  @Test public void testAddSuperCounterInsertion(){
    CounterSuperColumn csc1=new CounterSuperColumn(StringSerializer.get().toByteBuffer("c_name"),Arrays.asList(new CounterColumn(StringSerializer.get().toByteBuffer("c_name"),123)));
    batchMutate.addSuperCounterInsertion("key1",columnFamilies,csc1);
    assertEquals(1,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).size());
    CounterSuperColumn csc2=new CounterSuperColumn(StringSerializer.get().toByteBuffer("c_name2"),Arrays.asList(new CounterColumn(StringSerializer.get().toByteBuffer("c_name"),456)));
    batchMutate.addSuperCounterInsertion("key1",columnFamilies,csc2);
    assertEquals(2,batchMutate.getMutationMap().get(StringSerializer.get().toByteBuffer("key1")).get("Standard1").size());
  }
}
