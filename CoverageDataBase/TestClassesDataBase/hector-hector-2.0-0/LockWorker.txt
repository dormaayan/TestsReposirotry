private static class LockWorker implements Runnable {
  private LockWorkerPool pool;
  /** 
 * @param path
 * @param lm
 */
  public LockWorker(  LockWorkerPool pool){
    this.pool=pool;
  }
  @Override public void run(){
    HLock lock=pool.lm.createLock(pool.path);
    try {
      try {
        pool.startLatch.await();
      }
 catch (      InterruptedException e) {
      }
      logger.info("{} trying",lock);
      pool.lm.acquire(lock);
      logger.info("{} acquired",lock);
      if (!pool.failSemaphore.tryAcquire()) {
        logger.error("Acquired semaphore when we shouldn't.  Failing test");
        pool.setFailed();
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
      pool.failSemaphore.release();
      logger.info("{} released",lock);
    }
 catch (    Throwable t) {
      logger.error("Error when trying to acquire lock",t);
      pool.setFailed();
    }
 finally {
      pool.lm.release(lock);
      pool.finishLatch.countDown();
    }
  }
}
