public class HClientIdleConnectionRenewTest extends BaseEmbededServerSetupTest {
  private CassandraHost cassandraHost;
  private ConcurrentHClientPool clientPool;
  private CassandraClientMonitor monitor;
  @Before public void setupTest(){
    setupClient();
    cassandraHost=cassandraHostConfigurator.buildCassandraHosts()[0];
    HClientFactory factory=new HThriftClientFactoryImpl();
    monitor=new CassandraClientMonitor(connectionManager);
    clientPool=new ConcurrentHClientPool(factory,cassandraHost,monitor);
  }
  protected void configure(  CassandraHostConfigurator configurator){
    configurator.setMaxActive(1);
    configurator.setMaxLastSuccessTimeMillis(3 * 1000);
  }
  @Test public void testBorrowAndRenew(){
    HClient client1=clientPool.borrowClient();
    assertEquals(1,clientPool.getNumActive());
    client1.updateLastSuccessTime();
    clientPool.releaseClient(client1);
    assertEquals(0,clientPool.getNumActive());
    int count=monitor.getNumRenewedIdleConnections();
    try {
      Thread.sleep(4 * 1000);
    }
 catch (    InterruptedException ex) {
      fail();
    }
    HClient client2=clientPool.borrowClient();
    assertEquals(1,clientPool.getNumActive());
    assertEquals(count + 1,monitor.getNumRenewedIdleConnections());
    assertNotSame(client1,client2);
  }
}
