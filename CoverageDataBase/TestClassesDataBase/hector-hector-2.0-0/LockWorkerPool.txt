private static class LockWorkerPool {
  private final int numberLocks;
  private final String path;
  private final HLockManager lm;
  private final ExecutorService executor;
  private final CountDownLatch startLatch;
  private final CountDownLatch finishLatch;
  private final Semaphore failSemaphore;
  private boolean failed;
  private LockWorkerPool(  int numberLocks,  String path,  HLockManager lm,  Semaphore failSemaphore){
    this.numberLocks=numberLocks;
    this.path=path;
    this.lm=lm;
    this.executor=Executors.newFixedThreadPool(8);
    this.failSemaphore=failSemaphore;
    startLatch=new CountDownLatch(1);
    finishLatch=new CountDownLatch(numberLocks);
    failed=false;
  }
  private void go() throws InterruptedException {
    for (int i=0; i < numberLocks; i++) {
      executor.execute(new LockWorker(this));
    }
    startLatch.countDown();
  }
  private void waitToFinish() throws InterruptedException {
    finishLatch.await();
  }
  private void setFailed(){
    logger.error("Failed flag set");
    failed=true;
    List<Runnable> waiting=executor.shutdownNow();
    for (int i=0; i < waiting.size() + 1; i++) {
      finishLatch.countDown();
    }
  }
  private boolean isFailed(){
    return failed;
  }
}
