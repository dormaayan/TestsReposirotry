/** 
 * @author Patricio Echague (patricioe@gmail.com)
 */
public class HFactoryTest {
  @Test public void testCreateClockResolution() throws Exception {
    try {
      HFactory.createClockResolution("ItDoesNotExist");
      fail();
    }
 catch (    RuntimeException e) {
    }
    assertTrue(HFactory.createClockResolution(ClockResolution.SECONDS) instanceof SecondsClockResolution);
    assertTrue(HFactory.createClockResolution(ClockResolution.MILLISECONDS) instanceof MillisecondsClockResolution);
    assertTrue(HFactory.createClockResolution(ClockResolution.MICROSECONDS) instanceof MicrosecondsClockResolution);
    assertTrue(HFactory.createClockResolution(ClockResolution.MICROSECONDS_SYNC) instanceof MicrosecondsSyncClockResolution);
  }
  @Test public void testCreateColumn(){
    long clock=HFactory.createClock();
    HColumn<String,Long> col=HFactory.createColumn("nameString",new Long("345"),clock);
    HColumn<String,Long> col2=HFactory.createColumn("nameString",new Long("345"),clock,StringSerializer.get(),LongSerializer.get());
    assertEquals(col.getName(),col2.getName());
    assertEquals(col.getValue(),col2.getValue());
    assertEquals(col.getClock(),col2.getClock());
  }
}
