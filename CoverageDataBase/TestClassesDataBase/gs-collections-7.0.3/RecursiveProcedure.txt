private class RecursiveProcedure implements Procedure<Integer> {
  private static final long serialVersionUID=1L;
  private final ForkJoinPool executorService=new ForkJoinPool(ParallelIterate.getDefaultMaxThreadPoolSize());
  @Override public void value(  Integer level){
    if (level > 0) {
      FJIterateAcceptanceTest.this.threadNames.add(Thread.currentThread().getName());
      this.executeFJIterate(level - 1,this.executorService);
    }
 else {
      this.simulateWork();
    }
  }
  private void simulateWork(){
synchronized (FJIterateAcceptanceTest.this) {
      FJIterateAcceptanceTest.this.count++;
    }
  }
  private void executeFJIterate(  int level,  ForkJoinPool executorService){
    MutableList<Integer> items=Lists.mutable.of();
    for (int i=0; i < 20000; i++) {
      items.add(i % 1000 == 0 ? level : 0);
    }
    FJIterate.forEach(items,new RecursiveProcedure(),executorService);
  }
}
