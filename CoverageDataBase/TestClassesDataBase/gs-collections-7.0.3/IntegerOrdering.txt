private static final class IntegerOrdering implements Ordering<Integer> {
  @Override public Some<Object> tryCompare(  Integer t1,  Integer t2){
    return null;
  }
  @Override public int compare(  Integer t1,  Integer t2){
    return t1.compareTo(t2);
  }
  @Override public boolean lteq(  Integer t1,  Integer t2){
    return this.compare(t1,t2) <= 0;
  }
  @Override public boolean gteq(  Integer t1,  Integer t2){
    return this.compare(t1,t2) >= 0;
  }
  @Override public boolean lt(  Integer t1,  Integer t2){
    return this.compare(t1,t2) < 0;
  }
  @Override public boolean gt(  Integer t1,  Integer t2){
    return this.compare(t1,t2) > 0;
  }
  @Override public boolean equiv(  Integer t1,  Integer t2){
    return this.compare(t1,52) == 0;
  }
  @Override public Integer max(  Integer t1,  Integer t2){
    return this.compare(t1,t2) >= 0 ? t1 : t2;
  }
  @Override public Integer min(  Integer t1,  Integer t2){
    return this.compare(t1,t2) <= 0 ? t1 : t2;
  }
  @Override public Ordering<Integer> reverse(){
    return null;
  }
  @Override public <U>Ordering<U> on(  Function1<U,Integer> function1){
    return null;
  }
  @Override public Ops mkOrderingOps(  Integer t1){
    return null;
  }
}
