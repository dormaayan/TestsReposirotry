/** 
 * JUnit test for  {@link SynchronizedBooleanIterable}s
 */
public class SynchronizedBooleanIterableTest extends AbstractBooleanIterableTestCase {
  @Override protected BooleanIterable classUnderTest(){
    return SynchronizedBooleanIterable.of(BooleanArrayList.newListWith(true,false,true));
  }
  @Override protected BooleanIterable newWith(  boolean... elements){
    return SynchronizedBooleanIterable.of(BooleanArrayList.newListWith(elements));
  }
  @Override protected BooleanIterable newMutableCollectionWith(  boolean... elements){
    return BooleanArrayList.newListWith(elements);
  }
  @Override protected RichIterable<Object> newObjectCollectionWith(  Object... elements){
    return FastList.newListWith(elements);
  }
  @Test(expected=IllegalArgumentException.class) public void null_iterable_throws(){
    SynchronizedBooleanIterable iterable=SynchronizedBooleanIterable.of(null);
  }
  @Override @Test public void booleanIterator(){
    BooleanIterable iterable=this.newWith(true,true,false,false);
    BooleanArrayList list=BooleanArrayList.newListWith(true,true,false,false);
    BooleanIterator iterator=iterable.booleanIterator();
    for (int i=0; i < 4; i++) {
      Assert.assertTrue(iterator.hasNext());
      Assert.assertTrue(list.remove(iterator.next()));
    }
    Verify.assertEmpty(list);
    Assert.assertFalse(iterator.hasNext());
    Verify.assertThrows(NoSuchElementException.class,(Runnable)iterator::next);
  }
  @Override @Test public void testEquals(){
  }
  @Override public void testHashCode(){
  }
  @Override public void newCollection(){
  }
}
