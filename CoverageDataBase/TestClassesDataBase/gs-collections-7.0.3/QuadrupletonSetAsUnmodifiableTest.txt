public class QuadrupletonSetAsUnmodifiableTest extends UnmodifiableMutableCollectionTestCase<String> {
  @Override protected MutableCollection<String> getCollection(){
    return Sets.fixedSize.of("1","2","3","4").asUnmodifiable();
  }
  @Override @Test public void collectBoolean(){
    Verify.assertSize(1,this.getCollection().collectBoolean(Boolean::parseBoolean));
  }
  @Override @Test public void collectByte(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectByte(Byte::parseByte));
  }
  @Override @Test public void collectChar(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectChar((CharFunction<String>)string -> string.charAt(0)));
  }
  @Override @Test public void collectDouble(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectDouble(Double::parseDouble));
  }
  @Override @Test public void collectFloat(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectFloat(Float::parseFloat));
  }
  @Override @Test public void collectInt(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectInt(Integer::parseInt));
  }
  @Override @Test public void collectLong(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectLong(Long::parseLong));
  }
  @Override @Test public void collectShort(){
    Verify.assertSize(this.getCollection().size(),this.getCollection().collectShort(Short::parseShort));
  }
}
