public class SynchronizedRichIterableTest extends AbstractRichIterableTestCase {
  @Override protected <T>RichIterable<T> newWith(  T... littleElements){
    return SynchronizedRichIterable.of(Lists.mutable.of(littleElements));
  }
  @Override @Test public void partition(){
    RichIterable<Integer> integers=this.newWith(-3,-2,-1,0,1,2,3,4,5,6,7,8,9);
    PartitionIterable<Integer> result=integers.partition(IntegerPredicates.isEven());
    Assert.assertEquals(iList(-2,0,2,4,6,8),result.getSelected());
    Assert.assertEquals(iList(-3,-1,1,3,5,7,9),result.getRejected());
  }
  @Override @Test public void partitionWith(){
    RichIterable<Integer> integers=this.newWith(-3,-2,-1,0,1,2,3,4,5,6,7,8,9);
    PartitionIterable<Integer> result=integers.partitionWith(Predicates2.in(),FastList.newListWith(-2,0,2,4,6,8));
    Assert.assertEquals(iList(-2,0,2,4,6,8),result.getSelected());
    Assert.assertEquals(iList(-3,-1,1,3,5,7,9),result.getRejected());
  }
  @Override public void equalsAndHashCode(){
    Assert.assertNotEquals(this.newWith(),this.newWith());
  }
  @Override @Test public void groupBy(){
    RichIterable<Integer> list=this.newWith(1,2,3,4,5,6,7);
    Multimap<Boolean,Integer> multimap=list.groupBy(object -> IntegerPredicates.isOdd().accept(object));
    Assert.assertEquals(FastList.newListWith(1,3,5,7),multimap.get(Boolean.TRUE));
    Assert.assertEquals(FastList.newListWith(2,4,6),multimap.get(Boolean.FALSE));
  }
  @Test public void groupByWithTarget(){
    RichIterable<Integer> list=this.newWith(1,2,3,4,5,6,7);
    MutableMultimap<Boolean,Integer> multimap=new FastListMultimap<>();
    list.groupBy(object -> IntegerPredicates.isOdd().accept(object),multimap);
    Assert.assertEquals(FastList.newListWith(1,3,5,7),multimap.get(Boolean.TRUE));
    Assert.assertEquals(FastList.newListWith(2,4,6),multimap.get(Boolean.FALSE));
  }
  @Test public void asLazy(){
    RichIterable<Integer> integers=this.newWith(-3,-2,-1,0,1,2,3,4,5,6,7,8,9).asLazy();
    Verify.assertInstanceOf(LazyIterableAdapter.class,integers);
    PartitionIterable<Integer> result=integers.partitionWith(Predicates2.in(),FastList.newListWith(-2,0,2,4,6,8));
    Assert.assertEquals(iList(-2,0,2,4,6,8),result.getSelected());
    Assert.assertEquals(iList(-3,-1,1,3,5,7,9),result.getRejected());
  }
  @Test(expected=IllegalArgumentException.class) public void nullCheck(){
    SynchronizedRichIterable.of(null,null);
  }
}
