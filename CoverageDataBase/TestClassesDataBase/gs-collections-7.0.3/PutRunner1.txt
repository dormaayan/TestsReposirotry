private static final class PutRunner1 implements Runnable {
  private final Map<Integer,Integer> map;
  private final Integer[] contents;
  private long total;
  private final AtomicInteger queuePosition;
  private PutRunner1(  Map<Integer,Integer> map,  Integer[] contents,  AtomicInteger queuePosition){
    this.map=map;
    this.contents=contents;
    this.queuePosition=queuePosition;
  }
  @Override public void run(){
    while (this.queuePosition.get() < this.contents.length) {
      int end=this.queuePosition.addAndGet(CHUNK_SIZE);
      int start=end - CHUNK_SIZE;
      if (start < this.contents.length) {
        if (end > this.contents.length) {
          end=this.contents.length;
        }
        for (int i=start; i < end; i++) {
          if (this.map.put(this.contents[i],this.contents[i]) != null) {
            this.total++;
          }
        }
      }
    }
    if (this.total < 0) {
      throw new AssertionError("never gets here, but it can't be optimized away");
    }
  }
}
