/** 
 * JUnit test for  {@link SynchronizedBooleanStack}.
 */
public class SynchronizedBooleanStackTest extends AbstractMutableBooleanStackTestCase {
  @Override protected SynchronizedBooleanStack classUnderTest(){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStackWith(true,false,true,false));
  }
  @Override protected SynchronizedBooleanStack newWith(  boolean... elements){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStackWith(elements));
  }
  @Override protected SynchronizedBooleanStack newMutableCollectionWith(  boolean... elements){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStackWith(elements));
  }
  @Override protected SynchronizedBooleanStack newWithTopToBottom(  boolean... elements){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStackFromTopToBottom(elements));
  }
  @Override protected SynchronizedBooleanStack newWithIterableTopToBottom(  BooleanIterable iterable){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStackFromTopToBottom(iterable));
  }
  @Override protected SynchronizedBooleanStack newWithIterable(  BooleanIterable iterable){
    return new SynchronizedBooleanStack(BooleanArrayStack.newStack(iterable));
  }
  @Override @Test public void asSynchronized(){
    MutableBooleanStack stack1=new SynchronizedBooleanStack(BooleanArrayStack.newStackWith(true,false,true),new Object());
    Assert.assertSame(stack1,stack1.asSynchronized());
    Assert.assertEquals(stack1,stack1.asSynchronized());
  }
}
