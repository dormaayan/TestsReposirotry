private static final class ImmutableMarketValueStatistics {
  private static final ImmutableMarketValueStatistics ZERO=new ImmutableMarketValueStatistics();
  private final long count;
  private final double sum;
  private final double min;
  private final double max;
  private ImmutableMarketValueStatistics(){
    this(0,0.0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY);
  }
  private ImmutableMarketValueStatistics(  long count,  double sum,  double min,  double max){
    this.count=count;
    this.sum=sum;
    this.min=min;
    this.max=max;
  }
  public ImmutableMarketValueStatistics add(  Position position){
    double marketValue=position.getMarketValue();
    return new ImmutableMarketValueStatistics(this.count + 1,this.sum + marketValue,Math.min(this.min,marketValue),Math.max(this.max,marketValue));
  }
  public static ImmutableMarketValueStatistics getZero(){
    return ZERO;
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }
    ImmutableMarketValueStatistics that=(ImmutableMarketValueStatistics)o;
    if (this.count != that.count) {
      return false;
    }
    if (Double.compare(that.max,this.max) != 0) {
      return false;
    }
    if (Double.compare(that.min,this.min) != 0) {
      return false;
    }
    return AggregateByTest.isCloseTo(that.sum,this.sum,0.0001);
  }
  @Override public int hashCode(){
    int result=(int)(this.count ^ (this.count >>> 32));
    long temp=Double.doubleToLongBits(this.sum);
    result=31 * result + (int)(temp ^ (temp >>> 32));
    temp=Double.doubleToLongBits(this.min);
    result=31 * result + (int)(temp ^ (temp >>> 32));
    temp=Double.doubleToLongBits(this.max);
    result=31 * result + (int)(temp ^ (temp >>> 32));
    return result;
  }
  @Override public String toString(){
    return "ImmutableMarketValueStatistics{" + "count=" + this.count + ", sum="+ this.sum+ ", min="+ this.min+ ", max="+ this.max+ '}';
  }
}
