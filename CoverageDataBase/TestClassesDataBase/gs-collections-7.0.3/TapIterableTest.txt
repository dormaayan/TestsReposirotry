public class TapIterableTest extends AbstractLazyIterableTestCase {
  @Override protected <T>LazyIterable<T> newWith(  T... elements){
    Appendable builder=new StringBuilder();
    Procedure<T> appendProcedure=Procedures.append(builder);
    return LazyIterate.tap(FastList.newListWith(elements),appendProcedure);
  }
  @Test public void forEach(){
    StringBuilder builder=new StringBuilder();
    Procedure<Integer> appendProcedure=Procedures.append(builder);
    InternalIterable<Integer> tap=new TapIterable<>(Interval.oneTo(5),appendProcedure);
    Procedure<Integer> appendDouble=each -> builder.append(each * 2);
    tap.forEach(appendDouble);
    Assert.assertEquals("12243648510",builder.toString());
  }
  @Test public void forEachWithIndex(){
    StringBuilder builder=new StringBuilder();
    Procedure<Integer> appendProcedure=Procedures.append(builder);
    InternalIterable<Integer> tap=new TapIterable<>(Interval.oneTo(5),appendProcedure);
    tap.forEachWithIndex((each,index) -> {
      builder.append(each * 2);
      builder.append(index);
    }
);
    Assert.assertEquals("1202413624835104",builder.toString());
  }
  @Override @Test public void iterator(){
    StringBuilder builder=new StringBuilder();
    Procedure<Integer> appendProcedure=Procedures.append(builder);
    InternalIterable<Integer> tap=new TapIterable<>(Interval.oneTo(5),appendProcedure);
    for (    Integer each : tap) {
      builder.append(each + 1);
    }
    Assert.assertEquals("1223344556",builder.toString());
  }
  @Test public void forEachWith(){
    StringBuilder builder=new StringBuilder();
    Procedure<Integer> appendProcedure=Procedures.append(builder);
    InternalIterable<Integer> tap=new TapIterable<>(Interval.oneTo(5),appendProcedure);
    tap.forEachWith((each,aBuilder) -> aBuilder.append(each - 1),builder);
    Assert.assertEquals("1021324354",builder.toString());
  }
}
