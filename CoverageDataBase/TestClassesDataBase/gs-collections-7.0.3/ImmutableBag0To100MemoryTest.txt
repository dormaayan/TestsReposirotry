public class ImmutableBag0To100MemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(ImmutableBag0To100MemoryTest.class);
  @Test public void memoryForScaledImmutableBags(){
    LOGGER.info("Comparing Items: GSC {}, Guava {}",ImmutableBag.class.getSimpleName(),ImmutableMultiset.class.getSimpleName());
    IntProcedure procedure=new IntProcedure(){
      public void value(      int size){
        ImmutableBag0To100MemoryTest.this.memoryForScaledBags(size);
      }
    }
;
    IntInterval.fromToBy(0,100,10).forEach(procedure);
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledBags(  int size){
    MemoryTestBench.on(ImmutableBag.class).printContainerMemoryUsage("ImmutableBag_0to100",size,new SizedImmutableGscBagFactory(size));
    MemoryTestBench.on(ImmutableMultiset.class).printContainerMemoryUsage("ImmutableBag_0to100",size,new SizedImmutableGuavaMultisetFactory(size));
  }
public static class SizedImmutableGscBagFactory implements Function0<ImmutableBag<Integer>> {
    private final int size;
    protected SizedImmutableGscBagFactory(    int size){
      this.size=size;
    }
    @Override public ImmutableBag<Integer> value(){
      HashBag<Integer> bag=HashBag.newBag();
      for (int i=0; i < this.size; i++) {
        bag.addOccurrences(Integer.valueOf(i),i + 1);
      }
      return bag.toImmutable();
    }
  }
public static class SizedImmutableGuavaMultisetFactory implements Function0<ImmutableMultiset<Integer>> {
    private final int size;
    protected SizedImmutableGuavaMultisetFactory(    int size){
      this.size=size;
    }
    @Override public ImmutableMultiset<Integer> value(){
      ImmutableMultiset.Builder<Integer> builder=ImmutableMultiset.builder();
      for (int i=0; i < this.size; i++) {
        builder.addCopies(Integer.valueOf(i),i + 1);
      }
      return builder.build();
    }
  }
}
