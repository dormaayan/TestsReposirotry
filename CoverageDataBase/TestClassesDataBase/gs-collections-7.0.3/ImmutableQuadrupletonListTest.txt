public class ImmutableQuadrupletonListTest extends AbstractImmutableListTestCase {
  @Override protected ImmutableList<Integer> classUnderTest(){
    return new ImmutableQuadrupletonList<>(1,2,3,4);
  }
  @Override @Test public void distinct(){
    super.distinct();
    ImmutableList<Integer> list=new ImmutableQuadrupletonList<>(2,1,1,2);
    ImmutableList<Integer> distinctList=list.distinct();
    Assert.assertFalse(distinctList.isEmpty());
    Verify.assertInstanceOf(ImmutableDoubletonList.class,distinctList);
    Assert.assertEquals(FastList.newListWith(2,1),distinctList);
  }
  @Test public void distinctWithHashingStrategies(){
    ImmutableList<String> list=new ImmutableQuadrupletonList<>("a","a","B","c");
    ImmutableList<String> distinctList=list.distinct(HashingStrategies.fromFunction(String::toLowerCase));
    Assert.assertFalse(distinctList.isEmpty());
    Assert.assertEquals(FastList.newListWith("a","B","c"),distinctList);
  }
}
