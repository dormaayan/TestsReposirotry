public class IntListPresizedMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(IntListPresizedMemoryTest.class);
  @Test public void memoryForScaledLists(){
    LOGGER.info("Comparing Items: Trove {}, GSC {}",TIntArrayList.class.getSimpleName(),IntArrayList.class.getSimpleName());
    for (int size=0; size < 1000001; size+=25000) {
      this.memoryForScaledLists(size);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledLists(  int size){
    MemoryTestBench.on(TIntArrayList.class).printContainerMemoryUsage("IntList",size,new TIntArrayListFactory(size));
    MemoryTestBench.on(IntArrayList.class).printContainerMemoryUsage("IntList",size,new IntArrayListFactory(size));
  }
public static class IntArrayListFactory implements Function0<IntArrayList> {
    private final int size;
    public IntArrayListFactory(    int size){
      this.size=size;
    }
    @Override public IntArrayList value(){
      final IntArrayList list=new IntArrayList(this.size);
      if (this.size > 0) {
        Interval.oneTo(this.size).forEach(new IntProcedure(){
          public void value(          int each){
            list.add(each);
          }
        }
);
      }
      return list;
    }
  }
public static class TIntArrayListFactory implements Function0<TIntArrayList> {
    private final int size;
    public TIntArrayListFactory(    int size){
      this.size=size;
    }
    @Override public TIntArrayList value(){
      final TIntArrayList list=new TIntArrayList(this.size);
      if (this.size > 0) {
        Interval.oneTo(this.size).forEach(new IntProcedure(){
          public void value(          int each){
            list.add(each);
          }
        }
);
      }
      return list;
    }
  }
}
