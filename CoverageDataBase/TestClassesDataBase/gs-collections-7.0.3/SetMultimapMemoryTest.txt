public class SetMultimapMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(SetMultimapMemoryTest.class);
  @Test public void memoryForScaledMultimaps(){
    LOGGER.info("Comparing Items: Guava {}, GSC {}",HashMultimap.class.getSimpleName(),UnifiedSetMultimap.class.getSimpleName());
    for (int size=0; size < 1000001; size+=25000) {
      this.memoryForScaledMultimaps(size);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledMultimaps(  int size){
    MemoryTestBench.on(HashMultimap.class).printContainerMemoryUsage("SetMultimap",size,new SizedGuavaMultimapFactory(size));
    MemoryTestBench.on(UnifiedSetMultimap.class).printContainerMemoryUsage("SetMultimap",size,new SizedGscMultimapFactory(size));
  }
public static class SizedGuavaMultimapFactory implements Function0<HashMultimap<Integer,Integer>> {
    private final ImmutableList<Integer> data;
    public SizedGuavaMultimapFactory(    int size){
      this.data=TestDataFactory.createImmutableList(size);
    }
    @Override public HashMultimap<Integer,Integer> value(){
      final HashMultimap<Integer,Integer> mm=HashMultimap.create();
      this.data.forEach(new Procedure<Integer>(){
        public void value(        Integer each){
          for (int j=0; j < 10; j++) {
            mm.put(each,Integer.valueOf(j));
          }
        }
      }
);
      return mm;
    }
  }
public static class SizedGscMultimapFactory implements Function0<UnifiedSetMultimap<Integer,Integer>> {
    private final ImmutableList<Integer> data;
    public SizedGscMultimapFactory(    int size){
      this.data=TestDataFactory.createImmutableList(size);
    }
    @Override public UnifiedSetMultimap<Integer,Integer> value(){
      final UnifiedSetMultimap<Integer,Integer> mm=UnifiedSetMultimap.newMultimap();
      this.data.forEach(new Procedure<Integer>(){
        public void value(        Integer each){
          for (int j=0; j < 10; j++) {
            mm.put(each,Integer.valueOf(j));
          }
        }
      }
);
      return mm;
    }
  }
}
