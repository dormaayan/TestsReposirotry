public abstract class ConcurrentHashMapTestCase extends MutableMapTestCase {
  protected ExecutorService executor;
  @Before public void setUp(){
    this.executor=Executors.newFixedThreadPool(20);
  }
  @After public void tearDown(){
    this.executor.shutdown();
  }
  @Override protected abstract <K,V>ConcurrentMutableMap<K,V> newMap();
  @Override @Test public void updateValue(){
    super.updateValue();
    ConcurrentMutableMap<Integer,Integer> map=this.newMap();
    ParallelIterate.forEach(Interval.oneTo(100),each -> map.updateValue(each % 10,() -> 0,integer -> integer + 1),1,this.executor);
    Assert.assertEquals(Interval.zeroTo(9).toSet(),map.keySet());
    Assert.assertEquals(FastList.newList(Collections.nCopies(10,10)),FastList.newList(map.values()));
  }
  @Override @Test public void updateValue_collisions(){
    super.updateValue_collisions();
    ConcurrentMutableMap<Integer,Integer> map=this.newMap();
    MutableList<Integer> list=Interval.oneTo(100).toList().shuffleThis();
    ParallelIterate.forEach(list,each -> map.updateValue(each % 50,() -> 0,integer -> integer + 1),1,this.executor);
    Assert.assertEquals(Interval.zeroTo(49).toSet(),map.keySet());
    Assert.assertEquals(HashBag.newBag(map.values()).toStringOfItemToCount(),FastList.newList(Collections.nCopies(50,2)),FastList.newList(map.values()));
  }
  @Override @Test public void updateValueWith(){
    super.updateValueWith();
    ConcurrentMutableMap<Integer,Integer> map=this.newMap();
    ParallelIterate.forEach(Interval.oneTo(100),each -> map.updateValueWith(each % 10,() -> 0,(integer,parameter) -> {
      Assert.assertEquals("test",parameter);
      return integer + 1;
    }
,"test"),1,this.executor);
    Assert.assertEquals(Interval.zeroTo(9).toSet(),map.keySet());
    Assert.assertEquals(FastList.newList(Collections.nCopies(10,10)),FastList.newList(map.values()));
  }
  @Override @Test public void updateValueWith_collisions(){
    super.updateValueWith_collisions();
    ConcurrentMutableMap<Integer,Integer> map=this.newMap();
    MutableList<Integer> list=Interval.oneTo(200).toList().shuffleThis();
    ParallelIterate.forEach(list,each -> map.updateValueWith(each % 100,() -> 0,(integer,parameter) -> {
      Assert.assertEquals("test",parameter);
      return integer + 1;
    }
,"test"),1,this.executor);
    Assert.assertEquals(Interval.zeroTo(99).toSet(),map.keySet());
    Assert.assertEquals(HashBag.newBag(map.values()).toStringOfItemToCount(),FastList.newList(Collections.nCopies(100,2)),FastList.newList(map.values()));
  }
}
