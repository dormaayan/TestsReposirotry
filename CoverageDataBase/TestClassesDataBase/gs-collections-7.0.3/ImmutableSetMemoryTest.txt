public class ImmutableSetMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(ImmutableSetMemoryTest.class);
  @Test public void memoryForScaledSets(){
    LOGGER.info("Comparing Items: Scala {}, GSC {}, Guava {}",HashSet.class.getSimpleName(),ImmutableSet.class.getSimpleName(),com.google.common.collect.ImmutableSet.class.getSimpleName());
    for (int size=0; size < 1000001; size+=25000) {
      this.memoryForScaledSets(size);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  private void memoryForScaledSets(  int size){
    MemoryTestBench.on(HashSet.class).printContainerMemoryUsage("Set",size,new ScalaImmutableSetFactory(size));
    MemoryTestBench.on(ImmutableSet.class).printContainerMemoryUsage("Set",size,new ImmutableSetFactory(size));
    MemoryTestBench.on(com.google.common.collect.ImmutableSet.class).printContainerMemoryUsage("Set",size,new GuavaImmutableSetFactory(size));
  }
private static final class ImmutableSetFactory implements Function0<ImmutableSet<Integer>> {
    private final ImmutableList<Integer> data;
    private ImmutableSetFactory(    int size){
      this.data=TestDataFactory.createRandomImmutableList(size);
    }
    @Override public ImmutableSet<Integer> value(){
      final MutableSet<Integer> integers=new UnifiedSet<>();
      this.data.forEach(new Procedure<Integer>(){
        @Override public void value(        Integer each){
          integers.add(each);
        }
      }
);
      return integers.toImmutable();
    }
  }
private static final class ScalaImmutableSetFactory implements Function0<HashSet<Integer>> {
    private final ImmutableList<Integer> data;
    private ScalaImmutableSetFactory(    int size){
      this.data=TestDataFactory.createRandomImmutableList(size);
    }
    @Override public HashSet<Integer> value(){
      final HashSet[] set={new HashSet()};
      this.data.forEach(new Procedure<Integer>(){
        public void value(        Integer each){
          set[0]=set[0].$plus(each);
        }
      }
);
      return set[0];
    }
  }
private static final class GuavaImmutableSetFactory implements Function0<com.google.common.collect.ImmutableSet<Integer>> {
    private final ImmutableList<Integer> data;
    private GuavaImmutableSetFactory(    int size){
      this.data=TestDataFactory.createRandomImmutableList(size);
    }
    @Override public com.google.common.collect.ImmutableSet<Integer> value(){
      final com.google.common.collect.ImmutableSet.Builder<Integer> builder=com.google.common.collect.ImmutableSet.builder();
      this.data.forEach(new Procedure<Integer>(){
        @Override public void value(        Integer each){
          builder.add(each);
        }
      }
);
      return builder.build();
    }
  }
}
