public class ParallelCollectSetIterableTest extends ParallelIterableTestCase {
  @Override protected ParallelIterable<Integer> classUnderTest(){
    return this.newWith(11,21,22,31,32,33,41,42,43,44);
  }
  @Override protected ParallelIterable<Integer> newWith(  Integer... littleElements){
    return UnifiedSet.newSetWith(littleElements).asParallel(this.executorService,this.batchSize).collect(i -> i / 10);
  }
  @Override protected MutableBag<Integer> getExpected(){
    return HashBag.newBagWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected MutableBag<Integer> getExpectedWith(  Integer... littleElements){
    return HashBag.newBagWith(littleElements).collect(i -> i / 10);
  }
  @Override protected boolean isOrdered(){
    return false;
  }
  @Override protected boolean isUnique(){
    return false;
  }
  @Test @Override public void groupBy(){
    Function<Integer,Boolean> isOddFunction=object -> IntegerPredicates.isOdd().accept(object);
    Assert.assertEquals(this.getExpected().toBag().groupBy(isOddFunction),this.classUnderTest().groupBy(isOddFunction));
  }
  @Test @Override public void groupByEach(){
    Assert.assertEquals(this.getExpected().toBag().groupByEach(new NegativeIntervalFunction()),this.classUnderTest().groupByEach(new NegativeIntervalFunction()));
  }
}
