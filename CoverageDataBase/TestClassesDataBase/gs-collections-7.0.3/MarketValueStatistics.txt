private static final class MarketValueStatistics extends DoubleSummaryStatistics {
  public void accept(  Position position){
    this.accept(position.getMarketValue());
  }
  public synchronized void syncAccept(  Position position){
    this.accept(position);
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }
    MarketValueStatistics that=(MarketValueStatistics)o;
    if (this.getCount() != that.getCount()) {
      return false;
    }
    if (Double.compare(that.getMax(),this.getMax()) != 0) {
      return false;
    }
    if (Double.compare(that.getMin(),this.getMin()) != 0) {
      return false;
    }
    return AggregateByTest.isCloseTo(that.getSum(),this.getSum(),0.01);
  }
  @Override public int hashCode(){
    int result=(int)(this.getCount() ^ (this.getCount() >>> 32));
    long temp=Double.doubleToLongBits(this.getSum());
    result=31 * result + (int)(temp ^ (temp >>> 32));
    temp=Double.doubleToLongBits(this.getMin());
    result=31 * result + (int)(temp ^ (temp >>> 32));
    temp=Double.doubleToLongBits(this.getMax());
    result=31 * result + (int)(temp ^ (temp >>> 32));
    return result;
  }
}
