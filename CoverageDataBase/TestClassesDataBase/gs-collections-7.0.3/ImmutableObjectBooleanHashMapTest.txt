/** 
 * JUnit test for  {@link ImmutableObjectBooleanHashMap}.
 */
public class ImmutableObjectBooleanHashMapTest extends AbstractImmutableObjectBooleanMapTestCase {
  @Override protected ImmutableObjectBooleanMap<String> classUnderTest(){
    return ObjectBooleanHashMap.newWithKeysValues("0",true,"1",true,"2",false).toImmutable();
  }
  @Test public void newWithKeyValue(){
    ImmutableObjectBooleanMap<String> map1=this.classUnderTest();
    ImmutableObjectBooleanMap<String> expected=ObjectBooleanHashMap.newWithKeysValues("0",true,"1",true,"2",false,"3",false).toImmutable();
    Assert.assertEquals(expected,map1.newWithKeyValue("3",false));
    Assert.assertNotSame(map1,map1.newWithKeyValue("3",false));
    Assert.assertEquals(this.classUnderTest(),map1);
  }
  @Test public void newWithoutKeyValue(){
    ImmutableObjectBooleanMap<String> map1=this.classUnderTest();
    ImmutableObjectBooleanMap<String> expected=this.newWithKeysValues("0",true,"1",true);
    Assert.assertEquals(expected,map1.newWithoutKey("2"));
    Assert.assertNotSame(map1,map1.newWithoutKey("2"));
    Assert.assertEquals(this.classUnderTest(),map1);
  }
  @Test public void newWithoutAllKeys(){
    ImmutableObjectBooleanMap<String> map1=this.classUnderTest();
    ImmutableObjectBooleanMap<String> expected=this.newWithKeysValues("1",true);
    Assert.assertEquals(expected,map1.newWithoutAllKeys(FastList.newListWith("0","2")));
    Assert.assertNotSame(map1,map1.newWithoutAllKeys(FastList.newListWith("0","2")));
    Assert.assertEquals(this.classUnderTest(),map1);
  }
}
