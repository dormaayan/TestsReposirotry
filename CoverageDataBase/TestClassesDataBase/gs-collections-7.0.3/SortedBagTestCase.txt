public interface SortedBagTestCase extends SortedIterableTestCase, BagTestCase, TransformsToListTrait {
  @Override <T>SortedBag<T> newWith(  T... elements);
  @Override default <T>SortedBag<T> getExpectedFiltered(  T... elements){
    return new TreeBag<>(Comparators.reverseNaturalOrder(),Lists.immutable.with(elements));
  }
  @Override default <T>MutableSortedBag<T> newMutableForFilter(  T... elements){
    return new TreeBag<>(Comparators.reverseNaturalOrder(),Lists.immutable.with(elements));
  }
  @Override @Test default void RichIterable_selectInstancesOf(){
    SortedBag<A> numbers=this.<A>newWith(new C(4.0),new C(4.0),new C(4.0),new C(4.0),new B(3),new B(3),new B(3),new C(2.0),new C(2.0),new B(1));
    assertEquals(this.<B>getExpectedFiltered(new B(3),new B(3),new B(3),new B(1)),numbers.selectInstancesOf(B.class));
    assertEquals(this.getExpectedFiltered(new C(4.0),new C(4.0),new C(4.0),new C(4.0),new B(3),new B(3),new B(3),new C(2.0),new C(2.0),new B(1)),numbers.selectInstancesOf(A.class));
  }
  @Override @Test default void Bag_sizeDistinct(){
    SortedBag<Integer> bag=this.newWith(3,3,3,2,2,1);
    assertEquals(3,bag.sizeDistinct());
  }
  @Override @Test default void Bag_occurrencesOf(){
    SortedBag<Integer> bag=this.newWith(3,3,3,2,2,1);
    assertEquals(0,bag.occurrencesOf(0));
    assertEquals(1,bag.occurrencesOf(1));
    assertEquals(2,bag.occurrencesOf(2));
    assertEquals(3,bag.occurrencesOf(3));
  }
  @Override @Test default void Bag_toStringOfItemToCount(){
    assertEquals("{}",this.newWith().toStringOfItemToCount());
    assertEquals("{3=3, 2=2, 1=1}",this.newWith(3,3,3,2,2,1).toStringOfItemToCount());
  }
  @Test default void SortedBag_forEachWith(){
    SortedBag<Integer> bag=this.newWith(3,3,3,2,2,1);
    MutableList<Integer> result=Lists.mutable.with();
    bag.forEachWith((argument1,argument2) -> {
      result.add(argument1);
      result.add(argument2);
    }
,0);
    assertEquals(Lists.immutable.with(3,0,3,0,3,0,2,0,2,0,1,0),result);
  }
}
