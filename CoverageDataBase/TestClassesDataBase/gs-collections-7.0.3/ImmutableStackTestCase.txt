public interface ImmutableStackTestCase extends StackIterableTestCase {
  @Override <T>ImmutableStack<T> newWith(  T... elements);
  @Override @Test default void Iterable_remove(){
    ImmutableStack<Integer> stack=this.newWith(3,3,3,2,2,1);
    Iterator<Integer> iterator=stack.iterator();
    iterator.next();
    assertThrows(UnsupportedOperationException.class,iterator::remove);
  }
  @Test default void MutableStack_pop(){
    ImmutableStack<Integer> immutableStack=this.newWith(5,1,4,2,3);
    ImmutableStack<Integer> poppedStack=immutableStack.pop();
    assertEquals(Stacks.immutable.withReversed(1,4,2,3),poppedStack);
    assertEquals(Stacks.immutable.withReversed(5,1,4,2,3),immutableStack);
  }
  @Test default void ImmutableStack_pop_throws(){
    ImmutableStack<Integer> immutableStack=this.newWith(5,1,4,2,3);
    ImmutableStack<Integer> emptyStack=immutableStack.pop().pop().pop().pop().pop();
    assertEquals(Stacks.immutable.with(),emptyStack);
    assertThrows(EmptyStackException.class,(Runnable)emptyStack::pop);
  }
}
