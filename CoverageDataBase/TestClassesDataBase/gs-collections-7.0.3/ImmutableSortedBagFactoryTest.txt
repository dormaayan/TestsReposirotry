public class ImmutableSortedBagFactoryTest {
  @Test public void empty(){
    Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.empty());
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.empty());
    Assert.assertEquals(TreeBag.newBag(Comparators.reverseNaturalOrder()),SortedBags.immutable.empty(Comparators.reverseNaturalOrder()));
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.empty(Comparators.reverseNaturalOrder()));
  }
  @Test public void ofElements(){
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(1,1,2)),SortedBags.immutable.of(1,1,2));
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(Comparators.reverseNaturalOrder(),1,1,2)),SortedBags.immutable.of(Comparators.reverseNaturalOrder(),1,1,2));
    Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of());
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of());
    Comparator<Integer> nullComparator=null;
    Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of(nullComparator));
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(nullComparator));
    Assert.assertEquals(TreeBag.newBag(Comparators.reverseNaturalOrder()),SortedBags.immutable.of(Comparator.reverseOrder()));
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(Comparator.reverseOrder()));
    Assert.assertEquals(TreeBag.newBag(Comparators.reverseNaturalOrder()),SortedBags.immutable.of(Comparator.reverseOrder(),new Integer[]{}));
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(Comparator.reverseOrder(),new Integer[]{}));
    Assert.assertEquals(TreeBag.newBag(),SortedBags.immutable.of(new Integer[]{}));
    Verify.assertInstanceOf(ImmutableSortedBag.class,SortedBags.immutable.of(new Integer[]{}));
  }
  @Test public void withElements(){
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.with(1,1,2)),SortedBags.immutable.with(1,1,2));
    Verify.assertThrows(IllegalArgumentException.class,() -> {
      new ImmutableSortedBagImpl<>(SortedBags.mutable.with(Comparators.reverseNaturalOrder(),FastList.newList().toArray()));
    }
);
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.with(Comparators.reverseNaturalOrder(),1,1,2)),SortedBags.immutable.with(Comparators.reverseNaturalOrder(),1,1,2));
  }
  @Test public void ofAll(){
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(1,1,2)),SortedBags.immutable.ofAll(new ImmutableSortedBagImpl<>(TreeBag.newBagWith(1,1,2))));
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(1,1,2)),SortedBags.immutable.ofAll(FastList.newListWith(1,1,2)));
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.mutable.of(Comparators.reverseNaturalOrder(),1,1,2)),SortedBags.immutable.ofAll(Comparators.reverseNaturalOrder(),FastList.newListWith(1,1,2)));
  }
  @Test public void ofSortedBag(){
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.immutable.of(1)),SortedBags.immutable.ofSortedBag(new ImmutableSortedBagImpl<>(TreeBag.newBagWith(1))));
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.immutable.of(1)),SortedBags.immutable.ofSortedBag(TreeBag.newBagWith(1)));
    Assert.assertEquals(SortedBags.immutable.of(Comparators.reverseNaturalOrder()),SortedBags.immutable.ofSortedBag(TreeBag.newBag(Comparators.reverseNaturalOrder())));
  }
  @Test public void withSortedBag(){
    Assert.assertEquals(new ImmutableSortedBagImpl<>(SortedBags.immutable.of(1)),SortedBags.immutable.ofSortedBag(new ImmutableSortedBagImpl<>(TreeBag.newBagWith(1))));
  }
}
