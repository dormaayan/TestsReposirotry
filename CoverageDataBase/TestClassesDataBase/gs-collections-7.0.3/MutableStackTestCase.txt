public interface MutableStackTestCase extends StackIterableTestCase {
  @Override <T>MutableStack<T> newWith(  T... elements);
  @Override @Test default void Iterable_remove(){
    MutableStack<Integer> stack=this.newWith(3,3,3,2,2,1);
    Iterator<Integer> iterator=stack.iterator();
    iterator.next();
    assertThrows(UnsupportedOperationException.class,iterator::remove);
  }
  @Test default void MutableStack_pop(){
    MutableStack<Integer> mutableStack=this.newWith(5,1,4,2,3);
    assertEquals(Integer.valueOf(5),mutableStack.pop());
    assertEquals(Stacks.immutable.withReversed(1,4,2,3),mutableStack);
  }
  @Test default void MutableStack_pop_throws(){
    MutableStack<Integer> mutableStack=this.newWith(5,1,4,2,3);
    assertEquals(Integer.valueOf(5),mutableStack.pop());
    assertEquals(Integer.valueOf(1),mutableStack.pop());
    assertEquals(Integer.valueOf(4),mutableStack.pop());
    assertEquals(Integer.valueOf(2),mutableStack.pop());
    assertEquals(Integer.valueOf(3),mutableStack.pop());
    assertThrows(EmptyStackException.class,(Runnable)mutableStack::pop);
  }
}
