public interface OrderedIterableTestCase extends RichIterableTestCase {
  @Test default void OrderedIterable_getFirst(){
    assertEquals(Integer.valueOf(3),this.newWith(3,3,3,2,2,1).getFirst());
  }
  @Test default void OrderedIterable_getLast(){
    assertEquals(Integer.valueOf(1),this.newWith(3,3,3,2,2,1).getLast());
  }
  @Test default void OrderedIterable_next(){
    Iterator<Integer> iterator=this.newWith(3,2,1).iterator();
    assertEquals(Integer.valueOf(3),iterator.next());
    assertEquals(Integer.valueOf(2),iterator.next());
    assertEquals(Integer.valueOf(1),iterator.next());
  }
  @Test default void OrderedIterable_min(){
    Holder<Integer> first=new Holder<>(-1);
    Holder<Integer> second=new Holder<>(-1);
    assertSame(first,this.newWith(new Holder<>(2),first,new Holder<>(0),second).min());
  }
  @Test default void OrderedIterable_max(){
    Holder<Integer> first=new Holder<>(1);
    Holder<Integer> second=new Holder<>(1);
    assertSame(first,this.newWith(new Holder<>(-2),first,new Holder<>(0),second).max());
  }
  @Test default void OrderedIterable_min_comparator(){
    Holder<Integer> first=new Holder<>(1);
    Holder<Integer> second=new Holder<>(1);
    assertSame(first,this.newWith(new Holder<>(-2),first,new Holder<>(0),second).min(Comparators.reverseNaturalOrder()));
  }
  @Test default void OrderedIterable_max_comparator(){
    Holder<Integer> first=new Holder<>(-1);
    Holder<Integer> second=new Holder<>(-1);
    assertSame(first,this.newWith(new Holder<>(2),first,new Holder<>(0),second).max(Comparators.reverseNaturalOrder()));
  }
  @Test default void OrderedIterable_zipWithIndex(){
    RichIterable<Integer> iterable=this.newWith(4,4,4,4,3,3,3,2,2,1);
    Assert.assertEquals(Lists.immutable.with(Tuples.pair(4,0),Tuples.pair(4,1),Tuples.pair(4,2),Tuples.pair(4,3),Tuples.pair(3,4),Tuples.pair(3,5),Tuples.pair(3,6),Tuples.pair(2,7),Tuples.pair(2,8),Tuples.pair(1,9)),iterable.zipWithIndex().toList());
  }
  @Test default void OrderedIterable_zipWithIndex_target(){
    RichIterable<Integer> iterable=this.newWith(4,4,4,4,3,3,3,2,2,1);
    Assert.assertEquals(Lists.immutable.with(Tuples.pair(4,0),Tuples.pair(4,1),Tuples.pair(4,2),Tuples.pair(4,3),Tuples.pair(3,4),Tuples.pair(3,5),Tuples.pair(3,6),Tuples.pair(2,7),Tuples.pair(2,8),Tuples.pair(1,9)),iterable.zipWithIndex(Lists.mutable.empty()));
  }
}
