public interface UnsortedBiMapTestCase extends BiMapTestCase, TransformsToBagTrait, UnsortedSetLikeTestTrait {
  @Override <T>BiMap<Object,T> newWith(  T... elements);
  @Test @Override default void Iterable_remove(){
    BiMap<Object,Integer> iterable=this.newWith(3,2,1);
    Iterator<Integer> iterator=iterable.iterator();
    iterator.next();
    iterator.remove();
    assertEquals(2,iterable.size());
    MutableSet<Integer> valuesSet=iterable.inverse().keysView().toSet();
    assertThat(valuesSet,isOneOf(Sets.immutable.with(3,2),Sets.immutable.with(3,1),Sets.immutable.with(2,1)));
  }
  @Override @Test default void RichIterable_toString(){
    String string=this.newWith(3,2,1).toString();
    Pattern pattern=Pattern.compile("^\\{\\d\\.\\d+(E-\\d)?=(\\d)," + " \\d\\.\\d+(E-\\d)?=(\\d)," + " \\d\\.\\d+(E-\\d)?=(\\d)\\}$");
    Matcher matcher=pattern.matcher(string);
    Assert.assertTrue(string,matcher.matches());
    assertEquals(Bags.immutable.with("1","2","3"),Bags.immutable.with(matcher.group(2),matcher.group(4),matcher.group(6)));
  }
}
