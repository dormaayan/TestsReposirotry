public class ImmutableHashBiMap2Test extends MapIterableTestCase {
  @Override protected <K,V>ImmutableBiMap<K,V> newMap(){
    return BiMaps.immutable.empty();
  }
  @Override protected <K,V>ImmutableBiMap<K,V> newMapWithKeyValue(  K key1,  V value1){
    return BiMaps.immutable.with(key1,value1);
  }
  @Override protected <K,V>ImmutableBiMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2){
    return BiMaps.immutable.with(key1,value1,key2,value2);
  }
  @Override protected <K,V>ImmutableBiMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2,  K key3,  V value3){
    return BiMaps.immutable.with(key1,value1,key2,value2,key3,value3);
  }
  @Override protected <K,V>ImmutableBiMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2,  K key3,  V value3,  K key4,  V value4){
    return BiMaps.immutable.with(key1,value1,key2,value2,key3,value3,key4,value4);
  }
  @Override @Test public void flipUniqueValues(){
    ImmutableBiMap<Integer,String> map=this.newMapWithKeysValues(1,"1",2,"2",3,"3");
    ImmutableBiMap<String,Integer> result=map.flipUniqueValues();
    ImmutableBiMap<String,Integer> expectedMap=this.newMapWithKeysValues("1",1,"2",2,"3",3);
    Assert.assertEquals(expectedMap,result);
  }
  @Override @Test public void flip(){
    ImmutableBiMap<Integer,String> map=this.newMapWithKeysValues(1,"1",2,"2",3,"3");
    ImmutableSetMultimap<String,Integer> result=map.flip();
    UnifiedSetMultimap<String,Integer> expected=UnifiedSetMultimap.<String,Integer>newMultimap(Tuples.pair("1",1),Tuples.pair("2",2),Tuples.pair("3",3));
    Assert.assertEquals(expected,result);
  }
  @Override @Test public void nullCollisionWithCastInEquals(){
    ImmutableBiMap<IntegerWithCast,String> map=this.newMapWithKeysValues(new IntegerWithCast(0),"Test 2",null,"Test 1");
    Assert.assertEquals(this.newMapWithKeysValues(new IntegerWithCast(0),"Test 2",null,"Test 1"),map);
    Assert.assertEquals("Test 2",map.get(new IntegerWithCast(0)));
    Assert.assertEquals("Test 1",map.get(null));
  }
}
