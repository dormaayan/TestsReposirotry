@State(Scope.Thread) @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.SECONDS) public class SelectTest extends AbstractJMHTestRunner {
  private static final int SIZE=1_000_000;
  private static final int BATCH_SIZE=10_000;
  private final ExecutorService service=ParallelIterate.newPooledExecutor(SelectTest.class.getSimpleName(),true);
  private final List<Integer> integersJDK=new ArrayList<>(Interval.oneTo(SIZE));
  private final FastList<Integer> integersGSC=FastList.newList(Interval.oneTo(SIZE));
  @Benchmark public void serial_lazy_jdk(){
    List<Integer> evens=this.integersJDK.stream().filter(each -> each % 2 == 0).collect(Collectors.toList());
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void serial_lazy_streams_gsc(){
    List<Integer> evens=this.integersGSC.stream().filter(each -> each % 2 == 0).collect(Collectors.toList());
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void parallel_lazy_jdk(){
    List<Integer> evens=this.integersJDK.parallelStream().filter(each -> each % 2 == 0).collect(Collectors.toList());
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void parallel_lazy_streams_gsc(){
    List<Integer> evens=this.integersGSC.parallelStream().filter(each -> each % 2 == 0).collect(Collectors.toList());
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void serial_eager_gsc(){
    MutableList<Integer> evens=this.integersGSC.select(each -> each % 2 == 0);
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void parallel_eager_gsc(){
    Collection<Integer> evens=ParallelIterate.select(this.integersGSC,each -> each % 2 == 0);
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void serial_lazy_gsc(){
    MutableList<Integer> evens=this.integersGSC.asLazy().select(each -> each % 2 == 0).toList();
    Assert.assertEquals(SIZE / 2,evens.size());
  }
  @Benchmark public void parallel_lazy_gsc(){
    ParallelListIterable<Integer> parallelListIterable=this.integersGSC.asParallel(this.service,BATCH_SIZE);
    MutableList<Integer> evens=parallelListIterable.select(each -> each % 2 == 0).toList();
    Assert.assertEquals(SIZE / 2,evens.size());
  }
}
