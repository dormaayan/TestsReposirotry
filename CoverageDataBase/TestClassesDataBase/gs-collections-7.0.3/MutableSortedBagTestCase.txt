public interface MutableSortedBagTestCase extends SortedBagTestCase, MutableCollectionTestCase, MutableOrderedIterableTestCase {
  @Override <T>MutableSortedBag<T> newWith(  T... elements);
  @Test default void MutableBag_addOccurrences(){
    MutableSortedBag<Integer> mutableSortedBag=this.newWith(3,3,3,2,2,1);
    mutableSortedBag.addOccurrences(4,4);
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),4,4,4,4,3,3,3,2,2,1),mutableSortedBag);
    mutableSortedBag.addOccurrences(1,2);
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),4,4,4,4,3,3,3,2,2,1,1,1),mutableSortedBag);
    mutableSortedBag.addOccurrences(1,0);
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),4,4,4,4,3,3,3,2,2,1,1,1),mutableSortedBag);
  }
  @Test(expected=IllegalArgumentException.class) default void MutableBag_addOccurrences_throws(){
    MutableSortedBag<Integer> mutableSortedBag=this.newWith(3,3,3,2,2,1);
    mutableSortedBag.addOccurrences(4,-1);
  }
  @Test default void MutableBag_removeOccurrences(){
    MutableSortedBag<Integer> mutableBag=this.newWith(3,3,3,2,2,1);
    assertFalse(mutableBag.removeOccurrences(4,4));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3,3,3,2,2,1),mutableBag);
    assertFalse(mutableBag.removeOccurrences(3,0));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3,3,3,2,2,1),mutableBag);
    assertTrue(mutableBag.removeOccurrences(1,2));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3,3,3,2,2),mutableBag);
    assertTrue(mutableBag.removeOccurrences(3,2));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3,2,2),mutableBag);
    assertTrue(mutableBag.removeOccurrences(2,1));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3,2),mutableBag);
    assertTrue(mutableBag.removeOccurrences(2,2));
    assertEquals(TreeBag.newBagWith(Comparators.reverseNaturalOrder(),3),mutableBag);
  }
  @Test(expected=IllegalArgumentException.class) default void MutableBag_removeOccurrences_throws(){
    MutableSortedBag<Integer> mutableBag=this.newWith(3,3,3,2,2,1);
    assertFalse(mutableBag.removeOccurrences(4,-1));
  }
}
