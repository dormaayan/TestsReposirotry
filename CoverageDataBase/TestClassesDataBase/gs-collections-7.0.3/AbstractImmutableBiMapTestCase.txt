public abstract class AbstractImmutableBiMapTestCase extends ImmutableMapIterableTestCase {
  @Override protected abstract ImmutableBiMap<Integer,String> classUnderTest();
  protected abstract ImmutableBiMap<Integer,String> newEmpty();
  protected abstract ImmutableBiMap<Integer,String> newWithMap();
  protected abstract ImmutableBiMap<Integer,String> newWithHashBiMap();
  protected abstract ImmutableBiMap<Integer,String> newWithImmutableMap();
  @Override protected int size(){
    return 4;
  }
  @Override @Test public void testToString(){
    Assert.assertEquals("{1=1, 2=2, 3=3, 4=4}",this.classUnderTest().toString());
  }
  @Test public void testNewEmpty(){
    Assert.assertTrue(this.newEmpty().isEmpty());
  }
  @Test public void testNewWithMap(){
    Assert.assertEquals(this.classUnderTest(),this.newWithMap());
  }
  @Test public void testNewWithHashBiMap(){
    Assert.assertEquals(this.classUnderTest(),this.newWithHashBiMap());
  }
  @Test public void testNewWithImmutableMap(){
    Assert.assertEquals(this.classUnderTest(),this.newWithImmutableMap());
  }
  @Test public void containsKey(){
    Assert.assertTrue(this.classUnderTest().containsKey(1));
    Assert.assertFalse(this.classUnderTest().containsKey(5));
  }
  @Test public void toImmutable(){
    Assert.assertEquals(this.classUnderTest(),this.classUnderTest().toImmutable());
  }
}
