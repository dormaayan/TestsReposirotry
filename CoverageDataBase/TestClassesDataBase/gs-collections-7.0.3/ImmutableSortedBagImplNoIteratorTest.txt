public class ImmutableSortedBagImplNoIteratorTest extends ImmutableSortedBagImplTest {
  @Override protected ImmutableSortedBag<Integer> classUnderTest(){
    return new ImmutableSortedBagImplNoIterator<>(SortedBags.immutable.with(1,1,1,2));
  }
  @Override protected <T>MutableCollection<T> newMutable(){
    return SortedBags.mutable.empty();
  }
  @Override protected ImmutableSortedBag<Integer> classUnderTest(  Comparator<? super Integer> comparator){
    return new ImmutableSortedBagImplNoIterator<>(SortedBags.immutable.with(comparator,1,1,1,2));
  }
  @Override protected <T>ImmutableSortedBag<T> newWith(  T... elements){
    ImmutableSortedBag<T> bag=SortedBags.immutable.with(elements);
    if (bag.isEmpty()) {
      return new ImmutableEmptySortedBagImplNoIterator<>(bag.comparator());
    }
    return new ImmutableSortedBagImplNoIterator<>(bag);
  }
  @Override protected <T>ImmutableSortedBag<T> newWith(  Comparator<? super T> comparator,  T... elements){
    return new ImmutableSortedBagImplNoIterator<>(SortedBags.immutable.with(comparator,elements));
  }
  @Override @Test public void forLoop(){
  }
  @Override public void iteratorRemove(){
  }
private static final class ImmutableSortedBagImplNoIterator<T> extends ImmutableSortedBagImpl<T> {
    ImmutableSortedBagImplNoIterator(    SortedBag<T> sortedBag){
      super(sortedBag);
    }
    @Override public Iterator<T> iterator(){
      throw new AssertionError("No methods should delegate to iterator");
    }
  }
private static final class ImmutableEmptySortedBagImplNoIterator<T> extends ImmutableEmptySortedBag<T> {
    ImmutableEmptySortedBagImplNoIterator(    Comparator<? super T> comparator){
      super(comparator);
    }
    @Override public Iterator<T> iterator(){
      throw new AssertionError("No methods should delegate to iterator");
    }
  }
}
