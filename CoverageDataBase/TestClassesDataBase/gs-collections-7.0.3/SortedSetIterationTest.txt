@State(Scope.Thread) @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.SECONDS) public class SortedSetIterationTest {
  private static final int SIZE=1_000_000;
  private static final int BATCH_SIZE=10_000;
  private final MutableSortedSet<Integer> gscMutable=SortedSets.mutable.withAll(Interval.zeroTo(SIZE));
  private final ImmutableSortedSet<Integer> gscImmutable=SortedSets.immutable.withAll(Interval.zeroTo(SIZE));
  private ExecutorService executorService;
  @Before @Setup public void setUp(){
    this.executorService=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
  }
  @After @TearDown public void tearDown() throws InterruptedException {
    this.executorService.shutdownNow();
    this.executorService.awaitTermination(1L,TimeUnit.SECONDS);
  }
  @Benchmark public void serial_mutable_gsc(){
    int count=this.gscMutable.asLazy().select(each -> each % 10_000 != 0).collect(String::valueOf).collect(Integer::valueOf).count(each -> (each + 1) % 10_000 != 0);
    if (count != 999_800) {
      throw new AssertionError();
    }
  }
  @Benchmark public void serial_immutable_gsc(){
    int count=this.gscImmutable.asLazy().select(each -> each % 10_000 != 0).collect(String::valueOf).collect(Integer::valueOf).count(each -> (each + 1) % 10_000 != 0);
    if (count != 999_800) {
      throw new AssertionError();
    }
  }
  @Benchmark public void parallel_mutable_gsc(){
    int count=this.gscMutable.asParallel(this.executorService,BATCH_SIZE).select(each -> each % 10_000 != 0).collect(String::valueOf).collect(Integer::valueOf).count(each -> (each + 1) % 10_000 != 0);
    if (count != 999_800) {
      throw new AssertionError();
    }
  }
  @Benchmark public void parallel_immutable_gsc(){
    int count=this.gscImmutable.asParallel(this.executorService,BATCH_SIZE).select(each -> each % 10_000 != 0).collect(String::valueOf).collect(Integer::valueOf).count(each -> (each + 1) % 10_000 != 0);
    if (count != 999_800) {
      throw new AssertionError();
    }
  }
  @Benchmark public void serial_mutable_scala(){
    ScalaSortedSetIterationTest.serial_mutable_scala();
  }
  @Benchmark public void serial_immutable_scala(){
    ScalaSortedSetIterationTest.serial_immutable_scala();
  }
  @Benchmark public void parallel_mutable_scala(){
    ScalaSortedSetIterationTest.parallel_mutable_scala();
  }
  @Benchmark public void parallel_immutable_scala(){
    ScalaSortedSetIterationTest.parallel_immutable_scala();
  }
}
