public class ParallelMapIterateTest {
  @Test public void forEachKeyValueWithNoParameters(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put);
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void forEachKeyValueWithExecutor(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put,Executors.newSingleThreadExecutor());
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void forEachKeyValueWithMinForkSizeTaskCountAndExecutorParallel(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put,1,3,Executors.newSingleThreadExecutor());
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void forEachKeyValueWithMinForkSizeTaskCountAndExecutorSerial(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put,5,3,Executors.newSingleThreadExecutor());
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void forEachKeyValueWithMinForkSizeAndTaskCountParallel(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put,1,3);
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void forEachKeyValueWithMinForkSizeAndTaskCountSerial(){
    ConcurrentMap<String,String> concurrentMap=new ConcurrentHashMap<>();
    MutableMap<String,String> map=UnifiedMap.newWithKeysValues("1","One","2","Two","3","Three");
    ParallelMapIterate.forEachKeyValue(map,concurrentMap::put,5,3);
    Verify.assertMapsEqual(concurrentMap,map);
  }
  @Test public void classIsNonInstantiable(){
    Verify.assertClassNonInstantiable(ParallelMapIterate.class);
  }
}
