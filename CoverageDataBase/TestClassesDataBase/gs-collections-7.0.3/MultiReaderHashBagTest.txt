@RunWith(Java8Runner.class) public class MultiReaderHashBagTest implements MutableBagTestCase, MultiReaderMutableCollectionTestCase {
  @SafeVarargs @Override public final <T>MultiReaderHashBag<T> newWith(  T... elements){
    return MultiReaderHashBag.newBagWith(elements);
  }
  @Test @Override public void Iterable_remove(){
    MultiReaderMutableCollectionTestCase.super.Iterable_remove();
  }
  @Test @Override public void Iterable_next(){
    MultiReaderMutableCollectionTestCase.super.Iterable_next();
  }
  @Override public void RichIterable_getFirst(){
    MultiReaderMutableCollectionTestCase.super.RichIterable_getFirst();
  }
  @Override public void RichIterable_getLast(){
    MultiReaderMutableCollectionTestCase.super.RichIterable_getLast();
  }
  @Override @Test public void RichIterable_iterator_iterationOrder(){
    MutableCollection<Integer> iterationOrder=this.newMutableForFilter();
    MultiReaderHashBag<Integer> instanceUnderTest=this.newWith(4,4,4,4,3,3,3,2,2,1);
    MutableCollection<Integer> expectedIterationOrder=this.newMutableForFilter();
    instanceUnderTest.forEach(Procedures.cast(expectedIterationOrder::add));
    instanceUnderTest.withReadLockAndDelegate(delegate -> {
      Iterator<Integer> iterator=delegate.iterator();
      while (iterator.hasNext()) {
        iterationOrder.add(iterator.next());
      }
    }
);
    assertEquals(expectedIterationOrder,iterationOrder);
  }
  @Test public void MultiReaderHashBag_next(){
    MultiReaderHashBag<Integer> iterable=this.newWith(3,3,3,2,2,1);
    MutableCollection<Integer> mutableCollection=this.newMutableForFilter();
    iterable.withReadLockAndDelegate(delegate -> {
      Iterator<Integer> iterator=delegate.iterator();
      while (iterator.hasNext()) {
        Integer integer=iterator.next();
        mutableCollection.add(integer);
      }
      assertEquals(this.getExpectedFiltered(3,3,3,2,2,1),mutableCollection);
      assertFalse(iterator.hasNext());
    }
);
  }
  @Test public void MultiReaderHashBag_hasNext(){
    MultiReaderHashBag<Integer> iterable=this.newWith(3,3,3,2,2,1);
    iterable.withReadLockAndDelegate(delegate -> assertTrue(delegate.iterator().hasNext()));
    MultiReaderHashBag<?> emptyIterable=this.newWith();
    emptyIterable.withReadLockAndDelegate(delegate -> assertFalse(delegate.iterator().hasNext()));
  }
  @Test public void MultiReaderHashBag_next_throws_at_end(){
    MultiReaderHashBag<Integer> iterable=this.newWith(3,2,1);
    iterable.withReadLockAndDelegate(delegate -> {
      Iterator<Integer> iterator=delegate.iterator();
      assertTrue(iterator.hasNext());
      iterator.next();
      assertTrue(iterator.hasNext());
      iterator.next();
      assertTrue(iterator.hasNext());
      iterator.next();
      assertFalse(iterator.hasNext());
      assertThrows(NoSuchElementException.class,(Runnable)iterator::next);
    }
);
  }
  @Test public void MultiReaderHashBag_next_throws_on_empty(){
    MultiReaderHashBag<Object> iterable=this.newWith();
    assertThrows(NoSuchElementException.class,() -> iterable.withReadLockAndDelegate(delegate -> delegate.iterator().next()));
  }
}
