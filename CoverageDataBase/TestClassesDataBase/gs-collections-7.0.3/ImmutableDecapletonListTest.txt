public class ImmutableDecapletonListTest extends AbstractImmutableListTestCase {
  @Override protected ImmutableList<Integer> classUnderTest(){
    return new ImmutableDecapletonList<>(1,2,3,4,5,6,7,8,9,10);
  }
  @Override @Test public void toSortedSetBy(){
    MutableList<Integer> expected=TreeSortedSet.newSetWith("1","2","3","4","5","6","7","8","9","10").collect(Integer::valueOf);
    MutableList<Integer> sortedList=this.classUnderTest().toSortedSetBy(String::valueOf).toList();
    Verify.assertListsEqual(expected,sortedList);
  }
  @Test public void selectInstanceOf(){
    ImmutableList<Number> numbers=new ImmutableDecapletonList<>(1,2.0,3,4.0,5,6.0,7,8.0,9,10.0);
    Assert.assertEquals(iList(1,3,5,7,9),numbers.selectInstancesOf(Integer.class));
  }
}
