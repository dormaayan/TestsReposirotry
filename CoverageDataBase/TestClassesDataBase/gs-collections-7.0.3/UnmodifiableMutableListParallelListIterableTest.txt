public class UnmodifiableMutableListParallelListIterableTest extends ParallelListIterableTestCase {
  @Override protected ParallelListIterable<Integer> classUnderTest(){
    return this.newWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected ParallelListIterable<Integer> newWith(  Integer... littleElements){
    return ArrayListAdapter.adapt(new ArrayList<>(Lists.mutable.of(littleElements))).asUnmodifiable().asParallel(this.executorService,this.batchSize);
  }
  @Override protected ListIterable<Integer> getExpectedWith(  Integer... littleElements){
    return ArrayListAdapter.adapt(new ArrayList<>(Lists.mutable.of(littleElements))).asUnmodifiable();
  }
  @Test(expected=IllegalArgumentException.class) public void asParallel_small_batch(){
    ArrayListAdapter.adapt(new ArrayList<>(Lists.mutable.of(1,2,2,3,3,3,4,4,4,4))).asUnmodifiable().asParallel(this.executorService,0);
  }
  @Test(expected=NullPointerException.class) public void asParallel_null_executorService(){
    Lists.mutable.of(1,2,2,3,3,3,4,4,4,4).asParallel(null,2);
  }
}
