public class SelectIteratorTest {
  @Test public void iterator(){
    MutableList<Boolean> list=FastList.newListWith(Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,null,null,Boolean.FALSE,Boolean.TRUE,null);
    this.assertElements(new SelectIterator<>(list.iterator(),Boolean.TRUE::equals));
    this.assertElements(new SelectIterator<>(list,Boolean.TRUE::equals));
  }
  private void assertElements(  Iterator<Boolean> newIterator){
    for (int i=0; i < 4; i++) {
      Assert.assertTrue(newIterator.hasNext());
      Assert.assertEquals(Boolean.TRUE,newIterator.next());
    }
    Assert.assertFalse(newIterator.hasNext());
  }
  @Test public void noSuchElementException(){
    Verify.assertThrows(NoSuchElementException.class,() -> new SelectIterator<>(Lists.fixedSize.of(),ignored -> true).next());
  }
  @Test public void remove(){
    Verify.assertThrows(UnsupportedOperationException.class,() -> new SelectIterator<>(Lists.fixedSize.of(),ignored -> true).remove());
  }
}
