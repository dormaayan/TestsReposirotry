public interface CollectionTestCase extends IterableTestCase {
  @Override <T>Collection<T> newWith(  T... elements);
  @Test default void Collection_size(){
    if (this.allowsDuplicates()) {
      Collection<Integer> collection=this.newWith(3,3,3,2,2,1);
      assertThat(collection,hasSize(6));
    }
 else {
      Collection<Integer> collection=this.newWith(3,2,1);
      assertThat(collection,hasSize(3));
    }
    assertThat(this.newWith(),hasSize(0));
  }
  @Test default void Collection_contains(){
    Collection<Integer> collection=this.newWith(3,2,1);
    assertTrue(collection.contains(1));
    assertTrue(collection.contains(2));
    assertTrue(collection.contains(3));
    assertFalse(collection.contains(4));
  }
  @Test default void Collection_add(){
    Collection<Integer> collection=this.newWith(3,2,1);
    assertTrue(collection.add(4));
    assertEquals(this.allowsDuplicates(),collection.add(4));
  }
  @Test default void Collection_clear(){
    Collection<Integer> collection=this.newWith(1,2,3);
    assertThat(collection,is(not(empty())));
    collection.clear();
    assertThat(collection,is(empty()));
    assertThat(collection,hasSize(0));
    collection.clear();
    assertThat(collection,is(empty()));
  }
}
