public class ParallelCollectDistinctSetIterableTest extends ParallelUnsortedSetIterableTestCase {
  @Override protected ParallelUnsortedSetIterable<Integer> classUnderTest(){
    return this.newWith(44,43,42,41,33,32,31,22,21,11);
  }
  @Override protected ParallelUnsortedSetIterable<Integer> newWith(  Integer... littleElements){
    return (ParallelUnsortedSetIterable<Integer>)UnifiedSet.newSetWith(littleElements).asParallel(this.executorService,this.batchSize).collect(i -> i / 10).asUnique();
  }
  @Override protected MutableSet<Integer> getExpectedWith(  Integer... littleElements){
    return HashBag.newBagWith(littleElements).collect(i -> i / 10).toSet();
  }
  @Test @Override public void groupBy(){
    Function<Integer,Boolean> isOddFunction=object -> IntegerPredicates.isOdd().accept(object);
    Assert.assertEquals(this.getExpected().toSet().groupBy(isOddFunction),this.classUnderTest().groupBy(isOddFunction));
  }
  @Test @Override public void groupByEach(){
    Assert.assertEquals(this.getExpected().toSet().groupByEach(new NegativeIntervalFunction()),this.classUnderTest().groupByEach(new NegativeIntervalFunction()));
  }
}
