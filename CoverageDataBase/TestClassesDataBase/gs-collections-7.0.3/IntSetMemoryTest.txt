public class IntSetMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(IntSetMemoryTest.class);
  @Test public void memoryForScaledSets(){
    LOGGER.info("Comparing Items: Trove {}, GSC {}, JDK {}",TIntHashSet.class.getSimpleName(),IntHashSet.class.getSimpleName(),HashSet.class.getSimpleName());
    for (int i=0; i < 1000001; i+=25000) {
      this.memoryForScaledSets(i);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledSets(  int size){
    MemoryTestBench.on(TIntHashSet.class).printContainerMemoryUsage("IntSet",size,new TIntHashSetFactory(size));
    MemoryTestBench.on(IntHashSet.class).printContainerMemoryUsage("IntSet",size,new IntHashSetFactory(size));
    MemoryTestBench.on(HashSet.class).printContainerMemoryUsage("IntSet",size,new IntegerHashSetFactory(size));
    MemoryTestBench.on(UnifiedSet.class).printContainerMemoryUsage("IntSet",size,new IntegerUnifiedSetFactory(size));
    MemoryTestBench.on(scala.collection.mutable.HashSet.class).printContainerMemoryUsage("IntSet",size,new IntegerScalaHashSetFactory(size));
  }
public static class IntHashSetFactory implements Function0<IntHashSet> {
    private final IntSet data;
    public IntHashSetFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public IntHashSet value(){
      final IntHashSet set=new IntHashSet();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          set.add(each);
        }
      }
);
      return set;
    }
  }
public static class TIntHashSetFactory implements Function0<TIntHashSet> {
    private final IntSet data;
    public TIntHashSetFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public TIntHashSet value(){
      final TIntHashSet set=new TIntHashSet();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          set.add(each);
        }
      }
);
      return set;
    }
  }
public static class IntegerHashSetFactory implements Function0<HashSet<Integer>> {
    private final IntSet data;
    public IntegerHashSetFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public HashSet<Integer> value(){
      final HashSet<Integer> set=new HashSet<>();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          set.add(each);
        }
      }
);
      return set;
    }
  }
public static class IntegerUnifiedSetFactory implements Function0<UnifiedSet<Integer>> {
    private final IntSet data;
    public IntegerUnifiedSetFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public UnifiedSet<Integer> value(){
      final UnifiedSet<Integer> set=new UnifiedSet<>();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          set.add(each);
        }
      }
);
      return set;
    }
  }
public static class IntegerScalaHashSetFactory implements Function0<scala.collection.mutable.HashSet<Integer>> {
    private final IntSet data;
    public IntegerScalaHashSetFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public scala.collection.mutable.HashSet<Integer> value(){
      final scala.collection.mutable.HashSet<Integer> set=new scala.collection.mutable.HashSet<>();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          set.add(each);
        }
      }
);
      return set;
    }
  }
}
