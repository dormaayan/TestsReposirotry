public class MultiReaderHashBagAsWriteUntouchableTest extends AbstractCollectionTestCase {
  @Override protected <T>MutableBag<T> newWith(  T... littleElements){
    return MultiReaderHashBag.newBagWith(littleElements).asWriteUntouchable();
  }
  @Override public void asSynchronized(){
    Verify.assertThrows(UnsupportedOperationException.class,() -> this.newWith().asSynchronized());
  }
  @Override public void asUnmodifiable(){
    Verify.assertThrows(UnsupportedOperationException.class,() -> this.newWith().asUnmodifiable());
  }
  @Test public void addOccurrences(){
    MutableBag<Integer> bag=MultiReaderHashBag.newBagWith(1,1);
    bag.addOccurrences(1,2);
    MutableBagTestCase.assertBagsEqual(HashBag.newBagWith(1,1,1,1),bag);
  }
  @Override @Test public void makeString(){
    Assert.assertEquals("[1, 1, 2, 3]",MultiReaderHashBag.newBagWith(1,1,2,3).toString());
  }
  @Override @Test public void appendString(){
    Appendable builder=new StringBuilder();
    MultiReaderHashBag.newBagWith(1,1,2,3).appendString(builder);
    Assert.assertEquals("1, 1, 2, 3",builder.toString());
  }
  @Override @Test public void testToString(){
    Assert.assertEquals("[1, 1, 2, 3]",MultiReaderHashBag.newBagWith(1,1,2,3).toString());
  }
}
