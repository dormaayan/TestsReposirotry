public class UnifiedSetWithHashingStrategyParallelCollectDistinctTest extends ParallelUnsortedSetIterableTestCase {
  @Override protected ParallelUnsortedSetIterable<Integer> classUnderTest(){
    return this.newWith(11,21,22,31,32,33,41,42,43,44);
  }
  @Override protected ParallelUnsortedSetIterable<Integer> newWith(  Integer... littleElements){
    return (ParallelUnsortedSetIterable<Integer>)UnifiedSetWithHashingStrategy.newSetWith(HashingStrategies.defaultStrategy(),littleElements).asParallel(this.executorService,this.batchSize).collect(i -> i / 10).asUnique();
  }
  @Override protected UnifiedSet<Integer> getExpectedWith(  Integer... littleElements){
    return UnifiedSetWithHashingStrategy.newSetWith(HashingStrategies.defaultStrategy(),littleElements).collect(i -> i / 10);
  }
  @Test @Override public void groupBy(){
    Function<Integer,Boolean> isOddFunction=object -> IntegerPredicates.isOdd().accept(object);
    Assert.assertEquals(this.getExpected().toSet().groupBy(isOddFunction),this.classUnderTest().groupBy(isOddFunction));
  }
  @Test @Override public void groupByEach(){
    Assert.assertEquals(this.getExpected().toSet().groupByEach(new NegativeIntervalFunction()),this.classUnderTest().groupByEach(new NegativeIntervalFunction()));
  }
}
