public class ParallelFlatCollectSetIterableTest extends ParallelIterableTestCase {
  @Override protected ParallelIterable<Integer> classUnderTest(){
    return this.newWith(4,3,2,1);
  }
  @Override protected ParallelIterable<Integer> newWith(  Integer... littleElements){
    return UnifiedSet.newSetWith(littleElements).asParallel(this.executorService,2).flatCollect(i -> FastList.newListWith(9,8,7,6,5,4,3,2,1).select(j -> j <= i).collect(j -> i * 10 + j)).collect(i -> i / 10);
  }
  @Override protected MutableBag<Integer> getExpected(){
    return HashBag.newBagWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected MutableBag<Integer> getExpectedWith(  Integer... littleElements){
    return HashBag.newBagWith(littleElements).flatCollect(i -> FastList.newListWith(9,8,7,6,5,4,3,2,1).select(j -> j <= i).collect(j -> i * 10 + j)).collect(i -> i / 10);
  }
  @Override protected boolean isOrdered(){
    return false;
  }
  @Override protected boolean isUnique(){
    return false;
  }
  @Test @Override public void groupBy(){
    Function<Integer,Boolean> isOddFunction=object -> IntegerPredicates.isOdd().accept(object);
    Assert.assertEquals(this.getExpected().toBag().groupBy(isOddFunction),this.classUnderTest().groupBy(isOddFunction));
  }
  @Test @Override public void groupByEach(){
    Assert.assertEquals(this.getExpected().toBag().groupByEach(new NegativeIntervalFunction()),this.classUnderTest().groupByEach(new NegativeIntervalFunction()));
  }
}
