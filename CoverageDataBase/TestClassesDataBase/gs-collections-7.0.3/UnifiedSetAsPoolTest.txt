public class UnifiedSetAsPoolTest {
  private final UnifiedSet<Integer> staticPool=UnifiedSet.newSet();
  @Test public void getReturnsNullIfObjectIsNotPooled(){
    Assert.assertNull(this.staticPool.get(1));
  }
  @Test public void getReturnsOriginalObjectForIdenticalObject(){
    Integer firstPooledObject=1;
    this.staticPool.put(firstPooledObject);
    Assert.assertSame(firstPooledObject,this.staticPool.get(firstPooledObject));
  }
  @Test public void getReturnsPooledObjectForEqualObject(){
    UnifiedSet<AlwaysEqual> pool=UnifiedSet.newSet();
    AlwaysEqual firstObject=new AlwaysEqual();
    pool.put(firstObject);
    AlwaysEqual equalObject=new AlwaysEqual();
    Assert.assertSame(firstObject,pool.get(equalObject));
  }
private static final class AlwaysEqual {
    @Override public boolean equals(    Object obj){
      return obj != null;
    }
    @Override public int hashCode(){
      return 0;
    }
  }
  @Test public void putReturnsPassedInObject(){
    Integer firstObject=1;
    Object returnedObject=this.staticPool.put(firstObject);
    Assert.assertSame(returnedObject,firstObject);
  }
  @Test public void putAndGetReturnOriginalPooledObjectForEqualObject(){
    AlwaysEqual firstObject=new AlwaysEqual();
    UnifiedSet<AlwaysEqual> pool=UnifiedSet.newSet();
    pool.put(firstObject);
    AlwaysEqual secondObject=new AlwaysEqual();
    Object returnedObject=pool.put(secondObject);
    Assert.assertSame(returnedObject,firstObject);
    Assert.assertSame(firstObject,pool.get(secondObject));
  }
  @Test public void removeFromPool(){
    Integer firstObject=1;
    this.staticPool.put(firstObject);
    Integer returnedObject=this.staticPool.removeFromPool(firstObject);
    Assert.assertSame(returnedObject,firstObject);
    Verify.assertEmpty(this.staticPool);
  }
}
