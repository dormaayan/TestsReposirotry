public interface ImmutableCollectionTestCase extends RichIterableTestCase {
  @Override <T>ImmutableCollection<T> newWith(  T... elements);
  @Test default void ImmutableCollection_sanity_check(){
    String s="";
    if (this.allowsDuplicates()) {
      assertEquals(2,this.newWith(s,s).size());
    }
 else {
      assertThrows(IllegalStateException.class,() -> this.newWith(s,s));
    }
    ImmutableCollection<String> collection=this.newWith(s);
    ImmutableCollection<String> newCollection=collection.newWith(s);
    if (this.allowsDuplicates()) {
      assertEquals(2,newCollection.size());
      assertEquals(this.newWith(s,s),newCollection);
    }
 else {
      assertEquals(1,newCollection.size());
      assertSame(collection,newCollection);
    }
  }
  @Override @Test default void Iterable_remove(){
    ImmutableCollection<Integer> collection=this.newWith(3,2,1);
    Iterator<Integer> iterator=collection.iterator();
    iterator.next();
    assertThrows(UnsupportedOperationException.class,iterator::remove);
  }
  @Test default void ImmutableCollection_newWith(){
    ImmutableCollection<Integer> immutableCollection=this.newWith(3,3,3,2,2,1);
    ImmutableCollection<Integer> newWith=immutableCollection.newWith(4);
    assertEquals(this.newWith(3,3,3,2,2,1,4),newWith);
    assertNotSame(immutableCollection,newWith);
    assertThat(newWith,instanceOf(ImmutableCollection.class));
    ImmutableCollection<Integer> newWith2=newWith.newWith(4);
    assertEquals(this.newWith(3,3,3,2,2,1,4,4),newWith2);
  }
}
