public class ImmutableEmptySetWithHashingStrategyTest extends AbstractImmutableEmptySetTestCase {
  private static final HashingStrategy<Integer> HASHING_STRATEGY=HashingStrategies.nullSafeHashingStrategy(new HashingStrategy<Integer>(){
    public int computeHashCode(    Integer object){
      return object.hashCode();
    }
    public boolean equals(    Integer object1,    Integer object2){
      return object1.equals(object2);
    }
  }
);
  @Override protected ImmutableSet<Integer> classUnderTest(){
    return new ImmutableEmptySetWithHashingStrategy<>(HASHING_STRATEGY);
  }
  @Override @Test public void newWithout(){
    Assert.assertEquals(HashingStrategySets.immutable.of(HASHING_STRATEGY),HashingStrategySets.immutable.of(HASHING_STRATEGY).newWithout(1));
    Assert.assertEquals(HashingStrategySets.immutable.of(HASHING_STRATEGY),HashingStrategySets.immutable.of(HASHING_STRATEGY).newWithoutAll(Interval.oneTo(3)));
  }
  @Override @Test public void equalsAndHashCode(){
    ImmutableSet<Integer> immutable=this.classUnderTest();
    MutableSet<Integer> mutable=UnifiedSet.newSet(immutable);
    Verify.assertEqualsAndHashCode(mutable,immutable);
    Verify.assertPostSerializedEqualsAndHashCode(immutable);
    Assert.assertNotEquals(FastList.newList(mutable),immutable);
  }
}
