public class MultiReaderHashBagAsReadUntouchableTest extends UnmodifiableMutableCollectionTestCase<Integer> {
  @Override protected MutableBag<Integer> getCollection(){
    return MultiReaderHashBag.newBagWith(1,1).asReadUntouchable();
  }
  @Test(expected=UnsupportedOperationException.class) public void addOccurrences(){
    this.getCollection().addOccurrences(1,1);
  }
  @Test(expected=UnsupportedOperationException.class) public void removeOccurrences(){
    this.getCollection().removeOccurrences(1,1);
  }
  @Test(expected=UnsupportedOperationException.class) public void setOccurrences(){
    this.getCollection().setOccurrences(1,1);
  }
  @Test public void occurrencesOf(){
    Assert.assertEquals(2,this.getCollection().occurrencesOf(1));
    Assert.assertEquals(0,this.getCollection().occurrencesOf(0));
  }
  @Test public void sizeDistinct(){
    Assert.assertEquals(1,this.getCollection().sizeDistinct());
  }
  @Test public void toMapOfItemToCount(){
    Assert.assertEquals(UnifiedMap.newWithKeysValues(1,2),this.getCollection().toMapOfItemToCount());
  }
  @Test public void toStringOfItemToCount(){
    Assert.assertEquals("{1=2}",this.getCollection().toStringOfItemToCount());
  }
  @Test public void forEachWithOccurrences(){
    int[] sum=new int[1];
    this.getCollection().forEachWithOccurrences((each,occurrences) -> {
      if (occurrences > 1) {
        sum[0]+=each * occurrences;
      }
    }
);
    Assert.assertEquals(2,sum[0]);
  }
}
