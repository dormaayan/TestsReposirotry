public interface UnsortedMapIterableTestCase extends MapIterableTestCase, UnorderedIterableTestCase, TransformsToBagTrait {
  @Override <T>UnsortedMapIterable<Object,T> newWith(  T... elements);
  @Override default <T>UnsortedBag<T> getExpectedFiltered(  T... elements){
    return Bags.immutable.with(elements);
  }
  @Override default <T>MutableBag<T> newMutableForFilter(  T... elements){
    return Bags.mutable.with(elements);
  }
  @Override @Test default void RichIterable_makeString_appendString(){
    RichIterable<Integer> iterable=this.newWith(2,2,1);
    assertThat(iterable.makeString(),isOneOf("2, 2, 1","1, 2, 2","2, 1, 2"));
    assertThat(iterable.makeString("/"),isOneOf("2/2/1","1/2/2","2/1/2"));
    assertThat(iterable.makeString("[","/","]"),isOneOf("[2/2/1]","[1/2/2]","[2/1/2]"));
    StringBuilder builder1=new StringBuilder();
    iterable.appendString(builder1);
    assertThat(builder1.toString(),isOneOf("2, 2, 1","1, 2, 2","2, 1, 2"));
    StringBuilder builder2=new StringBuilder();
    iterable.appendString(builder2,"/");
    assertThat(builder2.toString(),isOneOf("2/2/1","1/2/2","2/1/2"));
    StringBuilder builder3=new StringBuilder();
    iterable.appendString(builder3,"[","/","]");
    assertThat(builder3.toString(),isOneOf("[2/2/1]","[1/2/2]","[2/1/2]"));
  }
  @Override @Test default void RichIterable_toString(){
    String string=this.newWith(2,2,1).toString();
    Pattern pattern=Pattern.compile("^\\{\\d\\.\\d+(E-\\d)?=(\\d)," + " \\d\\.\\d+(E-\\d)?=(\\d)," + " \\d\\.\\d+(E-\\d)?=(\\d)\\}$");
    Matcher matcher=pattern.matcher(string);
    Assert.assertTrue(string,matcher.matches());
    assertEquals(Bags.immutable.with("1","2","2"),Bags.immutable.with(matcher.group(2),matcher.group(4),matcher.group(6)));
  }
  @Override @Test default void RichIterable_toList(){
    assertThat(this.newWith(2,2,1).toList(),isOneOf(Lists.immutable.with(2,2,1),Lists.immutable.with(1,2,2),Lists.immutable.with(2,1,2)));
  }
}
