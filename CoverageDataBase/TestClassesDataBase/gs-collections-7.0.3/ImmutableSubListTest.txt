public class ImmutableSubListTest extends AbstractImmutableListTestCase {
  @Override protected ImmutableList<Integer> classUnderTest(){
    return Lists.immutable.of(0,1,2,3,4,5,6,7).subList(1,5);
  }
  @Test public void testSubListListIterator(){
    ImmutableList<Integer> subList=this.classUnderTest();
    ListIterator<Integer> iterator=subList.listIterator();
    Assert.assertTrue(iterator.hasNext());
    Assert.assertFalse(iterator.hasPrevious());
    Assert.assertEquals(Integer.valueOf(1),iterator.next());
    Assert.assertEquals(Integer.valueOf(2),iterator.next());
    Assert.assertEquals(Integer.valueOf(3),iterator.next());
    Assert.assertTrue(iterator.hasPrevious());
    Assert.assertEquals(Integer.valueOf(3),iterator.previous());
    Assert.assertEquals(Integer.valueOf(2),iterator.previous());
    Assert.assertEquals(Integer.valueOf(1),iterator.previous());
  }
  @Test(expected=UnsupportedOperationException.class) public void testSubListListIteratorSet_throws(){
    ImmutableList<Integer> subList=this.classUnderTest();
    ListIterator<Integer> iterator=subList.listIterator();
    iterator.set(4);
  }
  @Test(expected=UnsupportedOperationException.class) public void testSubListListIteratorRemove_throws(){
    ImmutableList<Integer> subList=this.classUnderTest();
    ListIterator<Integer> iterator=subList.listIterator();
    iterator.remove();
  }
  @Test(expected=UnsupportedOperationException.class) public void testSubListListIteratorAdd_throws(){
    ImmutableList<Integer> subList=this.classUnderTest();
    ListIterator<Integer> iterator=subList.listIterator();
    iterator.add(4);
  }
}
