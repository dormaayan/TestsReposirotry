/** 
 * JUnit test for  {@link ImmutableBooleanSingletonStack}.
 */
public class ImmutableBooleanSingletonStackTest extends AbstractImmutableBooleanStackTestCase {
  @Override protected ImmutableBooleanStack classUnderTest(){
    return new ImmutableBooleanSingletonStack(true);
  }
  @Override @Test public void pop(){
    ImmutableBooleanStack stack=this.classUnderTest();
    ImmutableBooleanStack modified=stack.pop();
    Verify.assertEmpty(modified);
    Verify.assertSize(1,stack);
    Assert.assertNotSame(modified,stack);
    Assert.assertEquals(this.classUnderTest(),stack);
  }
  @Override @Test public void popWithCount(){
    ImmutableBooleanStack stack=this.classUnderTest();
    ImmutableBooleanStack stack1=stack.pop(0);
    Assert.assertSame(stack1,stack);
    Assert.assertEquals(this.classUnderTest(),stack);
    ImmutableBooleanStack modified=stack.pop(1);
    Verify.assertEmpty(modified);
    Verify.assertSize(1,stack);
    Assert.assertNotSame(modified,stack);
    Assert.assertEquals(this.classUnderTest(),stack);
  }
  @Override @Test public void peek(){
    Assert.assertTrue(this.classUnderTest().peek());
    Assert.assertEquals(BooleanArrayList.newListWith(),this.classUnderTest().peek(0));
    Assert.assertEquals(BooleanArrayList.newListWith(true),this.classUnderTest().peek(1));
    Verify.assertThrows(IllegalArgumentException.class,() -> this.classUnderTest().peek(2));
  }
  @Override @Test public void testEquals(){
    ImmutableBooleanStack stack=this.classUnderTest();
    Assert.assertEquals(stack,stack);
    Verify.assertPostSerializedEqualsAndHashCode(stack);
    Assert.assertEquals(stack,BooleanArrayStack.newStackWith(true));
    Assert.assertNotEquals(stack,this.newWith(true,false));
    Assert.assertNotEquals(stack,BooleanArrayList.newListWith(true));
    Assert.assertEquals(stack,this.newWith(true));
    Assert.assertNotEquals(stack,this.newWith());
  }
}
