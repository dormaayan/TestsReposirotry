public class IntIntMapMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(IntIntMapMemoryTest.class);
  @Test public void memoryForScaledMaps(){
    LOGGER.info("Comparing Items: Trove {}, GSC {}, JDK {}",TIntIntHashMap.class.getSimpleName(),IntIntHashMap.class.getSimpleName(),HashMap.class.getSimpleName());
    for (int size=0; size < 1000001; size+=25000) {
      this.memoryForScaledMaps(size);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledMaps(  int size){
    MemoryTestBench.on(TIntIntHashMap.class).printContainerMemoryUsage("IntIntMap",size,new TIntIntHashMapFactory(size));
    MemoryTestBench.on(IntIntHashMap.class).printContainerMemoryUsage("IntIntMap",size,new IntIntHashMapFactory(size));
    MemoryTestBench.on(HashMap.class).printContainerMemoryUsage("IntIntMap",size,new IntegerIntegerHashMapFactory(size));
  }
public static class IntIntHashMapFactory implements Function0<IntIntHashMap> {
    private final IntSet data;
    public IntIntHashMapFactory(    int size){
      this.data=TestDataFactory.createRandomSet(size);
    }
    @Override public IntIntHashMap value(){
      final IntIntHashMap map=new IntIntHashMap();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          map.put(each,each);
        }
      }
);
      return map;
    }
  }
public static class TIntIntHashMapFactory implements Function0<TIntIntHashMap> {
    private final IntList data;
    public TIntIntHashMapFactory(    int size){
      this.data=TestDataFactory.create(size);
    }
    @Override public TIntIntHashMap value(){
      final TIntIntHashMap map=new TIntIntHashMap();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          map.put(each,each);
        }
      }
);
      return map;
    }
  }
public static class IntegerIntegerHashMapFactory implements Function0<HashMap<Integer,Integer>> {
    private final IntList data;
    public IntegerIntegerHashMapFactory(    int size){
      this.data=TestDataFactory.create(size);
    }
    @Override public HashMap<Integer,Integer> value(){
      final HashMap<Integer,Integer> map=new HashMap<>();
      this.data.forEach(new IntProcedure(){
        public void value(        int each){
          map.put(each,each);
        }
      }
);
      return map;
    }
  }
}
