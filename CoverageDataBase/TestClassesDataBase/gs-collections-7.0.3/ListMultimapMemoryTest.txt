public class ListMultimapMemoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(ListMultimapMemoryTest.class);
  @Test public void memoryForScaledMultimaps(){
    LOGGER.info("Comparing Items: Guava {}, GSC {}",ArrayListMultimap.class.getSimpleName(),FastListMultimap.class.getSimpleName());
    for (int size=0; size < 1000001; size+=25000) {
      this.memoryForScaledMultimaps(size);
    }
    LOGGER.info("Ending test: {}",this.getClass().getName());
  }
  public void memoryForScaledMultimaps(  int size){
    MemoryTestBench.on(ArrayListMultimap.class).printContainerMemoryUsage("ListMultimap",size,new SizedGuavaMultimapFactory(size));
    MemoryTestBench.on(FastListMultimap.class).printContainerMemoryUsage("ListMultimap",size,new SizedGscMultimapFactory(size));
  }
public abstract static class SizedMultimapFactory {
    protected final ImmutableList<Integer> data;
    protected SizedMultimapFactory(    int size){
      this.data=TestDataFactory.createRandomImmutableList(size);
    }
  }
public static class SizedGuavaMultimapFactory extends SizedMultimapFactory implements Function0<ArrayListMultimap<Integer,String>> {
    public SizedGuavaMultimapFactory(    int size){
      super(size);
    }
    @Override public ArrayListMultimap<Integer,String> value(){
      final ArrayListMultimap<Integer,String> mm=ArrayListMultimap.create();
      this.data.forEach(new Procedure<Integer>(){
        public void value(        Integer each){
          for (int j=0; j < 10; j++) {
            mm.put(each,"dummy");
          }
        }
      }
);
      return mm;
    }
  }
public static class SizedGscMultimapFactory extends SizedMultimapFactory implements Function0<FastListMultimap<Integer,String>> {
    public SizedGscMultimapFactory(    int size){
      super(size);
    }
    @Override public FastListMultimap<Integer,String> value(){
      final FastListMultimap<Integer,String> mm=FastListMultimap.newMultimap();
      this.data.forEach(new Procedure<Integer>(){
        public void value(        Integer each){
          for (int j=0; j < 10; j++) {
            mm.put(each,"dummy");
          }
        }
      }
);
      return mm;
    }
  }
}
