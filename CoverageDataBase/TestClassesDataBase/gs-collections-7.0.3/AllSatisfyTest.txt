@State(Scope.Thread) @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.SECONDS) public class AllSatisfyTest extends AbstractJMHTestRunner {
  private static final int SIZE=1_000_000;
  private static final int BATCH_SIZE=10_000;
  private final List<Integer> integersJDK=new ArrayList<>(Interval.oneTo(SIZE));
  private final FastList<Integer> integersGSC=FastList.newList(Interval.oneTo(SIZE));
  private ExecutorService executorService;
  @Setup public void setUp(){
    this.executorService=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
  }
  @TearDown public void tearDown() throws InterruptedException {
    this.executorService.shutdownNow();
    this.executorService.awaitTermination(1L,TimeUnit.SECONDS);
  }
  @Benchmark public void short_circuit_middle_serial_lazy_jdk(){
    Assert.assertFalse(this.integersJDK.stream().allMatch(each -> each < SIZE / 2));
  }
  @Benchmark public void short_circuit_middle_serial_lazy_streams_gsc(){
    Assert.assertFalse(this.integersGSC.stream().allMatch(each -> each < SIZE / 2));
  }
  @Benchmark public void process_all_serial_lazy_jdk(){
    Assert.assertTrue(this.integersJDK.stream().allMatch(each -> each > 0));
  }
  @Benchmark public void process_all_serial_lazy_streams_gsc(){
    Assert.assertTrue(this.integersGSC.stream().allMatch(each -> each > 0));
  }
  @Benchmark public void short_circuit_middle_serial_eager_gsc(){
    Assert.assertFalse(this.integersGSC.allSatisfy(each -> each < SIZE / 2));
  }
  @Benchmark public void process_all_serial_eager_gsc(){
    Assert.assertTrue(this.integersGSC.allSatisfy(each -> each > 0));
  }
  @Benchmark public void short_circuit_middle_serial_lazy_gsc(){
    Assert.assertFalse(this.integersGSC.asLazy().allSatisfy(each -> each < SIZE / 2));
  }
  @Benchmark public void process_all_serial_lazy_gsc(){
    Assert.assertTrue(this.integersGSC.asLazy().allSatisfy(each -> each > 0));
  }
  @Benchmark public void short_circuit_middle_parallel_lazy_jdk(){
    Assert.assertFalse(this.integersJDK.parallelStream().allMatch(each -> each != SIZE / 2 - 1));
  }
  @Benchmark public void short_circuit_middle_parallel_lazy_streams_gsc(){
    Assert.assertFalse(this.integersGSC.parallelStream().allMatch(each -> each != SIZE / 2 - 1));
  }
  @Benchmark public void process_all_parallel_lazy_jdk(){
    Assert.assertTrue(this.integersJDK.parallelStream().allMatch(each -> each > 0));
  }
  @Benchmark public void process_all_parallel_lazy_streams_gsc(){
    Assert.assertTrue(this.integersGSC.parallelStream().allMatch(each -> each > 0));
  }
  @Benchmark public void short_circuit_middle_parallel_lazy_gsc(){
    Assert.assertFalse(this.integersGSC.asParallel(this.executorService,BATCH_SIZE).allSatisfy(each -> each != SIZE / 2 - 1));
  }
  @Benchmark public void process_all_parallel_lazy_gsc(){
    Assert.assertTrue(this.integersGSC.asParallel(this.executorService,BATCH_SIZE).allSatisfy(each -> each > 0));
  }
}
