public class SetLogicTest {
  private MutableSet<Integer> setA;
  private MutableSet<Integer> setB;
  @Before public void setUp(){
    this.setA=UnifiedSet.newSetWith(1,2,3,4).asUnmodifiable();
    this.setB=UnifiedSet.newSetWith(3,4,5,6).asUnmodifiable();
  }
  @Test public void inOnlyInAMutable(){
    MutableSet<Integer> onlyInA=this.setA.reject(Predicates.in(this.setB),UnifiedSet.<Integer>newSet());
    Assert.assertEquals(UnifiedSet.newSetWith(1,2),onlyInA);
  }
  @Test public void onlyInAJdkLike(){
    MutableSet<Integer> onlyInA=UnifiedSet.newSet(this.setA);
    onlyInA.removeAll(this.setB);
    Assert.assertEquals(UnifiedSet.newSetWith(1,2),onlyInA);
  }
  @Test public void inBothAAndBMutable(){
    Assert.assertEquals(UnifiedSet.newSetWith(3,4),this.setA.select(Predicates.in(this.setB)));
  }
  @Test public void inAOrBButNotInBoth(){
    MutableSet<Integer> nonOverlappingSet=UnifiedSet.newSet();
    this.setA.select(Predicates.notIn(this.setB),nonOverlappingSet);
    this.setB.select(Predicates.notIn(this.setA),nonOverlappingSet);
    Assert.assertEquals(UnifiedSet.newSetWith(1,2,5,6),nonOverlappingSet);
  }
}
