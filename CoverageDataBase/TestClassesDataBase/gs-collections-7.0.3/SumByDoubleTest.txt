@State(Scope.Thread) @BenchmarkMode(Mode.Throughput) @OutputTimeUnit(TimeUnit.SECONDS) public class SumByDoubleTest extends AbstractJMHTestRunner {
  private final Positions positions=new Positions().shuffle();
  @Benchmark public Map<Product,Double> sumByProduct_serial_lazy_jdk(){
    return this.positions.getJdkPositions().stream().collect(Collectors.groupingBy(Position::getProduct,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Product,Double> sumByProduct_serial_lazy_streams_gsc(){
    return this.positions.getGscPositions().stream().collect(Collectors.groupingBy(Position::getProduct,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Account,Double> sumByAccount_serial_lazy_jdk(){
    return this.positions.getJdkPositions().stream().collect(Collectors.groupingBy(Position::getAccount,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Account,Double> sumByAccount_serial_lazy_streams_gsc(){
    return this.positions.getGscPositions().stream().collect(Collectors.groupingBy(Position::getAccount,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<String,Double> sumByCategory_serial_lazy_jdk(){
    return this.positions.getJdkPositions().stream().collect(Collectors.groupingBy(Position::getCategory,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<String,Double> sumByCategory_serial_lazy_streams_gsc(){
    return this.positions.getGscPositions().stream().collect(Collectors.groupingBy(Position::getCategory,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Product,Double> sumByProduct_parallel_lazy_jdk(){
    return this.positions.getJdkPositions().parallelStream().collect(Collectors.groupingBy(Position::getProduct,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Product,Double> sumByProduct_parallel_lazy_streams_gsc(){
    return this.positions.getGscPositions().parallelStream().collect(Collectors.groupingBy(Position::getProduct,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Account,Double> sumByAccount_parallel_lazy_jdk(){
    return this.positions.getJdkPositions().parallelStream().collect(Collectors.groupingBy(Position::getAccount,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<Account,Double> sumByAccount_parallel_lazy_streams_gsc(){
    return this.positions.getGscPositions().parallelStream().collect(Collectors.groupingBy(Position::getAccount,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<String,Double> sumByCategory_parallel_lazy_jdk(){
    return this.positions.getJdkPositions().parallelStream().collect(Collectors.groupingBy(Position::getCategory,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public Map<String,Double> sumByCategory_parallel_lazy_streams_gsc(){
    return this.positions.getGscPositions().parallelStream().collect(Collectors.groupingBy(Position::getCategory,Collectors.summingDouble(Position::getMarketValue)));
  }
  @Benchmark public ObjectDoubleMap<Product> sumByProduct_serial_eager_gsc(){
    return this.positions.getGscPositions().sumByDouble(Position::getProduct,Position::getMarketValue);
  }
  @Benchmark public ObjectDoubleMap<Product> sumByProduct_parallel_eager_gsc(){
    return ParallelIterate.sumByDouble(this.positions.getGscPositions(),Position::getProduct,Position::getMarketValue);
  }
  @Test public void sumByProduct_gsc(){
    Assert.assertArrayEquals(this.sumByProduct_parallel_eager_gsc().values().toSortedArray(),this.sumByProduct_serial_eager_gsc().values().toSortedArray(),0.001);
    Assert.assertEquals(this.sumByProduct_parallel_eager_gsc(),this.sumByProduct_serial_eager_gsc());
  }
  @Benchmark public ObjectDoubleMap<Account> sumByAccount_serial_eager_gsc(){
    return this.positions.getGscPositions().sumByDouble(Position::getAccount,Position::getMarketValue);
  }
  @Benchmark public ObjectDoubleMap<Account> sumByAccount_parallel_eager_gsc(){
    return ParallelIterate.sumByDouble(this.positions.getGscPositions(),Position::getAccount,Position::getMarketValue);
  }
  @Test public void sumByAccount_gsc(){
    Assert.assertArrayEquals(this.sumByAccount_parallel_eager_gsc().values().toSortedArray(),this.sumByAccount_serial_eager_gsc().values().toSortedArray(),0.001);
    Assert.assertEquals(this.sumByAccount_parallel_eager_gsc(),this.sumByAccount_serial_eager_gsc());
  }
  @Benchmark public ObjectDoubleMap<String> sumByCategory_serial_eager_gsc(){
    return this.positions.getGscPositions().sumByDouble(Position::getCategory,Position::getMarketValue);
  }
  @Benchmark public ObjectDoubleMap<String> sumByCategory_parallel_eager_gsc(){
    return ParallelIterate.sumByDouble(this.positions.getGscPositions(),Position::getCategory,Position::getMarketValue);
  }
  @Test public void sumByCategory_gsc(){
    Assert.assertArrayEquals(this.sumByCategory_parallel_eager_gsc().values().toSortedArray(),this.sumByCategory_serial_eager_gsc().values().toSortedArray(),0.001);
    Assert.assertEquals(this.sumByCategory_parallel_eager_gsc(),this.sumByCategory_serial_eager_gsc());
  }
}
