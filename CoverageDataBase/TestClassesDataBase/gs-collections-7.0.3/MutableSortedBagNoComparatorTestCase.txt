public interface MutableSortedBagNoComparatorTestCase extends SortedBagTestCase, MutableBagIterableTestCase, MutableSortedNaturalOrderTestCase {
  @Override <T>MutableSortedBag<T> newWith(  T... elements);
  @Override default <T>SortedBag<T> getExpectedFiltered(  T... elements){
    return this.newMutableForFilter(elements);
  }
  @Override default <T>MutableSortedBag<T> newMutableForFilter(  T... elements){
    TreeBag<T> result=new TreeBag<>();
    addAllTo(elements,result);
    return result;
  }
  @Override @Test default void Bag_toStringOfItemToCount(){
    assertEquals("{}",this.newWith().toStringOfItemToCount());
    assertEquals("{1=1, 2=2, 3=3}",this.newWith(3,3,3,2,2,1).toStringOfItemToCount());
  }
  @Test default void MutableBag_addOccurrences(){
    MutableSortedBag<Integer> mutableSortedBag=this.newWith(1,2,2,3,3,3);
    mutableSortedBag.addOccurrences(4,4);
    assertEquals(TreeBag.newBagWith(1,2,2,3,3,3,4,4,4,4),mutableSortedBag);
    mutableSortedBag.addOccurrences(1,2);
    assertEquals(TreeBag.newBagWith(1,1,1,2,2,3,3,3,4,4,4,4),mutableSortedBag);
    mutableSortedBag.addOccurrences(1,0);
    assertEquals(TreeBag.newBagWith(1,1,1,2,2,3,3,3,4,4,4,4),mutableSortedBag);
  }
  @Test default void MutableBag_removeOccurrences(){
    MutableSortedBag<Integer> mutableBag=this.newWith(1,2,2,3,3,3);
    assertFalse(mutableBag.removeOccurrences(4,4));
    assertEquals(TreeBag.newBagWith(1,2,2,3,3,3),mutableBag);
    assertFalse(mutableBag.removeOccurrences(3,0));
    assertEquals(TreeBag.newBagWith(1,2,2,3,3,3),mutableBag);
    assertTrue(mutableBag.removeOccurrences(1,2));
    assertEquals(TreeBag.newBagWith(2,2,3,3,3),mutableBag);
    assertTrue(mutableBag.removeOccurrences(3,2));
    assertEquals(TreeBag.newBagWith(2,2,3),mutableBag);
    assertTrue(mutableBag.removeOccurrences(2,1));
    assertEquals(TreeBag.newBagWith(2,3),mutableBag);
    assertTrue(mutableBag.removeOccurrences(2,2));
    assertEquals(TreeBag.newBagWith(3),mutableBag);
  }
  @Test default void SortedBag_forEachWith(){
    SortedBag<Integer> bag=this.newWith(1,2,2,3,3,3);
    MutableList<Integer> result=Lists.mutable.with();
    bag.forEachWith((argument1,argument2) -> {
      result.add(argument1);
      result.add(argument2);
    }
,0);
    assertEquals(Lists.immutable.with(1,0,2,0,2,0,3,0,3,0,3,0),result);
  }
  @Override default void SortedIterable_comparator(){
    MutableSortedNaturalOrderTestCase.super.SortedIterable_comparator();
  }
}
