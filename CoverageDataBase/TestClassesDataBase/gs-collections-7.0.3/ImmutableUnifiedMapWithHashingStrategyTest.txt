public class ImmutableUnifiedMapWithHashingStrategyTest extends ImmutableMapTestCase {
  private static final HashingStrategy<Integer> HASHING_STRATEGY=HashingStrategies.nullSafeHashingStrategy(new HashingStrategy<Integer>(){
    public int computeHashCode(    Integer object){
      return object.hashCode();
    }
    public boolean equals(    Integer object1,    Integer object2){
      return object1.equals(object2);
    }
  }
);
  @Override @Test public void equalsAndHashCode(){
    super.equalsAndHashCode();
    ImmutableMap<Integer,String> deserialized=SerializeTestHelper.serializeDeserialize(this.classUnderTest());
    Verify.assertInstanceOf(ImmutableUnifiedMapWithHashingStrategy.class,deserialized);
  }
  @Override protected ImmutableMap<Integer,String> classUnderTest(){
    return UnifiedMapWithHashingStrategy.newWithKeysValues(HASHING_STRATEGY,1,"1",2,"2",3,"3",4,"4").toImmutable();
  }
  @Override protected int size(){
    return 4;
  }
  @Test @Override public void testToString(){
    Assert.assertEquals("{1=1, 2=2, 3=3, 4=4}",this.classUnderTest().toString());
  }
  @Test public void getBatchCount(){
    BatchIterable<Integer> integerBatchIterable=(BatchIterable<Integer>)this.classUnderTest();
    Assert.assertEquals(5,integerBatchIterable.getBatchCount(3));
  }
  @Test public void batchForEach(){
    Sum sum=new IntegerSum(0);
    BatchIterable<String> integerBatchIterable=(BatchIterable<String>)this.classUnderTest();
    integerBatchIterable.batchForEach(each -> sum.add(Integer.valueOf(each)),0,1);
    Assert.assertEquals(10,sum.getValue());
  }
}
