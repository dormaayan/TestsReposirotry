public class ParallelListIterableTest extends ParallelListIterableTestCase {
  @Override protected ParallelListIterable<Integer> classUnderTest(){
    return this.newWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected ParallelListIterable<Integer> newWith(  Integer... littleElements){
    return FastList.newListWith(littleElements).asParallel(this.executorService,this.batchSize);
  }
  @Override protected ListIterable<Integer> getExpectedWith(  Integer... littleElements){
    return FastList.newListWith(littleElements);
  }
  @Test(expected=IllegalArgumentException.class) public void asParallel_small_batch(){
    FastList.newListWith(1,2,2,3,3,3,4,4,4,4).asParallel(this.executorService,0);
  }
  @Test(expected=NullPointerException.class) public void asParallel_null_executorService(){
    FastList.newListWith(1,2,2,3,3,3,4,4,4,4).asParallel(null,2);
  }
}
