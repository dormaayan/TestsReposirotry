public interface UnmodifiableMutableCollectionTestCase extends UnmodifiableCollectionTestCase, MutableCollectionTestCase {
  @Test @Override default void Iterable_remove(){
    UnmodifiableCollectionTestCase.super.Iterable_remove();
  }
  @Override @Test default void MutableCollection_sanity_check(){
    String s="";
    if (this.allowsDuplicates()) {
      assertEquals(2,this.newWith(s,s).size());
    }
 else {
      assertThrows(IllegalStateException.class,() -> this.newWith(s,s));
    }
  }
  @Override @Test default void MutableCollection_removeIf(){
    MutableCollection<Integer> collection=this.newWith(5,4,3,2,1);
    assertThrows(UnsupportedOperationException.class,() -> collection.removeIf(Predicates.cast(each -> each % 2 == 0)));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(7,4,5,1).removeIf(Predicates.cast(null)));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(9,5,1).removeIf(Predicates.cast(each -> each % 2 == 0)));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(6,4,2).removeIf(Predicates.cast(each -> each % 2 == 0)));
    assertThrows(UnsupportedOperationException.class,() -> this.<Integer>newWith().removeIf(Predicates.cast(each -> each % 2 == 0)));
  }
  @Override @Test default void MutableCollection_removeIfWith(){
    MutableCollection<Integer> collection=this.newWith(5,4,3,2,1);
    assertThrows(UnsupportedOperationException.class,() -> collection.removeIfWith(Predicates2.<Integer>in(),Lists.immutable.with(5,3,1)));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(7,4,5,1).removeIfWith(null,this));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(9,5,1).removeIfWith(Predicates2.greaterThan(),10));
    assertThrows(UnsupportedOperationException.class,() -> this.newWith(6,4,2).removeIfWith(Predicates2.greaterThan(),2));
    assertThrows(UnsupportedOperationException.class,() -> this.<Integer>newWith().removeIfWith(Predicates2.greaterThan(),2));
  }
}
