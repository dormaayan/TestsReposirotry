public abstract class ParallelBagTestCase extends ParallelIterableTestCase {
  @Override protected abstract ParallelBag<Integer> classUnderTest();
  @Override protected abstract ParallelBag<Integer> newWith(  Integer... littleElements);
  @Override protected MutableBag<Integer> getExpected(){
    return HashBag.newBagWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected MutableBag<Integer> getExpectedWith(  Integer... littleElements){
    return HashBag.newBagWith(littleElements);
  }
  @Override protected boolean isOrdered(){
    return false;
  }
  @Override protected boolean isUnique(){
    return false;
  }
  @Test public void forEachWithOccurrences(){
    MutableBag<Integer> actual=HashBag.<Integer>newBag().asSynchronized();
    this.classUnderTest().forEachWithOccurrences(actual::addOccurrences);
    Assert.assertEquals(this.getExpected().toBag(),actual);
  }
  @Override @Test public void forEach_executionException(){
  }
  @Override @Test public void collect_executionException(){
  }
  @Override @Test public void anySatisfy_executionException(){
  }
  @Override @Test public void allSatisfy_executionException(){
  }
  @Override @Test public void detect_executionException(){
  }
  @Override @Test public void forEach_interruptedException(){
  }
  @Override @Test public void anySatisfy_interruptedException(){
  }
  @Override @Test public void allSatisfy_interruptedException(){
  }
  @Override @Test public void detect_interruptedException(){
  }
  @Override @Test public void toString_interruptedException(){
  }
}
