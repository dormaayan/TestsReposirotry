/** 
 * JUnit test for  {@link SynchronizedSortedBag}.
 */
public class SynchronizedSortedBagTest extends AbstractMutableSortedBagTestCase {
  @Override protected <T>MutableSortedBag<T> newWith(  T... littleElements){
    return new SynchronizedSortedBag<>(TreeBag.newBagWith(littleElements));
  }
  @SafeVarargs @Override protected final <T>MutableSortedBag<T> newWithOccurrences(  ObjectIntPair<T>... elementsWithOccurrences){
    return super.newWithOccurrences(elementsWithOccurrences).asSynchronized();
  }
  @Override protected <T>MutableSortedBag<T> newWith(  Comparator<? super T> comparator,  T... elements){
    return new SynchronizedSortedBag<>(TreeBag.newBagWith(comparator,elements));
  }
  @Override public void asSynchronized(){
    MutableSortedBag<Object> synchronizedBag=this.newWith();
    Assert.assertSame(synchronizedBag,synchronizedBag.asSynchronized());
  }
  @Override @Test public void topOccurrences(){
    super.topOccurrences();
    MutableSortedBag<String> mutable=TreeBag.newBag();
    mutable.addOccurrences("one",1);
    mutable.addOccurrences("two",2);
    mutable.addOccurrences("three",3);
    mutable.addOccurrences("four",4);
    mutable.addOccurrences("five",5);
    mutable.addOccurrences("six",6);
    mutable.addOccurrences("seven",7);
    mutable.addOccurrences("eight",8);
    mutable.addOccurrences("nine",9);
    mutable.addOccurrences("ten",10);
    MutableSortedBag<String> strings=mutable.asSynchronized();
    MutableList<ObjectIntPair<String>> top5=strings.topOccurrences(5);
    Verify.assertSize(5,top5);
    Assert.assertEquals("ten",top5.getFirst().getOne());
    Assert.assertEquals(10,top5.getFirst().getTwo());
    Assert.assertEquals("six",top5.getLast().getOne());
    Assert.assertEquals(6,top5.getLast().getTwo());
  }
  @Override @Test public void bottomOccurrences(){
    super.bottomOccurrences();
    MutableSortedBag<String> mutable=TreeBag.newBag();
    mutable.addOccurrences("one",1);
    mutable.addOccurrences("two",2);
    mutable.addOccurrences("three",3);
    mutable.addOccurrences("four",4);
    mutable.addOccurrences("five",5);
    mutable.addOccurrences("six",6);
    mutable.addOccurrences("seven",7);
    mutable.addOccurrences("eight",8);
    mutable.addOccurrences("nine",9);
    mutable.addOccurrences("ten",10);
    MutableSortedBag<String> strings=mutable.asSynchronized();
    MutableList<ObjectIntPair<String>> bottom5=strings.bottomOccurrences(5);
    Verify.assertSize(5,bottom5);
    Assert.assertEquals("one",bottom5.getFirst().getOne());
    Assert.assertEquals(1,bottom5.getFirst().getTwo());
    Assert.assertEquals("five",bottom5.getLast().getOne());
    Assert.assertEquals(5,bottom5.getLast().getTwo());
  }
}
