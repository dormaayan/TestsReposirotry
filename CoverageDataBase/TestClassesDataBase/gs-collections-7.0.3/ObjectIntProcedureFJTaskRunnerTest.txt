public class ObjectIntProcedureFJTaskRunnerTest {
  private ObjectIntProcedureFJTaskRunner<Integer,ObjectIntProcedure<Integer>> undertest;
  @Before public void setUp(){
    this.undertest=new ObjectIntProcedureFJTaskRunner<>(new DoNothingWithFalseCombineOneCombiner(),1,null,new MockLatch());
  }
  @Test public void taskCompletedUsingNonCombineOne(){
    Verify.assertThrows(CountDownCalledException.class,() -> this.undertest.taskCompleted(null));
  }
  @Test public void joinUsingNonCombineOne(){
    Verify.assertThrows(AwaitDownCalledException.class,() -> this.undertest.executeAndCombine(new DoNothingExecutor(),new PassThroughObjectIntProcedureFactory(),FastList.<Integer>newList()));
  }
private static class DoNothingWithFalseCombineOneCombiner implements Combiner<ObjectIntProcedure<Integer>> {
    private static final long serialVersionUID=1L;
    @Override public void combineAll(    Iterable<ObjectIntProcedure<Integer>> thingsToCombine){
    }
    @Override public void combineOne(    ObjectIntProcedure<Integer> thingToCombine){
    }
    @Override public boolean useCombineOne(){
      return false;
    }
  }
private static class CountDownCalledException extends RuntimeException {
    private static final long serialVersionUID=1L;
  }
private static class AwaitDownCalledException extends RuntimeException {
    private static final long serialVersionUID=1L;
  }
private static final class MockLatch extends CountDownLatch {
    private MockLatch(){
      super(1);
    }
    @Override public void countDown(){
      throw new CountDownCalledException();
    }
    @Override public void await(){
      throw new AwaitDownCalledException();
    }
  }
private static class DoNothingExecutor implements Executor {
    @Override public void execute(    Runnable command){
    }
  }
private static class PassThroughObjectIntProcedureFactory implements ObjectIntProcedureFactory<ObjectIntProcedure<Integer>> {
    @Override public ObjectIntProcedure<Integer> create(){
      return this.getPassThroughObjectIntProcedure();
    }
    private ObjectIntProcedure<Integer> getPassThroughObjectIntProcedure(){
      return ObjectIntProcedures.fromProcedure(DoNothingProcedure.DO_NOTHING);
    }
  }
}
