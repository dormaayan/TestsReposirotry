public interface SetTestCase extends CollectionTestCase {
  @Override <T>Set<T> newWith(  T... elements);
  @Override @Test default void Object_PostSerializedEqualsAndHashCode(){
    Iterable<Integer> iterable=this.newWith(3,2,1);
    Object deserialized=SerializeTestHelper.serializeDeserialize(iterable);
    Assert.assertNotSame(iterable,deserialized);
  }
  @Override @Test default void Object_equalsAndHashCode(){
    assertPostSerializedEqualsAndHashCode(this.newWith(3,2,1));
    assertNotEquals(this.newWith(4,3,2,1),this.newWith(3,2,1));
    assertNotEquals(this.newWith(3,2,1),this.newWith(4,3,2,1));
    assertNotEquals(this.newWith(2,1),this.newWith(3,2,1));
    assertNotEquals(this.newWith(3,2,1),this.newWith(2,1));
    assertNotEquals(this.newWith(4,2,1),this.newWith(3,2,1));
    assertNotEquals(this.newWith(3,2,1),this.newWith(4,2,1));
  }
  @Override @Test default void Iterable_next(){
    Set<Integer> iterable=this.newWith(3,2,1);
    MutableSet<Integer> mutableSet=Sets.mutable.with();
    Iterator<Integer> iterator=iterable.iterator();
    while (iterator.hasNext()) {
      Integer integer=iterator.next();
      assertTrue(mutableSet.add(integer));
    }
    assertEquals(iterable,mutableSet);
    assertFalse(iterator.hasNext());
  }
  @Override @Test default void Iterable_remove(){
    Set<Integer> set=this.newWith(3,2,1);
    Iterator<Integer> iterator=set.iterator();
    iterator.next();
    iterator.remove();
    assertThat(set,isOneOf(this.newWith(1,2),this.newWith(1,3),this.newWith(2,3)));
  }
  @Override @Test default void Collection_add(){
    Collection<Integer> collection=this.newWith(1,2,3);
    assertFalse(collection.add(3));
  }
  @Override @Test default void Collection_size(){
    assertThat(this.newWith(3,2,1),hasSize(3));
    assertThat(this.newWith(),hasSize(0));
  }
}
