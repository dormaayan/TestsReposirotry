public interface BagTestCase extends RichIterableWithDuplicatesTestCase {
  @Override <T>Bag<T> newWith(  T... elements);
  @Override default MutableCollection<Integer> expectedIterationOrder(){
    MutableCollection<Integer> forEach=this.newMutableForFilter();
    Bag<Integer> bag=this.newWith(4,4,4,4,3,3,3,2,2,1);
    bag.forEachWithOccurrences((    Integer each,    int parameter) -> forEach.add(each));
    return forEach;
  }
  @Override default void RichIterable_iterator_iterationOrder(){
    MutableCollection<Integer> iterationOrder=this.newMutableForFilter();
    Iterator<Integer> iterator=this.getInstanceUnderTest().iterator();
    while (iterator.hasNext()) {
      iterationOrder.add(iterator.next());
    }
    assertEquals(RichIterableWithDuplicatesTestCase.super.expectedIterationOrder(),iterationOrder);
    MutableCollection<Integer> forEachWithIterationOrder=this.newMutableForFilter();
    this.getInstanceUnderTest().forEachWith((each,param) -> forEachWithIterationOrder.add(each),null);
    assertEquals(RichIterableWithDuplicatesTestCase.super.expectedIterationOrder(),forEachWithIterationOrder);
    MutableCollection<Integer> forEachWithIndexIterationOrder=this.newMutableForFilter();
    this.getInstanceUnderTest().forEachWithIndex((each,index) -> forEachWithIndexIterationOrder.add(each));
    assertEquals(RichIterableWithDuplicatesTestCase.super.expectedIterationOrder(),forEachWithIndexIterationOrder);
  }
  @Test default void Bag_sizeDistinct(){
    Bag<Integer> bag=this.newWith(3,3,3,2,2,1);
    assertEquals(3,bag.sizeDistinct());
  }
  @Test default void Bag_occurrencesOf(){
    Bag<Integer> bag=this.newWith(3,3,3,2,2,1);
    assertEquals(0,bag.occurrencesOf(0));
    assertEquals(1,bag.occurrencesOf(1));
    assertEquals(2,bag.occurrencesOf(2));
    assertEquals(3,bag.occurrencesOf(3));
  }
  @Test default void Bag_toStringOfItemToCount(){
    assertEquals("{}",this.newWith().toStringOfItemToCount());
    assertThat(this.newWith(2,2,1).toStringOfItemToCount(),isOneOf("{1=1, 2=2}","{2=2, 1=1}"));
  }
}
