public class UnifiedSetWithHashingStrategyParallelTest extends ParallelUnsortedSetIterableTestCase {
  private static final HashingStrategy<Integer> INTEGER_TO_STRING_HASHING_STRATEGY=HashingStrategies.fromFunction(Integer::valueOf);
  @Override protected ParallelUnsortedSetIterable<Integer> classUnderTest(){
    return this.newWith(1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected ParallelUnsortedSetIterable<Integer> newWith(  Integer... littleElements){
    return UnifiedSetWithHashingStrategy.newSetWith(INTEGER_TO_STRING_HASHING_STRATEGY,littleElements).asParallel(this.executorService,this.batchSize);
  }
  @Override protected MutableSet<Integer> getExpected(){
    return UnifiedSetWithHashingStrategy.newSetWith(INTEGER_TO_STRING_HASHING_STRATEGY,1,2,2,3,3,3,4,4,4,4);
  }
  @Override protected MutableSet<Integer> getExpectedWith(  Integer... littleElements){
    return UnifiedSetWithHashingStrategy.newSetWith(INTEGER_TO_STRING_HASHING_STRATEGY,littleElements);
  }
  @Test(expected=IllegalArgumentException.class) public void asParallel_small_batch(){
    UnifiedSetWithHashingStrategy.newSetWith(INTEGER_TO_STRING_HASHING_STRATEGY,1,2,2,3,3,3,4,4,4,4).asParallel(this.executorService,0);
  }
  @Test(expected=NullPointerException.class) public void asParallel_null_executorService(){
    UnifiedSetWithHashingStrategy.newSetWith(INTEGER_TO_STRING_HASHING_STRATEGY,1,2,2,3,3,3,4,4,4,4).asParallel(null,2);
  }
}
