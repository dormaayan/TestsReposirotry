public class ImmutableUnifiedMap2Test extends MapIterableTestCase {
  @Override protected <K,V>ImmutableMap<K,V> newMap(){
    return new ImmutableUnifiedMap<>(UnifiedMap.<K,V>newMap());
  }
  @Override protected <K,V>ImmutableMap<K,V> newMapWithKeyValue(  K key1,  V value1){
    return new ImmutableUnifiedMap<>(UnifiedMap.newWithKeysValues(key1,value1));
  }
  @Override protected <K,V>ImmutableMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2){
    return new ImmutableUnifiedMap<>(UnifiedMap.newWithKeysValues(key1,value1,key2,value2));
  }
  @Override protected <K,V>ImmutableMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2,  K key3,  V value3){
    return new ImmutableUnifiedMap<>(UnifiedMap.newWithKeysValues(key1,value1,key2,value2,key3,value3));
  }
  @Override protected <K,V>ImmutableMap<K,V> newMapWithKeysValues(  K key1,  V value1,  K key2,  V value2,  K key3,  V value3,  K key4,  V value4){
    return new ImmutableUnifiedMap<>(UnifiedMap.newWithKeysValues(key1,value1,key2,value2,key3,value3,key4,value4));
  }
  @Override @Test public void partition_value(){
    MapIterable<String,Integer> map=UnifiedMap.newWithKeysValues("A",1,"B",2,"C",3,"D",4);
    PartitionIterable<Integer> partition=map.partition(IntegerPredicates.isEven());
    Assert.assertEquals(iSet(2,4),partition.getSelected().toSet());
    Assert.assertEquals(iSet(1,3),partition.getRejected().toSet());
  }
  @Override @Test public void partitionWith_value(){
    MapIterable<String,Integer> map=UnifiedMap.newWithKeysValues("A",1,"B",2,"C",3,"D",4);
    PartitionIterable<Integer> partition=map.partitionWith(Predicates2.in(),map.select(IntegerPredicates.isEven()));
    Assert.assertEquals(iSet(2,4),partition.getSelected().toSet());
    Assert.assertEquals(iSet(1,3),partition.getRejected().toSet());
  }
}
