public class TraversorTest {
  @Test public void filterVisit(){
    Document doc=Jsoup.parse("<div><p>Hello</p></div><div>There</div>");
    final StringBuilder accum=new StringBuilder();
    NodeTraversor.filter(new NodeFilter(){
      public FilterResult head(      Node node,      int depth){
        accum.append("<" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
      public FilterResult tail(      Node node,      int depth){
        accum.append("</" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
    }
,doc.select("div"));
    assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>",accum.toString());
  }
  @Test public void filterSkipChildren(){
    Document doc=Jsoup.parse("<div><p>Hello</p></div><div>There</div>");
    final StringBuilder accum=new StringBuilder();
    NodeTraversor.filter(new NodeFilter(){
      public FilterResult head(      Node node,      int depth){
        accum.append("<" + node.nodeName() + ">");
        return ("p".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;
      }
      public FilterResult tail(      Node node,      int depth){
        accum.append("</" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
    }
,doc.select("div"));
    assertEquals("<div><p></p></div><div><#text></#text></div>",accum.toString());
  }
  @Test public void filterSkipEntirely(){
    Document doc=Jsoup.parse("<div><p>Hello</p></div><div>There</div>");
    final StringBuilder accum=new StringBuilder();
    NodeTraversor.filter(new NodeFilter(){
      public FilterResult head(      Node node,      int depth){
        if ("p".equals(node.nodeName()))         return FilterResult.SKIP_ENTIRELY;
        accum.append("<" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
      public FilterResult tail(      Node node,      int depth){
        accum.append("</" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
    }
,doc.select("div"));
    assertEquals("<div></div><div><#text></#text></div>",accum.toString());
  }
  @Test public void filterRemove(){
    Document doc=Jsoup.parse("<div><p>Hello</p></div><div>There be <b>bold</b></div>");
    NodeTraversor.filter(new NodeFilter(){
      public FilterResult head(      Node node,      int depth){
        return ("p".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;
      }
      public FilterResult tail(      Node node,      int depth){
        return ("b".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;
      }
    }
,doc.select("div"));
    assertEquals("<div></div>\n<div>\n There be \n</div>",doc.select("body").html());
  }
  @Test public void filterStop(){
    Document doc=Jsoup.parse("<div><p>Hello</p></div><div>There</div>");
    final StringBuilder accum=new StringBuilder();
    NodeTraversor.filter(new NodeFilter(){
      public FilterResult head(      Node node,      int depth){
        accum.append("<" + node.nodeName() + ">");
        return FilterResult.CONTINUE;
      }
      public FilterResult tail(      Node node,      int depth){
        accum.append("</" + node.nodeName() + ">");
        return ("p".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;
      }
    }
,doc.select("div"));
    assertEquals("<div><p><#text></#text></p>",accum.toString());
  }
}
