/** 
 * Tests for QueueUtils factory methods.
 */
public class QueueUtilsTest {
  protected Predicate<Object> truePredicate=TruePredicate.truePredicate();
  protected Transformer<Object,Object> nopTransformer=TransformerUtils.nopTransformer();
  @Test public void testSynchronizedQueue(){
    final Queue<Object> queue=QueueUtils.synchronizedQueue(new LinkedList<>());
    assertTrue("Returned object should be a SynchronizedQueue.",queue instanceof SynchronizedQueue);
    try {
      QueueUtils.synchronizedQueue(null);
      fail("Expecting NullPointerException for null queue.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testUnmodifiableQueue(){
    final Queue<Object> queue=QueueUtils.unmodifiableQueue(new LinkedList<>());
    assertTrue("Returned object should be an UnmodifiableQueue.",queue instanceof UnmodifiableQueue);
    try {
      QueueUtils.unmodifiableQueue(null);
      fail("Expecting NullPointerException for null queue.");
    }
 catch (    final NullPointerException ex) {
    }
    assertSame("UnmodifiableQueue shall not be decorated",queue,QueueUtils.unmodifiableQueue(queue));
  }
  @Test public void testPredicatedQueue(){
    final Queue<Object> queue=QueueUtils.predicatedQueue(new LinkedList<>(),truePredicate);
    assertTrue("Returned object should be a PredicatedQueue.",queue instanceof PredicatedQueue);
    try {
      QueueUtils.predicatedQueue(null,truePredicate);
      fail("Expecting NullPointerException for null queue.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      QueueUtils.predicatedQueue(new LinkedList<>(),null);
      fail("Expecting NullPointerException for null predicate.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testTransformedQueue(){
    final Queue<Object> queue=QueueUtils.transformingQueue(new LinkedList<>(),nopTransformer);
    assertTrue("Returned object should be an TransformedQueue.",queue instanceof TransformedQueue);
    try {
      QueueUtils.transformingQueue(null,nopTransformer);
      fail("Expecting NullPointerException for null queue.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      QueueUtils.transformingQueue(new LinkedList<>(),null);
      fail("Expecting NullPointerException for null transformer.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testEmptyQueue(){
    final Queue<Object> queue=QueueUtils.emptyQueue();
    assertTrue("Returned object should be an UnmodifiableQueue.",queue instanceof UnmodifiableQueue);
    assertTrue("Returned queue is not empty.",queue.isEmpty());
    try {
      queue.add(new Object());
      fail("Expecting UnsupportedOperationException for empty queue.");
    }
 catch (    final UnsupportedOperationException ex) {
    }
  }
}
