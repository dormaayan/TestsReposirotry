/** 
 * Test the TiedMapEntry class.
 * @since 3.0
 */
public class TiedMapEntryTest<K,V> extends AbstractMapEntryTest<K,V> {
  /** 
 * Gets the instance to test
 */
  @Override public Map.Entry<K,V> makeMapEntry(  final K key,  final V value){
    final Map<K,V> map=new HashMap<>();
    map.put(key,value);
    return new TiedMapEntry<>(map,key);
  }
  /** 
 * Tests the constructors.
 */
  @Override @Test public void testConstructors(){
  }
  /** 
 * Tests the constructors.
 */
  @SuppressWarnings("unchecked") @Test public void testSetValue(){
    final Map<K,V> map=new HashMap<>();
    map.put((K)"A",(V)"a");
    map.put((K)"B",(V)"b");
    map.put((K)"C",(V)"c");
    Map.Entry<K,V> entry=new TiedMapEntry<>(map,(K)"A");
    assertSame("A",entry.getKey());
    assertSame("a",entry.getValue());
    assertSame("a",entry.setValue((V)"x"));
    assertSame("A",entry.getKey());
    assertSame("x",entry.getValue());
    entry=new TiedMapEntry<>(map,(K)"B");
    assertSame("B",entry.getKey());
    assertSame("b",entry.getValue());
    assertSame("b",entry.setValue((V)"y"));
    assertSame("B",entry.getKey());
    assertSame("y",entry.getValue());
    entry=new TiedMapEntry<>(map,(K)"C");
    assertSame("C",entry.getKey());
    assertSame("c",entry.getValue());
    assertSame("c",entry.setValue((V)"z"));
    assertSame("C",entry.getKey());
    assertSame("z",entry.getValue());
  }
}
