/** 
 * Test class for FixedOrderComparator.
 */
public class FixedOrderComparatorTest extends AbstractComparatorTest<String> {
  /** 
 * Top cities of the world, by population including metro areas.
 */
  private static final String topCities[]=new String[]{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"};
  public FixedOrderComparatorTest(  final String name){
    super(name);
  }
  @Override public Comparator<String> makeObject(){
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCities);
    return comparator;
  }
  @Override public List<String> getComparableObjectsOrdered(){
    return Arrays.asList(topCities);
  }
  @Override public String getCompatibilityVersion(){
    return "4";
  }
  /** 
 * Tests that the constructor plus add method compares items properly.
 */
  @Test public void testConstructorPlusAdd(){
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>();
    for (    final String topCitie : topCities) {
      comparator.add(topCitie);
    }
    final String[] keys=topCities.clone();
    assertComparatorYieldsOrder(keys,comparator);
  }
  /** 
 * Tests that the array constructor compares items properly.
 */
  @Test public void testArrayConstructor(){
    final String[] keys=topCities.clone();
    final String[] topCitiesForTest=topCities.clone();
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCitiesForTest);
    assertComparatorYieldsOrder(keys,comparator);
    topCitiesForTest[0]="Brighton";
    assertComparatorYieldsOrder(keys,comparator);
  }
  /** 
 * Tests the list constructor.
 */
  @Test public void testListConstructor(){
    final String[] keys=topCities.clone();
    final List<String> topCitiesForTest=new LinkedList<>(Arrays.asList(topCities));
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCitiesForTest);
    assertComparatorYieldsOrder(keys,comparator);
    topCitiesForTest.set(0,"Brighton");
    assertComparatorYieldsOrder(keys,comparator);
  }
  /** 
 * Tests addAsEqual method.
 */
  @Test public void testAddAsEqual(){
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCities);
    comparator.addAsEqual("New York","Minneapolis");
    assertEquals(0,comparator.compare("New York","Minneapolis"));
    assertEquals(-1,comparator.compare("Tokyo","Minneapolis"));
    assertEquals(1,comparator.compare("Shanghai","Minneapolis"));
  }
  /** 
 * Tests whether or not updates are disabled after a comparison is made.
 */
  @Test public void testLock(){
    final FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCities);
    assertEquals(false,comparator.isLocked());
    comparator.compare("New York","Tokyo");
    assertEquals(true,comparator.isLocked());
    try {
      comparator.add("Minneapolis");
      fail("Should have thrown an UnsupportedOperationException");
    }
 catch (    final UnsupportedOperationException e) {
    }
    try {
      comparator.addAsEqual("New York","Minneapolis");
      fail("Should have thrown an UnsupportedOperationException");
    }
 catch (    final UnsupportedOperationException e) {
    }
  }
  @Test public void testUnknownObjectBehavior(){
    FixedOrderComparator<String> comparator=new FixedOrderComparator<>(topCities);
    try {
      comparator.compare("New York","Minneapolis");
      fail("Should have thrown a IllegalArgumentException");
    }
 catch (    final IllegalArgumentException e) {
    }
    try {
      comparator.compare("Minneapolis","New York");
      fail("Should have thrown a IllegalArgumentException");
    }
 catch (    final IllegalArgumentException e) {
    }
    assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION,comparator.getUnknownObjectBehavior());
    comparator=new FixedOrderComparator<>(topCities);
    comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);
    assertEquals(FixedOrderComparator.UnknownObjectBehavior.BEFORE,comparator.getUnknownObjectBehavior());
    LinkedList<String> keys=new LinkedList<>(Arrays.asList(topCities));
    keys.addFirst("Minneapolis");
    assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);
    assertEquals(-1,comparator.compare("Minneapolis","New York"));
    assertEquals(1,comparator.compare("New York","Minneapolis"));
    assertEquals(0,comparator.compare("Minneapolis","St Paul"));
    comparator=new FixedOrderComparator<>(topCities);
    comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
    keys=new LinkedList<>(Arrays.asList(topCities));
    keys.add("Minneapolis");
    assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);
    assertEquals(1,comparator.compare("Minneapolis","New York"));
    assertEquals(-1,comparator.compare("New York","Minneapolis"));
    assertEquals(0,comparator.compare("Minneapolis","St Paul"));
  }
  /** 
 * Shuffles the keys and asserts that the comparator sorts them back to their original order.
 */
  private void assertComparatorYieldsOrder(  final String[] orderedObjects,  final Comparator<String> comparator){
    final String[] keys=orderedObjects.clone();
    boolean isInNewOrder=false;
    final Random rand=new Random();
    while (keys.length > 1 && !isInNewOrder) {
      for (int i=keys.length - 1; i > 0; i--) {
        final String swap=keys[i];
        final int j=rand.nextInt(i + 1);
        keys[i]=keys[j];
        keys[j]=swap;
      }
      for (int i=0; i < keys.length && !isInNewOrder; i++) {
        if (!orderedObjects[i].equals(keys[i])) {
          isInNewOrder=true;
        }
      }
    }
    Arrays.sort(keys,comparator);
    for (int i=0; i < orderedObjects.length; i++) {
      assertEquals(orderedObjects[i],keys[i]);
    }
  }
}
