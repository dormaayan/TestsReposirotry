/** 
 * Tests for BagUtils factory methods.
 */
public class BagUtilsTest {
  protected Predicate<Object> truePredicate=TruePredicate.truePredicate();
  protected Transformer<Object,Object> nopTransformer=TransformerUtils.nopTransformer();
  @Test public void testSynchronizedBag(){
    final Bag<Object> bag=BagUtils.synchronizedBag(new HashBag<>());
    assertTrue("Returned object should be a SynchronizedBag.",bag instanceof SynchronizedBag);
    try {
      BagUtils.synchronizedBag(null);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testUnmodifiableBag(){
    final Bag<Object> bag=BagUtils.unmodifiableBag(new HashBag<>());
    assertTrue("Returned object should be an UnmodifiableBag.",bag instanceof UnmodifiableBag);
    try {
      BagUtils.unmodifiableBag(null);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    assertSame("UnmodifiableBag shall not be decorated",bag,BagUtils.unmodifiableBag(bag));
  }
  @Test public void testPredicatedBag(){
    final Bag<Object> bag=BagUtils.predicatedBag(new HashBag<>(),truePredicate);
    assertTrue("Returned object should be a PredicatedBag.",bag instanceof PredicatedBag);
    try {
      BagUtils.predicatedBag(null,truePredicate);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      BagUtils.predicatedBag(new HashBag<>(),null);
      fail("Expecting NullPointerException for null predicate.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testTransformedBag(){
    final Bag<Object> bag=BagUtils.transformingBag(new HashBag<>(),nopTransformer);
    assertTrue("Returned object should be an TransformedBag.",bag instanceof TransformedBag);
    try {
      BagUtils.transformingBag(null,nopTransformer);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      BagUtils.transformingBag(new HashBag<>(),null);
      fail("Expecting NullPointerException for null transformer.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testSynchronizedSortedBag(){
    final Bag<Object> bag=BagUtils.synchronizedSortedBag(new TreeBag<>());
    assertTrue("Returned object should be a SynchronizedSortedBag.",bag instanceof SynchronizedSortedBag);
    try {
      BagUtils.synchronizedSortedBag(null);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testUnmodifiableSortedBag(){
    final SortedBag<Object> bag=BagUtils.unmodifiableSortedBag(new TreeBag<>());
    assertTrue("Returned object should be an UnmodifiableSortedBag.",bag instanceof UnmodifiableSortedBag);
    try {
      BagUtils.unmodifiableSortedBag(null);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    assertSame("UnmodifiableSortedBag shall not be decorated",bag,BagUtils.unmodifiableSortedBag(bag));
  }
  @Test public void testPredicatedSortedBag(){
    final Bag<Object> bag=BagUtils.predicatedSortedBag(new TreeBag<>(),truePredicate);
    assertTrue("Returned object should be a PredicatedSortedBag.",bag instanceof PredicatedSortedBag);
    try {
      BagUtils.predicatedSortedBag(null,truePredicate);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      BagUtils.predicatedSortedBag(new TreeBag<>(),null);
      fail("Expecting NullPointerException for null predicate.");
    }
 catch (    final NullPointerException ex) {
    }
  }
  @Test public void testTransformedSortedBag(){
    final Bag<Object> bag=BagUtils.transformingSortedBag(new TreeBag<>(),nopTransformer);
    assertTrue("Returned object should be an TransformedSortedBag",bag instanceof TransformedSortedBag);
    try {
      BagUtils.transformingSortedBag(null,nopTransformer);
      fail("Expecting NullPointerException for null bag.");
    }
 catch (    final NullPointerException ex) {
    }
    try {
      BagUtils.transformingSortedBag(new TreeBag<>(),null);
      fail("Expecting NullPointerException for null transformer.");
    }
 catch (    final NullPointerException ex) {
    }
  }
}
