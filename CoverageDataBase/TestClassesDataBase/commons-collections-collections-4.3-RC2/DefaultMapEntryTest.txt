/** 
 * Test the DefaultMapEntry class.
 * @since 3.0
 */
public class DefaultMapEntryTest<K,V> extends AbstractMapEntryTest<K,V> {
  /** 
 * Make an instance of Map.Entry with the default (null) key and value. Subclasses should override this method to return a Map.Entry of the type being tested.
 */
  @Override public Map.Entry<K,V> makeMapEntry(){
    return new DefaultMapEntry<>(null,null);
  }
  /** 
 * Make an instance of Map.Entry with the specified key and value. Subclasses should override this method to return a Map.Entry of the type being tested.
 */
  @Override public Map.Entry<K,V> makeMapEntry(  final K key,  final V value){
    return new DefaultMapEntry<>(key,value);
  }
  /** 
 * Subclasses should override this method.
 */
  @Override @SuppressWarnings("unchecked") @Test public void testConstructors(){
    final Map.Entry<K,V> entry=new DefaultMapEntry<>((K)key,(V)value);
    assertSame(key,entry.getKey());
    assertSame(value,entry.getValue());
    final KeyValue<K,V> pair=new DefaultKeyValue<>((K)key,(V)value);
    assertSame(key,pair.getKey());
    assertSame(value,pair.getValue());
    final Map.Entry<K,V> entry2=new DefaultMapEntry<>(entry);
    assertSame(key,entry2.getKey());
    assertSame(value,entry2.getValue());
    entry.setValue(null);
    assertSame(value,entry2.getValue());
  }
  @Override @SuppressWarnings("unchecked") public void testSelfReferenceHandling(){
    final Map.Entry<K,V> entry=makeMapEntry();
    try {
      entry.setValue((V)entry);
      assertSame(entry,entry.getValue());
    }
 catch (    final Exception e) {
      fail("This Map.Entry implementation supports value self-reference.");
    }
  }
}
