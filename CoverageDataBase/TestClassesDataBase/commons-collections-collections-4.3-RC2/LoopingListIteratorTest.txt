/** 
 * Tests the LoopingListIterator class.
 */
public class LoopingListIteratorTest {
  /** 
 * Tests constructor exception.
 */
  @Test public void testConstructorEx() throws Exception {
    try {
      new LoopingListIterator<>(null);
      fail();
    }
 catch (    final NullPointerException ex) {
    }
  }
  /** 
 * Tests whether an empty looping list iterator works.
 */
  @Test public void testLooping0() throws Exception {
    final List<Object> list=new ArrayList<>();
    final LoopingListIterator<Object> loop=new LoopingListIterator<>(list);
    assertFalse(loop.hasNext());
    assertFalse(loop.hasPrevious());
    try {
      loop.next();
      fail();
    }
 catch (    final NoSuchElementException ex) {
    }
    try {
      loop.previous();
      fail();
    }
 catch (    final NoSuchElementException ex) {
    }
  }
  /** 
 * Tests whether a looping list iterator works on a list with only one element.
 */
  @Test public void testLooping1() throws Exception {
    final List<String> list=Arrays.asList("a");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    assertTrue(loop.hasPrevious());
    assertEquals("a",loop.previous());
    assertTrue(loop.hasPrevious());
    assertEquals("a",loop.previous());
    assertTrue(loop.hasPrevious());
    assertEquals("a",loop.previous());
  }
  /** 
 * Tests whether a looping list iterator works on a list with two elements.
 */
  @Test public void testLooping2() throws Exception {
    final List<String> list=Arrays.asList("a","b");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    assertTrue(loop.hasNext());
    assertEquals("b",loop.next());
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    loop.reset();
    assertTrue(loop.hasPrevious());
    assertEquals("b",loop.previous());
    assertTrue(loop.hasPrevious());
    assertEquals("a",loop.previous());
    assertTrue(loop.hasPrevious());
    assertEquals("b",loop.previous());
  }
  /** 
 * Tests jogging back and forth between two elements, but not over the begin/end boundary of the list.
 */
  @Test public void testJoggingNotOverBoundary(){
    final List<String> list=Arrays.asList("a","b");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("a",loop.previous());
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    assertEquals("b",loop.previous());
    assertEquals("b",loop.next());
  }
  /** 
 * Tests jogging back and forth between two elements over the begin/end boundary of the list.
 */
  @Test public void testJoggingOverBoundary(){
    final List<String> list=Arrays.asList("a","b");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertEquals("b",loop.previous());
    assertEquals("b",loop.next());
    assertEquals("b",loop.previous());
    assertEquals("a",loop.previous());
    assertEquals("a",loop.next());
    assertEquals("a",loop.previous());
  }
  /** 
 * Tests removing an element from a wrapped ArrayList.
 */
  @Test public void testRemovingElementsAndIteratingForward(){
    final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertTrue(loop.hasNext());
    assertEquals("a",loop.next());
    loop.remove();
    assertEquals(2,list.size());
    assertTrue(loop.hasNext());
    assertEquals("b",loop.next());
    loop.remove();
    assertEquals(1,list.size());
    assertTrue(loop.hasNext());
    assertEquals("c",loop.next());
    loop.remove();
    assertEquals(0,list.size());
    assertFalse(loop.hasNext());
    try {
      loop.next();
      fail();
    }
 catch (    final NoSuchElementException ex) {
    }
  }
  /** 
 * Tests removing an element from a wrapped ArrayList.
 */
  @Test public void testRemovingElementsAndIteratingBackwards(){
    final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertTrue(loop.hasPrevious());
    assertEquals("c",loop.previous());
    loop.remove();
    assertEquals(2,list.size());
    assertTrue(loop.hasPrevious());
    assertEquals("b",loop.previous());
    loop.remove();
    assertEquals(1,list.size());
    assertTrue(loop.hasPrevious());
    assertEquals("a",loop.previous());
    loop.remove();
    assertEquals(0,list.size());
    assertFalse(loop.hasPrevious());
    try {
      loop.previous();
      fail();
    }
 catch (    final NoSuchElementException ex) {
    }
  }
  /** 
 * Tests the reset method.
 */
  @Test public void testReset(){
    final List<String> list=Arrays.asList("a","b","c");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    loop.reset();
    assertEquals("a",loop.next());
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    assertEquals("c",loop.next());
    loop.reset();
    assertEquals("c",loop.previous());
    assertEquals("b",loop.previous());
    loop.reset();
    assertEquals("c",loop.previous());
    loop.reset();
    assertEquals("c",loop.previous());
    assertEquals("b",loop.previous());
    assertEquals("a",loop.previous());
  }
  /** 
 * Tests the add method.
 */
  @Test public void testAdd(){
    List<String> list=new ArrayList<>(Arrays.asList("b","e","f"));
    LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    loop.add("a");
    assertEquals("b",loop.next());
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    loop.add("c");
    assertEquals("e",loop.next());
    assertEquals("e",loop.previous());
    assertEquals("c",loop.previous());
    assertEquals("c",loop.next());
    loop.add("d");
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    assertEquals("c",loop.next());
    assertEquals("d",loop.next());
    assertEquals("e",loop.next());
    assertEquals("f",loop.next());
    assertEquals("a",loop.next());
    list=new ArrayList<>(Arrays.asList("b","e","f"));
    loop=new LoopingListIterator<>(list);
    loop.add("a");
    assertEquals("a",loop.previous());
    loop.reset();
    assertEquals("f",loop.previous());
    assertEquals("e",loop.previous());
    loop.add("d");
    assertEquals("d",loop.previous());
    loop.add("c");
    assertEquals("c",loop.previous());
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    assertEquals("c",loop.next());
    assertEquals("d",loop.next());
    assertEquals("e",loop.next());
    assertEquals("f",loop.next());
    assertEquals("a",loop.next());
  }
  /** 
 * Tests nextIndex and previousIndex.
 */
  @Test public void testNextAndPreviousIndex(){
    final List<String> list=Arrays.asList("a","b","c");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertEquals(0,loop.nextIndex());
    assertEquals(2,loop.previousIndex());
    assertEquals("a",loop.next());
    assertEquals(1,loop.nextIndex());
    assertEquals(0,loop.previousIndex());
    assertEquals("a",loop.previous());
    assertEquals(0,loop.nextIndex());
    assertEquals(2,loop.previousIndex());
    assertEquals("c",loop.previous());
    assertEquals(2,loop.nextIndex());
    assertEquals(1,loop.previousIndex());
    assertEquals("b",loop.previous());
    assertEquals(1,loop.nextIndex());
    assertEquals(0,loop.previousIndex());
    assertEquals("a",loop.previous());
    assertEquals(0,loop.nextIndex());
    assertEquals(2,loop.previousIndex());
  }
  /** 
 * Tests using the set method to change elements.
 */
  @Test public void testSet(){
    final List<String> list=Arrays.asList("q","r","z");
    final LoopingListIterator<String> loop=new LoopingListIterator<>(list);
    assertEquals("z",loop.previous());
    loop.set("c");
    loop.reset();
    assertEquals("q",loop.next());
    loop.set("a");
    assertEquals("r",loop.next());
    loop.set("b");
    loop.reset();
    assertEquals("a",loop.next());
    assertEquals("b",loop.next());
    assertEquals("c",loop.next());
  }
}
