/** 
 * Tests the PeekingIterator.
 */
public class PeekingIteratorTest<E> extends AbstractIteratorTest<E> {
  private final String[] testArray={"a","b","c"};
  private List<E> testList;
  public PeekingIteratorTest(  final String testName){
    super(testName);
  }
  /** 
 * {@inheritDoc}
 */
  @SuppressWarnings("unchecked") @Override protected void setUp() throws Exception {
    super.setUp();
    testList=new ArrayList<>(Arrays.asList((E[])testArray));
  }
  @Override public Iterator<E> makeEmptyIterator(){
    return PeekingIterator.peekingIterator(Collections.<E>emptyList().iterator());
  }
  @Override public PeekingIterator<E> makeObject(){
    return PeekingIterator.peekingIterator(testList.iterator());
  }
  @Override public boolean supportsRemove(){
    return true;
  }
  @Test public void testEmpty(){
    final Iterator<E> it=makeEmptyIterator();
    assertFalse(it.hasNext());
  }
  @Test @SuppressWarnings("unchecked") public void testSinglePeek(){
    final PeekingIterator<E> it=makeObject();
    assertEquals("a",it.peek());
    assertEquals("a",it.element());
    validate(it,(E[])testArray);
  }
  @Test public void testMultiplePeek(){
    final PeekingIterator<E> it=makeObject();
    assertEquals("a",it.peek());
    assertEquals("a",it.peek());
    assertEquals("a",it.next());
    assertTrue(it.hasNext());
    assertEquals("b",it.peek());
    assertEquals("b",it.peek());
    assertEquals("b",it.next());
    assertTrue(it.hasNext());
    assertEquals("c",it.peek());
    assertEquals("c",it.peek());
    assertEquals("c",it.next());
    assertFalse(it.hasNext());
  }
  @Test public void testIteratorExhausted(){
    final PeekingIterator<E> it=makeObject();
    it.next();
    it.next();
    it.next();
    assertFalse(it.hasNext());
    assertNull(it.peek());
    try {
      it.element();
      fail();
    }
 catch (    final NoSuchElementException e) {
    }
  }
  @Test public void testIllegalRemove(){
    final PeekingIterator<E> it=makeObject();
    it.next();
    it.remove();
    assertTrue(it.hasNext());
    assertEquals("b",it.peek());
    try {
      it.remove();
      fail();
    }
 catch (    final IllegalStateException e) {
    }
  }
  private void validate(  final Iterator<E> iter,  final E... items){
    for (    final E x : items) {
      assertTrue(iter.hasNext());
      assertEquals(x,iter.next());
    }
    assertFalse(iter.hasNext());
  }
}
