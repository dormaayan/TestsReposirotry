/** 
 * Extension of  {@link AbstractMapTest} for exercising the{@link LazyMap} implementation.
 * @since 3.0
 */
@SuppressWarnings("boxing") public class LazyMapTest<K,V> extends AbstractIterableMapTest<K,V> {
  private static final Factory<Integer> oneFactory=FactoryUtils.constantFactory(1);
  public LazyMapTest(  final String testName){
    super(testName);
  }
  @Override public LazyMap<K,V> makeObject(){
    return lazyMap(new HashMap<K,V>(),FactoryUtils.<V>nullFactory());
  }
  @Override public void testMapGet(){
  }
  @Test public void mapGetWithFactory(){
    Map<Integer,Number> map=lazyMap(new HashMap<Integer,Number>(),oneFactory);
    assertEquals(0,map.size());
    final Number i1=map.get("Five");
    assertEquals(1,i1);
    assertEquals(1,map.size());
    final Number i2=map.get(new String(new char[]{'F','i','v','e'}));
    assertEquals(1,i2);
    assertEquals(1,map.size());
    assertSame(i1,i2);
    map=lazyMap(new HashMap<Integer,Number>(),FactoryUtils.<Long>nullFactory());
    final Object o=map.get("Five");
    assertEquals(null,o);
    assertEquals(1,map.size());
  }
  @Test public void mapGetWithTransformer(){
    final Transformer<Number,Integer> intConverter=new Transformer<Number,Integer>(){
      @Override public Integer transform(      final Number input){
        return input.intValue();
      }
    }
;
    final Map<Long,Number> map=lazyMap(new HashMap<Long,Number>(),intConverter);
    assertEquals(0,map.size());
    final Number i1=map.get(123L);
    assertEquals(123,i1);
    assertEquals(1,map.size());
  }
  @Override public String getCompatibilityVersion(){
    return "4";
  }
}
