/** 
 * Tests the PushbackIterator.
 */
public class PushbackIteratorTest<E> extends AbstractIteratorTest<E> {
  private final String[] testArray={"a","b","c"};
  private List<E> testList;
  public PushbackIteratorTest(  final String testName){
    super(testName);
  }
  /** 
 * {@inheritDoc}
 */
  @SuppressWarnings("unchecked") @Override protected void setUp() throws Exception {
    super.setUp();
    testList=new ArrayList<>(Arrays.asList((E[])testArray));
  }
  @Override public Iterator<E> makeEmptyIterator(){
    return PushbackIterator.pushbackIterator(Collections.<E>emptyList().iterator());
  }
  @Override public PushbackIterator<E> makeObject(){
    return PushbackIterator.pushbackIterator(testList.iterator());
  }
  @Override public boolean supportsRemove(){
    return false;
  }
  @Test public void testNormalIteration(){
    final PushbackIterator<E> iter=makeObject();
    assertEquals("a",iter.next());
    assertEquals("b",iter.next());
    assertEquals("c",iter.next());
    assertFalse(iter.hasNext());
  }
  @Test @SuppressWarnings("unchecked") public void testImmediatePushback(){
    final PushbackIterator<E> iter=makeObject();
    iter.pushback((E)"x");
    assertEquals("x",iter.next());
    assertEquals("a",iter.next());
    validate(iter,"b","c");
  }
  @Test @SuppressWarnings("unchecked") public void testDelayedPushback(){
    final PushbackIterator<E> iter=makeObject();
    assertEquals("a",iter.next());
    iter.pushback((E)"x");
    assertEquals("x",iter.next());
    assertEquals("b",iter.next());
    validate(iter,"c");
  }
  @Test @SuppressWarnings("unchecked") public void testMultiplePushback(){
    final PushbackIterator<E> iter=makeObject();
    assertEquals("a",iter.next());
    iter.pushback((E)"x");
    iter.pushback((E)"y");
    assertEquals("y",iter.next());
    assertEquals("x",iter.next());
    assertEquals("b",iter.next());
    validate(iter,"c");
  }
  private void validate(  final Iterator<E> iter,  final Object... items){
    for (    final Object x : items) {
      assertTrue(iter.hasNext());
      assertEquals(x,iter.next());
    }
    assertFalse(iter.hasNext());
  }
}
