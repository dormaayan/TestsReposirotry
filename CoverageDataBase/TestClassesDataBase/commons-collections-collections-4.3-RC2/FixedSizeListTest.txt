/** 
 * Extension of  {@link AbstractListTest} for exercising the {@link FixedSizeList}implementation.
 * @since 3.0
 */
public class FixedSizeListTest<E> extends AbstractListTest<E> {
  public FixedSizeListTest(  final String testName){
    super(testName);
  }
  @Override public List<E> makeObject(){
    return FixedSizeList.fixedSizeList(new ArrayList<E>());
  }
  @Override public List<E> makeFullCollection(){
    final List<E> list=new ArrayList<>();
    list.addAll(Arrays.asList(getFullElements()));
    return FixedSizeList.fixedSizeList(list);
  }
  @Override public boolean isAddSupported(){
    return false;
  }
  @Override public boolean isRemoveSupported(){
    return false;
  }
  @Override public String getCompatibilityVersion(){
    return "4";
  }
  public void testListAllowsMutationOfUnderlyingCollection(){
    List<String> decoratedList=new ArrayList<>();
    decoratedList.add("item 1");
    decoratedList.add("item 2");
    FixedSizeList<String> fixedSizeList=FixedSizeList.fixedSizeList(decoratedList);
    int sizeBefore=fixedSizeList.size();
    boolean changed=decoratedList.add("New Value");
    Assert.assertTrue(changed);
    Assert.assertEquals("Modifying an the underlying list is allowed",sizeBefore + 1,fixedSizeList.size());
  }
}
