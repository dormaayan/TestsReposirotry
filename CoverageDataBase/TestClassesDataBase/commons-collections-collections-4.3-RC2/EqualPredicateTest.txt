public class EqualPredicateTest extends AbstractPredicateTest {
  private static final EqualsTestObject FALSE_OBJECT=new EqualsTestObject(false);
  private static final EqualsTestObject TRUE_OBJECT=new EqualsTestObject(true);
  @Override protected Predicate<Object> generatePredicate(){
    return equalPredicate(null);
  }
  @Test public void testNullArgumentEqualsNullPredicate() throws Exception {
    assertSame(nullPredicate(),equalPredicate(null));
  }
  @Test public void objectFactoryUsesEqualsForTest() throws Exception {
    final Predicate<EqualsTestObject> predicate=equalPredicate(FALSE_OBJECT);
    assertFalse(predicate,FALSE_OBJECT);
    assertTrue(equalPredicate(TRUE_OBJECT),TRUE_OBJECT);
  }
  @SuppressWarnings("boxing") @Test public void testPredicateTypeCanBeSuperClassOfObject() throws Exception {
    final Predicate<Number> predicate=equalPredicate((Number)4);
    assertTrue(predicate,4);
  }
public static class EqualsTestObject {
    private final boolean b;
    public EqualsTestObject(    final boolean b){
      this.b=b;
    }
    @Override public boolean equals(    final Object obj){
      return b;
    }
  }
}
