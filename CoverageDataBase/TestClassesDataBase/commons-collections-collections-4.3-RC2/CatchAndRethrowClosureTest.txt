public class CatchAndRethrowClosureTest extends AbstractClosureTest {
  private static <T>Closure<T> generateIOExceptionClosure(){
    return new CatchAndRethrowClosure<T>(){
      @Override protected void executeAndThrow(      final T input) throws IOException {
        throw new IOException();
      }
    }
;
  }
  private static <T>Closure<T> generateNullPointerExceptionClosure(){
    return new CatchAndRethrowClosure<T>(){
      @Override protected void executeAndThrow(      final T input){
        throw new NullPointerException();
      }
    }
;
  }
  private static <T>Closure<T> generateNoExceptionClosure(){
    return new CatchAndRethrowClosure<T>(){
      @Override protected void executeAndThrow(      final T input){
      }
    }
;
  }
  @Override protected <T>Closure<T> generateClosure(){
    return generateNoExceptionClosure();
  }
  @Test public void testThrowingClosure(){
    Closure<Integer> closure=generateNoExceptionClosure();
    try {
      closure.execute(Integer.valueOf(0));
    }
 catch (    final FunctorException ex) {
      Assert.fail();
    }
catch (    final RuntimeException ex) {
      Assert.fail();
    }
    closure=generateIOExceptionClosure();
    try {
      closure.execute(Integer.valueOf(0));
      Assert.fail();
    }
 catch (    final FunctorException ex) {
      Assert.assertTrue(ex.getCause() instanceof IOException);
    }
catch (    final RuntimeException ex) {
      Assert.fail();
    }
    closure=generateNullPointerExceptionClosure();
    try {
      closure.execute(Integer.valueOf(0));
      Assert.fail();
    }
 catch (    final FunctorException ex) {
      Assert.fail();
    }
catch (    final RuntimeException ex) {
      Assert.assertTrue(ex instanceof NullPointerException);
    }
  }
}
