/** 
 * Tests for  {@link BooleanComparator}.
 */
@SuppressWarnings("boxing") public class BooleanComparatorTest extends AbstractComparatorTest<Boolean> {
  public BooleanComparatorTest(  final String testName){
    super(testName);
  }
  @Override public Comparator<Boolean> makeObject(){
    return new BooleanComparator();
  }
  @Override public List<Boolean> getComparableObjectsOrdered(){
    final List<Boolean> list=new ArrayList<>();
    list.add(new Boolean(false));
    list.add(Boolean.FALSE);
    list.add(new Boolean(false));
    list.add(Boolean.TRUE);
    list.add(new Boolean(true));
    list.add(true);
    return list;
  }
  @Override public String getCompatibilityVersion(){
    return "4";
  }
  @Test public void testConstructors(){
    allTests(false,new BooleanComparator());
    allTests(false,new BooleanComparator(false));
    allTests(true,new BooleanComparator(true));
  }
  @Test public void testStaticFactoryMethods(){
    allTests(false,BooleanComparator.getFalseFirstComparator());
    allTests(false,BooleanComparator.booleanComparator(false));
    allTests(true,BooleanComparator.getTrueFirstComparator());
    allTests(true,BooleanComparator.booleanComparator(true));
  }
  @Test public void testEqualsCompatibleInstance(){
    assertEquals(new BooleanComparator(),new BooleanComparator(false));
    assertEquals(new BooleanComparator(false),new BooleanComparator(false));
    assertEquals(new BooleanComparator(false),BooleanComparator.getFalseFirstComparator());
    assertSame(BooleanComparator.getFalseFirstComparator(),BooleanComparator.booleanComparator(false));
    assertEquals(new BooleanComparator(true),new BooleanComparator(true));
    assertEquals(new BooleanComparator(true),BooleanComparator.getTrueFirstComparator());
    assertSame(BooleanComparator.getTrueFirstComparator(),BooleanComparator.booleanComparator(true));
    assertTrue(!new BooleanComparator().equals(new BooleanComparator(true)));
    assertTrue(!new BooleanComparator(true).equals(new BooleanComparator(false)));
  }
  protected void allTests(  final boolean trueFirst,  final BooleanComparator comp){
    orderIndependentTests(comp);
    if (trueFirst) {
      trueFirstTests(comp);
    }
 else {
      falseFirstTests(comp);
    }
  }
  protected void trueFirstTests(  final BooleanComparator comp){
    assertNotNull(comp);
    assertEquals(0,comp.compare(true,true));
    assertEquals(0,comp.compare(false,false));
    assertTrue(comp.compare(false,true) > 0);
    assertTrue(comp.compare(true,false) < 0);
  }
  protected void falseFirstTests(  final BooleanComparator comp){
    assertNotNull(comp);
    assertEquals(0,comp.compare(true,true));
    assertEquals(0,comp.compare(false,false));
    assertTrue(comp.compare(false,true) < 0);
    assertTrue(comp.compare(true,false) > 0);
  }
  protected void orderIndependentTests(  final BooleanComparator comp){
    nullArgumentTests(comp);
  }
  protected void nullArgumentTests(  final BooleanComparator comp){
    assertNotNull(comp);
    try {
      comp.compare(null,null);
      fail("Expected NullPointerException");
    }
 catch (    final NullPointerException e) {
    }
    try {
      comp.compare(Boolean.TRUE,null);
      fail("Expected NullPointerException");
    }
 catch (    final NullPointerException e) {
    }
    try {
      comp.compare(Boolean.FALSE,null);
      fail("Expected NullPointerException");
    }
 catch (    final NullPointerException e) {
    }
    try {
      comp.compare(null,Boolean.TRUE);
      fail("Expected NullPointerException");
    }
 catch (    final NullPointerException e) {
    }
    try {
      comp.compare(null,Boolean.FALSE);
      fail("Expected NullPointerException");
    }
 catch (    final NullPointerException e) {
    }
  }
}
