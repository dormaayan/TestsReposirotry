public class ComparatorPredicateTest extends AbstractPredicateTest {
private class TestComparator<T extends Comparable<T>> implements Comparator<T> {
    @Override public int compare(    final T first,    final T second){
      return first.compareTo(second);
    }
  }
  @Test public void compareEquals(){
    final Integer value=Integer.valueOf(10);
    final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>());
    assertFalse(p,Integer.valueOf(value.intValue() - 1));
    assertTrue(p,Integer.valueOf(value.intValue()));
    assertFalse(p,Integer.valueOf(value.intValue() + 1));
  }
  @Test public void compareGreater(){
    final Integer value=Integer.valueOf(10);
    final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER);
    assertTrue(p,Integer.valueOf(value.intValue() - 1));
    assertFalse(p,Integer.valueOf(value.intValue()));
    assertFalse(p,Integer.valueOf(value.intValue() + 1));
  }
  @Test public void compareLess(){
    final Integer value=Integer.valueOf(10);
    final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS);
    assertFalse(p,Integer.valueOf(value.intValue() - 1));
    assertFalse(p,Integer.valueOf(value.intValue()));
    assertTrue(p,Integer.valueOf(value.intValue() + 1));
  }
  @Test public void compareGreaterOrEqual(){
    final Integer value=Integer.valueOf(10);
    final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER_OR_EQUAL);
    assertTrue(p,Integer.valueOf(value.intValue() - 1));
    assertTrue(p,Integer.valueOf(value.intValue()));
    assertFalse(p,Integer.valueOf(value.intValue() + 1));
  }
  @Test public void compareLessOrEqual(){
    final Integer value=Integer.valueOf(10);
    final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS_OR_EQUAL);
    assertFalse(p,Integer.valueOf(value.intValue() - 1));
    assertTrue(p,Integer.valueOf(value.intValue()));
    assertTrue(p,Integer.valueOf(value.intValue() + 1));
  }
  @Override protected Predicate<?> generatePredicate(){
    return comparatorPredicate(Integer.valueOf(10),new TestComparator<Integer>());
  }
}
