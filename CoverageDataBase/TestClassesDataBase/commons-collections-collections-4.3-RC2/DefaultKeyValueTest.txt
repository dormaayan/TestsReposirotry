/** 
 * Test the DefaultKeyValue class.
 * @since 3.0
 */
public class DefaultKeyValueTest<K,V> {
  private final String key="name";
  private final String value="duke";
  /** 
 * Make an instance of DefaultKeyValue with the default (null) key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.
 */
  protected DefaultKeyValue<K,V> makeDefaultKeyValue(){
    return new DefaultKeyValue<>(null,null);
  }
  /** 
 * Make an instance of DefaultKeyValue with the specified key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.
 */
  protected DefaultKeyValue<K,V> makeDefaultKeyValue(  final K key,  final V value){
    return new DefaultKeyValue<>(key,value);
  }
  @SuppressWarnings("unchecked") @Test public void testAccessorsAndMutators(){
    final DefaultKeyValue<K,V> kv=makeDefaultKeyValue();
    kv.setKey((K)key);
    assertTrue(kv.getKey() == key);
    kv.setValue((V)value);
    assertTrue(kv.getValue() == value);
    kv.setKey(null);
    assertTrue(kv.getKey() == null);
    kv.setValue(null);
    assertTrue(kv.getValue() == null);
  }
  @SuppressWarnings("unchecked") @Test public void testSelfReferenceHandling(){
    final DefaultKeyValue<K,V> kv=makeDefaultKeyValue();
    try {
      kv.setKey((K)kv);
      fail("Should throw an IllegalArgumentException");
    }
 catch (    final IllegalArgumentException iae) {
      assertTrue(kv.getKey() == null && kv.getValue() == null);
    }
    try {
      kv.setValue((V)kv);
      fail("Should throw an IllegalArgumentException");
    }
 catch (    final IllegalArgumentException iae) {
      assertTrue(kv.getKey() == null && kv.getValue() == null);
    }
  }
  /** 
 * Subclasses should override this method to test their own constructors.
 */
  @SuppressWarnings("unchecked") @Test public void testConstructors(){
    DefaultKeyValue<K,V> kv=new DefaultKeyValue<>();
    assertTrue(kv.getKey() == null && kv.getValue() == null);
    kv=new DefaultKeyValue<>((K)key,(V)value);
    assertTrue(kv.getKey() == key && kv.getValue() == value);
    final DefaultKeyValue<K,V> kv2=new DefaultKeyValue<>(kv);
    assertTrue(kv2.getKey() == key && kv2.getValue() == value);
    kv.setKey(null);
    kv.setValue(null);
    assertTrue(kv2.getKey() == key && kv2.getValue() == value);
    final Map<K,V> map=new HashMap<>();
    map.put((K)key,(V)value);
    final Map.Entry<K,V> entry=map.entrySet().iterator().next();
    kv=new DefaultKeyValue<>(entry);
    assertTrue(kv.getKey() == key && kv.getValue() == value);
    entry.setValue(null);
    assertTrue(kv.getValue() == value);
  }
  @SuppressWarnings("unchecked") @Test public void testEqualsAndHashCode(){
    DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);
    DefaultKeyValue<K,V> kv2=makeDefaultKeyValue((K)key,(V)value);
    assertTrue(kv.equals(kv));
    assertTrue(kv.equals(kv2));
    assertTrue(kv.hashCode() == kv2.hashCode());
    kv=makeDefaultKeyValue(null,null);
    kv2=makeDefaultKeyValue(null,null);
    assertTrue(kv.equals(kv));
    assertTrue(kv.equals(kv2));
    assertTrue(kv.hashCode() == kv2.hashCode());
  }
  @SuppressWarnings("unchecked") @Test public void testToString(){
    DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);
    assertTrue(kv.toString().equals(kv.getKey() + "=" + kv.getValue()));
    kv=makeDefaultKeyValue(null,null);
    assertTrue(kv.toString().equals(kv.getKey() + "=" + kv.getValue()));
  }
  @SuppressWarnings("unchecked") @Test public void testToMapEntry(){
    final DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);
    final Map<K,V> map=new HashMap<>();
    map.put(kv.getKey(),kv.getValue());
    final Map.Entry<K,V> entry=map.entrySet().iterator().next();
    assertTrue(entry.equals(kv.toMapEntry()));
    assertTrue(entry.hashCode() == kv.hashCode());
  }
}
