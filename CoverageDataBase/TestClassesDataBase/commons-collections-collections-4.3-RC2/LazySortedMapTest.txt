/** 
 * Extension of  {@link LazyMapTest} for exercising the{@link LazySortedMap} implementation.
 * @since 3.0
 */
@SuppressWarnings("boxing") public class LazySortedMapTest<K,V> extends AbstractSortedMapTest<K,V> {
  private static final Factory<Integer> oneFactory=FactoryUtils.constantFactory(1);
  public LazySortedMapTest(  final String testName){
    super(testName);
  }
  @Override public SortedMap<K,V> makeObject(){
    return lazySortedMap(new TreeMap<K,V>(),FactoryUtils.<V>nullFactory());
  }
  @Override public boolean isAllowNullKey(){
    return false;
  }
  @Override public void testMapGet(){
  }
  @Test public void mapGet(){
    Map<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),oneFactory);
    assertEquals(0,map.size());
    final Number i1=map.get(5);
    assertEquals(1,i1);
    assertEquals(1,map.size());
    map=lazySortedMap(new TreeMap<Integer,Number>(),FactoryUtils.<Number>nullFactory());
    final Number o=map.get(5);
    assertEquals(null,o);
    assertEquals(1,map.size());
  }
  public void testSortOrder(){
    final SortedMap<String,Number> map=lazySortedMap(new TreeMap<String,Number>(),oneFactory);
    map.put("A",5);
    map.get("B");
    map.put("C",8);
    assertEquals("First key should be A","A",map.firstKey());
    assertEquals("Last key should be C","C",map.lastKey());
    assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());
    assertEquals("Last key in head map should be B","B",map.headMap("C").lastKey());
    assertEquals("Last key in submap should be B","B",map.subMap("A","C").lastKey());
    final Comparator<?> c=map.comparator();
    assertTrue("natural order, so comparator should be null",c == null);
  }
  public void testTransformerDecorate(){
    final Transformer<Object,Integer> transformer=TransformerUtils.asTransformer(oneFactory);
    SortedMap<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),transformer);
    assertTrue(map instanceof LazySortedMap);
    try {
      map=lazySortedMap(new TreeMap<Integer,Number>(),(Transformer<Integer,Number>)null);
      fail("Expecting NullPointerException for null transformer");
    }
 catch (    final NullPointerException e) {
    }
    try {
      map=lazySortedMap((SortedMap<Integer,Number>)null,transformer);
      fail("Expecting NullPointerException for null map");
    }
 catch (    final NullPointerException e) {
    }
  }
  @Override public String getCompatibilityVersion(){
    return "4";
  }
}
