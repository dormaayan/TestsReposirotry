/** 
 * Base class for tests of AnyPredicate, AllPredicate, and OnePredicate.
 * @since 3.0
 */
public abstract class AbstractAnyAllOnePredicateTest<T> extends AbstractCompositePredicateTest<T> {
  /** 
 * Creates a new <code>TestCompositePredicate</code>.
 * @param testValue the value which the mock predicates should expect to see (may be null).
 */
  protected AbstractAnyAllOnePredicateTest(  final T testValue){
    super(testValue);
  }
  /** 
 * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.
 */
  @Override @SuppressWarnings("unchecked") @Test public final void singleElementArrayToGetInstance(){
    final Predicate<T> predicate=createMockPredicate(null);
    final Predicate<T> allPredicate=getPredicateInstance(predicate);
    assertSame("expected argument to be returned by getInstance()",predicate,allPredicate);
  }
  /** 
 * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the collection.
 */
  @Override @Test public final void singletonCollectionToGetInstance(){
    final Predicate<T> predicate=createMockPredicate(null);
    final Predicate<T> allPredicate=getPredicateInstance(Collections.<Predicate<T>>singleton(predicate));
    assertSame("expected singleton collection member to be returned by getInstance()",predicate,allPredicate);
  }
  /** 
 * Tests creating composite predicate instances with single predicates and verifies that the composite returns the same value as the single predicate does.
 */
  @SuppressWarnings("boxing") public final void singleValues(){
    assertTrue(getPredicateInstance(true).evaluate(null));
    assertFalse(getPredicateInstance(false).evaluate(null));
  }
}
