public class DBResource extends ExternalResource {
  private final DB db;
  public Connection connection;
  public DBResource(  final DB db){
    this.db=db;
  }
  public DBDatabaseDriver newDriver(){
    try {
      return db.driver.newInstance();
    }
 catch (    InstantiationException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
  public Connection getConnection(){
    return connection;
  }
  @Override protected void before() throws Throwable {
    Class.forName(db.jdbcClass);
    String user=db.username != null ? db.username : "sa";
    String password=db.password != null ? db.password : "";
    connection=DriverManager.getConnection(db.jdbcURL,user,password);
  }
  @Override protected void after(){
    if (db == DB.HSQL) {
      try {
        Statement st=connection.createStatement();
        st.execute("SHUTDOWN");
      }
 catch (      SQLException ex) {
        ex.printStackTrace();
      }
    }
    try {
      DBTools.close(connection);
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  public enum DB {  SQLITE("org.sqlite.JDBC","jdbc:sqlite::memory:",DBDatabaseDriverSQLite.class),   HSQL("org.hsqldb.jdbcDriver","jdbc:hsqldb:mem:data/derby/test",DBDatabaseDriverHSql.class),   DERBY("org.apache.derby.jdbc.EmbeddedDriver","jdbc:derby:memory:data/derby/test;create=true",DBDatabaseDriverDerby.class),   H2("org.h2.Driver","jdbc:h2:mem:data/h2/test",DBDatabaseDriverH2.class),   POSTGRESQL("org.postgresql.Driver","jdbc:postgresql://localhost",DBDatabaseDriverPostgreSQL.class,"postgres","postgres"),   MSSQL("com.microsoft.sqlserver.jdbc.SQLServerDriver","jdbc:sqlserver://localhost:1433",DBDatabaseDriverMSSQL.class),   MSSQL_JTDS("net.sourceforge.jtds.jdbc.Driver","jdbc:jtds:sqlserver://localhost/databasename;instance=sqlexpress;domain=mydomain",DBDatabaseDriverMSSQL.class);   private final String jdbcClass;
  private final String jdbcURL;
  private final String username;
  private final String password;
  private final Class<? extends DBDatabaseDriver> driver;
  private DB(  final String jdbcClass,  final String jdbcURL,  final Class<? extends DBDatabaseDriver> driver){
    this(jdbcClass,jdbcURL,driver,null,null);
  }
  private DB(  final String jdbcClass,  final String jdbcURL,  final Class<? extends DBDatabaseDriver> driver,  final String username,  final String password){
    this.driver=driver;
    this.jdbcClass=jdbcClass;
    this.jdbcURL=jdbcURL;
    this.username=username;
    this.password=password;
  }
}
}
