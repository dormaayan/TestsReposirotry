@Ignore public class DBDatabaseDriverPostgreSQLTest {
  @Rule public DBResource dbResource=new DBResource(DB.POSTGRESQL);
  @Test public void testCreateReverseFunction() throws SQLException {
    Connection conn=dbResource.getConnection();
    DBDatabaseDriver driver=dbResource.newDriver();
    ((DBDatabaseDriverPostgreSQL)driver).createReverseFunction(conn);
    Statement statement=conn.createStatement();
    ResultSet resultSet=statement.executeQuery("SELECT reverse('reverseme')");
    resultSet.next();
    String reversed=resultSet.getString(1);
    resultSet.close();
    statement.close();
    conn.close();
    assertEquals("emesrever",reversed);
  }
  @Test public void testBlobDDL() throws SQLException {
    Connection conn=dbResource.getConnection();
    DBDatabaseDriver driver=dbResource.newDriver();
    CompanyDB db=new CompanyDB();
    db.open(driver,dbResource.getConnection());
    if (!databaseExists(conn,db)) {
      DBSQLScript script=new DBSQLScript();
      db.getCreateDDLScript(db.getDriver(),script);
      System.out.println(script.toString());
      script.executeAll(db.getDriver(),dbResource.getConnection(),false);
    }
    conn.close();
  }
  @Test public void testBlobWritingReading() throws SQLException {
    Connection conn=dbResource.getConnection();
    DBDatabaseDriver driver=dbResource.newDriver();
    CompanyDB db=new CompanyDB();
    db.open(driver,dbResource.getConnection());
    DBRecord emp=new DBRecord();
    emp.create(db.DATA);
    emp.setValue(db.DATA.DATA,new byte[]{1,2,3});
    emp.update(conn);
    DBCommand cmd=db.createCommand();
    cmd.select(db.DATA.DATA);
    DBReader reader=new DBReader();
    reader.open(cmd,conn);
    while (reader.moveNext()) {
      byte[] value=(byte[])reader.getValue(db.DATA.DATA);
      Assert.assertArrayEquals(new byte[]{1,2,3},value);
    }
    conn.close();
  }
  /** 
 * Checks whether the database exists or not by executing select count(*) from DEPARTMENTS If the Departments table does not exist the querySingleInt() function return -1 for failure. Please note that in this case an error will appear in the log which can be ignored.
 */
  private static boolean databaseExists(  Connection conn,  CompanyDB db){
    DBCommand cmd=db.createCommand();
    cmd.select(db.DEPARTMENT.count());
    try {
      return (db.querySingleInt(cmd,-1,conn) >= 0);
    }
 catch (    QueryFailedException ex) {
      System.out.println("Checking whether table DEPARTMENTS exists (SQLException will be logged if not - please ignore) ...");
      System.out.println(ex.getMessage());
    }
    return false;
  }
}
