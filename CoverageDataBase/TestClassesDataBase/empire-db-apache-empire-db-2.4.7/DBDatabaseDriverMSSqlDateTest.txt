@Ignore public class DBDatabaseDriverMSSqlDateTest {
  @Rule public DBResource dbResource=new DBResource(DB.MSSQL_JTDS);
  @Test public void testDateFormatYMD() throws Exception {
    runTestWithDateFormat("ymd");
  }
  @Test public void testDateFormatDMY() throws Exception {
    runTestWithDateFormat("dmy");
  }
  public void runTestWithDateFormat(  String dbDateFormat) throws Exception {
    Connection conn=dbResource.getConnection();
    DBDatabaseDriver driver=dbResource.newDriver();
    DateTimeTestDB db=new DateTimeTestDB();
    db.open(driver,dbResource.getConnection());
    if (!databaseExists(conn,db)) {
      DBSQLScript script=new DBSQLScript();
      db.getCreateDDLScript(db.getDriver(),script);
      System.out.println(script.toString());
      script.executeAll(db.getDriver(),dbResource.getConnection(),false);
    }
    clearDatabase(conn,db);
    DateFormat truncDateFmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    DateFormat dateFmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    Timestamp lastLoginTs=new Timestamp(System.currentTimeMillis());
    Date regDate=dateFmt.parse("2015-08-20 00:00:00.000");
{
      driver.executeSQL("SET DATEFORMAT " + dbDateFormat,null,conn,null);
      DBRecord rec=new DBRecord();
      rec.create(db.USER_INFO);
      rec.setValue(db.USER_INFO.USER,"john.doe");
      rec.setValue(db.USER_INFO.REG_DATE,regDate);
      rec.setValue(db.USER_INFO.LAST_LOGIN,lastLoginTs);
      rec.update(conn);
      int id=rec.getInt(db.USER_INFO.ID);
      DBRecord recRead=new DBRecord();
      recRead.read(db.USER_INFO,id,conn);
      assertEquals(truncDateFmt.format(lastLoginTs),truncDateFmt.format(recRead.getDateTime(db.USER_INFO.LAST_LOGIN)));
      assertEquals(truncDateFmt.format(regDate),truncDateFmt.format(recRead.getDateTime(db.USER_INFO.REG_DATE)));
    }
  }
  /** 
 * <PRE> Empties all Tables. </PRE>
 */
  private static void clearDatabase(  Connection conn,  DateTimeTestDB db){
    DBCommand cmd=db.createCommand();
    db.executeDelete(db.USER_INFO,cmd,conn);
  }
  /** 
 * <PRE> Checks whether the database exists or not by executing select count(*) from USER_INFO If the Departments table does not exist the querySingleInt() function return -1 for failure. Please note that in this case an error will appear in the log which can be ignored. </PRE>
 */
  private static boolean databaseExists(  Connection conn,  DateTimeTestDB db){
    DBCommand cmd=db.createCommand();
    cmd.select(db.USER_INFO.count());
    try {
      return (db.querySingleInt(cmd,-1,conn) >= 0);
    }
 catch (    Exception e) {
      return false;
    }
  }
private static class DateTimeTestDB extends DBDatabase {
    private static final long serialVersionUID=1L;
public static class UserInfoTable extends DBTable {
      private static final long serialVersionUID=1L;
      public final DBTableColumn ID;
      public final DBTableColumn USER;
      public final DBTableColumn REG_DATE;
      public final DBTableColumn LAST_LOGIN;
      public UserInfoTable(      DBDatabase db){
        super("USER_INFO",db);
        ID=addColumn("DEPARTMENT_ID",DataType.AUTOINC,0,DataMode.AutoGenerated);
        USER=addColumn("USER",DataType.TEXT,80,DataMode.NotNull);
        REG_DATE=addColumn("REG_DATE",DataType.DATE,80,DataMode.NotNull);
        LAST_LOGIN=addColumn("LAST_LOGIN",DataType.DATETIME,0,DataMode.Nullable);
        setPrimaryKey(ID);
      }
    }
    public final UserInfoTable USER_INFO=new UserInfoTable(this);
    public DateTimeTestDB(){
      super();
    }
  }
}
