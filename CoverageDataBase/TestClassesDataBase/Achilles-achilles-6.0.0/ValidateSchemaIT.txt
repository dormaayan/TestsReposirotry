public class ValidateSchemaIT {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void should_fail_validating_schema_when_partition_key_missing() throws Exception {
    final Cluster cluster=CassandraEmbeddedServerBuilder.builder().withScript("EntityWithMissingPartitionKey/schema.cql").buildNativeCluster();
    cluster.init();
    exception.expect(AchillesBeanMappingException.class);
    exception.expectMessage("The mapped partition key(s) [id] for entity " + "info.archinnov.achilles.internals.entities.EntityWithMissingPartitionKey " + "do not correspond to live schema partition key(s) [id, bucket]");
    ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithMissingPartitionKey.class).build();
  }
  @Test public void should_fail_validating_schema_when_clustering_column_missing() throws Exception {
    final Cluster cluster=CassandraEmbeddedServerBuilder.builder().withScript("EntityWithMissingClustering/schema.cql").buildNativeCluster();
    exception.expect(AchillesBeanMappingException.class);
    exception.expectMessage("The mapped clustering column(s) [clust] for entity " + "info.archinnov.achilles.internals.entities.EntityWithMissingClustering " + "do not correspond to live schema clustering column(s) [clust, missing_clust]");
    ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithMissingClustering.class).build();
  }
  @Test public void should_fail_validating_schema_when_static_column_missing() throws Exception {
    final Cluster cluster=CassandraEmbeddedServerBuilder.builder().withScript("EntityWithMissingStaticCol/schema.cql").buildNativeCluster();
    exception.expect(AchillesBeanMappingException.class);
    exception.expectMessage("The mapped static column(s) [staticcol] for entity " + "info.archinnov.achilles.internals.entities.EntityWithMissingStaticCol " + "do not correspond to live schema static column(s) [missing_static, staticcol]");
    ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithMissingStaticCol.class).build();
  }
}
