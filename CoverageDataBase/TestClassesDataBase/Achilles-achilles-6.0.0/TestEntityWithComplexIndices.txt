public class TestEntityWithComplexIndices {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithComplexIndices.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithComplexIndices.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithComplexIndices_Manager manager=resource.getManagerFactory().forEntityWithComplexIndices();
  @Test public void should_query_using_simple_index() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("313").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getFullIndexOnCollection()).containsExactly("313");
  }
  @Test public void should_query_using_collection_index() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_collectionIndex().Contains("4").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("411");
  }
  @Test public void should_query_using_full_collection_index() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_fullIndexOnCollection().Eq(Sets.newHashSet("311")).getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("311");
  }
  @Test public void should_query_using_map_key_index() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapKey().ContainsKey("312").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
  @Test public void should_query_using_map_key_value() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapValue().ContainsValue("211").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("211");
  }
  @Test public void should_query_using_map_key_entry() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapEntry().ContainsEntry(212,"212").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("212");
  }
  @Test public void should_query_using_index_and_partition_key() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("313").id().Eq(id).getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("313");
  }
  @Test public void should_query_using_index_and_clustering_column() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("312").clust1().Eq(3).clust3().Eq("2").getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
  @Test public void should_query_using_index_and_clustering_column_slice() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("312").clust1().Gte_And_Lte(1,4).getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
  @Test public void should_query_using_index_and_clustering_column_inequality() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("312").clust1().Gte(5).getList();
    assertThat(actual).hasSize(0);
  }
  @Test public void should_query_using_index_and_multi_clustering_columns_slice() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithComplexIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("312").clust1_clust2_clust3().clust1_And_clust2_And_clust3_Gte_And_clust1_And_clust2_Lte(1,1,"1",3,2).getList();
    assertThat(actual).hasSize(1);
    final EntityWithComplexIndices entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
}
