public class PrimitiveAsClusteringColumnIT {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithPrimitiveClusteringColumn.class).truncateBeforeAndAfterTest().withScript("create_keyspace.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithPrimitiveClusteringColumn.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private EntityWithPrimitiveClusteringColumn_Manager manager=resource.getManagerFactory().forEntityWithPrimitiveClusteringColumn();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  @Test public void should_select_dsl() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithPrimitiveClusteringColumn/insert_rows.cql",ImmutableMap.of("id",id));
    final List<EntityWithPrimitiveClusteringColumn> found=manager.dsl().select().allColumns_FromBaseTable().where().partition().Eq(id).clustering().IN(true,false).getList();
    assertThat(found).hasSize(2);
    final EntityWithPrimitiveClusteringColumn falseE=found.get(0);
    assertThat(falseE.getClustering()).isFalse();
    assertThat(falseE.getValue()).isEqualTo("false");
    final EntityWithPrimitiveClusteringColumn trueE=found.get(1);
    assertThat(trueE.getClustering()).isTrue();
    assertThat(trueE.getValue()).isEqualTo("true");
  }
}
