public class TestALLEntityAsChild {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityAsChild.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityAsChild.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityAsChild_Manager manager=resource.getManagerFactory().forEntityAsChild();
  @Test public void should_insert() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityAsChild entity=new EntityAsChild(id,"val","child_val");
    manager.crud().insert(entity).execute();
    final Row row=session.execute("SELECT * FROM entity_child").one();
    assertThat(row.getLong("id")).isEqualTo(id);
    assertThat(row.getString("value")).isEqualTo("val");
    assertThat(row.getString("child_value")).isEqualTo("child_val");
  }
  @Test public void should_insert_generate_query_and_bound_values() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityAsChild entity=new EntityAsChild(id,"val","child_val");
    final InsertWithOptions<EntityAsChild> insert=manager.crud().insert(entity).usingTimeToLive(123).usingTimestamp(100L);
    String expectedQuery="INSERT INTO " + DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME + ".entity_child (id,child_value,value) "+ "VALUES (:id,:child_value,:value) "+ "USING TTL :ttl;";
    assertThat(insert.getStatementAsString()).isEqualTo(expectedQuery);
    assertThat(insert.getBoundValues()).containsExactly(id,"child_val","val",123);
    assertThat(insert.getEncodedBoundValues()).containsExactly(id,"child_val","val",123);
    assertThat(insert.generateAndGetBoundStatement().preparedStatement().getQueryString()).isEqualTo(expectedQuery);
  }
  @Test public void should_find_by_id() throws Exception {
    final long id=RandomUtils.nextLong(0,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityAsChild/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    final EntityAsChild actual=manager.crud().findById(id).get();
    assertThat(actual).isNotNull();
    assertThat(actual.getValue()).isEqualTo("val");
    assertThat(actual.getAnotherValue()).isEqualTo("child_val");
  }
  @Test public void should_delete_by_id() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityAsChild/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    manager.crud().deleteById(id).execute();
    final List<Row> rows=session.execute("SELECT * FROM entity_child WHERE id = " + id).all();
    assertThat(rows).isEmpty();
  }
  @Test public void should_delete_entity_generate_query_and_bound_values() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityAsChild entity=new EntityAsChild(id,"val","child_val");
    final DeleteWithOptions<EntityAsChild> delete=manager.crud().delete(entity);
    String expectedQuery="DELETE FROM " + DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME + ".entity_child "+ "WHERE id=:id;";
    assertThat(delete.getStatementAsString()).isEqualTo(expectedQuery);
    assertThat(delete.getBoundValues()).containsExactly(id);
    assertThat(delete.getEncodedBoundValues()).containsExactly(id);
    assertThat(delete.generateAndGetBoundStatement().preparedStatement().getQueryString()).isEqualTo(expectedQuery);
  }
  @Test public void should_dsl_select_one() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityAsChild/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    final EntityAsChild actual=manager.dsl().select().value().anotherValue().fromBaseTable().where().id().Eq(id).getOne();
    assertThat(actual).isNotNull();
    assertThat(actual.getValue()).isEqualTo("val");
    assertThat(actual.getAnotherValue()).isEqualTo("child_val");
  }
  @Test public void should_dsl_delete() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityAsChild/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    manager.dsl().delete().anotherValue().fromBaseTable().where().id().Eq(id).execute();
    final Row row=session.execute("SELECT * FROM entity_child WHERE id = " + id).one();
    assertThat(row).isNotNull();
    assertThat(row.isNull("child_value")).isTrue();
    assertThat(row.getString("value")).isEqualTo("val");
  }
  @Test public void should_dsl_update_child_value() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityAsChild/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    manager.dsl().update().fromBaseTable().anotherValue().Set("another_child_val").where().id().Eq(id).execute();
    final Row row=session.execute("SELECT child_value FROM entity_child WHERE id = " + id).one();
    assertThat(row).isNotNull();
    assertThat(row.getString("child_value")).isEqualTo("another_child_val");
  }
}
