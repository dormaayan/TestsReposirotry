public class TestEntityWithClusteringIT {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_3_6> resource=AchillesTestResourceBuilder.forJunit().createAndUseKeyspace("it_3_6").entityClassesToTruncate(EntityWithClustering.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_3_6.builder(cluster).withDefaultKeyspaceName("it_3_6").withManagedEntityClasses(EntityWithClustering.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithClustering_Manager manager=resource.getManagerFactory().forEntityWithClustering();
  @Test public void should_select_with_allow_per_partition_limit() throws Exception {
    Long id1=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    Long id2=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    Long id3=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithClustering/insertRows.cql",ImmutableMap.of("id1",id1,"id2",id2,"id3",id3));
    final List<EntityWithClustering> list=manager.dsl().select().allColumns_FromBaseTable().without_WHERE_Clause().perPartitionLimit(2).getList();
    assertThat(list).hasSize(6);
    assertThat(list.stream().map(x -> x.getClust()).collect(Collectors.toList())).containsExactly(1L,2L,1L,2L,1L,2L);
  }
}
