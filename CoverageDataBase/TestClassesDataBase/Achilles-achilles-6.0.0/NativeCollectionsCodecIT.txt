public class NativeCollectionsCodecIT {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithNativeCollections.class).truncateBeforeAndAfterTest().withScript("create_keyspace.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithNativeCollections.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private EntityWithNativeCollections_Manager manager=resource.getManagerFactory().forEntityWithNativeCollections();
  @Test public void should_insert_list_long() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final List<Long> longs=Arrays.asList(1L,2L);
    final List<Double> doubles=Arrays.asList(1.0D,2.0D);
    final Map<Integer,Long> mapIntLong=ImmutableMap.of(1,1L,2,2L);
    final Tuple2<List<Integer>,List<Double>> tuple2=Tuple2.of(Arrays.asList(1,2),Arrays.asList(1.0,2.0));
    final EntityWithNativeCollections entity=new EntityWithNativeCollections(id,longs,doubles,mapIntLong,tuple2);
    manager.crud().insert(entity).withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS).execute();
    final Row found=manager.getNativeSession().execute("SELECT * FROM achilles_embedded.entity_with_native_collections WHERE id = " + id).one();
    assertThat(found).isNotNull();
  }
}
