public class TestEntityWithComplexTuple {
  @Rule public static AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithComplexTuple.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithComplexTuple.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithComplexTuple_Manager manager=resource.getManagerFactory().forEntityWithComplexTuple();
  @AfterClass public static void cleanUp(){
    resource.getManagerFactory().shutDown();
  }
  @Test public void should_insert() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Tuple2<Integer,Map<Integer,List<String>>> tuple=Tuple2.of(10,ImmutableMap.of(20,asList("10","20")));
    final EntityWithComplexTuple entity=new EntityWithComplexTuple(id,tuple);
    manager.crud().insert(entity).execute();
    final Row actual=session.execute("SELECT * FROM complex_tuple WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    final TupleValue tupleValue=actual.getTupleValue("tuple");
    assertThat(tupleValue.getInt(0)).isEqualTo(10);
    final Map<Integer,List<String>> map=tupleValue.getMap(1,new TypeToken<Integer>(){
    }
,new TypeToken<List<String>>(){
    }
);
    assertThat(map).containsEntry(20,asList("10","20"));
  }
  @Test public void should_find() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithComplexTuple/insert_single_row.cql",ImmutableMap.of("id",id));
    final EntityWithComplexTuple actual=manager.crud().findById(id).get();
    assertThat(actual).isNotNull();
    final Tuple2<Integer,Map<Integer,List<String>>> tuple=actual.getTuple();
    assertThat(tuple._1()).isEqualTo(10);
    assertThat(tuple._2()).containsEntry(20,asList("10","20"));
  }
}
