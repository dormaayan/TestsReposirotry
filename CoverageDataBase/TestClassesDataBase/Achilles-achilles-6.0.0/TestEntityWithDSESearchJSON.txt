public class TestEntityWithDSESearchJSON {
  private static Cluster cluster=Cluster.builder().addContactPoint("127.0.0.1").build();
  private static ManagerFactory_For_IT_DSE_5_0_0 managerFactory=ManagerFactoryBuilder_For_IT_DSE_5_0_0.builder(cluster).doForceSchemaCreation(false).withDefaultKeyspaceName("achilles_dse_it").build();
  private static EntityWithDSESearchJSON_Manager manager=managerFactory.forEntityWithDSESearchJSON();
  private static ScriptExecutor scriptExecutor=new ScriptExecutor(manager.getNativeSession());
  private static String DATE_FORMAT="yyyy-MM-dd HH:mm:ss.SSS'Z'";
static {
    scriptExecutor.executeScript("EntityWithDSESearch/insertRows.cql");
  }
  @Test public void should_search_text_eq_JSON() throws Exception {
    final List<EntityWithDSESearchJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_string().Eq_FromJson("\"speedrun\"").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.stream().map(EntityWithDSESearchJSON::getString).collect(toList())).contains("speedrun");
  }
  @Test public void should_search_numeric_eq_JSON() throws Exception {
    final List<EntityWithDSESearchJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Eq_FromJson("100.03").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(100.03f);
  }
  @Test public void should_search_date_eq_JSON() throws Exception {
    final String searchedDate="\"2016-09-26 08:00:00.000+0000\"";
    final List<EntityWithDSESearchJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Eq_FromJson(searchedDate).getList();
    assertThat(actual).hasSize(1);
    assertThat(toString(actual.get(0).getDate())).isEqualTo("2016-09-26 08:00:00.000Z");
  }
  @Test public void should_search_using_solr_and_partition_JSON() throws Exception {
    final String searchedDate="\"2016-09-25 13:00:00.000+0000\"";
    final List<EntityWithDSESearchJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Eq_FromJson(searchedDate).id().Eq_FromJson("3").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(87.39f);
  }
  private String toString(  Date date){
    final SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT);
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    return dateFormat.format(date);
  }
}
