public class TestEntityWithStaticAnnotations {
  private static final Logger LOGGER=LoggerFactory.getLogger(TestEntityWithStaticAnnotations.class);
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().createAndUseKeyspace("my_static_keyspace").entityClassesToTruncate(EntityWithStaticAnnotations.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithStaticAnnotations.class).withDefaultKeyspaceName("my_static_keyspace").doForceSchemaCreation(true).withStatementsCache(statementsCache).build());
  private Session session=resource.getNativeSession();
  private EntityWithStaticAnnotations_Manager manager=resource.getManagerFactory().forEntityWithStaticAnnotations();
  @Test public void should_insert_using_static_insert_strategy_and_consistency_level() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"val","overriden_val");
    manager.crud().insert(entity).usingTimeToLive(1000).execute();
    final EntityWithStaticAnnotations newEntity=new EntityWithStaticAnnotations(id,"new_val",null);
    final CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    manager.crud().insert(newEntity).usingTimeToLive(1000).execute();
    Row actual=session.execute("SELECT * FROM entity_static_annotations WHERE partition_key = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("value")).isEqualTo("new_val");
    assertThat(actual.getString("\"overRiden\"")).isEqualTo("overriden_val");
    logAsserter.assertConsistencyLevels(LOCAL_ONE);
  }
  @Test public void should_insert_using_static_ttl() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"new_val","overriden_val");
    manager.crud().insert(entity).execute();
    LOGGER.warn("Waiting for 1 sec to allow TTL data to expire ");
    Thread.sleep(1000);
    Row actual=session.execute("SELECT * FROM entity_static_annotations WHERE partition_key = " + id).one();
    assertThat(actual).isNull();
  }
  @Test public void should_insert_overriding_static_conf() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"new_val","overriden_val");
    final CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    manager.crud().insert(entity).usingTimeToLive(10).withConsistencyLevel(LOCAL_QUORUM).execute();
    LOGGER.warn("Waiting for 1 sec to allow TTL data to expire ");
    Thread.sleep(1000);
    Row actual=session.execute("SELECT * FROM my_static_keyspace.entity_static_annotations WHERE partition_key = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("\"overRiden\"")).isEqualTo("overriden_val");
    logAsserter.assertConsistencyLevels(LOCAL_QUORUM);
  }
  @Test public void should_find_using_static_consistency() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"new_val","overriden_val");
    manager.crud().insert(entity).usingTimeToLive(1000).execute();
    final CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    final EntityWithStaticAnnotations actual=manager.crud().findById(id).get();
    assertThat(actual).isNotNull();
    logAsserter.assertConsistencyLevels(LOCAL_QUORUM);
  }
}
