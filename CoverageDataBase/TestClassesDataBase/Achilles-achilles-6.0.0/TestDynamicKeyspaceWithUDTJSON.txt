public class TestDynamicKeyspaceWithUDTJSON {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_2_2> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithNoKeyspaceUDT.class).truncateBeforeAndAfterTest().withScript("functions/createFunctions.cql").withScript("EntityWithNoKeyspaceUDT/create_alternate_schema.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_2_2.builder(cluster).withManagedEntityClasses(EntityWithNoKeyspaceUDT.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private EntityWithNoKeyspaceUDT_Manager manager=resource.getManagerFactory().forEntityWithNoKeyspaceUDT();
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private SchemaNameProvider provider=new SchemaNameProvider(){
    @Override public <T>String keyspaceFor(    Class<T> entityClass){
      return "dynamic_ks_json";
    }
    @Override public <T>String tableNameFor(    Class<T> entityClass){
      return "dynamic_table_json";
    }
  }
;
  @Test public void should_crud_insert_json_with_dynamic_ks() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    manager.crud().withSchemaNameProvider(provider).insertJSON(format("{\"id\": %s, \"clust\": {\"id\": %s, \"value\" : \"value\"}, \"udt\": {\"id\": %s, \"value\" : \"value\"}}",id,id,id)).execute();
    final List<Row> rows=session.execute("SELECT * FROM dynamic_ks_json.dynamic_table_json WHERE id = " + id).all();
    assertThat(rows).hasSize(1);
  }
  @Test public void should_crud_select_json_with_dynamic_ks() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final NoKeyspaceUDT udt=new NoKeyspaceUDT(id,"value");
    scriptExecutor.executeScriptTemplate("EntityWithNoKeyspaceUDT/insertRow.cql",ImmutableMap.of("id",id));
    final String json=manager.dsl().select().allColumnsAsJSON_From(provider).where().id().Eq(id).clust().Eq(udt).getJSON();
    assertThat(json).isEqualTo(format("{\"id\": %s, \"clust\": {\"id\": %s, \"value\": \"value\"}, \"udt\": {\"id\": %s, \"value\": \"value\"}}",id,id,id));
  }
  @Test public void should_crud_delete_json_with_dynamic_ks() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final NoKeyspaceUDT udt=new NoKeyspaceUDT(id,"value");
    scriptExecutor.executeScriptTemplate("EntityWithNoKeyspaceUDT/insertRow.cql",ImmutableMap.of("id",id));
    manager.dsl().delete().allColumns_From(provider).where().id().Eq(id).clust().Eq_FromJson(format("{\"id\": %s, \"value\": \"value\"}",id)).execute();
    final List<Row> rows=session.execute("SELECT * FROM dynamic_ks_json.dynamic_table_json WHERE id = " + id).all();
    assertThat(rows).hasSize(0);
  }
}
