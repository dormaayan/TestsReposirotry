public class TestJSONCall {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Rule public AchillesTestResource<ManagerFactory_For_IT_2_2> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityForJSONCall.class).truncateBeforeAndAfterTest().withScript("functions/createFunctions.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_2_2.builder(cluster).withManagedEntityClasses(EntityForJSONCall.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withRuntimeCodec(new CodecSignature<>(ProtocolVersion.class,String.class),new ProtocolVersionCodec()).withRuntimeCodec(new CodecSignature<>(Enumerated.Encoding.class,Integer.class,"encoding_codec"),new EncodingOrdinalCodec()).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityForJSONCall_Manager manager=resource.getManagerFactory().forEntityForJSONCall();
  private Session session=resource.getNativeSession();
  @Test public void should_select_json_star() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
    final String actual=manager.dsl().select().allColumnsAsJSON_FromBaseTable().where().id().Eq(id).clust().Eq(1L).getJSON();
    assertThat(actual).isEqualTo(format("{\"id\": %s, \"clust\": 1, " + "\"liststring\": [\"1\", \"2\"], " + "\"mapstring\": {\"1\": \"1\", \"2\": \"2\"}, "+ "\"setstring\": [\"1\", \"2\"], \"value\": \"val\"}",id));
  }
  @Test public void should_select_toJson() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
    final TypedMap actual=manager.dsl().select().value().function(SystemFunctions.toJson(EntityForJSONCall_AchillesMeta.COLUMNS.LIST_STRING),"list_as_json").fromBaseTable().where().id().Eq(id).clust().Eq(1L).getTypedMap();
    assertThat(actual.<String>getTyped("value")).isEqualTo("val");
    assertThat(actual.<String>getTyped("list_as_json")).isEqualTo("[\"1\", \"2\"]");
  }
  @Test public void should_select_allJSON() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
    final String json=manager.dsl().select().allColumnsAsJSON_FromBaseTable().where().id().Eq(id).getJSON();
    assertThat(json).isEqualTo("{\"id\": " + id + ", \"clust\": 1, "+ "\"liststring\": [\"1\", \"2\"], "+ "\"mapstring\": {\"1\": \"1\", \"2\": \"2\"}, "+ "\"setstring\": [\"1\", \"2\"], "+ "\"value\": \"val\"}");
  }
  @Test public void should_update_using_fromJson() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
    manager.dsl().update().fromBaseTable().value().Set_FromJSON("\"new_val\"").listString().Set_FromJSON("[\"one\"]").setString().Set_FromJSON("[\"two\"]").mapString().Set_FromJSON("{\"3\": \"three\"}").where().id().Eq_FromJson("\"" + id + "\"").clust().Eq_FromJson("\"1\"").if_Value().Eq_FromJSON("\"val\"").if_ListString().Eq_FromJSON("[\"1\", \"2\"]").if_SetString().Eq_FromJSON("[\"1\", \"2\"]").if_MapString().Eq_FromJSON("{\"1\": \"1\", \"2\": \"2\"}").execute();
    final Row row=session.execute("SELECT * FROM achilles_embedded.entity_for_json_function_call WHERE id = " + id).one();
    assertThat(row).isNotNull();
    assertThat(row.getString("value")).isEqualTo("new_val");
    assertThat(row.getList("liststring",String.class)).containsExactly("one");
    assertThat(row.getSet("setstring",String.class)).containsExactly("two");
    assertThat(row.getMap("mapstring",Integer.class,String.class)).hasSize(1).containsEntry(3,"three");
  }
  @Test public void should_delete_using_fromJson() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForJSONCall/insertRow.cql",ImmutableMap.of("id",id));
    manager.dsl().delete().allColumns_FromBaseTable().where().id().Eq_FromJson("\"" + id + "\"").clust().Eq_FromJson("\"1\"").if_Value().Eq_FromJSON("\"val\"").if_ListString().Eq_FromJSON("[\"1\", \"2\"]").if_SetString().Eq_FromJSON("[\"1\", \"2\"]").if_MapString().Eq_FromJSON("{\"1\": \"1\", \"2\": \"2\"}").execute();
    final Row row=session.execute("SELECT * FROM achilles_embedded.entity_for_json_function_call WHERE id = " + id).one();
    assertThat(row).isNull();
  }
  @Test public void should_insert_json() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    String json="{\"id\": " + id + ", \"clust\": 1, \"value\": \"val\", "+ "\"liststring\": [\"one\"], "+ "\"setstring\": [\"two\"], "+ "\"mapstring\": {\"3\": \"three\"}"+ "}";
    manager.crud().insertJSON(json).execute();
    final Row row=session.execute("SELECT * FROM achilles_embedded.entity_for_json_function_call WHERE id = " + id + "AND clust = 1").one();
    assertThat(row).isNotNull();
    assertThat(row.getString("value")).isEqualTo("val");
    assertThat(row.getList("liststring",String.class)).containsExactly("one");
    assertThat(row.getSet("setstring",String.class)).containsExactly("two");
    assertThat(row.getMap("mapstring",Integer.class,String.class)).hasSize(1).containsEntry(3,"three");
  }
  @Test public void should_insert_json_if_not_exists() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    String json="{\"id\": " + id + ", \"clust\": 1, \"value\": \"val\", "+ "\"liststring\": [\"one\"], "+ "\"setstring\": [\"two\"], "+ "\"mapstring\": {\"3\": \"three\"}"+ "}";
    AtomicBoolean success=new AtomicBoolean(false);
    final CountDownLatch latch=new CountDownLatch(1);
    manager.crud().insertJSON(json).ifNotExists().withLwtResultListener(new LWTResultListener(){
      @Override public void onSuccess(){
        success.getAndSet(true);
        latch.countDown();
      }
      @Override public void onError(      LWTResult lwtResult){
        latch.countDown();
      }
    }
).execute();
    latch.await();
    assertThat(success.get()).isTrue();
    final Row row=session.execute("SELECT * FROM achilles_embedded.entity_for_json_function_call WHERE id = " + id + "AND clust = 1").one();
    assertThat(row).isNotNull();
    assertThat(row.getString("value")).isEqualTo("val");
    assertThat(row.getList("liststring",String.class)).containsExactly("one");
    assertThat(row.getSet("setstring",String.class)).containsExactly("two");
    assertThat(row.getMap("mapstring",Integer.class,String.class)).hasSize(1).containsEntry(3,"three");
  }
}
