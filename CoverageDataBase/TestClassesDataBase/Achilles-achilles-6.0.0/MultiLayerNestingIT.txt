public class MultiLayerNestingIT {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityLayer1.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityLayer1.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private final EntityLayer1_Manager manager=resource.getManagerFactory().forEntityLayer1();
  @Test public void should_handle_3_levels_of_nesting_udt() throws Exception {
    final EntityLayer1 entity=new EntityLayer1("layer1",new Layer2("layer2",new Layer3("layer3")));
    manager.crud().insert(entity).execute();
    final EntityLayer1 found=manager.crud().findById("layer1").get();
    assertThat(found).isNotNull();
    assertThat(found.getLayer()).isEqualTo("layer1");
    assertThat(found.getLayer2()).isNotNull();
    assertThat(found.getLayer2().getLayer()).isEqualTo("layer2");
    assertThat(found.getLayer2().getLayer3()).isNotNull();
    assertThat(found.getLayer2().getLayer3().getLayer()).isEqualTo("layer3");
  }
  @Test public void should_select_some_columns_from_udt() throws Exception {
    final EntityLayer1 entity=new EntityLayer1("layer1_nested",new Layer2("layer2",new Layer3("layer3")));
    manager.crud().insert(entity).execute();
    final TypedMap found=manager.dsl().select().layer().layer2().layer().layer2().layer3().allColumns().fromBaseTable().where().layer().Eq(entity.getLayer()).getTypedMap();
    assertThat(found).isNotNull();
    assertThat(found.<String>getTyped("layer")).isEqualTo(entity.getLayer());
    assertThat(found.<String>getTyped("layer2.layer")).isEqualTo(entity.getLayer2().getLayer());
    assertThat(found.<UDTValue>getTyped("layer2.layer3").getString("layer")).isEqualTo(entity.getLayer2().getLayer3().getLayer());
  }
}
