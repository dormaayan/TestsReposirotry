public class TestEntityWithStaticColumn {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithStaticColumn.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithStaticColumn.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithStaticColumn_Manager manager=resource.getManagerFactory().forEntityWithStaticColumn();
  @Test public void should_insert() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    final EntityWithStaticColumn entity=new EntityWithStaticColumn(id,uuid,"static_val","val");
    manager.crud().insert(entity).execute();
    final Row actual=session.execute("SELECT * FROM entitywithstaticcolumn WHERE id = " + id + " AND uuid = "+ uuid).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("static_val");
    assertThat(actual.getString("value")).isEqualTo("val");
  }
  @Test public void should_update() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    final EntityWithStaticColumn entity=new EntityWithStaticColumn(id,uuid,"new_static","new_val");
    manager.crud().update(entity).execute();
    final Row actual=session.execute("SELECT * FROM entitywithstaticcolumn WHERE id = " + id + " AND uuid = "+ uuid).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("new_static");
    assertThat(actual.getString("value")).isEqualTo("new_val");
  }
  @Test public void should_insert_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    final EntityWithStaticColumn entity=new EntityWithStaticColumn(id,null,"new_static","new_val");
    manager.crud().updateStatic(entity).execute();
    final Row actual=session.execute("SELECT * FROM entitywithstaticcolumn WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("new_static");
    assertThat(actual.getString("value")).isEqualTo("val");
  }
  @Test public void should_update_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticColumn entity=new EntityWithStaticColumn(id,null,"static_val","val");
    manager.crud().insertStatic(entity).execute();
    final Row actual=session.execute("SELECT * FROM entitywithstaticcolumn WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("static_val");
    assertThat(actual.isNull("value")).isTrue();
  }
  @Test public void should_insert_static_with_insert_strategy() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticColumn entity1=new EntityWithStaticColumn(id,null,"static_val1","another_static_val1",null);
    final EntityWithStaticColumn entity2=new EntityWithStaticColumn(id,null,null,"another_static_val2",null);
    manager.crud().insertStatic(entity1).execute();
    manager.crud().insertStatic(entity2).withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS).execute();
    final Row actual=session.execute("SELECT * FROM entitywithstaticcolumn WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("static_val1");
    assertThat(actual.getString("another_static_col")).isEqualTo("another_static_val2");
  }
  @Test public void should_insert_static_if_not_exist() throws Exception {
    final AtomicReference<LWTResult> lwtResultRef=new AtomicReference<>();
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticColumn entity=new EntityWithStaticColumn(id,null,"static_val",null);
    manager.crud().insertStatic(entity).ifNotExists().execute();
    manager.crud().insertStatic(entity).ifNotExists().withLwtResultListener(lwtResultRef::set).execute();
    assertThat(lwtResultRef.get()).isNotNull();
    assertThat(lwtResultRef.get().currentValues().<String>getTyped("static_col")).isEqualTo("static_val");
  }
  @Test public void should_find() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    final EntityWithStaticColumn actual=manager.crud().findById(id,uuid).get();
    assertThat(actual).isNotNull();
    assertThat(actual.getStaticCol()).isEqualTo("static_val");
    assertThat(actual.getValue()).isEqualTo("val");
  }
  @Test public void should_dsl_select_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    final EntityWithStaticColumn actual=manager.dsl().select().value().staticCol().fromBaseTable().where().id().Eq(id).getOne();
    assertThat(actual).isNotNull();
    assertThat(actual.getStaticCol()).isEqualTo("static_val");
    assertThat(actual.getValue()).isEqualTo("val");
  }
  @Test public void should_dsl_update_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    manager.dsl().updateStatic().fromBaseTable().staticCol().Set("updated_static").where().id().Eq(id).if_StaticCol().Eq("static_val").execute();
    final Row actual=session.execute("SELECT static_col FROM entitywithstaticcolumn WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getString("static_col")).isEqualTo("updated_static");
  }
  @Test public void should_dsl_delete_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    scriptExecutor.executeScriptTemplate("EntityWithStaticColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid));
    manager.dsl().deleteStatic().staticCol().fromBaseTable().where().id().Eq(id).execute();
    final Row actual=session.execute("SELECT static_col FROM entitywithstaticcolumn WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.isNull("static_col")).isTrue();
  }
}
