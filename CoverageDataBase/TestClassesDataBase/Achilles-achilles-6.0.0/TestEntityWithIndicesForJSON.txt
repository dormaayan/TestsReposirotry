public class TestEntityWithIndicesForJSON {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_2_2> resource=AchillesTestResourceBuilder.forJunit().withScript("functions/createFunctions.cql").entityClassesToTruncate(EntityWithIndicesForJSON.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_2_2.builder(cluster).withManagedEntityClasses(EntityWithIndicesForJSON.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithIndicesForJSON_Manager manager=resource.getManagerFactory().forEntityWithIndicesForJSON();
  @Test public void should_query_using_simple_index_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq_FromJson("\"313\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getFullIndexOnCollection()).containsExactly("313");
  }
  @Test public void should_query_using_collection_index_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_collectionIndex().Contains_FromJson("\"4\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("411");
  }
  @Test public void should_query_using_full_collection_index_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_fullIndexOnCollection().Eq_FromJson("[\"311\"]").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("311");
  }
  @Test public void should_query_using_map_key_index_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapKey().ContainsKey_FromJSON("\"312\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
  @Test public void should_query_using_map_key_value_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapValue().ContainsValue_FromJSON("\"211\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("211");
  }
  @Test public void should_query_using_map_key_entry_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_indexOnMapEntry().ContainsEntry_FromJSON("212","\"212\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("212");
  }
  @Test public void should_query_using_index_and_partition_key_asJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<String> actual=manager.indexed().select().allColumnsAsJSON_FromBaseTable().where().indexed_simpleIndex().Eq("313").id().Eq(id).getListJSON();
    assertThat(actual).hasSize(1);
    final String json=actual.get(0);
    assertThat(json).isEqualTo("{\"id\": " + id + ", \"clust1\": 3, \"clust2\": 1, \"clust3\": \"3\", \"collectionindex\": [\"3\", \"1\", \"3\"], \"fullindexoncollection\": [\"313\"], \"indexonmapentry\": {\"313\": \"313\"}, \"indexonmapkey\": {\"313\": \"313\"}, \"indexonmapvalue\": {\"313\": \"313\"}, \"simpleindex\": \"313\"}");
  }
  @Test public void should_query_using_index_and_clustering_column_fromJSON() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithIndicesForJSON/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithIndicesForJSON> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_simpleIndex().Eq("312").clust1().Eq_FromJson("3").clust3().Eq_FromJson("\"2\"").getList();
    assertThat(actual).hasSize(1);
    final EntityWithIndicesForJSON entity=actual.get(0);
    assertThat(entity.getSimpleIndex()).isEqualTo("312");
  }
}
