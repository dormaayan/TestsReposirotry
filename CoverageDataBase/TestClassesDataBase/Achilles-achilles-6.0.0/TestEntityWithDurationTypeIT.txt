public class TestEntityWithDurationTypeIT {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_3_10> resource=AchillesTestResourceBuilder.forJunit().createAndUseKeyspace("it_3_10").entityClassesToTruncate(EntityWithDurationType.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_3_10.builder(cluster).withDefaultKeyspaceName("it_3_10").withManagedEntityClasses(EntityWithDurationType.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithDurationType_Manager manager=resource.getManagerFactory().forEntityWithDurationType();
  @Test public void should_insert() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Duration duration=Duration.from("10h30m10s");
    final EntityWithDurationType entity=new EntityWithDurationType(id,duration);
    manager.crud().insert(entity).execute();
    final Row found=session.execute("SELECT * FROM it_3_10.entity_with_duration_type WHERE id = " + id).one();
    assertThat(found).isNotNull();
    assertThat(found.get("duration",Duration.class)).isEqualTo(duration);
  }
  @Test public void should_find_by_id() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithDurationType/insert_single_row.cql",ImmutableMap.of("id",id));
    final EntityWithDurationType found=manager.crud().findById(id).get();
    assertThat(found).isNotNull();
    assertThat(found.duration).isEqualTo(Duration.from("10h30m10s"));
  }
  @Test public void should_dsl_select() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithDurationType/insert_single_row.cql",ImmutableMap.of("id",id));
    final EntityWithDurationType found=manager.dsl().select().duration().fromBaseTable().where().id().Eq(id).getOne();
    assertThat(found).isNotNull();
    assertThat(found.duration).isEqualTo(Duration.from("10h30m10s"));
  }
}
