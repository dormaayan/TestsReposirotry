public class TestOverridingSchemaNameProvider {
  private final SchemaNameProvider defaultProvider=new SchemaNameProvider(){
    @Override public <T>String keyspaceFor(    Class<T> entityClass){
      return "new_ks";
    }
    @Override public <T>String tableNameFor(    Class<T> entityClass){
      return "static_table";
    }
  }
;
  private final SchemaNameProvider runtimeProvider=new SchemaNameProvider(){
    @Override public <T>String keyspaceFor(    Class<T> entityClass){
      return "overriden_schema_name";
    }
    @Override public <T>String tableNameFor(    Class<T> entityClass){
      return "entitywithudts";
    }
  }
;
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithUDTs.class).truncateBeforeAndAfterTest().withScript("EntityWithUDTs/createSchema.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithUDTs.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withSchemaNameProvider(defaultProvider).withDefaultKeyspaceName("new_ks").build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithUDTs_Manager manager=resource.getManagerFactory().forEntityWithUDTs();
  private Session session=resource.getNativeSession();
  @Test public void should_insert_with_default_schema_name_provider() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final SimpleUDTWithNoKeyspace udt=new SimpleUDTWithNoKeyspace(id,"val");
    final EntityWithUDTs entity=new EntityWithUDTs();
    entity.setId(id);
    entity.setListUDT(Arrays.asList(udt));
    entity.setSetUDT(Sets.newHashSet(udt));
    entity.setMapUDT(ImmutableMap.of(udt,udt));
    entity.setTupleUDT(Tuple2.of(1,udt));
    entity.setOptionalUDT(Optional.of(udt));
    manager.crud().insert(entity).execute();
    final List<Row> all=session.execute("SELECT * FROM new_ks.entity_with_udts WHERE id = " + id).all();
    assertThat(all).hasSize(1);
  }
  @Test public void should_insert_with_overriden_schema_name_provider() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final SimpleUDTWithNoKeyspace udt=new SimpleUDTWithNoKeyspace(id,"val");
    final EntityWithUDTs entity=new EntityWithUDTs();
    entity.setId(id);
    entity.setListUDT(Arrays.asList(udt));
    entity.setSetUDT(Sets.newHashSet(udt));
    entity.setMapUDT(ImmutableMap.of(udt,udt));
    entity.setTupleUDT(Tuple2.of(1,udt));
    entity.setOptionalUDT(Optional.of(udt));
    manager.crud().withSchemaNameProvider(runtimeProvider).insert(entity).execute();
    final List<Row> all=session.execute("SELECT * FROM overriden_schema_name.entitywithudts WHERE id = " + id).all();
    assertThat(all).hasSize(1);
  }
  @Test public void should_find_using_default_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_default_schema.cql",ImmutableMap.of("id",id));
    final EntityWithUDTs found=manager.crud().findById(id).get();
    assertThat(found).isNotNull();
  }
  @Test public void should_find_using_runtime_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_runtime_schema.cql",ImmutableMap.of("id",id));
    final EntityWithUDTs found=manager.crud().withSchemaNameProvider(runtimeProvider).findById(id).get();
    assertThat(found).isNotNull();
  }
  @Test public void should_delete_using_default_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_default_schema.cql",ImmutableMap.of("id",id));
    manager.crud().deleteById(id).execute();
    final Row found=session.execute("SELECT * FROM new_ks.entity_with_udts WHERE id = " + id).one();
    assertThat(found).isNull();
  }
  @Test public void should_delete_using_runtime_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_runtime_schema.cql",ImmutableMap.of("id",id));
    manager.crud().withSchemaNameProvider(runtimeProvider).deleteById(id).execute();
    final Row found=session.execute("SELECT * FROM overriden_schema_name.entitywithudts WHERE id = " + id).one();
    assertThat(found).isNull();
  }
  @Test public void should_dsl_select_using_default_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_default_schema.cql",ImmutableMap.of("id",id));
    final EntityWithUDTs found=manager.dsl().select().allColumns_FromBaseTable().where().id().Eq(id).getOne();
    assertThat(found).isNotNull();
  }
  @Test public void should_dsl_select_using_runtime_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_runtime_schema.cql",ImmutableMap.of("id",id));
    final EntityWithUDTs found=manager.dsl().select().allColumns_From(runtimeProvider).where().id().Eq(id).getOne();
    assertThat(found).isNotNull();
  }
  @Test public void should_dsl_update_using_default_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final SimpleUDTWithNoKeyspace newUDT=new SimpleUDTWithNoKeyspace(id,"new_val");
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_default_schema.cql",ImmutableMap.of("id",id));
    manager.dsl().update().fromBaseTable().optionalUDT().Set(Optional.of(newUDT)).where().id().Eq(id).execute();
    final Row found=session.execute("SELECT optionaludt FROM new_ks.entity_with_udts WHERE id = " + id).one();
    assertThat(found).isNotNull();
    assertThat(found.getUDTValue("optionaludt").getString("value")).isEqualTo("new_val");
  }
  @Test public void should_dsl_update_using_runtime_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final SimpleUDTWithNoKeyspace newUDT=new SimpleUDTWithNoKeyspace(id,"new_val");
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_runtime_schema.cql",ImmutableMap.of("id",id));
    manager.dsl().update().from(runtimeProvider).optionalUDT().Set(Optional.of(newUDT)).where().id().Eq(id).execute();
    final Row found=session.execute("SELECT optionaludt FROM overriden_schema_name.entitywithudts WHERE id = " + id).one();
    assertThat(found).isNotNull();
    assertThat(found.getUDTValue("optionaludt").getString("value")).isEqualTo("new_val");
  }
  @Test public void should_dsl_delete_using_default_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_default_schema.cql",ImmutableMap.of("id",id));
    manager.dsl().delete().allColumns_FromBaseTable().where().id().Eq(id).execute();
    final Row found=session.execute("SELECT * FROM new_ks.entity_with_udts WHERE id = " + id).one();
    assertThat(found).isNull();
  }
  @Test public void should_dsl_delete_using_runtime_schema_name() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithUDTs/insertRow_runtime_schema.cql",ImmutableMap.of("id",id));
    manager.dsl().delete().allColumns_From(runtimeProvider).where().id().Eq(id).execute();
    final Row found=session.execute("SELECT * FROM overriden_schema_name.entitywithudts WHERE id = " + id).one();
    assertThat(found).isNull();
  }
}
