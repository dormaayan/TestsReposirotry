public class TestCastFunctionCallIT {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_3_2> resource=AchillesTestResourceBuilder.forJunit().withScript("functions/createFunctions3_2.cql").entityClassesToTruncate(EntityForCastFunctionCall.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_3_2.builder(cluster).withManagedEntityClasses(EntityForCastFunctionCall.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityForCastFunctionCall_Manager manager=resource.getManagerFactory().forEntityForCastFunctionCall();
  @Test public void should_dsl_with_cast_nested_into_udf_call() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    Date now=new Date();
    Thread.sleep(2);
    scriptExecutor.executeScriptTemplate("EntityForCastFunctionCall/insertRow.cql",ImmutableMap.of("id",id));
    final TypedMap typedMap=manager.dsl().select().id().function(FunctionsRegistry.convertStringToLong(castAsText(writetime(EntityForCastFunctionCall_AchillesMeta.COLUMNS.VALUE))),"casted").fromBaseTable().where().id().Eq(id).getTypedMap();
    assertThat(typedMap).isNotNull();
    assertThat(typedMap).isNotEmpty();
    assertThat(typedMap.<Long>getTyped("casted")).isGreaterThan(now.getTime());
  }
  @Test public void should_dsl_with_nested_system_casting_call() throws Exception {
    Date now=new Date();
    Thread.sleep(2);
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForCastFunctionCall/insertRow.cql",ImmutableMap.of("id",id));
    final TypedMap typedMap=manager.dsl().select().id().function(castAsText(writetime(EntityForCastFunctionCall_AchillesMeta.COLUMNS.VALUE)),"casted").fromBaseTable().where().id().Eq(id).getTypedMap();
    assertThat(typedMap).isNotNull();
    assertThat(typedMap).isNotEmpty();
    assertThat(typedMap.<String>getTyped("casted").compareTo(now.getTime() + "")).isGreaterThan(0);
  }
}
