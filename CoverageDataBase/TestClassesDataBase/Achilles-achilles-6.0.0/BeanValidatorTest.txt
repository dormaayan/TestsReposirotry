public class BeanValidatorTest extends AbstractTestProcessor {
  private BeanValidator beanValidator=new BeanValidator(){
  }
;
  @Test public void should_fail_validating_an_interface() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityAsInterface.class.getCanonicalName());
      beanValidator.validateIsAConcreteClass(aptUtils,typeElement);
    }
);
    failTestWithMessage("Bean type 'info.archinnov.achilles.internals.sample_classes.parser.validator.TestEntityAsInterface' should be a class",TestEntityAsInterface.class);
  }
  @Test public void should_fail_validating_an_abstract_class() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityAsAbstract.class.getCanonicalName());
      beanValidator.validateIsAConcreteClass(aptUtils,typeElement);
    }
);
    failTestWithMessage("Bean type 'info.archinnov.achilles.internals.sample_classes.parser.validator.TestEntityAsAbstract' should not be abstract",TestEntityAsAbstract.class);
  }
  @Test public void should_fail_validating_class_without_default_constructor() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityWithNoPublicConstructor.class.getCanonicalName());
      final TypeName typeName=ClassName.get(TestEntityWithNoPublicConstructor.class);
      beanValidator.validateConstructor(aptUtils,typeName,typeElement);
    }
);
    failTestWithMessage("Entity type 'info.archinnov.achilles.internals.sample_classes.parser.validator.TestEntityWithNoPublicConstructor'",TestEntityWithNoPublicConstructor.class);
  }
  @Test public void should_fail_validating_class_with_two_custom_constructors() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityWithNoPublicConstructor.class.getCanonicalName());
      final TypeName typeName=ClassName.get(TestEntityWithTwoCustomConstructors.class);
      beanValidator.validateConstructor(aptUtils,typeName,typeElement);
    }
);
    failTestWithMessage("Entity type 'info.archinnov.achilles.internals.sample_classes.parser.validator.TestEntityWithTwoCustomConstructors' should",TestEntityWithTwoCustomConstructors.class);
  }
  @Test public void should_validate_immutable_entity() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestImmutableEntity.class.getCanonicalName());
      final TypeName typeName=ClassName.get(TestImmutableEntity.class);
      final ConstructorInfo constructorInfo=beanValidator.validateConstructor(aptUtils,typeName,typeElement);
      assertThat(constructorInfo).isNotNull();
      assertThat(constructorInfo.type).isSameAs(IMMUTABLE);
    }
);
    launchTest();
  }
  @Test public void should_validate_entity_with_EntityCreator_constructor() throws Exception {
    setExec(aptUtils -> {
      final TypeElement typeElement=aptUtils.elementUtils.getTypeElement(TestEntityWithEntityCreatorConstructor.class.getCanonicalName());
      final TypeName typeName=ClassName.get(TestEntityWithEntityCreatorConstructor.class);
      final ConstructorInfo constructorInfo=beanValidator.validateConstructor(aptUtils,typeName,typeElement);
      assertThat(constructorInfo).isNotNull();
      assertThat(constructorInfo.type).isSameAs(ENTITY_CREATOR);
    }
);
    launchTest();
  }
}
