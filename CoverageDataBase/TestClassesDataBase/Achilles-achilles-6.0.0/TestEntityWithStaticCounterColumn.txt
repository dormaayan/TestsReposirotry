public class TestEntityWithStaticCounterColumn {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithStaticCounterColumn.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithStaticCounterColumn.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private Session session=resource.getNativeSession();
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithStaticCounterColumn_Manager manager=resource.getManagerFactory().forEntityWithStaticCounterColumn();
  @Test public void should_find() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    final long count=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final long staticCount=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithStaticCounterColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid,"count",count,"staticCount",staticCount));
    final EntityWithStaticCounterColumn actual=manager.crud().findById(id,uuid).get();
    assertThat(actual).isNotNull();
    assertThat(actual.getCount()).isEqualTo(count);
    assertThat(actual.getStaticCount()).isEqualTo(staticCount);
  }
  @Test public void should_dsl_update_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final long staticCount=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    manager.dsl().updateStatic().fromBaseTable().staticCount().Incr(staticCount).where().id().Eq(id).execute();
    final Row actual=session.execute("SELECT static_count FROM entity_static_counter WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getLong("static_count")).isEqualTo(staticCount);
  }
  @Test public void should_delete_by_id() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    final long count=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final long staticCount=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithStaticCounterColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid,"count",count,"staticCount",staticCount));
    manager.crud().deleteByPartitionKeys(id).execute();
    final Row actual=session.execute("SELECT * FROM entity_static_counter WHERE id = " + id).one();
    assertThat(actual).isNull();
  }
  @Test public void should_delete_instance() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    final EntityWithStaticCounterColumn entity=new EntityWithStaticCounterColumn(id,uuid,null,null);
    manager.crud().delete(entity).execute();
    final Row actual=session.execute("SELECT * FROM entity_static_counter WHERE id = " + id).one();
    assertThat(actual).isNull();
  }
  @Test public void should_dsl_delete_static() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UUID uuid=UUIDs.timeBased();
    final long count=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final long staticCount=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithStaticCounterColumn/insert_single_row.cql",ImmutableMap.of("id",id,"uuid",uuid,"count",count,"staticCount",staticCount));
    manager.dsl().deleteStatic().staticCount().fromBaseTable().where().id().Eq(id).execute();
    final Row actual=session.execute("SELECT * FROM entity_static_counter WHERE id = " + id).one();
    assertThat(actual).isNotNull();
    assertThat(actual.getLong("count")).isEqualTo(count);
    assertThat(actual.isNull("static_count")).isTrue();
  }
}
