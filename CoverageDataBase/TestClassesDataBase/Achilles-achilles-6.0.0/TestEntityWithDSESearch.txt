public class TestEntityWithDSESearch {
  private static Cluster cluster=Cluster.builder().addContactPoint("127.0.0.1").build();
  private static ManagerFactory_For_IT_DSE_4_8 managerFactory=ManagerFactoryBuilder_For_IT_DSE_4_8.builder(cluster).doForceSchemaCreation(false).withDefaultKeyspaceName("achilles_dse_it").build();
  private static EntityWithDSESearch_Manager manager=managerFactory.forEntityWithDSESearch();
  private static ScriptExecutor scriptExecutor=new ScriptExecutor(manager.getNativeSession());
  private static String DATE_FORMAT="yyyy-MM-dd HH:mm:ss.SSS'Z'";
static {
    scriptExecutor.executeScript("EntityWithDSESearch/insertRows.cql");
  }
  @Test public void should_search_text_using_prefix() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_string().StartWith("speed").getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getString).collect(toList())).contains("speedster","speedrun");
  }
  @Test public void should_search_text_using_suffix() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_string().EndWith("run").getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getString).collect(toList())).contains("long run","speedrun");
  }
  @Test public void should_search_text_using_substring() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_string().Contains("eds").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.stream().map(EntityWithDSESearch::getString).collect(toList())).contains("speedster");
  }
  @Test public void should_search_numeric_eq() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Eq(100.03f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(100.03f);
  }
  @Test public void should_search_numeric_gt() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gt(100.03f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(138.47f);
  }
  @Test public void should_search_numeric_gte() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gte(138.47f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(138.47f);
  }
  @Test public void should_search_numeric_lt() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Lt(100.03f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(87.39f);
  }
  @Test public void should_search_numeric_lte() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Lte(87.39f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(87.39f);
  }
  @Test public void should_search_numeric_gt_and_lt() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gt_And_Lt(87.39f,138.47f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(100.03f);
  }
  @Test public void should_search_numeric_gt_and_lte() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gt_And_Lte(87.39f,138.47f).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getNumeric).collect(toList())).contains(100.03f,138.47f);
  }
  @Test public void should_search_numeric_gte_and_lt() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gte_And_Lt(87.39f,138.47f).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getNumeric).collect(toList())).contains(87.39f,100.03f);
  }
  @Test public void should_search_numeric_gte_and_lte() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_numeric().Gte_And_Lte(87.39f,138.47f).getList();
    assertThat(actual).hasSize(3);
    assertThat(actual.stream().map(EntityWithDSESearch::getNumeric).collect(toList())).contains(87.39f,100.03f,138.47f);
  }
  @Test public void should_search_date_eq() throws Exception {
    final Date searchedDate=toDate("2016-09-26 08:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Eq(searchedDate).getList();
    assertThat(actual).hasSize(1);
    assertThat(toString(actual.get(0).getDate())).isEqualTo("2016-09-26 08:00:00.000Z");
  }
  @Test public void should_search_date_gt() throws Exception {
    final Date searchedDate=toDate("2016-09-26 08:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gt(searchedDate).getList();
    assertThat(actual).hasSize(1);
    assertThat(toString(actual.get(0).getDate())).isEqualTo("2016-09-26 09:00:00.000Z");
  }
  @Test public void should_search_date_gte() throws Exception {
    final Date searchedDate=toDate("2016-09-26 08:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gte(searchedDate).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 08:00:00.000Z","2016-09-26 09:00:00.000Z");
  }
  @Test public void should_search_date_lt() throws Exception {
    final Date searchedDate=toDate("2016-09-26 08:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Lt(searchedDate).getList();
    assertThat(actual).hasSize(1);
    assertThat(toString(actual.get(0).getDate())).isEqualTo("2016-09-25 13:00:00.000Z");
  }
  @Test public void should_search_date_lte() throws Exception {
    final Date searchedDate=toDate("2016-09-26 08:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Lte(searchedDate).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 08:00:00.000Z","2016-09-25 13:00:00.000Z");
  }
  @Test public void should_search_date_gt_and_lt() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gt_And_Lt(searchedDate1,searchedDate2).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 08:00:00.000Z");
  }
  @Test public void should_search_date_gt_and_lte() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gt_And_Lte(searchedDate1,searchedDate2).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 08:00:00.000Z","2016-09-26 09:00:00.000Z");
  }
  @Test public void should_search_date_gte_and_lt() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gte_And_Lt(searchedDate1,searchedDate2).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 08:00:00.000Z","2016-09-25 13:00:00.000Z");
  }
  @Test public void should_search_date_gte_and_lte() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gte_And_Lte(searchedDate1,searchedDate2).getList();
    assertThat(actual).hasSize(3);
    assertThat(actual.stream().map(EntityWithDSESearch::getDate).map(this::toString).collect(toList())).contains("2016-09-26 09:00:00.000Z","2016-09-26 08:00:00.000Z","2016-09-25 13:00:00.000Z");
  }
  @Test public void should_search_using_multiple_predicates() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gte_And_Lte(searchedDate1,searchedDate2).search_on_string().Contains("run").search_on_numeric().Gt_And_Lte(80f,110f).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(87.39f);
  }
  @Test public void should_search_using_raw_predicates() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_string().RawPredicate("*eed?u*").search_on_numeric().RawPredicate("{100 TO 150}").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getString()).isEqualTo("speedrun");
  }
  @Test public void should_search_using_raw_solr_query() throws Exception {
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().rawSolrQuery("string:*eed?u* OR numeric:[100 TO *]").getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.stream().map(EntityWithDSESearch::getString).collect(toList())).contains("speedrun","speedster");
  }
  @Test public void should_search_using_solr_and_partition() throws Exception {
    final Date searchedDate1=toDate("2016-09-25 13:00:00.000Z");
    final Date searchedDate2=toDate("2016-09-26 09:00:00.000Z");
    final List<EntityWithDSESearch> actual=manager.indexed().select().allColumns_FromBaseTable().where().search_on_date().Gte_And_Lte(searchedDate1,searchedDate2).search_on_string().Contains("run").id().Eq(3L).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getNumeric()).isEqualTo(87.39f);
  }
  private Date toDate(  String dateAsString) throws ParseException {
    return new SimpleDateFormat(DATE_FORMAT).parse(dateAsString);
  }
  private String toString(  Date date){
    final SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT);
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    return dateFormat.format(date);
  }
}
