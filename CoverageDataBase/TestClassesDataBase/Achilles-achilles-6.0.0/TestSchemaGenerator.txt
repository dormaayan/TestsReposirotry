public class TestSchemaGenerator extends AbstractTestUtil {
  private SchemaContext context=new SchemaContext("my_ks",false,false);
  @Test public void should_build_schema_for_entity_with_static_column() throws Exception {
    final EntityWithStaticColumn_AchillesMeta meta=new EntityWithStaticColumn_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_static_column.cql"));
  }
  @Test public void should_build_schema_for_entity_with_counter_column() throws Exception {
    final EntityWithCounterColumn_AchillesMeta meta=new EntityWithCounterColumn_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_counter_column.cql"));
  }
  @Test public void should_build_schema_for_entity_with_static_counter_column() throws Exception {
    final EntityWithStaticCounterColumn_AchillesMeta meta=new EntityWithStaticCounterColumn_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_static_counter_column.cql"));
  }
  @Test public void should_build_schema_for_child_entity() throws Exception {
    final EntityAsChild_AchillesMeta meta=new EntityAsChild_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_child_entity.cql"));
  }
  @Test public void should_build_schema_for_complex_types() throws Exception {
    final EntityWithComplexTypes_AchillesMeta meta=new EntityWithComplexTypes_AchillesMeta();
    final CodecRegistry codecRegistry=new CodecRegistry();
    TupleTypeFactory tupleTypeFactory=new TupleTypeFactory(ProtocolVersion.NEWEST_SUPPORTED,codecRegistry);
    UserTypeFactory userTypeFactory=new UserTypeFactory(ProtocolVersion.NEWEST_SUPPORTED,codecRegistry);
    meta.inject(userTypeFactory,tupleTypeFactory);
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_complex_types.cql"));
  }
  @Test public void should_build_schema_for_complex_counter() throws Exception {
    final EntityWithComplexCounters_AchillesMeta meta=new EntityWithComplexCounters_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_complex_counter.cql"));
  }
  @Test public void should_build_schema_for_complex_indices() throws Exception {
    final EntityWithComplexIndices_AchillesMeta meta=new EntityWithComplexIndices_AchillesMeta();
    final String actual=meta.generateSchema(new SchemaContext("my_ks",false,true));
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_complex_indices.cql"));
  }
  @Test public void should_build_schema_for_entity_with_static_annotations() throws Exception {
    final EntityWithStaticAnnotations_AchillesMeta meta=new EntityWithStaticAnnotations_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_static_annotations.cql"));
  }
  @Test public void should_build_schema_for_udt() throws Exception {
    final TestUDT_AchillesMeta meta=TestUDT_AchillesMeta.INSTANCE;
    final String actual=meta.generateSchema(new SchemaContext("my_ks",true,false));
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_udt.cql"));
  }
  @Test public void should_use_schema_generator() throws Exception {
    final String schema=SchemaGenerator.builder().withKeyspace("test").generateCustomTypes(true).generate();
    assertThat(schema.trim()).isEqualTo(readCodeBlockFromFile("schema/should_use_schema_generator.cql"));
  }
  @Test public void should_use_schema_generator_and_append_to_string() throws Exception {
    StringBuilder builder=new StringBuilder();
    SchemaGenerator.builder().withKeyspace("test").generateTo(builder);
    assertThat(builder.toString().trim()).isEqualTo(readCodeBlockFromFile("schema/should_use_schema_generator.cql"));
  }
  @Test public void should_build_schema_for_simple_entity() throws Exception {
    final SimpleEntity_AchillesMeta meta=new SimpleEntity_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_simple_entity.cql"));
  }
  @Test public void should_build_schema_for_entity_with_simple_partition_key() throws Exception {
    final EntityWithSimplePartitionKey_AchillesMeta meta=new EntityWithSimplePartitionKey_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_simple_partition_key.cql"));
  }
  @Test public void should_build_schema_for_entity_with_composite_partition_key() throws Exception {
    final EntityWithCompositePartitionKey_AchillesMeta meta=new EntityWithCompositePartitionKey_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_composite_partition_key.cql"));
  }
  @Test public void should_build_schema_for_entity_with_clustering_columns() throws Exception {
    final EntityWithClusteringColumns_AchillesMeta meta=new EntityWithClusteringColumns_AchillesMeta();
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_entity_with_clustering_columns.cql"));
  }
  @Test public void should_build_schema_for_view() throws Exception {
    final ViewSensorByType_AchillesMeta meta=new ViewSensorByType_AchillesMeta();
    final EntitySensor_AchillesMeta baseTableMeta=new EntitySensor_AchillesMeta();
    meta.setBaseClassProperty(baseTableMeta);
    final String actual=meta.generateSchema(context);
    assertThat(actual.trim()).isEqualTo(readCodeBlockFromFile("schema/should_build_schema_for_view.cql"));
  }
}
