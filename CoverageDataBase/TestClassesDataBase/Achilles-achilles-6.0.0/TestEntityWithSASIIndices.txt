public class TestEntityWithSASIIndices {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_3_7> resource=AchillesTestResourceBuilder.forJunit().createAndUseKeyspace("it_3_7").entityClassesToTruncate(EntityWithSASIIndices.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_3_7.builder(cluster).withDefaultKeyspaceName("it_3_7").withManagedEntityClasses(EntityWithSASIIndices.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithSASIIndices_Manager manager=resource.getManagerFactory().forEntityWithSASIIndices();
  @Test public void should_search_using_prefix_non_tokenizer() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_prefixNonTokenizer().StartWith("speed").indexed_numeric().Gte(10).indexed_numeric().Lte(15).getList();
    assertThat(actual).hasSize(2);
    assertThat(actual.get(0).getPrefixNonTokenizer()).isEqualTo("speed runner");
    assertThat(actual.get(1).getPrefixNonTokenizer()).isEqualTo("speedster");
  }
  @Test public void should_search_using_like_non_tokenizer() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_prefixNonTokenizer().Like("speedster").indexed_sparse().Gte(13).indexed_sparse().Lte(15).getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getPrefixNonTokenizer()).isEqualTo("speedster");
  }
  @Test public void should_search_using_eq_non_tokenizer() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_prefixNonTokenizer().Eq("speedster").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getPrefixNonTokenizer()).isEqualTo("speedster");
  }
  @Test public void should_search_using_end_with() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_containsStandardAnalyzer().EndWith("man").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getContainsStandardAnalyzer()).isEqualTo("the loving man");
  }
  @Test public void should_search_using_contains() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_containsStandardAnalyzer().Contains("love").getList();
    assertThat(actual).hasSize(5);
    assertThat(actual.get(0).getContainsStandardAnalyzer()).isEqualTo("forever love");
    assertThat(actual.get(1).getContainsStandardAnalyzer()).isEqualTo("lovers");
    assertThat(actual.get(2).getContainsStandardAnalyzer()).isEqualTo("the white gloves");
    assertThat(actual.get(3).getContainsStandardAnalyzer()).isEqualTo("the loving man");
    assertThat(actual.get(4).getContainsStandardAnalyzer()).isEqualTo("no love");
  }
  @Test public void should_search_using_like() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityWithSASIIndices/insertRows.cql",ImmutableMap.of("id",id));
    final List<EntityWithSASIIndices> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_containsStandardAnalyzer().Like("chair dance").getList();
    assertThat(actual).hasSize(1);
    assertThat(actual.get(0).getContainsStandardAnalyzer()).isEqualTo("the chair is dancing");
  }
}
