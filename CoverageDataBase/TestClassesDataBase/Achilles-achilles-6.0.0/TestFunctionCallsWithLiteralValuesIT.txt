public class TestFunctionCallsWithLiteralValuesIT {
  @Rule public AchillesTestResource<ManagerFactory_For_IT_3_8> resource=AchillesTestResourceBuilder.forJunit().createAndUseKeyspace("it_3_8").withScript("functions/createFunctions.cql").entityClassesToTruncate(EntityForAggregate.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder_For_IT_3_8.builder(cluster).withDefaultKeyspaceName("it_3_8").withManagedEntityClasses(EntityForAggregate.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityForAggregate_Manager manager=resource.getManagerFactory().forEntityForAggregate();
  @Test public void should_call_textToLong_with_literal_value() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForAggregate/insert_single_row.cql",ImmutableMap.of("id",id));
    final TypedMap typedMap=manager.dsl().select().function(FunctionsRegistry.textToLong(String_Type.wrap("12")),"longval").fromBaseTable().without_WHERE_Clause().limit(1).getTypedMap();
    assertThat(typedMap).hasSize(1);
    assertThat(typedMap.<Long>getTyped("longval")).isEqualTo(12L);
  }
  @Test public void should_chain_function_calls_with_literal_value() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForAggregate/insert_single_row.cql",ImmutableMap.of("id",id));
    final TypedMap typedMap=manager.dsl().select().function(SystemFunctions.bigintAsBlob(FunctionsRegistry.textToLong(String_Type.wrap("12"))),"blobval").fromBaseTable().without_WHERE_Clause().limit(1).getTypedMap();
    assertThat(typedMap).hasSize(1);
    assertThat(typedMap).containsKey("blobval");
    final byte[] expected={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0c};
    assertThat(typedMap.<ByteBuffer>getTyped("blobval").array()).isEqualTo(expected);
  }
  @Test public void should_call_aggregate_with_literal_values() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScriptTemplate("EntityForAggregate/insert_rows.cql",ImmutableMap.of("id",id));
    final TypedMap typedMap=manager.dsl().select().function(FunctionsRegistry.findByDoubleValue(COLUMNS.CLUSTERING,COLUMNS.STRING_VAL,COLUMNS.DOUBLE_VAL,Double_Type.wrap(2.0),Double_Type.wrap(4.0)),"map_result").fromBaseTable().without_WHERE_Clause().limit(1).getTypedMap();
    assertThat(typedMap).hasSize(1);
    assertThat(typedMap).containsKey("map_result");
    Map<Integer,String> mapResult=typedMap.getTyped("map_result");
    assertThat(mapResult).hasSize(3);
    assertThat(mapResult).containsEntry(2,"2.0");
    assertThat(mapResult).containsEntry(3,"3.0");
    assertThat(mapResult).containsEntry(4,"4.0");
  }
}
