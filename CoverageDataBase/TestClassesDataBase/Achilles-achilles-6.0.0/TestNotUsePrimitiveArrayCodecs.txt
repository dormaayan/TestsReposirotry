public class TestNotUsePrimitiveArrayCodecs {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithUDTCollectionsPrimitive.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithUDTCollectionsPrimitive.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  final private Session session=resource.getNativeSession();
  final private EntityWithUDTCollectionsPrimitive_Manager manager=resource.getManagerFactory().forEntityWithUDTCollectionsPrimitive();
  @Test public void should_insert_udt_with_collections_primitive() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final UDTWithCollectionsPrimitive udt=new UDTWithCollectionsPrimitive(Arrays.asList(1,2,3),Sets.newHashSet(4.0d,5.0d,6.0d));
    final EntityWithUDTCollectionsPrimitive entity=new EntityWithUDTCollectionsPrimitive(id,udt);
    manager.crud().insert(entity).execute();
    final Row found=session.execute("SELECT * FROM achilles_embedded.entity_with_udt_collections_primitives WHERE id = " + id).one();
    assertThat(found).isNotNull();
    final UDTValue udtValue=found.getUDTValue("udt");
    assertThat(udtValue).isNotNull();
    assertThat(udtValue.getList("listint",Integer.class)).containsExactly(1,2,3);
    assertThat(udtValue.getSet("setdouble",Double.class)).contains(4.0d,5.0d,6.0d);
  }
}
