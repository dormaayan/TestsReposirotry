public class TestEntityWithIndexOnClustering {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithIndexOnClustering.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithIndexOnClustering.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private EntityWithIndexOnClustering_Manager manager=resource.getManagerFactory().forEntityWithIndexOnClustering();
  @Test public void should_query_using_index_on_clustering() throws Exception {
    final Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    scriptExecutor.executeScript("EntityWithIndexOnClustering/insertRows.cql");
    final List<EntityWithIndexOnClustering> actual=manager.indexed().select().allColumns_FromBaseTable().where().indexed_clustering().Eq(1).getList();
    assertThat(actual).hasSize(3);
    final Set<String> actual_values=actual.stream().map(entity -> entity.value).collect(toSet());
    assertThat(actual_values).containsOnly("val11","val21","val31");
  }
}
