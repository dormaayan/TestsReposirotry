public class TestEntityWithNestedUdtIT {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(EntityWithNestedUDT.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(EntityWithNestedUDT.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private EntityWithNestedUDT_Manager manager=resource.getManagerFactory().forEntityWithNestedUDT();
  @Test public void should_insert_nested_udt() throws Exception {
    final Long id=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final EntityWithNestedUDT entity=new EntityWithNestedUDT();
    final UDTWithNoKeyspace udtWithNoKeySpace=new UDTWithNoKeyspace();
    udtWithNoKeySpace.setId(id);
    udtWithNoKeySpace.setValue("udt_with_no_keyspace");
    final UDTWithNestedUDT udtWithNestedUDT=new UDTWithNestedUDT();
    udtWithNestedUDT.setValue("value");
    udtWithNestedUDT.setNestedUDT(udtWithNoKeySpace);
    udtWithNestedUDT.setUdtList(Arrays.asList(udtWithNoKeySpace));
    udtWithNestedUDT.setTupleWithUDT(new Tuple2<>(1,udtWithNoKeySpace));
    entity.setId(id);
    entity.setUdt(udtWithNoKeySpace);
    entity.setComplexUDT(udtWithNestedUDT);
    entity.setOptionalUDT(Optional.of(udtWithNoKeySpace));
    manager.crud().insert(entity).execute();
    final EntityWithNestedUDT found=manager.crud().findById(id).get();
    assertThat(found).isNotNull();
    assertThat(found.getUdt()).isEqualTo(udtWithNoKeySpace);
    assertThat(found.getComplexUDT()).isEqualTo(udtWithNestedUDT);
    assertThat(found.getOptionalUDT().isPresent()).isTrue();
    assertThat(found.getOptionalUDT().get()).isEqualTo(udtWithNoKeySpace);
  }
  @Test public void should_update_nested_udt() throws Exception {
    final Long id=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final EntityWithNestedUDT entity=new EntityWithNestedUDT();
    final UDTWithNoKeyspace udtWithNoKeySpace=new UDTWithNoKeyspace();
    udtWithNoKeySpace.setId(id);
    udtWithNoKeySpace.setValue("udt_with_no_keyspace");
    entity.setId(id);
    entity.setUdt(udtWithNoKeySpace);
    manager.crud().insert(entity);
    udtWithNoKeySpace.setValue("new_udt_value");
    manager.dsl().update().fromBaseTable().udt().Set(udtWithNoKeySpace).where().id().Eq(id).execute();
    final EntityWithNestedUDT found=manager.crud().findById(id).get();
    assertThat(found.getUdt().getValue()).isEqualTo("new_udt_value");
  }
  @Test public void should_select_some_udt_columns() throws Exception {
    final Long id=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final EntityWithNestedUDT entity=new EntityWithNestedUDT();
    final UDTWithNoKeyspace udtWithNoKeySpace=new UDTWithNoKeyspace();
    udtWithNoKeySpace.setId(id);
    udtWithNoKeySpace.setValue("udt_with_no_keyspace");
    final UDTWithNestedUDT udtWithNestedUDT=new UDTWithNestedUDT();
    udtWithNestedUDT.setValue("value");
    udtWithNestedUDT.setNestedUDT(udtWithNoKeySpace);
    udtWithNestedUDT.setUdtList(Arrays.asList(udtWithNoKeySpace));
    udtWithNestedUDT.setTupleWithUDT(new Tuple2<>(1,udtWithNoKeySpace));
    entity.setId(id);
    entity.setUdt(udtWithNoKeySpace);
    entity.setComplexUDT(udtWithNestedUDT);
    manager.crud().insert(entity).execute();
    final TypedMap found=manager.dsl().select().complexUDT().value().complexUDT().nestedUDT().value().udt().value().fromBaseTable().where().id().Eq(id).getTypedMap();
    assertThat(found).isNotNull();
    assertThat(found.<String>getTyped("complexudt.value")).isEqualTo("value");
    assertThat(found.<String>getTyped("complexudt.nestedudt.VALUE")).isEqualTo("udt_with_no_keyspace");
    assertThat(found.<String>getTyped("udt.VALUE")).isEqualTo("udt_with_no_keyspace");
  }
}
