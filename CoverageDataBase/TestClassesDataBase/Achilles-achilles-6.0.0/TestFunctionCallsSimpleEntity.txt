public class TestFunctionCallsSimpleEntity {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(SimpleEntity.class,EntityWithComplexTypes.class).truncateBeforeAndAfterTest().withScript("functions/createFunctions.cql").build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(SimpleEntity.class,EntityWithComplexTypes.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withRuntimeCodec(new CodecSignature<>(ProtocolVersion.class,String.class),new ProtocolVersionCodec()).withRuntimeCodec(new CodecSignature<>(Enumerated.Encoding.class,Integer.class,"encoding_codec"),new EncodingOrdinalCodec()).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private ScriptExecutor scriptExecutor=resource.getScriptExecutor();
  private SimpleEntity_Manager manager=resource.getManagerFactory().forSimpleEntity();
  private EntityWithComplexTypes_Manager complexTypes_manager=resource.getManagerFactory().forEntityWithComplexTypes();
  @Test public void should_dsl_with_system_function_call() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Date date=buildDateKey();
    scriptExecutor.executeScriptTemplate("SimpleEntity/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    final TypedMap typedMap=manager.dsl().select().id().function(toUnixTimestamp(SimpleEntity_AchillesMeta.COLUMNS.DATE),"dateAsLong").function(writetime(SimpleEntity_AchillesMeta.COLUMNS.VALUE),"writetimeOfValue").fromBaseTable().where().id().Eq(id).date().Eq(date).getTypedMap();
    assertThat(typedMap).isNotNull();
    assertThat(typedMap).isNotEmpty();
    assertThat(typedMap.<Long>getTyped("dateaslong")).isGreaterThan(0L);
    assertThat(typedMap.<Long>getTyped("writetimeofvalue")).isGreaterThan(date.getTime());
  }
  @Test public void should_dsl_with_nested_system_function_call() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Date date=buildDateKey();
    scriptExecutor.executeScriptTemplate("SimpleEntity/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    final TypedMap typedMap=manager.dsl().select().id().function(max(writetime(SimpleEntity_AchillesMeta.COLUMNS.VALUE)),"maxWritetimeOfValue").fromBaseTable().where().id().Eq(id).date().Eq(date).getTypedMap();
    assertThat(typedMap).isNotNull();
    assertThat(typedMap).isNotEmpty();
    assertThat(typedMap.<Long>getTyped("maxwritetimeofvalue")).isGreaterThan(date.getTime());
  }
  @Test public void should_dsl_with_udf_call() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Date date=buildDateKey();
    scriptExecutor.executeScriptTemplate("SimpleEntity/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    final TypedMap typedMap=manager.dsl().select().id().function(FunctionsRegistry.convertConsistencyLevelList(SimpleEntity_AchillesMeta.COLUMNS.CONSISTENCY_LIST),"consistency_levels").fromBaseTable().where().id().Eq(id).date().Eq(date).getTypedMap();
    assertThat(typedMap).isNotNull();
    assertThat(typedMap).isNotEmpty();
    assertThat(typedMap.<String>getTyped("consistency_levels")).isEqualTo("['QUORUM','LOCAL_ONE']");
  }
  @Test public void should_fail_call_writetime_on_another_function_call() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final Date date=buildDateKey();
    scriptExecutor.executeScriptTemplate("SimpleEntity/insert_single_row.cql",ImmutableMap.of("id",id,"table","simple"));
    exception.expect(AchillesException.class);
    exception.expectMessage("Invalid argument for 'writetime' function, it does not accept function call as argument, only simple column");
    manager.dsl().select().id().function(writetime(max(SimpleEntity_AchillesMeta.COLUMNS.VALUE)),"maxWritetimeOfValue").fromBaseTable().where().id().Eq(id).date().Eq(date).getTypedMap();
  }
  @Test public void should_call_user_defined_functions() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final TestUDT udt=new TestUDT();
    final EntityWithComplexTypes entity=new EntityWithComplexTypes();
    entity.setId(id);
    entity.setValue("12345");
    entity.setListOfOptional(Arrays.asList(Optional.of("one"),Optional.of("two")));
    entity.setComplexNestingMap(ImmutableMap.of(udt,ImmutableMap.of(1,Tuple3.of(1,2,ConsistencyLevel.ALL))));
    complexTypes_manager.crud().insert(entity).execute();
    final TypedMap typedMap=complexTypes_manager.dsl().select().function(FunctionsRegistry.convertToLong(EntityWithComplexTypes_AchillesMeta.COLUMNS.VALUE),"asLong").function(FunctionsRegistry.convertListToJson(EntityWithComplexTypes_AchillesMeta.COLUMNS.LIST_OF_OPTIONAL),"list_as_json").function(FunctionsRegistry.stringifyComplexNestingMap(EntityWithComplexTypes_AchillesMeta.COLUMNS.COMPLEX_NESTING_MAP),"complex_map").fromBaseTable().where().id().Eq(id).getTypedMap();
    assertThat(typedMap.<Long>getTyped("aslong")).isEqualTo(12345L);
    assertThat(typedMap.<String>getTyped("list_as_json")).isEqualTo("[one, two]");
    assertThat(typedMap.<String>getTyped("complex_map")).contains("whatever");
  }
  private Date buildDateKey() throws ParseException {
    SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
    dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
    return dateFormat.parse("2015-10-01 00:00:00 GMT");
  }
}
