public class ConsistencyLevelOrderingIT {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(SimpleEntity.class,EntityAsChild.class,EntityWithStaticAnnotations.class).truncateBeforeAndAfterTest().withScript("create_keyspace.cql").build((cluster,statementsCache) -> {
    cluster.getConfiguration().getQueryOptions().setConsistencyLevel(ConsistencyLevel.ALL);
    return ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(SimpleEntity.class,EntityAsChild.class,EntityWithStaticAnnotations.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).withDefaultWriteConsistency(ConsistencyLevel.LOCAL_QUORUM).withDefaultWriteConsistencyMap(ImmutableMap.of("simple",ConsistencyLevel.LOCAL_ONE,"entity_static_annotations",ConsistencyLevel.TWO)).build();
  }
);
  private SimpleEntity_Manager simpleEntityManager=resource.getManagerFactory().forSimpleEntity();
  private EntityWithStaticAnnotations_Manager entityWithStaticAnnotationsManager=resource.getManagerFactory().forEntityWithStaticAnnotations();
  private EntityAsChild_Manager entityAsChildManager=resource.getManagerFactory().forEntityAsChild();
  @Test public void should_override_cluster_consistency_level_by_consistency_level_map_value() throws Exception {
    Long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    simpleEntityManager.crud().insert(new SimpleEntity(id,new Date(),"value")).execute();
    logAsserter.assertConsistencyLevels(ConsistencyLevel.LOCAL_ONE);
  }
  @Test public void should_override_consistency_level_map_value_by_static_consistency_setting() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"new_val","overriden_val");
    CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    entityWithStaticAnnotationsManager.crud().insert(entity).execute();
    logAsserter.assertConsistencyLevels(ConsistencyLevel.LOCAL_ONE);
  }
  @Test public void should_override_static_consistency_setting_by_runtime_value() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityWithStaticAnnotations entity=new EntityWithStaticAnnotations(id,"new_val","overriden_val");
    CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    entityWithStaticAnnotationsManager.crud().insert(entity).withConsistencyLevel(ConsistencyLevel.EACH_QUORUM).execute();
    logAsserter.assertConsistencyLevels(ConsistencyLevel.EACH_QUORUM);
  }
  @Test public void should_override_cluster_consistency_config_by_achilles_consistency_setting() throws Exception {
    final long id=RandomUtils.nextLong(0L,Long.MAX_VALUE);
    final EntityAsChild entityAsChild=new EntityAsChild(id,"val","another_val");
    CassandraLogAsserter logAsserter=new CassandraLogAsserter();
    logAsserter.prepareLogLevelForDriverConnection();
    entityAsChildManager.crud().insert(entityAsChild).execute();
    logAsserter.assertConsistencyLevels(ConsistencyLevel.LOCAL_QUORUM);
  }
}
