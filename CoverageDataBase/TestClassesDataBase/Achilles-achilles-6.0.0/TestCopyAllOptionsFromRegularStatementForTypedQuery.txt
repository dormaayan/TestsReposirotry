public class TestCopyAllOptionsFromRegularStatementForTypedQuery {
  @Rule public AchillesTestResource<ManagerFactory> resource=AchillesTestResourceBuilder.forJunit().entityClassesToTruncate(SimpleEntity.class).truncateBeforeAndAfterTest().build((cluster,statementsCache) -> ManagerFactoryBuilder.builder(cluster).withManagedEntityClasses(SimpleEntity.class).doForceSchemaCreation(true).withStatementsCache(statementsCache).withDefaultKeyspaceName(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME).build());
  private SimpleEntity_Manager manager=resource.getManagerFactory().forSimpleEntity();
  @Test public void should_use_type_query_with_fetch_size() throws Exception {
    final Long id1=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final Long id2=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final Long id3=RandomUtils.nextLong(0,Long.MAX_VALUE);
    final Date date=new Date();
    final SimpleEntity entity1=new SimpleEntity(id1,date,"val");
    final SimpleEntity entity2=new SimpleEntity(id2,date,"val");
    final SimpleEntity entity3=new SimpleEntity(id3,date,"val");
    manager.crud().insert(entity1).execute();
    manager.crud().insert(entity2).execute();
    manager.crud().insert(entity3).execute();
    final RegularStatement regularStatement=QueryBuilder.select().all().from(DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME,"simple");
    regularStatement.setFetchSize(1);
    final List<SimpleEntity> found=manager.raw().typedQueryForSelect(regularStatement).getList();
    assertThat(found).hasSize(1);
  }
}
