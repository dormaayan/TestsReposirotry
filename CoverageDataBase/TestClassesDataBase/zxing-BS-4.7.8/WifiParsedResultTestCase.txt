/** 
 * Tests  {@link WifiParsedResult}.
 * @author Vikram Aggarwal
 */
public final class WifiParsedResultTestCase extends Assert {
  @Test public void testNoPassword(){
    doTest("WIFI:S:NoPassword;P:;T:;;","NoPassword",null,"nopass");
    doTest("WIFI:S:No Password;P:;T:;;","No Password",null,"nopass");
  }
  @Test public void testWep(){
    doTest("WIFI:S:TenChars;P:0123456789;T:WEP;;","TenChars","0123456789","WEP");
    doTest("WIFI:S:TenChars;P:abcde56789;T:WEP;;","TenChars","abcde56789","WEP");
    doTest("WIFI:S:TenChars;P:hellothere;T:WEP;;","TenChars","hellothere","WEP");
    doTest("WIFI:S:Ten\\;\\;Chars;P:0123456789;T:WEP;;","Ten;;Chars","0123456789","WEP");
    doTest("WIFI:S:Ten\\:\\:Chars;P:0123456789;T:WEP;;","Ten::Chars","0123456789","WEP");
  }
  /** 
 * Put in checks for the length of the password for wep.
 */
  @Test public void testWpa(){
    doTest("WIFI:S:TenChars;P:wow;T:WPA;;","TenChars","wow","WPA");
    doTest("WIFI:S:TenChars;P:space is silent;T:WPA;;","TenChars","space is silent","WPA");
    doTest("WIFI:S:TenChars;P:hellothere;T:WEP;;","TenChars","hellothere","WEP");
    doTest("WIFI:S:TenChars;P:hello\\;there;T:WEP;;","TenChars","hello;there","WEP");
    doTest("WIFI:S:TenChars;P:hello\\:there;T:WEP;;","TenChars","hello:there","WEP");
  }
  @Test public void testEscape(){
    doTest("WIFI:T:WPA;S:test;P:my_password\\\\;;","test","my_password\\","WPA");
  }
  /** 
 * Given the string contents for the barcode, check that it matches our expectations
 */
  private static void doTest(  String contents,  String ssid,  String password,  String type){
    Result fakeResult=new Result(contents,null,null,BarcodeFormat.QR_CODE);
    ParsedResult result=ResultParser.parseResult(fakeResult);
    assertSame(ParsedResultType.WIFI,result.getType());
    WifiParsedResult wifiResult=(WifiParsedResult)result;
    assertEquals(ssid,wifiResult.getSsid());
    assertEquals(password,wifiResult.getPassword());
    assertEquals(type,wifiResult.getNetworkEncryption());
  }
}
