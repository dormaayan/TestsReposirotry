/** 
 * @author Pablo Ordu√±a, University of Deusto (pablo.orduna@deusto.es)
 */
public final class AnyAIDecoderTest extends AbstractDecoderTest {
  private static final String header=".....";
  @Test public void testAnyAIDecoder1() throws Exception {
    CharSequence data=header + numeric10 + numeric12+ numeric2alpha+ alphaA+ alpha2numeric+ numeric12;
    String expected="(10)12A12";
    assertCorrectBinaryString(data,expected);
  }
  @Test public void testAnyAIDecoder2() throws Exception {
    CharSequence data=header + numeric10 + numeric12+ numeric2alpha+ alphaA+ alpha2isoiec646+ i646B;
    String expected="(10)12AB";
    assertCorrectBinaryString(data,expected);
  }
  @Test public void testAnyAIDecoder3() throws Exception {
    CharSequence data=header + numeric10 + numeric2alpha+ alpha2isoiec646+ i646B+ i646C+ isoiec6462alpha+ alphaA+ alpha2numeric+ numeric10;
    String expected="(10)BCA10";
    assertCorrectBinaryString(data,expected);
  }
  @Test public void testAnyAIDecodernumericFNC1secondDigit() throws Exception {
    CharSequence data=header + numeric10 + numeric1FNC1;
    String expected="(10)1";
    assertCorrectBinaryString(data,expected);
  }
  @Test public void testAnyAIDecoderalphaFNC1() throws Exception {
    CharSequence data=header + numeric10 + numeric2alpha+ alphaA+ alphaFNC1;
    String expected="(10)A";
    assertCorrectBinaryString(data,expected);
  }
  @Test public void testAnyAIDecoder646FNC1() throws Exception {
    CharSequence data=header + numeric10 + numeric2alpha+ alphaA+ isoiec6462alpha+ i646B+ i646FNC1;
    String expected="(10)AB";
    assertCorrectBinaryString(data,expected);
  }
}
