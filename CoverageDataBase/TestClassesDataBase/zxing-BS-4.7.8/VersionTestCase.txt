/** 
 * @author Sean Owen
 */
public final class VersionTestCase extends Assert {
  @Test public void testVersionForNumber(){
    try {
      Version.getVersionForNumber(0);
      fail("Should have thrown an exception");
    }
 catch (    IllegalArgumentException iae) {
    }
    for (int i=1; i <= 40; i++) {
      checkVersion(Version.getVersionForNumber(i),i,4 * i + 17);
    }
  }
  private static void checkVersion(  Version version,  int number,  int dimension){
    assertNotNull(version);
    assertEquals(number,version.getVersionNumber());
    assertNotNull(version.getAlignmentPatternCenters());
    if (number > 1) {
      assertTrue(version.getAlignmentPatternCenters().length > 0);
    }
    assertEquals(dimension,version.getDimensionForVersion());
    assertNotNull(version.getECBlocksForLevel(ErrorCorrectionLevel.H));
    assertNotNull(version.getECBlocksForLevel(ErrorCorrectionLevel.L));
    assertNotNull(version.getECBlocksForLevel(ErrorCorrectionLevel.M));
    assertNotNull(version.getECBlocksForLevel(ErrorCorrectionLevel.Q));
    assertNotNull(version.buildFunctionPattern());
  }
  @Test public void testGetProvisionalVersionForDimension() throws Exception {
    for (int i=1; i <= 40; i++) {
      assertEquals(i,Version.getProvisionalVersionForDimension(4 * i + 17).getVersionNumber());
    }
  }
  @Test public void testDecodeVersionInformation(){
    doTestVersion(7,0x07C94);
    doTestVersion(12,0x0C762);
    doTestVersion(17,0x1145D);
    doTestVersion(22,0x168C9);
    doTestVersion(27,0x1B08E);
    doTestVersion(32,0x209D5);
  }
  private static void doTestVersion(  int expectedVersion,  int mask){
    Version version=Version.decodeVersionInformation(mask);
    assertNotNull(version);
    assertEquals(expectedVersion,version.getVersionNumber());
  }
}
