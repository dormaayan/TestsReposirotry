public class FieldByFieldComparator_compareTo_Test {
  private FieldByFieldComparator fieldByFieldComparator;
  @BeforeEach public void setUp(){
    fieldByFieldComparator=new FieldByFieldComparator();
  }
  @Test public void should_return_true_if_both_Objects_are_null(){
    assertThat(fieldByFieldComparator.compare(null,null)).isZero();
  }
  @Test public void should_return_true_if_Objects_are_equal(){
    assertThat(fieldByFieldComparator.compare(new JarJar("Yoda"),new JarJar("Yoda"))).isZero();
  }
  @Test public void should_return_false_if_Objects_are_not_equal(){
    assertThat(fieldByFieldComparator.compare(new JarJar("Yoda"),new JarJar("HanSolo"))).isNotZero();
  }
  @Test public void should_return_are_not_equal_if_first_Object_is_null_and_second_is_not(){
    assertThat(fieldByFieldComparator.compare(null,new JarJar("Yoda"))).isNotZero();
  }
  @Test public void should_return_are_not_equal_if_second_Object_is_null_and_first_is_not(){
    assertThat(fieldByFieldComparator.compare(new JarJar("Yoda"),null)).isNotZero();
  }
  @Test public void should_return_are_not_equal_if_Objects_do_not_have_the_same_properties(){
    assertThat(fieldByFieldComparator.compare(new JarJar("Yoda"),2)).isNotZero();
  }
public static class JarJar {
    public final String field;
    public JarJar(    String field){
      this.field=field;
    }
  }
}
