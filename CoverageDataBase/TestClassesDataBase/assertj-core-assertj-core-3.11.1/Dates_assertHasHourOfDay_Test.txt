/** 
 * Tests for <code> {@link Dates#assertHasHourOfDay(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertHasHourOfDay_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=parseDatetime("2011-01-01T03:01:02");
  }
  @Test public void should_fail_if_actual_has_not_given_hour_of_day(){
    AssertionInfo info=someInfo();
    int hour_of_day=5;
    try {
      dates.assertHasHourOfDay(info,actual,hour_of_day);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"hour",hour_of_day));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertHasHourOfDay(someInfo(),null,3)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_hour_of_day(){
    dates.assertHasHourOfDay(someInfo(),actual,3);
  }
  @Test public void should_fail_if_actual_has_not_given_hour_of_day_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int hour_of_day=5;
    try {
      datesWithCustomComparisonStrategy.assertHasHourOfDay(info,actual,hour_of_day);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"hour",hour_of_day));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertHasHourOfDay(someInfo(),null,3)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_hour_of_day_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertHasHourOfDay(someInfo(),actual,3);
  }
}
