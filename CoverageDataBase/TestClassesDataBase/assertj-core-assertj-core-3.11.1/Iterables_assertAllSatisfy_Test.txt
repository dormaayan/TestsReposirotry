public class Iterables_assertAllSatisfy_Test extends IterablesBaseTest {
  private List<String> actual=newArrayList("Luke","Leia","Yoda");
  @Test public void should_satisfy_single_requirement(){
    iterables.assertAllSatisfy(someInfo(),actual,s -> assertThat(s.length()).isEqualTo(4));
  }
  @Test public void should_satisfy_multiple_requirements(){
    iterables.assertAllSatisfy(someInfo(),actual,s -> {
      assertThat(s.length()).isEqualTo(4);
      assertThat(s).doesNotContain("V");
    }
);
  }
  @Test public void should_fail_according_to_requirements(){
    Consumer<String> restrictions=s -> {
      assertThat(s.length()).isEqualTo(4);
      assertThat(s).startsWith("L");
    }
;
    Throwable error=catchThrowable(() -> iterables.assertAllSatisfy(someInfo(),actual,restrictions));
    assertThat(error).isNotNull();
    List<UnsatisfiedRequirement> errors=list(new UnsatisfiedRequirement("Yoda",format("%n" + "Expecting:%n" + " <\"Yoda\">%n"+ "to start with:%n"+ " <\"L\">%n")));
    verify(failures).failure(info,elementsShouldSatisfy(actual,errors));
  }
  @Test public void should_fail_if_consumer_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(actual).allSatisfy(null)).withMessage("The Consumer<T> expressing the assertions requirements must not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      actual=null;
      assertThat(actual).allSatisfy(null);
    }
).withMessage(actualIsNull());
  }
}
