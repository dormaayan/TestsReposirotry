/** 
 * Tests for <code> {@link Integers#assertEqual(AssertionInfo,Integer,int)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Integers_assertEqual_Test extends IntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> integers.assertEqual(someInfo(),null,8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_integers_are_equal(){
    integers.assertEqual(someInfo(),8,8);
  }
  @Test public void should_fail_if_integers_are_not_equal(){
    AssertionInfo info=someInfo();
    try {
      integers.assertEqual(info,6,8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(6,8,info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> integersWithAbsValueComparisonStrategy.assertEqual(someInfo(),null,8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_integers_are_equal_according_to_custom_comparison_strategy(){
    integersWithAbsValueComparisonStrategy.assertEqual(someInfo(),8,-8);
  }
  @Test public void should_fail_if_integers_are_not_equal_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      integersWithAbsValueComparisonStrategy.assertEqual(info,6,-8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(6,-8,absValueComparisonStrategy,info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
