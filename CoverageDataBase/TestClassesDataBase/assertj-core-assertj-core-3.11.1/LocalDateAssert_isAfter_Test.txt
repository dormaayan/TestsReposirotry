public class LocalDateAssert_isAfter_Test extends LocalDateAssertBaseTest {
  @Test public void test_isAfter_assertion(){
    assertThat(AFTER).isAfter(REFERENCE);
    assertThat(AFTER).isAfter(REFERENCE.toString());
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(REFERENCE,REFERENCE);
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(BEFORE,REFERENCE);
  }
  @Test public void test_isAfter_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(parse("2000-01-01")).isAfter(parse("2000-01-01"))).withMessage(format("%n" + "Expecting:%n" + "  <2000-01-01>%n"+ "to be strictly after:%n"+ "  <2000-01-01>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      LocalDate actual=null;
      assertThat(actual).isAfter(LocalDate.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_date_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isAfter((LocalDate)null)).withMessage("The LocalDate to compare actual with should not be null");
  }
  @Test public void should_fail_if_date_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isAfter((String)null)).withMessage("The String representing the LocalDate to compare actual with should not be null");
  }
  private static void verify_that_isAfter_assertion_fails_and_throws_AssertionError(  LocalDate dateToCheck,  LocalDate reference){
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfter(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfter(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
