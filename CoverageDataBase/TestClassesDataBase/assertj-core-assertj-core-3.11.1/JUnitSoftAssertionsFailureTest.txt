public class JUnitSoftAssertionsFailureTest {
  public final JUnitSoftAssertions softly=new JUnitSoftAssertions();
  @Test public void should_report_all_errors() throws Throwable {
    softly.assertThat(1).isEqualTo(1);
    softly.assertThat(1).isEqualTo(2);
    softly.assertThat(list(1,2)).containsOnly(1,3);
    MultipleFailuresError multipleFailuresError=catchThrowableOfType(() -> softly.apply(mock(Statement.class),null).evaluate(),MultipleFailuresError.class);
    List<Throwable> failures=multipleFailuresError.getFailures();
    assertThat(failures).hasSize(2);
    assertThat(failures.get(0)).hasMessageStartingWith(format("%nExpecting:%n <1>%nto be equal to:%n <2>%nbut was not."));
    assertThat(failures.get(1)).hasMessageStartingWith(format("%n" + "Expecting:%n" + "  <[1, 2]>%n"+ "to contain only:%n"+ "  <[1, 3]>%n"+ "elements not found:%n"+ "  <[3]>%n"+ "and elements not expected:%n"+ "  <[2]>%n"));
  }
}
