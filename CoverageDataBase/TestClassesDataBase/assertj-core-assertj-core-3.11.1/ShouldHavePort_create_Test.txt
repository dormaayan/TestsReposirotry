public class ShouldHavePort_create_Test {
  @Test public void should_create_error_message_for_uri() throws Exception {
    String error=shouldHavePort(new URI("http://assertj.org:8080/news"),8888).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting port of%n" + "  <http://assertj.org:8080/news>%n"+ "to be:%n"+ "  <8888>%n"+ "but was:%n"+ "  <8080>"));
  }
  @Test public void should_create_error_message_for_uri_has_no_port() throws Exception {
    URI uri=new URI("http://assertj.org:8080/news");
    String error=shouldHavePort(uri,-1).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org:8080/news>%n"+ "not to have a port but had:%n"+ "  <8080>"));
  }
  @Test public void should_create_error_message_for_url() throws Exception {
    String error=shouldHavePort(new URL("http://assertj.org:8080/news"),8888).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting port of%n" + "  <http://assertj.org:8080/news>%n"+ "to be:%n"+ "  <8888>%n"+ "but was:%n"+ "  <8080>"));
  }
  @Test public void should_create_error_message_for_url_has_no_port() throws Exception {
    URL url=new URL("http://assertj.org:8080/news");
    String error=shouldHavePort(url,-1).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org:8080/news>%n"+ "not to have a port but had:%n"+ "  <8080>"));
  }
}
