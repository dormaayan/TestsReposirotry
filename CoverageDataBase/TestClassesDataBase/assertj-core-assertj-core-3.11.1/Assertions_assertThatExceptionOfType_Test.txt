public class Assertions_assertThatExceptionOfType_Test {
  private static <E>Supplier<E> s(  Supplier<E> supplier){
    return supplier;
  }
  public static Iterable<? extends Object> data(){
    return Arrays.asList(new Object[]{s(() -> assertThatExceptionOfType(UnsupportedOperationException.class)),UnsupportedOperationException.class,s(() -> new UnsupportedOperationException())},new Object[]{s(() -> assertThatNullPointerException()),NullPointerException.class,s(() -> new NullPointerException("value"))},new Object[]{s(() -> assertThatIllegalArgumentException()),IllegalArgumentException.class,s(() -> new IllegalArgumentException("arg"))},new Object[]{s(() -> assertThatIllegalStateException()),IllegalStateException.class,s(() -> new IllegalStateException("state"))},new Object[]{s(() -> assertThatIOException()),IOException.class,s(() -> new IOException("io"))});
  }
  @ParameterizedTest @MethodSource("data") public void should_create_ExpectThrowableAssert(  Supplier<ThrowableTypeAssert<? extends Exception>> assertionGenerator,  Class<? extends Exception> exceptionType,  Supplier<? extends Exception> exceptionBuilder){
    ThrowableTypeAssert<? extends Exception> assertions=assertionGenerator.get();
    assertThat(assertions).isNotNull();
  }
  @ParameterizedTest @MethodSource("data") public void should_pass_ExceptionType(  Supplier<ThrowableTypeAssert<? extends Exception>> assertionGenerator,  Class<? extends Exception> exceptionType,  Supplier<? extends Exception> exceptionBuilder){
    ThrowableTypeAssert<? extends Exception> assertions=assertionGenerator.get();
    assertThat(assertions.expectedThrowableType).isSameAs(exceptionType);
  }
  @ParameterizedTest @MethodSource("data") public void should_create_ChainedThrowableAssert(  Supplier<ThrowableTypeAssert<? extends Exception>> assertionGenerator,  Class<? extends Exception> exceptionType,  Supplier<? extends Exception> exceptionBuilder){
    ThrowableAssertAlternative<? extends Exception> assertions=assertionGenerator.get().isThrownBy(() -> {
      throw exceptionBuilder.get();
    }
);
    assertThat(assertions).isNotNull();
  }
  @ParameterizedTest @MethodSource("data") public void should_pass_thrown_exception_to_ChainedThrowableAssert(  Supplier<ThrowableTypeAssert<? extends Exception>> assertionGenerator,  Class<? extends Exception> exceptionType,  Supplier<? extends Exception> exceptionBuilder){
    Exception exception=exceptionBuilder.get();
    ThrowableAssertAlternative<? extends Exception> assertions=assertionGenerator.get().isThrownBy(() -> {
      throw exception;
    }
);
    assertThat(assertions.actual).isSameAs(exception);
  }
}
