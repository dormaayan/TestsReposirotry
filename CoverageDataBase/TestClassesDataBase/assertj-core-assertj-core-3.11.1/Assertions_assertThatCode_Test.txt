public class Assertions_assertThatCode_Test {
  @Test public void can_invoke_late_assertion_on_assertThatCode(){
    ThrowingCallable boom=raisingException("boom");
    assertThatCode(boom).isInstanceOf(Exception.class).hasMessageContaining("boom");
  }
  @Test public void should_fail_when_asserting_no_exception_raised_but_exception_occurs(){
    Exception exception=new Exception("boom");
    ThrowingCallable boom=raisingException(exception);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThatCode(boom).doesNotThrowAnyException();
    }
).withMessage(shouldNotHaveThrown(exception).create());
  }
  @Test public void can_use_description_in_error_message(){
    ThrowingCallable boom=raisingException("boom");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThatCode(boom).as("Test").doesNotThrowAnyException()).withMessageStartingWith("[Test]");
  }
  @Test public void error_message_contains_stacktrace(){
    Exception exception=new Exception("boom");
    ThrowingCallable boom=raisingException(exception);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThatCode(boom).doesNotThrowAnyException()).withMessageContaining("java.lang.Exception: boom").withMessageContaining("at org.assertj.core.api.Assertions_assertThatCode_Test.error_message_contains_stacktrace");
  }
  @Test public void should_succeed_when_asserting_no_exception_raised_and_no_exception_occurs(){
    ThrowingCallable silent=() -> {
    }
;
    assertThatCode(silent).doesNotThrowAnyException();
  }
  private ThrowingCallable raisingException(  final String reason){
    return raisingException(new Exception(reason));
  }
  private ThrowingCallable raisingException(  final Exception exception){
    return () -> {
      throw exception;
    }
;
  }
}
