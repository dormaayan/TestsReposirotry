/** 
 * Tests for <code> {@link Objects#assertIsIn(AssertionInfo,Object,Iterable)}</code>.
 * @author Joel Costigliola
 * @author Alex Ruiz
 * @author Yvonne Wang
 * @author Nicolas Fran√ßois
 * @author Mikhail Mazursky
 */
public class Objects_assertIsIn_with_Iterable_Test extends ObjectsBaseTest {
  private static Iterable<String> values;
  @BeforeAll public static void setUpOnce(){
    values=newArrayList("Yoda","Leia");
  }
  @Test public void should_throw_error_if_Iterable_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      Iterable<String> c=null;
      objects.assertIsIn(someInfo(),"Yoda",c);
    }
).withMessage(iterableIsNull());
  }
  @Test public void should_throw_error_if_Iterable_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> objects.assertIsIn(someInfo(),"Yoda",emptyList())).withMessage(ErrorMessages.iterableIsEmpty());
  }
  @Test public void should_pass_if_actual_is_in_Iterable(){
    objects.assertIsIn(someInfo(),"Yoda",values);
  }
  @Test public void should_pass_if_actual_is_null_and_array_contains_null(){
    objects.assertIsIn(someInfo(),null,newArrayList("Yoda",null));
  }
  @Test public void should_fail_if_actual_is_not_in_Iterable(){
    AssertionInfo info=someInfo();
    try {
      objects.assertIsIn(info,"Luke",values);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeIn("Luke",values));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_in_Iterable_according_to_custom_comparison_strategy(){
    objectsWithCustomComparisonStrategy.assertIsIn(someInfo(),"YODA",values);
  }
  @Test public void should_fail_if_actual_is_not_in_Iterable_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      objectsWithCustomComparisonStrategy.assertIsIn(info,"Luke",values);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeIn("Luke",values,customComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
