/** 
 * Tests for <code> {@link Dates#assertHasMillisecond(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertHasMillisecond_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=new Date(parseDatetime("2011-01-01T03:49:17").getTime() + 13);
  }
  @Test public void should_fail_if_actual_has_not_given_millisecond(){
    AssertionInfo info=someInfo();
    int millisecond=5;
    try {
      dates.assertHasMillisecond(info,actual,millisecond);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"millisecond",millisecond));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertHasMillisecond(someInfo(),null,13)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_millisecond(){
    dates.assertHasMillisecond(someInfo(),actual,13);
  }
  @Test public void should_fail_if_actual_has_not_given_millisecond_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int millisecond=5;
    try {
      datesWithCustomComparisonStrategy.assertHasMillisecond(info,actual,millisecond);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"millisecond",millisecond));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertHasMillisecond(someInfo(),null,13)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_millisecond_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertHasMillisecond(someInfo(),actual,13);
  }
}
