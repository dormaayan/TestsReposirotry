/** 
 * Tests for <code> {@link ShortArrays#assertIsSortedAccordingToComparator(AssertionInfo,short[],Comparator)}</code>
 * @author Joel Costigliola
 */
public class ShortArrays_assertIsSortedAccordingToComparator_Test extends ShortArraysBaseTest {
  private Comparator<Short> shortDescendingOrderComparator;
  private Comparator<Short> shortAscendingOrderComparator;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=new short[]{4,3,2,2,1};
    shortDescendingOrderComparator=(short1,short2) -> -short1.compareTo(short2);
    shortAscendingOrderComparator=(short1,short2) -> short1.compareTo(short2);
  }
  @Test public void should_pass_if_actual_is_sorted_according_to_given_comparator(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),actual,shortDescendingOrderComparator);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_given_comparator_is(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),shortDescendingOrderComparator);
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),shortAscendingOrderComparator);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),null,shortDescendingOrderComparator)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_comparator_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),null));
  }
  @Test public void should_fail_if_actual_is_not_sorted_according_to_given_comparator(){
    AssertionInfo info=someInfo();
    actual=new short[]{3,2,1,9};
    try {
      arrays.assertIsSortedAccordingToComparator(info,actual,shortDescendingOrderComparator);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSortedAccordingToGivenComparator(2,actual,shortDescendingOrderComparator));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
