public class Uris_assertHasNoParameter_Test extends UrisBaseTest {
  @Test public void should_pass_if_parameter_is_missing() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news"),"article");
  }
  @Test public void should_fail_if_parameter_is_present_without_value() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article");
    String name="article";
    List<String> actualValues=newArrayList((String)null);
    try {
      uris.assertHasNoParameter(info,uri,name);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameter(uri,name,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_is_present_with_value() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=10");
    String name="article";
    List<String> actualValue=newArrayList("10");
    try {
      uris.assertHasNoParameter(info,uri,name);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameter(uri,name,actualValue));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_is_present_multiple_times() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article&article=10");
    String name="article";
    List<String> actualValues=newArrayList(null,"10");
    try {
      uris.assertHasNoParameter(info,uri,name);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameter(uri,name,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_parameter_without_value_is_missing() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news"),"article",null);
  }
  @Test public void should_fail_if_parameter_without_value_is_present() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article");
    String name="article";
    String expectedValue=null;
    List<String> actualValues=newArrayList((String)null);
    try {
      uris.assertHasNoParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameter(uri,name,expectedValue,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_parameter_without_value_is_present_with_value() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news=10"),"article",null);
  }
  @Test public void should_pass_if_parameter_with_value_is_missing() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news"),"article","10");
  }
  @Test public void should_pass_if_parameter_with_value_is_present_without_value() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news?article"),"article","10");
  }
  @Test public void should_pass_if_parameter_with_value_is_present_with_wrong_value() throws URISyntaxException {
    uris.assertHasNoParameter(info,new URI("http://assertj.org/news?article=11"),"article","10");
  }
  @Test public void should_fail_if_parameter_with_value_is_present() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=10");
    String name="article";
    String expectedValue="10";
    List<String> actualValue=newArrayList("10");
    try {
      uris.assertHasNoParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameter(uri,name,expectedValue,actualValue));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_uri_has_no_parameters() throws URISyntaxException {
    uris.assertHasNoParameters(info,new URI("http://assertj.org/news"));
  }
  @Test public void should_fail_if_uri_has_some_parameters() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=10&locked=false");
    try {
      uris.assertHasNoParameters(info,uri);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameters(uri,newLinkedHashSet("article","locked")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_uri_has_one_parameter() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=10");
    try {
      uris.assertHasNoParameters(info,uri);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParameters(uri,newLinkedHashSet("article")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
