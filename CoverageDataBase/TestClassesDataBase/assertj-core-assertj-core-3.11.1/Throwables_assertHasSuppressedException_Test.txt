public class Throwables_assertHasSuppressedException_Test extends ThrowablesBaseTest {
  private static final String IAE_EXCEPTION_MESSAGE="invalid arg";
  private static final String NPE_EXCEPTION_MESSAGE="null arg";
  private Throwable throwableSuppressedException;
  @BeforeEach @Override public void setUp(){
    super.setUp();
    throwableSuppressedException=new Throwable();
    throwableSuppressedException.addSuppressed(new IllegalArgumentException(IAE_EXCEPTION_MESSAGE));
    throwableSuppressedException.addSuppressed(new NullPointerException(NPE_EXCEPTION_MESSAGE));
  }
  @Test public void should_pass_if_one_of_the_suppressed_exception_has_the_expected_type_and_message(){
    throwables.assertHasSuppressedException(someInfo(),throwableSuppressedException,new IllegalArgumentException(IAE_EXCEPTION_MESSAGE));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> throwables.assertHasSuppressedException(someInfo(),null,new Throwable())).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_suppressed_exception_is_null(){
    assertThatNullPointerException().isThrownBy(() -> throwables.assertHasSuppressedException(someInfo(),new Throwable(),null)).withMessage("The expected suppressed exception should not be null");
  }
  @Test public void should_fail_if_actual_has_no_suppressed_exception_and_expected_suppressed_exception_is_not_null(){
    AssertionInfo info=someInfo();
    Throwable expectedSuppressedException=new Throwable();
    try {
      throwables.assertHasSuppressedException(info,actual,expectedSuppressedException);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSuppressedException(actual,expectedSuppressedException));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_suppressed_exception_is_not_instance_of_expected_type(){
    AssertionInfo info=someInfo();
    Throwable expectedSuppressedException=new NullPointerException(IAE_EXCEPTION_MESSAGE);
    try {
      throwables.assertHasSuppressedException(info,throwableSuppressedException,expectedSuppressedException);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSuppressedException(throwableSuppressedException,expectedSuppressedException));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_suppressed_exception_has_not_the_expected_message(){
    AssertionInfo info=someInfo();
    Throwable expectedSuppressedException=new IllegalArgumentException(IAE_EXCEPTION_MESSAGE + "foo");
    try {
      throwables.assertHasSuppressedException(info,throwableSuppressedException,expectedSuppressedException);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSuppressedException(throwableSuppressedException,expectedSuppressedException));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_suppressed_exception_has_no_message_and_the_expected_suppressed_exception_has_one(){
    AssertionInfo info=someInfo();
    Throwable expectedSuppressedException=new IllegalArgumentException("error cause");
    throwableSuppressedException=new Throwable(new IllegalArgumentException());
    try {
      throwables.assertHasSuppressedException(info,throwableSuppressedException,expectedSuppressedException);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSuppressedException(throwableSuppressedException,expectedSuppressedException));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_suppressed_exception_has_different_type_and_message_to_expected_cause(){
    AssertionInfo info=someInfo();
    Throwable expectedSuppressedException=new NullPointerException("error cause");
    try {
      throwables.assertHasSuppressedException(info,throwableSuppressedException,expectedSuppressedException);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSuppressedException(throwableSuppressedException,expectedSuppressedException));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
