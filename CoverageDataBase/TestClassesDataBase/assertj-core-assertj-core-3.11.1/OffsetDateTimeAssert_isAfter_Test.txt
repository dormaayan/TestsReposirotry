/** 
 * @author Paweł Stawicki
 * @author Joel Costigliola
 * @author Marcin Zajączkowski
 */
public class OffsetDateTimeAssert_isAfter_Test extends OffsetDateTimeAssertBaseTest {
  @Test public void test_isAfter_assertion(){
    assertThat(AFTER).isAfter(REFERENCE);
    assertThat(AFTER).isAfter(REFERENCE.toString());
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(REFERENCE,REFERENCE);
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(BEFORE,REFERENCE);
  }
  @Test public void test_isAfter_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(parse("2000-01-01T03:00:05.123Z")).isAfter(parse("2000-01-01T03:00:05.123456789Z"))).withMessage(format("%n" + "Expecting:%n" + "  <2000-01-01T03:00:05.123Z>%n"+ "to be strictly after:%n"+ "  <2000-01-01T03:00:05.123456789Z>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetDateTime actual=null;
      assertThat(actual).isAfter(OffsetDateTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_dateTime_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetDateTime.now()).isAfter((OffsetDateTime)null)).withMessage("The OffsetDateTime to compare actual with should not be null");
  }
  @Test public void should_fail_if_dateTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetDateTime.now()).isAfter((String)null)).withMessage("The String representing the OffsetDateTime to compare actual with should not be null");
  }
  private static void verify_that_isAfter_assertion_fails_and_throws_AssertionError(  OffsetDateTime dateToCheck,  OffsetDateTime reference){
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfter(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfter(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
