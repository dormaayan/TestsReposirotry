/** 
 * Tests for <code> {@link AbstractObjectAssert#returns(Object,Function)}</code>.
 * @author Takuya "Mura-Mi" Murakami
 */
public class ObjectAssert_returns_Test extends ObjectAssertBaseTest {
  @Override protected ObjectAssert<Jedi> invoke_api_method(){
    return assertions.returns("Yoda",Jedi::getName);
  }
  @Override protected void verify_internal_effects(){
    verify(objects).assertEqual(getInfo(assertions),getActual(assertions).getName(),"Yoda");
  }
  @Test public void should_fail_with_throwing_NullPointerException_if_method_is_null(){
    ThrowingCallable code=() -> assertions.returns("May the force be with you.",null);
    assertThatThrownBy(code).isExactlyInstanceOf(NullPointerException.class).hasMessage("The given getter method/Function must not be null");
  }
  @Test public void perform_assertion_like_users(){
    Jedi yoda=new Jedi("Yoda","Green");
    assertThat(yoda).returns("Yoda",from(Jedi::getName)).returns("Yoda",Jedi::getName);
  }
}
