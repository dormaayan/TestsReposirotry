/** 
 * Tests for  {@link ComparatorBasedComparisonStrategy#isGreaterThan(Object,Object)}.
 * @author Joel Costigliola
 */
public class ComparatorBasedComparisonStrategy_isGreaterThan_Test extends AbstractTest_ComparatorBasedComparisonStrategy {
  @Test public void verify_that_isGreaterThan_delegates_to_compare_method(){
    caseInsensitiveStringComparator=mock(CaseInsensitiveStringComparator.class);
    caseInsensitiveComparisonStrategy=new ComparatorBasedComparisonStrategy(caseInsensitiveStringComparator);
    String s1="string1";
    String s2="string2";
    caseInsensitiveComparisonStrategy.isGreaterThan(s1,s2);
    verify(caseInsensitiveStringComparator).compare(s1,s2);
  }
  @Test public void should_pass(){
    String string="stringA";
    String lesserUpperString="STRING";
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(string,lesserUpperString)).isTrue();
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(lesserUpperString,string)).isFalse();
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(string,string)).isFalse();
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(string,"STRINGA")).isFalse();
    String lowerLesserString="string";
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(string,lowerLesserString)).isTrue();
    assertThat(caseInsensitiveComparisonStrategy.isGreaterThan(lowerLesserString,string)).isFalse();
  }
  @Test public void should_fail_if_a_parameter_is_not_comparable(){
    assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> caseInsensitiveComparisonStrategy.isGreaterThan(new Rectangle(),new Rectangle()));
  }
}
