/** 
 * Tests for <code> {@link AbstractAssert#overridingErrorMessage(String,Object)}</code>.
 * @author Joel Costigliola
 */
public class AbstractAssert_overridingErrorMessage_Test {
  private ConcreteAssert assertions;
  @BeforeEach public void setUp(){
    assertions=new ConcreteAssert(6L);
  }
  @Test public void should_pass_with_error_message_overridden(){
    assertions.overridingErrorMessage("new error message").isEqualTo(6L);
  }
  @Test public void should_fail_with_overridden_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertions.overridingErrorMessage("new error message").isEqualTo(8L)).withMessage("new error message");
  }
  @Test public void should_fail_with_overridden_error_message_not_interpreted_with_string_format_feature_as_no_args_are_given(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertions.overridingErrorMessage("new error message with special character like (%)").isEqualTo(8L)).withMessage(format("new error message with special character like (%%)"));
  }
  @Test public void should_fail_with_overridden_error_message_interpreted_with_string_format_feature(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      long expected=8L;
      assertions.overridingErrorMessage("new error message, expected value was : '%s'",expected).isEqualTo(expected);
    }
).withMessage("new error message, expected value was : '8'");
  }
  @Test public void should_fail_with_description_and_overridden_error_message_using_string_format_feature(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      long expected=8L;
      assertions.as("test").overridingErrorMessage("new error message, expected value was : '%s'",expected).isEqualTo(expected);
    }
).withMessage("[test] new error message, expected value was : '8'");
  }
  @Test public void should_return_this(){
    assertThat(assertions.overridingErrorMessage("")).isSameAs(assertions);
  }
}
