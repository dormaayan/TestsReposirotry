/** 
 * Tests for <code> {@link ShouldBeSorted#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Joel Costigliola
 */
public class ShouldBeSortedAccordingToComparator_create_Test {
  @Test public void should_create_error_message_with_comparator(){
    ErrorMessageFactory factory=shouldBeSortedAccordingToGivenComparator(1,array("b","c","A"),new CaseInsensitiveStringComparator());
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %ngroup is not sorted according to CaseInsensitiveStringComparator comparator because element 1:%n <\"c\">%nis not less or equal than element 2:%n <\"A\">%ngroup was:%n <[\"b\", \"c\", \"A\"]>"));
  }
  @Test public void should_create_error_message_with_private_static_comparator(){
    ErrorMessageFactory factory=shouldBeSortedAccordingToGivenComparator(1,array("b","c","a"),new StaticStringComparator());
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %ngroup is not sorted according to StaticStringComparator comparator because element 1:%n <\"c\">%nis not less or equal than element 2:%n <\"a\">%ngroup was:%n <[\"b\", \"c\", \"a\"]>"));
  }
private static class StaticStringComparator implements Comparator<String> {
    @Override public int compare(    String s1,    String s2){
      return s1.compareTo(s2);
    }
  }
}
