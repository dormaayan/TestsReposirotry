public class OptionalAssert_contains_usingValueComparator_Test extends BaseTest {
  private static Comparator<Foo> FOO_COMPARATOR=(o1,o2) -> o1.getValue().toLowerCase().compareTo(o2.getValue().toLowerCase());
  @Test public void should_fail_when_optional_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((Optional<Foo>)null).usingValueComparator(FOO_COMPARATOR).contains(new Foo("something"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Optional.of(new Foo("something"))).usingValueComparator(FOO_COMPARATOR).contains(null)).withMessage("The expected value should not be <null>.");
  }
  @Test public void should_pass_if_optional_contains_expected_value(){
    assertThat(Optional.of(new Foo("something"))).usingValueComparator(FOO_COMPARATOR).contains(new Foo("SoMething"));
  }
  @Test public void should_fail_if_optional_does_not_contain_expected_value(){
    Optional<Foo> actual=Optional.of(new Foo("something"));
    Foo expectedValue=new Foo("something else");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).usingValueComparator(FOO_COMPARATOR).contains(expectedValue)).withMessage(shouldContain(actual,expectedValue).create());
  }
  @Test public void should_fail_if_optional_is_empty(){
    Foo expectedValue=new Foo("test");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Optional<Foo> actual=Optional.empty();
      assertThat(actual).usingValueComparator(FOO_COMPARATOR).contains(expectedValue);
    }
).withMessage(shouldContain(expectedValue).create());
  }
private static class Foo {
    private final String value;
    public Foo(    String value){
      this.value=value;
    }
    public String getValue(){
      return value;
    }
    @Override public String toString(){
      return "Foo{value='" + value + "'}";
    }
  }
}
