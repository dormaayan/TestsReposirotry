/** 
 * Only test String based assertion (tests with  {@link ZonedDateTime} are already defined in assertj-core)
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class ZonedDateTimeAssert_isNotEqualTo_errors_Test extends ZonedDateTimeAssertBaseTest {
  @Test public void test_isNotEqualTo_assertion(){
    assertThat(REFERENCE).isNotEqualTo(REFERENCE.plusNanos(1).toString());
    verify_that_isNotEqualTo_assertion_fails_and_throws_AssertionError(REFERENCE);
  }
  @Test public void test_isNotEqualTo_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      ZonedDateTime date=ZonedDateTime.of(2000,1,5,3,0,5,0,UTC);
      assertThat(date).isNotEqualTo(date.toString());
    }
).withMessage(format("%nExpecting:%n <2000-01-05T03:00:05Z>%nnot to be equal to:%n <2000-01-05T03:00:05Z>%n"));
  }
  @Test public void should_fail_if_dateTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(ZonedDateTime.now()).isNotEqualTo((String)null)).withMessage("The String representing the ZonedDateTime to compare actual with should not be null");
  }
  private static void verify_that_isNotEqualTo_assertion_fails_and_throws_AssertionError(  ZonedDateTime reference){
    try {
      assertThat(reference).isNotEqualTo(reference.toString());
    }
 catch (    AssertionError e) {
      return;
    }
    fail("Should have thrown AssertionError");
  }
}
