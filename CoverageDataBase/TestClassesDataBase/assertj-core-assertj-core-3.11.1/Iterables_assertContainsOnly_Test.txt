/** 
 * Tests for <code> {@link Iterables#assertContainsOnly(AssertionInfo,Collection,Object[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Iterables_assertContainsOnly_Test extends IterablesBaseTest {
  @Test public void should_pass_if_actual_contains_given_values_only(){
    iterables.assertContainsOnly(someInfo(),actual,array("Luke","Yoda","Leia"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_with_null_elements(){
    actual.add(null);
    actual.add(null);
    iterables.assertContainsOnly(someInfo(),actual,array("Luke",null,"Yoda","Leia",null));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order(){
    iterables.assertContainsOnly(someInfo(),actual,array("Leia","Yoda","Luke"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_more_than_once(){
    actual.addAll(newArrayList("Luke","Luke"));
    iterables.assertContainsOnly(someInfo(),actual,array("Luke","Yoda","Leia"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated(){
    iterables.assertContainsOnly(someInfo(),actual,array("Luke","Luke","Luke","Yoda","Leia"));
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual.clear();
    iterables.assertContainsOnly(someInfo(),actual,array());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterables.assertContainsOnly(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> iterables.assertContainsOnly(someInfo(),emptyList(),null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterables.assertContainsOnly(someInfo(),null,array("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_all_given_values(){
    AssertionInfo info=someInfo();
    Object[] expected={"Luke","Yoda","Han"};
    try {
      iterables.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList("Han"),newArrayList("Leia")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_additional_elements(){
    AssertionInfo info=someInfo();
    Object[] expected={"Luke","Yoda"};
    try {
      iterables.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList(),newArrayList("Leia")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_a_subset_of_expected_elements(){
    AssertionInfo info=someInfo();
    Object[] expected={"Luke","Yoda","Obiwan","Leia"};
    try {
      iterables.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList("Obiwan"),newArrayList()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_only_according_to_custom_comparison_strategy(){
    iterablesWithCaseInsensitiveComparisonStrategy.assertContainsOnly(someInfo(),actual,array("LUKE","YODA","Leia"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order_according_to_custom_comparison_strategy(){
    iterablesWithCaseInsensitiveComparisonStrategy.assertContainsOnly(someInfo(),actual,array("LEIA","yoda","LukE"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_more_than_once_according_to_custom_comparison_strategy(){
    actual.addAll(newArrayList("Luke","Luke"));
    iterablesWithCaseInsensitiveComparisonStrategy.assertContainsOnly(someInfo(),actual,array("luke","YOda","LeIA"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated_according_to_custom_comparison_strategy(){
    actual.addAll(newArrayList("LUKE"));
    iterablesWithCaseInsensitiveComparisonStrategy.assertContainsOnly(someInfo(),actual,array("LUke","LUKE","lukE","YOda","Leia"));
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_only_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Object[] expected={"Luke","Yoda","Han"};
    try {
      iterablesWithCaseInsensitiveComparisonStrategy.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList("Han"),newArrayList("Leia"),comparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
