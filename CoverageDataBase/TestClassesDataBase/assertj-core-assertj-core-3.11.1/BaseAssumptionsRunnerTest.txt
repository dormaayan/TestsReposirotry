public abstract class BaseAssumptionsRunnerTest {
{
    Assertions.setRemoveAssertJRelatedElementsFromStackTrace(false);
  }
static {
    setupData();
  }
  protected static TolkienCharacter frodo;
  protected static TolkienCharacter sam;
  protected static CartoonCharacter homer;
  protected static CartoonCharacter fred;
  protected static CartoonCharacter lisa;
  protected static CartoonCharacter maggie;
  protected static CartoonCharacter bart;
  protected static ThrowingExtractor<? super TolkienCharacter,String,Exception> throwingNameExtractor;
  protected static ThrowingExtractor<? super TolkienCharacter,Integer,Exception> throwingAgeExtractor;
  protected static Extractor<? super TolkienCharacter,String> nameExtractor;
  protected static Extractor<? super TolkienCharacter,Integer> ageExtractor;
  protected static Function<TolkienCharacter,String> nameExtractorFunction;
  protected static Function<TolkienCharacter,Integer> ageExtractorFunction;
  protected static Extractor<? super CartoonCharacter,? extends Collection<CartoonCharacter>> childrenExtractor;
  private static void setupData(){
    bart=new CartoonCharacter("Bart Simpson");
    lisa=new CartoonCharacter("Lisa Simpson");
    maggie=new CartoonCharacter("Maggie Simpson");
    homer=new CartoonCharacter("Homer Simpson");
    homer.getChildren().add(bart);
    homer.getChildren().add(lisa);
    homer.getChildren().add(maggie);
    CartoonCharacter pebbles=new CartoonCharacter("Pebbles Flintstone");
    fred=new CartoonCharacter("Fred Flintstone");
    fred.getChildren().add(pebbles);
    throwingNameExtractor=TolkienCharacter::getName;
    throwingAgeExtractor=TolkienCharacter::getAge;
    nameExtractor=TolkienCharacter::getName;
    ageExtractor=TolkienCharacter::getAge;
    nameExtractorFunction=TolkienCharacter::getName;
    ageExtractorFunction=TolkienCharacter::getAge;
    frodo=TolkienCharacter.of("Frodo",33,Race.HOBBIT);
    sam=TolkienCharacter.of("Sam",35,Race.HOBBIT);
    childrenExtractor=CartoonCharacter::getChildren;
  }
  @ParameterizedTest @MethodSource("provideAssumptionsRunners") public void should_ignore_test_when_assumption_fails(  AssumptionRunner<?> assumptionRunner){
    assertThatExceptionOfType(AssumptionViolatedException.class).isThrownBy(() -> assumptionRunner.runFailingAssumption());
  }
  @ParameterizedTest @MethodSource("provideAssumptionsRunners") public void should_run_test_when_assumption_passes(  AssumptionRunner<?> assumptionRunner){
    assertThatCode(() -> assumptionRunner.runPassingAssumption()).doesNotThrowAnyException();
  }
}
