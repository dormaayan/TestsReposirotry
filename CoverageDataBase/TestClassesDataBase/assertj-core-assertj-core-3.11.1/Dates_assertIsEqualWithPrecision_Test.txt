/** 
 * Tests for <code> {@link org.assertj.core.internal.Dates#assertIsEqualWithPrecision(org.assertj.core.api.AssertionInfo,java.util.Date,java.util.Date,java.util.concurrent.TimeUnit)}</code>.
 * @author William Delanoue
 */
public class Dates_assertIsEqualWithPrecision_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=parseDatetimeWithMs("2011-09-27T12:23:35.999");
  }
  @Test public void should_pass_regardless_of_millisecond_fields_values(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:23:35.998");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.MILLISECONDS);
  }
  @Test public void should_pass_regardless_of_second_and_millisecond_fields_values(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:23:36.999");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.SECONDS);
  }
  @Test public void should_pass_regardless_of_minute_second_and_millisecond_fields_values(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:24:35.999");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.MINUTES);
  }
  @Test public void should_pass_regardless_of_hour_minute_second_and_millisecond_fields_values(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T17:24:35.999");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.HOURS);
    actual=parseDatetimeWithMs("2011-09-27T13:23:35.999");
    other=parseDatetimeWithMs("2011-09-27T01:23:35.999");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.HOURS);
  }
  @Test public void should_pass_if_day_not_equal(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-28T12:23:35.999");
    dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.DAYS);
  }
  @Test public void should_fail_if_ms_fields_differ(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:23:35.998");
    try {
      dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.MICROSECONDS);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,other,TimeUnit.MICROSECONDS));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_second_fields_differ(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:23:36.999");
    try {
      dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.MILLISECONDS);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,other,TimeUnit.MILLISECONDS));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_minute_fields_differ(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T12:24:35.999");
    try {
      dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.SECONDS);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,other,TimeUnit.SECONDS));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_hour_fields_differ(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-27T13:23:35.999");
    try {
      dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.MINUTES);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,other,TimeUnit.MINUTES));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_hour_fields_differ_but_are_equal_when_am_pm_not_taken_into_account(){
    AssertionInfo info=someInfo();
    final Date now=new Date();
    Calendar calendar1=Calendar.getInstance();
    calendar1.setTime(now);
    calendar1.set(Calendar.HOUR_OF_DAY,18);
    Calendar calendar2=Calendar.getInstance();
    calendar2.setTime(now);
    calendar2.set(Calendar.HOUR_OF_DAY,6);
    Date date1=calendar1.getTime();
    Date date2=calendar2.getTime();
    try {
      dates.assertIsEqualWithPrecision(info,date1,date2,TimeUnit.MINUTES);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(date1,date2,TimeUnit.MINUTES));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_day_not_equal(){
    AssertionInfo info=someInfo();
    Date other=parseDatetimeWithMs("2011-09-28T12:23:35.999");
    try {
      dates.assertIsEqualWithPrecision(info,actual,other,TimeUnit.HOURS);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,other,TimeUnit.HOURS));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
