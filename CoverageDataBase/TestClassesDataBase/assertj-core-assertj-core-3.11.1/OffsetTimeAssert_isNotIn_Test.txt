/** 
 * Only test String based assertion (tests with  {@link java.time.OffsetTime} are already defined in assertj-core)
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class OffsetTimeAssert_isNotIn_Test extends OffsetTimeAssertBaseTest {
  @Test public void test_isNotIn_assertion(){
    assertThat(REFERENCE).isNotIn(REFERENCE.plusHours(1).toString(),REFERENCE.plusHours(2).toString());
    verify_that_isNotIn_assertion_fails_and_throws_AssertionError(REFERENCE);
  }
  @Test public void test_isNotIn_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OffsetTime.of(3,0,5,0,ZoneOffset.UTC)).isNotIn("03:00:05Z","03:03:03Z")).withMessage(format("%n" + "Expecting:%n" + " <03:00:05Z>%n"+ "not to be in:%n"+ " <[03:00:05Z, 03:03:03Z]>%n"));
  }
  @Test public void should_fail_if_offsetTimes_as_string_array_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isNotIn((String[])null)).withMessage("The given OffsetTime array should not be null");
  }
  @Test public void should_fail_if_offsetTimes_as_string_array_parameter_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isNotIn(new String[0])).withMessage("The given OffsetTime array should not be empty");
  }
  private static void verify_that_isNotIn_assertion_fails_and_throws_AssertionError(  OffsetTime reference){
    try {
      assertThat(reference).isNotIn(reference.toString(),reference.plusHours(1).toString());
    }
 catch (    AssertionError e) {
      return;
    }
    fail("Should have thrown AssertionError");
  }
}
