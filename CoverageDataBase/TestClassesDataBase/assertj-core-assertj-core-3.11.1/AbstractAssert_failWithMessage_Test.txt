/** 
 * Tests for <code>AbstractAssert#failWithMessage(String, Object...)</code>.
 * @author Joel Costigliola
 */
public class AbstractAssert_failWithMessage_Test {
  private ConcreteAssert assertion;
  @BeforeEach public void setup(){
    assertion=new ConcreteAssert("foo");
  }
  @Test public void should_fail_with_simple_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertion.failWithMessage("fail")).withMessage("fail");
  }
  @Test public void should_fail_with_message_having_args(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertion.failWithMessage("fail %d %s",5,"times")).withMessage("fail 5 times");
  }
  @Test public void should_keep_description_set_by_user(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertion.as("user description").failWithMessage("fail %d %s",5,"times")).withMessage("[user description] fail 5 times");
  }
  @Test public void should_keep_specific_error_message_and_description_set_by_user(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertion.as("test context").overridingErrorMessage("my %d errors %s",5,"!").failWithMessage("%d %s",5,"time")).withMessage("[test context] my 5 errors !");
  }
}
