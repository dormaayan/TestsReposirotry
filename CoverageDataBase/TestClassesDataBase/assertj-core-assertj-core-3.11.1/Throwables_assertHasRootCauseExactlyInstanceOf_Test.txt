/** 
 * Tests for {@link org.assertj.core.internal.Throwables#assertHasRootCauseExactlyInstanceOf(org.assertj.core.api.AssertionInfo,Throwable,Class)}.
 * @author Jean-Christophe Gay
 */
public class Throwables_assertHasRootCauseExactlyInstanceOf_Test extends ThrowablesBaseTest {
  private Throwable throwableWithCause=new Throwable(new Exception(new IllegalArgumentException()));
  @Test public void should_pass_if_root_cause_is_exactly_instance_of_expected_type(){
    throwables.assertHasRootCauseExactlyInstanceOf(someInfo(),throwableWithCause,IllegalArgumentException.class);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> throwables.assertHasRootCauseExactlyInstanceOf(someInfo(),null,IllegalArgumentException.class)).withMessage(actualIsNull());
  }
  @Test public void should_throw_NullPointerException_if_given_type_is_null(){
    assertThatNullPointerException().isThrownBy(() -> throwables.assertHasRootCauseExactlyInstanceOf(someInfo(),throwableWithCause,null)).withMessage("The given type should not be null");
  }
  @Test public void should_fail_if_actual_has_no_cause(){
    AssertionInfo info=someInfo();
    Class<NullPointerException> expectedCauseType=NullPointerException.class;
    try {
      throwables.assertHasRootCauseExactlyInstanceOf(info,actual,expectedCauseType);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveRootCauseExactlyInstance(actual,expectedCauseType));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_root_cause_is_not_instance_of_expected_type(){
    AssertionInfo info=someInfo();
    Class<NullPointerException> expectedCauseType=NullPointerException.class;
    try {
      throwables.assertHasRootCauseExactlyInstanceOf(info,throwableWithCause,expectedCauseType);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveRootCauseExactlyInstance(throwableWithCause,expectedCauseType));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_cause_is_not_exactly_instance_of_expected_type(){
    AssertionInfo info=someInfo();
    Class<RuntimeException> expectedCauseType=RuntimeException.class;
    try {
      throwables.assertHasRootCauseExactlyInstanceOf(info,throwableWithCause,expectedCauseType);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveRootCauseExactlyInstance(throwableWithCause,expectedCauseType));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
