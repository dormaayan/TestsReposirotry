/** 
 * Tests for <code> {@link Strings#assertDoesNotStartWith(AssertionInfo,CharSequence,CharSequence)}</code>.
 * @author Michal Kordas
 */
public class Strings_assertDoesNotStartWith_Test extends StringsBaseTest {
  @Test public void should_fail_if_actual_starts_with_prefix(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertDoesNotStartWith(someInfo(),"Yoda","Yo")).withMessage(shouldNotStartWith("Yoda","Yo").create());
  }
  @Test public void should_throw_error_if_prefix_is_null(){
    assertThatNullPointerException().isThrownBy(() -> strings.assertDoesNotStartWith(someInfo(),"Yoda",null)).withMessage("The given prefix should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertDoesNotStartWith(someInfo(),null,"Yoda")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_does_not_start_with_prefix(){
    strings.assertDoesNotStartWith(someInfo(),"Yoda","Luke");
    strings.assertDoesNotStartWith(someInfo(),"Yoda","YO");
  }
  @Test public void should_pass_if_actual_does_not_start_with_prefix_according_to_custom_comparison_strategy(){
    stringsWithCaseInsensitiveComparisonStrategy.assertDoesNotStartWith(someInfo(),"Yoda","Luke");
  }
  @Test public void should_fail_if_actual_starts_with_prefix_according_to_custom_comparison_strategy(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertDoesNotStartWith(someInfo(),"Yoda","yODA")).withMessage(shouldNotStartWith("Yoda","yODA",comparisonStrategy).create());
  }
}
