/** 
 * Tests for <code> {@link ObjectArrays#assertIsSorted(AssertionInfo,Object[])}</code>.
 * @author Joel Costigliola
 * @author Mikhail Mazursky
 */
public class ObjectArrays_assertIsSortedAccordingToComparator_Test extends ObjectArraysBaseTest {
  private Comparator<String> stringDescendingOrderComparator;
  private Comparator<Object> comparator;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=array("Yoda","Vador","Luke","Luke","Leia");
    stringDescendingOrderComparator=(s1,s2) -> -s1.compareTo(s2);
    comparator=(o1,o2) -> o1.toString().compareTo(o2.toString());
  }
  @Test public void should_pass_if_actual_is_sorted_according_to_given_comparator(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),actual,stringDescendingOrderComparator);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_given_comparator_is(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),new String[0],stringDescendingOrderComparator);
    arrays.assertIsSortedAccordingToComparator(someInfo(),new String[0],comparator);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),null,comparator)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_comparator_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),array(),null));
  }
  @Test public void should_fail_if_actual_is_not_sorted_according_to_given_comparator(){
    AssertionInfo info=someInfo();
    actual=array("Yoda","Vador","Leia","Leia","Luke");
    try {
      arrays.assertIsSortedAccordingToComparator(info,actual,stringDescendingOrderComparator);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSortedAccordingToGivenComparator(3,actual,stringDescendingOrderComparator));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
