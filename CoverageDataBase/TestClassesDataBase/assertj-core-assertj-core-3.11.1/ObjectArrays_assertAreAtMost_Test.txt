/** 
 * Tests for <code> {@link ObjectArrays#assertAreAtMost(AssertionInfo,Object[],int,Condition)}</code> .
 * @author Nicolas FranÃ§ois
 * @author Mikhail Mazursky
 * @author Joel Costigliola
 */
public class ObjectArrays_assertAreAtMost_Test extends ObjectArraysWithConditionBaseTest {
  @Test public void should_pass_if_satisfies_at_least_times_condition(){
    actual=array("Yoda","Luke","Leia");
    arrays.assertAreAtMost(someInfo(),actual,2,jedi);
    verify(conditions).assertIsNotNull(jedi);
  }
  @Test public void should_pass_if_all_satisfies_condition_(){
    actual=array("Chewbacca","Leia","Obiwan");
    arrays.assertAreAtMost(someInfo(),actual,2,jedi);
    verify(conditions).assertIsNotNull(jedi);
  }
  @Test public void should_throw_error_if_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      actual=array("Yoda","Luke");
      arrays.assertAreAtMost(someInfo(),actual,2,null);
    }
).withMessage("The condition to evaluate should not be null");
    verify(conditions).assertIsNotNull(null);
  }
  @Test public void should_fail_if_condition_is_not_met_enough(){
    testCondition.shouldMatch(false);
    AssertionInfo info=someInfo();
    try {
      actual=array("Yoda","Luke","Obiwan");
      arrays.assertAreAtMost(someInfo(),actual,2,jedi);
    }
 catch (    AssertionError e) {
      verify(conditions).assertIsNotNull(jedi);
      verify(failures).failure(info,elementsShouldBeAtMost(actual,2,jedi));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
