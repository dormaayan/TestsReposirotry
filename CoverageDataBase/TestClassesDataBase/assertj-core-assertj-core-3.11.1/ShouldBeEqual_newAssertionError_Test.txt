/** 
 * Tests for <code> {@link ShouldBeEqual#newAssertionError(Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Alex Ruiz
 * @author Dan Corder
 */
public class ShouldBeEqual_newAssertionError_Test {
  private Description description;
  private ShouldBeEqual factory;
  private DescriptionFormatter formatter;
  @BeforeEach public void setUp(){
    description=new TestDescription("Jedi");
    factory=(ShouldBeEqual)shouldBeEqual("Luke","Yoda",STANDARD_REPRESENTATION);
    factory.descriptionFormatter=mock(DescriptionFormatter.class);
    formatter=factory.descriptionFormatter;
  }
  @ParameterizedTest @MethodSource("parameters") public void should_create_AssertionFailedError_if_JUnit5_is_present_and_trim_spaces_in_formatted_description(  String formattedDescription){
    given(formatter.format(description)).willReturn(formattedDescription);
    AssertionError error=factory.newAssertionError(description,STANDARD_REPRESENTATION);
    assertThat(error).isInstanceOf(AssertionFailedError.class).hasMessage(format("[Jedi] %nExpecting:%n" + " <\"Luke\">%n" + "to be equal to:%n"+ " <\"Yoda\">%n"+ "but was not."));
  }
  public static Stream<Arguments> parameters(){
    return Stream.of(Arguments.of("[Jedi]"),Arguments.of("[Jedi]  "));
  }
}
