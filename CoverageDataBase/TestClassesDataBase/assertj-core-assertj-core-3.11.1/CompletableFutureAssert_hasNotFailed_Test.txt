public class CompletableFutureAssert_hasNotFailed_Test extends BaseTest {
  @Test public void should_pass_if_completable_future_is_incomplete(){
    assertThat(new CompletableFuture<>()).hasNotFailed();
  }
  @Test public void should_pass_if_completable_future_is_completed(){
    assertThat(CompletableFuture.completedFuture("done")).hasNotFailed();
  }
  @Test public void should_pass_if_completable_future_was_cancelled(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.cancel(true);
    assertThat(future).hasNotFailed();
  }
  @Test public void should_fail_when_completable_future_is_null(){
    assertThatThrownBy(() -> assertThat((CompletableFuture<String>)null).hasNotFailed()).isInstanceOf(AssertionError.class).hasMessage(format(actualIsNull()));
  }
  @Test public void should_fail_if_completable_future_has_failed(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.completeExceptionally(new RuntimeException());
    assertThatThrownBy(() -> assertThat(future).hasNotFailed()).isInstanceOf(AssertionError.class).hasMessageStartingWith(format("%nExpecting%n  <CompletableFuture[Failed: java.lang.RuntimeException]%n")).hasMessageContaining("Caused by: java.lang.RuntimeException").hasMessageEndingWith(format("to not have failed.%n%s",WARNING));
  }
}
