public class AtomicReferenceArrayAssert_flatExtracting_Test {
  private CartoonCharacter bart;
  private CartoonCharacter lisa;
  private CartoonCharacter maggie;
  private CartoonCharacter homer;
  private CartoonCharacter pebbles;
  private CartoonCharacter fred;
  private final Extractor<CartoonCharacter,List<CartoonCharacter>> children=new Extractor<CartoonCharacter,List<CartoonCharacter>>(){
    @Override public List<CartoonCharacter> extract(    CartoonCharacter input){
      return input.getChildren();
    }
  }
;
  @BeforeEach public void setUp(){
    bart=new CartoonCharacter("Bart Simpson");
    lisa=new CartoonCharacter("Lisa Simpson");
    maggie=new CartoonCharacter("Maggie Simpson");
    homer=new CartoonCharacter("Homer Simpson");
    homer.addChildren(bart,lisa,maggie);
    pebbles=new CartoonCharacter("Pebbles Flintstone");
    fred=new CartoonCharacter("Fred Flintstone");
    fred.addChildren(pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children(){
    AtomicReferenceArray<CartoonCharacter> cartoonCharacters=new AtomicReferenceArray<>(array(homer,fred));
    assertThat(cartoonCharacters).flatExtracting(children).containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_empty_result_lists(){
    AtomicReferenceArray<CartoonCharacter> childCharacters=new AtomicReferenceArray<>(array(bart,lisa,maggie));
    assertThat(childCharacters).flatExtracting(children).isEmpty();
  }
  @Test public void should_throw_null_pointer_exception_when_extracting_from_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(new AtomicReferenceArray<>(array(homer,null))).flatExtracting(children));
  }
  @Test public void should_rethrow_throwing_extractor_checked_exception_as_a_runtime_exception(){
    AtomicReferenceArray<CartoonCharacter> childCharacters=new AtomicReferenceArray<>(array(bart,lisa,maggie));
    assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> assertThat(childCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new Exception("no children");
      return cartoonCharacter.getChildren();
    }
)).withMessage("java.lang.Exception: no children");
  }
  @Test public void should_let_throwing_extractor_runtime_exception_bubble_up(){
    AtomicReferenceArray<CartoonCharacter> childCharacters=new AtomicReferenceArray<>(array(bart,lisa,maggie));
    assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> assertThat(childCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new RuntimeException("no children");
      return cartoonCharacter.getChildren();
    }
)).withMessage("no children");
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children_with_throwing_extractor(){
    AtomicReferenceArray<CartoonCharacter> cartoonCharacters=new AtomicReferenceArray<>(array(homer,fred));
    assertThat(cartoonCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new Exception("no children");
      return cartoonCharacter.getChildren();
    }
).containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children_with_anonymous_class_throwing_extractor(){
    AtomicReferenceArray<CartoonCharacter> cartoonCharacters=new AtomicReferenceArray<>(array(homer,fred));
    assertThat(cartoonCharacters).flatExtracting(new ThrowingExtractor<CartoonCharacter,List<CartoonCharacter>,Exception>(){
      @Override public List<CartoonCharacter> extractThrows(      CartoonCharacter cartoonCharacter) throws Exception {
        if (cartoonCharacter.getChildren().isEmpty())         throw new Exception("no children");
        return cartoonCharacter.getChildren();
      }
    }
).containsOnly(bart,lisa,maggie,pebbles);
  }
}
