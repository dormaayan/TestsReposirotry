/** 
 * Tests for  {@link ShouldExist#create(Description,Representation)}
 * @author Yvonne Wang
 */
public class ShouldExist_create_Test {
  private TestDescription description;
  private Representation representation;
  private ErrorMessageFactory factory;
  private String actualMessage;
  private String expectedMessage;
  @BeforeEach public void setUp(){
    description=new TestDescription("Test");
    representation=new StandardRepresentation();
  }
  @Test public void should_create_error_message_for_File(){
    factory=shouldExist(new FakeFile("xyz"));
    actualMessage=factory.create(description,representation);
    expectedMessage=String.format("[Test] %nExpecting file:%n  <xyz>%nto exist.");
    assertThat(actualMessage).isEqualTo(expectedMessage);
  }
  @Test public void should_create_error_message_for_Path_following_symbolic_links(){
    final Path actual=mock(Path.class);
    factory=shouldExist(actual);
    actualMessage=factory.create(description,representation);
    expectedMessage=String.format("[Test] " + PATH_SHOULD_EXIST,actual);
    assertThat(actualMessage).isEqualTo(expectedMessage);
  }
  @Test public void should_create_error_message_for_Path_not_following_symbolic_links(){
    final Path actual=mock(Path.class);
    factory=shouldExistNoFollowLinks(actual);
    actualMessage=factory.create(description,representation);
    expectedMessage=String.format("[Test] " + PATH_SHOULD_EXIST_NO_FOLLOW_LINKS,actual);
    assertThat(actualMessage).isEqualTo(expectedMessage);
  }
}
