public class ShouldHaveValue_create_Test {
  private static final TestDescription TEST_DESCRIPTION=new TestDescription("TEST");
  private Person joe;
  @BeforeEach public void setup(){
    joe=new Person();
    joe.name="Joe";
    joe.age=33;
    joe.account=123456789L;
  }
  @Test public void should_create_error_message_for_AtomicIntegerFieldUpdater(){
    AtomicIntegerFieldUpdater<Person> updater=AtomicIntegerFieldUpdater.newUpdater(Person.class,"age");
    String message=shouldHaveValue(updater,33,20,joe).create(TEST_DESCRIPTION,CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting <AtomicIntegerFieldUpdater> to have value:%n" + "  <20>%n"+ "but had:%n"+ "  <33>%n"+ "to update target object:%n"+ "  <Person [name=Joe, age=33, account=123456789]>"));
  }
  @Test public void should_create_error_message_for_AtomicLongFieldUpdater(){
    AtomicLongFieldUpdater<Person> updater=AtomicLongFieldUpdater.newUpdater(Person.class,"account");
    String message=shouldHaveValue(updater,123456789L,0L,joe).create(TEST_DESCRIPTION,CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting <AtomicLongFieldUpdater> to have value:%n" + "  <0L>%n"+ "but had:%n"+ "  <123456789L>%n"+ "to update target object:%n"+ "  <Person [name=Joe, age=33, account=123456789]>"));
  }
  @Test public void should_create_error_message_for_AtomicReferenceFieldUpdater(){
    AtomicReferenceFieldUpdater<Person,String> updater=newUpdater(Person.class,String.class,"name");
    String message=shouldHaveValue(updater,"Joe","Jack",joe).create(TEST_DESCRIPTION,CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting <AtomicReferenceFieldUpdater> to have value:%n" + "  <\"Jack\">%n"+ "but had:%n"+ "  <\"Joe\">%n"+ "to update target object:%n"+ "  <Person [name=Joe, age=33, account=123456789]>"));
  }
private static class Person {
    volatile String name;
    volatile int age;
    volatile long account;
    @Override public String toString(){
      return format("Person [name=%s, age=%s, account=%s]",name,age,account);
    }
  }
}
