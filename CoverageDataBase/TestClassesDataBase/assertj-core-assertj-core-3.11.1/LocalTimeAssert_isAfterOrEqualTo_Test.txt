/** 
 * @author Paweł Stawicki
 * @author Joel Costigliola
 * @author Marcin Zajączkowski
 */
public class LocalTimeAssert_isAfterOrEqualTo_Test extends LocalTimeAssertBaseTest {
  @Test public void test_isAfterOrEqual_assertion(){
    assertThat(AFTER).isAfterOrEqualTo(REFERENCE);
    assertThat(REFERENCE).isAfterOrEqualTo(REFERENCE);
    verify_that_isAfterOrEqual_assertion_fails_and_throws_AssertionError(BEFORE,REFERENCE);
  }
  @Test public void test_isAfterOrEqual_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalTime.of(3,0,5)).isAfterOrEqualTo(LocalTime.of(3,3,3))).withMessage(format("%n" + "Expecting:%n" + "  <03:00:05>%n"+ "to be after or equals to:%n"+ "  <03:03:03>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      LocalTime actual=null;
      assertThat(actual).isAfterOrEqualTo(LocalTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_timeTime_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalTime.now()).isAfterOrEqualTo((LocalTime)null)).withMessage("The LocalTime to compare actual with should not be null");
  }
  @Test public void should_fail_if_timeTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalTime.now()).isAfterOrEqualTo((String)null)).withMessage("The String representing the LocalTime to compare actual with should not be null");
  }
  private static void verify_that_isAfterOrEqual_assertion_fails_and_throws_AssertionError(  LocalTime timeToCheck,  LocalTime reference){
    assertThatThrownBy(() -> assertThat(timeToCheck).isAfterOrEqualTo(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(timeToCheck).isAfterOrEqualTo(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
