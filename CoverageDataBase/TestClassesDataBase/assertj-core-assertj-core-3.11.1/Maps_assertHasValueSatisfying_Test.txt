/** 
 * Tests for <code> {@link Maps#assertHasValueSatisfying(AssertionInfo,Map,Condition)} (AssertionInfo, Map, Condition)}</code>.
 */
public class Maps_assertHasValueSatisfying_Test extends MapsBaseTest {
  private Condition<String> isGreen=new Condition<String>("green color condition"){
    @Override public boolean matches(    String value){
      return "green".equals(value);
    }
  }
;
  private Condition<Object> isBlack=new Condition<Object>("black color condition"){
    @Override public boolean matches(    Object value){
      return "black".equals(value);
    }
  }
;
  @Test public void should_fail_if_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertHasValueSatisfying(someInfo(),actual,null)).withMessage("The condition to evaluate should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasValueSatisfying(someInfo(),null,isGreen)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_value_matching_condition(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasValueSatisfying(info,actual,isBlack);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainValue(actual,isBlack));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_a_value_matching_the_given_condition(){
    maps.assertHasValueSatisfying(someInfo(),actual,isGreen);
  }
}
