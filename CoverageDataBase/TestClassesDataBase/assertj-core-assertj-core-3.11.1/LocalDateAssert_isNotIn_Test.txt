/** 
 * Only test String based assertion (tests with  {@link LocalDate} are already defined in assertj-core)
 */
public class LocalDateAssert_isNotIn_Test extends LocalDateAssertBaseTest {
  @Test public void test_isNotIn_assertion(){
    assertThat(REFERENCE).isNotIn(REFERENCE.plusDays(1).toString(),REFERENCE.plusDays(2).toString());
    assertThatThrownBy(() -> assertThat(REFERENCE).isNotIn(REFERENCE.toString(),REFERENCE.plusDays(1).toString())).isInstanceOf(AssertionError.class);
  }
  @Test public void test_isNotIn_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThat(LocalDate.of(2000,1,5)).isNotIn(LocalDate.of(2000,1,5).toString(),LocalDate.of(2012,1,1).toString());
    }
).withMessage(format("%nExpecting:%n <2000-01-05>%nnot to be in:%n <[2000-01-05, 2012-01-01]>%n"));
  }
  @Test public void should_fail_if_dates_as_string_array_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isNotIn((String[])null)).withMessage("The given LocalDate array should not be null");
  }
  @Test public void should_fail_if_dates_as_string_array_parameter_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isNotIn(new String[0])).withMessage("The given LocalDate array should not be empty");
  }
}
