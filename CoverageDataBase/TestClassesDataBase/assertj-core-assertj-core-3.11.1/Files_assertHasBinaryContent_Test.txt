/** 
 * Tests for <code> {@link Files#assertHasBinaryContent(org.assertj.core.api.AssertionInfo,File,byte[])}</code>.
 * @author Olivier Michallat
 * @author Joel Costigliola
 */
public class Files_assertHasBinaryContent_Test extends FilesBaseTest {
  private static File actual;
  private static byte[] expected;
  @BeforeAll public static void setUpOnce(){
    actual=new File("src/test/resources/actual_file.txt");
    expected=new byte[]{};
  }
  @Test public void should_throw_error_if_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> files.assertHasBinaryContent(someInfo(),actual,null)).withMessage("The binary content to compare to should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> files.assertHasBinaryContent(someInfo(),null,expected)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_not_file(){
    AssertionInfo info=someInfo();
    File notAFile=new File("xyz");
    try {
      files.assertHasBinaryContent(info,notAFile,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeFile(notAFile));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_file_has_expected_binary_content() throws IOException {
    when(binaryDiff.diff(actual,expected)).thenReturn(BinaryDiffResult.noDiff());
    files.assertHasBinaryContent(someInfo(),actual,expected);
  }
  @Test public void should_throw_error_wrapping_catched_IOException() throws IOException {
    IOException cause=new IOException();
    when(binaryDiff.diff(actual,expected)).thenThrow(cause);
    assertThatExceptionOfType(UncheckedIOException.class).isThrownBy(() -> files.assertHasBinaryContent(someInfo(),actual,expected)).withCause(cause);
  }
  @Test public void should_fail_if_file_does_not_have_expected_binary_content() throws IOException {
    BinaryDiffResult diff=new BinaryDiffResult(15,(byte)0xCA,(byte)0xFE);
    when(binaryDiff.diff(actual,expected)).thenReturn(diff);
    AssertionInfo info=someInfo();
    try {
      files.assertHasBinaryContent(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveBinaryContent(actual,diff));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
