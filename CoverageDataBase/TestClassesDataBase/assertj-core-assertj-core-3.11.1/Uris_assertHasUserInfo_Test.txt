public class Uris_assertHasUserInfo_Test extends UrisBaseTest {
  @Test public void should_pass_if_actual_uri_has_no_user_info_and_given_user_info_is_null() throws URISyntaxException {
    uris.assertHasUserInfo(info,new URI("http://www.helloworld.org/index.html"),null);
  }
  @Test public void should_pass_if_actual_uri_has_the_expected_user_info() throws URISyntaxException {
    uris.assertHasUserInfo(info,new URI("http://test:pass@www.helloworld.org/index.html"),"test:pass");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> uris.assertHasUserInfo(info,null,"http://test:pass@www.helloworld.org/index.html")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_URI_user_info_is_not_the_expected_user_info() throws URISyntaxException {
    AssertionInfo info=someInfo();
    URI uri=new URI("http://test:pass@assertj.org/news");
    String expectedUserInfo="test:ok";
    try {
      uris.assertHasUserInfo(info,uri,expectedUserInfo);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveUserInfo(uri,expectedUserInfo));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_URI_has_no_user_info_and_expected_user_info_is_not_null() throws URISyntaxException {
    AssertionInfo info=someInfo();
    URI uri=new URI("http://assertj.org/news");
    String expectedUserInfo="test:pass";
    try {
      uris.assertHasUserInfo(info,uri,expectedUserInfo);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveUserInfo(uri,expectedUserInfo));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_URI_has_a_user_info_and_expected_user_info_is_null() throws URISyntaxException {
    AssertionInfo info=someInfo();
    URI uri=new URI("http://test:pass@assertj.org");
    String expectedUserInfo=null;
    try {
      uris.assertHasUserInfo(info,uri,expectedUserInfo);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveUserInfo(uri,expectedUserInfo));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
