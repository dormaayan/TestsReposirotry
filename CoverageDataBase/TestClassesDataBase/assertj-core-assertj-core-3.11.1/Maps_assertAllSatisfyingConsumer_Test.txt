public class Maps_assertAllSatisfyingConsumer_Test extends MapsBaseTest {
  private Map<String,Player> greatPlayers;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    greatPlayers=mapOf(entry("Bulls",jordan),entry("Spurs",duncan),entry("Lakers",magic));
  }
  @Test public void should_pass_if_all_entries_satisfy_the_given_requirements(){
    maps.assertAllSatisfy(someInfo(),greatPlayers,(team,player) -> {
      assertThat(team).isIn("Lakers","Bulls","Spurs");
      assertThat(player.getPointsPerGame()).isGreaterThan(18);
    }
);
  }
  @Test public void should_pass_if_actual_map_is_empty(){
    greatPlayers.clear();
    maps.assertAllSatisfy(someInfo(),greatPlayers,(team,player) -> {
      assertThat(player.getPointsPerGame()).isGreaterThan(200);
    }
);
  }
  @Test public void should_fail_if_one_entry_does_not_satisfy_the_given_requirements(){
    try {
      maps.assertAllSatisfy(someInfo(),greatPlayers,(team,player) -> {
        assertThat(team).isIn("Lakers","Bulls","Spurs");
        assertThat(player.getPointsPerGame()).as("%s %s ppg",player.getName().first,player.getName().getLast()).isGreaterThanOrEqualTo(30);
      }
);
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("[Tim Duncan ppg] %n" + "Expecting:%n" + " <19>%n"+ "to be greater than or equal to:%n"+ " <30> "));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertAllSatisfy(someInfo(),null,(team,player) -> {
    }
)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_given_requirements_are_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertAllSatisfy(someInfo(),greatPlayers,null)).withMessage("The BiConsumer<K, V> expressing the assertions requirements must not be null");
  }
}
