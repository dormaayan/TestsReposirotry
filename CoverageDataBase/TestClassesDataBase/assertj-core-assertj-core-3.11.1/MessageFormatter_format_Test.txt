/** 
 * Tests for <code> {@link MessageFormatter#format(Description,String,Object)}</code>.
 * @author Alex Ruiz
 */
public class MessageFormatter_format_Test {
  private DescriptionFormatter descriptionFormatter;
  private MessageFormatter messageFormatter;
  @BeforeEach public void setUp(){
    descriptionFormatter=spy(new DescriptionFormatter());
    messageFormatter=new MessageFormatter();
    messageFormatter.descriptionFormatter=descriptionFormatter;
  }
  @Test public void should_throw_error_if_format_string_is_null(){
    assertThatNullPointerException().isThrownBy(() -> messageFormatter.format(null,null,null));
  }
  @Test public void should_throw_error_if_args_array_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      Object[] args=null;
      messageFormatter.format(null,null,"",args);
    }
);
  }
  @Test public void should_format_message(){
    Description description=new TextDescription("Test");
    String s=messageFormatter.format(description,STANDARD_REPRESENTATION,"Hello %s","World");
    assertThat(s).isEqualTo("[Test] Hello \"World\"");
    verify(descriptionFormatter).format(description);
  }
  @ParameterizedTest @MethodSource("messages") public void should_format_message_and_correctly_escape_percentage(  String input,  String formatted){
    Description description=new TextDescription("Test");
    String finalMessage=messageFormatter.format(description,STANDARD_REPRESENTATION,input);
    assertThat(finalMessage).isEqualTo("[Test] " + formatted);
  }
  public static Stream<Arguments> messages(){
    return Stream.of(Arguments.of("%E","%E"),Arguments.of("%%E","%%E"),Arguments.of("%%%E","%%%E"),Arguments.of("%n",format("%n")),Arguments.of("%%%n%E","%%" + format("%n") + "%E"),Arguments.of("%%n","%" + format("%n")));
  }
}
