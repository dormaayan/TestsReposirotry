/** 
 * Tests the default date format used when using date assertions with date represented as string.
 * @author Joel Costigliola
 */
public class DateAssert_with_string_based_date_representation_Test extends DateAssertBaseTest {
  @Override @AfterEach public void tearDown(){
    useDefaultDateFormatsOnly();
  }
  @Test public void date_assertion_using_default_date_string_representation(){
    final Date date1timeWithMS=parseDatetimeWithMs("2003-04-26T03:01:02.999");
    assertThat(date1timeWithMS).isEqualTo("2003-04-26T03:01:02.999");
    final Date datetime=parseDatetime("2003-04-26T03:01:02");
    assertThat(datetime).isEqualTo("2003-04-26T03:01:02.000");
    assertThat(datetime).isEqualTo("2003-04-26T03:01:02");
    final Date date=DateUtil.parse("2003-04-26");
    assertThat(date).isEqualTo("2003-04-26");
    assertThat(date).isEqualTo("2003-04-26T00:00:00");
    assertThat(date).isEqualTo("2003-04-26T00:00:00.000");
  }
  @Test public void date_assertion_should_support_timestamp_string_representation() throws ParseException {
    Date date=DateUtil.newTimestampDateFormat().parse("2015-05-08 11:30:00.560");
    String timestampAsString=DateUtil.newTimestampDateFormat().format(new Timestamp(date.getTime()));
    assertThat(date).isEqualTo(timestampAsString);
  }
  @Test public void date_assertion_should_support_date_with_utc_time_zone_string_representation() throws ParseException {
    SimpleDateFormat isoFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
    isoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    Date date=isoFormat.parse("2003-04-26T00:00:00");
    assertThat(date).isEqualTo("2003-04-26T00:00:00+00:00");
  }
  @Test public void date_assertion_should_support_date_with_utc_time_zone_in_different_time_zone_string_representation() throws ParseException {
    SimpleDateFormat isoDateFormatUtc=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
    isoDateFormatUtc.setTimeZone(TimeZone.getTimeZone("UTC"));
    SimpleDateFormat isoDateFormatNewYork=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
    isoDateFormatNewYork.setTimeZone(TimeZone.getTimeZone("America/New_York"));
    Date date=isoDateFormatUtc.parse("2003-04-26T00:00:00");
    String newYorkDate=isoDateFormatNewYork.format(date);
    assertThat(date).isEqualTo(newYorkDate);
  }
  @Test public void should_fail_if_given_date_string_representation_cant_be_parsed_with_default_date_formats(){
    final String dateAsString="2003/04/26";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(new Date()).isEqualTo(dateAsString)).withMessage(format("Failed to parse 2003/04/26 with any of these date formats:%n" + "   [yyyy-MM-dd'T'HH:mm:ss.SSS,%n" + "    yyyy-MM-dd HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd'T'HH:mm:ssX,%n"+ "    yyyy-MM-dd'T'HH:mm:ss,%n"+ "    yyyy-MM-dd]"));
  }
  @Test public void date_assertion_using_custom_date_string_representation(){
    final Date date=DateUtil.parse("2003-04-26");
    assertThat(date).withDateFormat("yyyy/MM/dd").isEqualTo("2003/04/26");
    assertThat(date).isEqualTo("2003/04/26");
  }
  @Test public void should_fail_if_given_date_string_representation_cant_be_parsed_with_any_custom_date_formats(){
    final Date date=DateUtil.parse("2003-04-26");
    registerCustomDateFormat("yyyy/MM/dd'T'HH:mm:ss");
    registerCustomDateFormat("yyyy/MM/dd'T'HH:mm:ss");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(date).withDateFormat("yyyy/MM/dd").isEqualTo("2003 04 26")).withMessage(format("Failed to parse 2003 04 26 with any of these date formats:%n" + "   [yyyy/MM/dd'T'HH:mm:ss,%n" + "    yyyy/MM/dd,%n"+ "    yyyy-MM-dd'T'HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd'T'HH:mm:ssX,%n"+ "    yyyy-MM-dd'T'HH:mm:ss,%n"+ "    yyyy-MM-dd]"));
  }
  @Test public void date_assertion_using_custom_date_string_representation_then_switching_back_to_defaults_date_formats(){
    final Date date=DateUtil.parse("2003-04-26");
    assertThat(date).withDateFormat("yyyy/MM/dd").isEqualTo("2003/04/26").withDefaultDateFormatsOnly().isEqualTo("2003-04-26");
    assertThat(date).withDateFormat("yyyy/MM/dd").isEqualTo("2003/04/26");
    assertThat(date).withDefaultDateFormatsOnly().isEqualTo("2003-04-26");
  }
  @Test public void use_custom_date_formats_set_from_Assertions_entry_point(){
    final Date date=DateUtil.parse("2003-04-26");
    registerCustomDateFormat("yyyy/MM/dd'T'HH:mm:ss");
    try {
      assertThat(date).isEqualTo("2003/04/26");
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("Failed to parse 2003/04/26 with any of these date formats:%n" + "   [yyyy/MM/dd'T'HH:mm:ss,%n" + "    yyyy-MM-dd'T'HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd'T'HH:mm:ssX,%n"+ "    yyyy-MM-dd'T'HH:mm:ss,%n"+ "    yyyy-MM-dd]"));
    }
    registerCustomDateFormat("yyyy/MM/dd");
    assertThat(date).isEqualTo("2003/04/26");
    registerCustomDateFormat(new SimpleDateFormat("yyyy/MM/dd'T'HH:mm:ss.SSS"));
    assertThat(date).isEqualTo("2003/04/26T00:00:00.000");
    useDefaultDateFormatsOnly();
    assertThat(date).isEqualTo("2003-04-26");
    assertThat(date).isEqualTo("2003-04-26T00:00:00");
    assertThat(date).isEqualTo("2003-04-26T00:00:00.000");
  }
  @Test public void use_custom_date_formats_first_then_defaults_to_parse_a_date(){
    final Date date=DateUtil.parse("2003-04-26");
    assertThat(date).isEqualTo("2003-04-26");
    try {
      assertThat(date).isEqualTo("2003/04/26");
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("Failed to parse 2003/04/26 with any of these date formats:%n" + "   [yyyy-MM-dd'T'HH:mm:ss.SSS,%n" + "    yyyy-MM-dd HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd'T'HH:mm:ssX,%n"+ "    yyyy-MM-dd'T'HH:mm:ss,%n"+ "    yyyy-MM-dd]"));
    }
    registerCustomDateFormat("yyyy/MM/dd");
    assertThat(date).isEqualTo("2003/04/26");
    assertThat(date).isEqualTo("2003-04-26");
    assertThat(date).isEqualTo("2003-04-26T00:00:00");
    try {
      assertThat(date).isEqualTo("2003 04 26");
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("Failed to parse 2003 04 26 with any of these date formats:%n" + "   [yyyy/MM/dd,%n" + "    yyyy-MM-dd'T'HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd HH:mm:ss.SSS,%n"+ "    yyyy-MM-dd'T'HH:mm:ssX,%n"+ "    yyyy-MM-dd'T'HH:mm:ss,%n"+ "    yyyy-MM-dd]"));
    }
    registerCustomDateFormat("yyyy MM dd");
    assertThat(date).isEqualTo("2003 04 26");
  }
}
