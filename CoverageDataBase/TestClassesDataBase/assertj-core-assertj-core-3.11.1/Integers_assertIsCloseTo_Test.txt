public class Integers_assertIsCloseTo_Test extends IntegersBaseTest {
  private static final Integer ZERO=0;
  private static final Integer ONE=1;
  @ParameterizedTest @CsvSource({"1, 1, 1","1, 2, 10","-2, 0, 3","-1, 1, 3","0, 2, 5"}) public void should_pass_if_difference_is_less_than_given_offset(  int actual,  int expected,  int offset){
    integers.assertIsCloseTo(someInfo(),actual,expected,within(offset));
    integers.assertIsCloseTo(someInfo(),actual,expected,byLessThan(offset));
  }
  @ParameterizedTest @CsvSource({"1, 3, 2","3, 1, 2","-2, 0, 2","-1, 1, 2","0, 2, 2"}) public void should_pass_if_difference_is_equal_to_given_offset(  int actual,  int expected,  int offset){
    integers.assertIsCloseTo(someInfo(),actual,expected,within(offset));
  }
  @ParameterizedTest @CsvSource({"1, 3, 1","3, 1, 1","-2, 0, 1","-1, 1, 1","0, 2, 1"}) public void should_fail_if_actual_is_not_close_enough_to_expected(  int actual,  int expected,  int offset){
    AssertionInfo info=someInfo();
    try {
      integers.assertIsCloseTo(info,actual,expected,within(offset));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,expected,within(offset),abs(actual - expected)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @ParameterizedTest @CsvSource({"1, 2, 1","3, 2, 1","-2, -1, 1","-1, 1, 2","0, 2, 2"}) public void should_fail_if_difference_is_equal_to_the_given_strict_offset(  int actual,  int expected,  int offset){
    AssertionInfo info=someInfo();
    try {
      integers.assertIsCloseTo(info,actual,expected,byLessThan(offset));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(actual,expected,byLessThan(offset),abs(actual - expected)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> integers.assertIsCloseTo(someInfo(),null,ONE,within(ONE))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatNullPointerException().isThrownBy(() -> integers.assertIsCloseTo(someInfo(),ONE,null,within(ONE)));
  }
  @Test public void should_fail_if_offset_is_null(){
    assertThatNullPointerException().isThrownBy(() -> integers.assertIsCloseTo(someInfo(),ONE,ZERO,null));
  }
}
