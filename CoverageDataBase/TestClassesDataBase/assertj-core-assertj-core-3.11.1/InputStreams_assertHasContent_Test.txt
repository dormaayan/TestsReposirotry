/** 
 * Tests for <code> {@link InputStreams#assertHasContent(AssertionInfo,InputStream,String)}</code>.
 * @author Stephan WindmÃ¼ller
 */
public class InputStreams_assertHasContent_Test extends InputStreamsBaseTest {
  @Test public void should_throw_error_if_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> inputStreams.assertHasContent(someInfo(),actual,null)).withMessage("The String to compare to should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> inputStreams.assertHasContent(someInfo(),null,"")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_inputstream_and_string_have_equal_content() throws IOException {
    given(diff.diff(actual,expected)).willReturn(emptyList());
    inputStreams.assertHasContent(someInfo(),actual,expectedString);
  }
  @Test public void should_throw_error_wrapping_catched_IOException() throws IOException {
    IOException cause=new IOException();
    given(diff.diff(actual,expectedString)).willThrow(cause);
    Throwable error=catchThrowable(() -> inputStreams.assertHasContent(someInfo(),actual,expectedString));
    assertThat(error).isInstanceOf(InputStreamsException.class).hasCause(cause);
  }
  @Test public void should_fail_if_inputstream_and_string_do_not_have_equal_content() throws IOException {
    List<Delta<String>> diffs=list((Delta<String>)mock(Delta.class));
    given(diff.diff(actual,expectedString)).willReturn(diffs);
    AssertionInfo info=someInfo();
    catchThrowable(() -> inputStreams.assertHasContent(someInfo(),actual,expectedString));
    verify(failures).failure(info,shouldHaveSameContent(actual,expectedString,diffs));
  }
}
