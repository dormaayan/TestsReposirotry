public class InstantAssert_IsBeforeOrEqualTo_Test extends InstantAssertBaseTest {
  @Test public void test_isBeforeOrEqual_assertion(){
    assertThat(BEFORE).isBeforeOrEqualTo(REFERENCE);
    assertThat(REFERENCE).isBeforeOrEqualTo(REFERENCE);
    verify_that_isBeforeOrEqual_assertion_fails_and_throws_AssertionError(AFTER,REFERENCE);
  }
  @Test public void test_isBeforeOrEqual_assertion_error_message(){
    Instant instantReference=Instant.parse("2007-12-03T10:15:30.00Z");
    Instant instantAfter=Instant.parse("2007-12-03T10:15:35.00Z");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(instantAfter).isBeforeOrEqualTo(instantReference)).withMessage(format("%nExpecting:%n  <2007-12-03T10:15:35Z>%nto be before or equals to:%n  <2007-12-03T10:15:30Z>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Instant actual=null;
      assertThat(actual).isBeforeOrEqualTo(Instant.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_date_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isBeforeOrEqualTo((Instant)null)).withMessage("The Instant to compare actual with should not be null");
  }
  @Test public void should_fail_if_date_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isBeforeOrEqualTo((String)null)).withMessage("The String representing the Instant to compare actual with should not be null");
  }
  private static void verify_that_isBeforeOrEqual_assertion_fails_and_throws_AssertionError(  Instant dateToCheck,  Instant reference){
    assertThatThrownBy(() -> assertThat(dateToCheck).isBeforeOrEqualTo(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToCheck).isBeforeOrEqualTo(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
