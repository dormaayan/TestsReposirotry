/** 
 * Tests for <code> {@link Shorts#assertGreaterThanOrEqualTo(AssertionInfo,Short,short)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Shorts_assertGreaterThanOrEqualTo_Test extends ShortsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shorts.assertGreaterThanOrEqualTo(someInfo(),null,(short)8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    shorts.assertGreaterThanOrEqualTo(someInfo(),(short)8,(short)6);
  }
  @Test public void should_pass_if_actual_is_equal_to_other(){
    shorts.assertGreaterThanOrEqualTo(someInfo(),(short)6,(short)6);
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      shorts.assertGreaterThanOrEqualTo(info,(short)6,(short)8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreaterOrEqual((short)6,(short)8));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shortsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),null,(short)8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    shortsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),(short)-8,(short)6);
  }
  @Test public void should_pass_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    shortsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),(short)6,(short)-6);
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      shortsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(info,(short)6,(short)-8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreaterOrEqual((short)6,(short)-8,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
