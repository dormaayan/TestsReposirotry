/** 
 * Tests for <code> {@link org.assertj.core.internal.Strings#assertXmlEqualsTo(org.assertj.core.api.AssertionInfo,CharSequence,CharSequence)}</code> .
 * @author Joel Costigliola
 */
public class Strings_assertIsXmlEqualCase_Test extends StringsBaseTest {
  @Test public void should_pass_if_both_Strings_are_XML_equals(){
    String actual="<rss version=\"2.0\"><channel>  <title>Java Tutorials and Examples 1</title>  <language>en-us</language></channel></rss>";
    String expected=String.format("<rss version=\"2.0\">%n" + "<channel><title>Java Tutorials and Examples 1</title><language>en-us</language></channel>%n" + "</rss>");
    strings.assertXmlEqualsTo(someInfo(),actual,expected);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertXmlEqualsTo(someInfo(),null,"<jedi>yoda</jedi>")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> strings.assertXmlEqualsTo(someInfo(),"<jedi>yoda</jedi>",null)).withMessage("The char sequence to look for should not be null");
  }
  @Test public void should_fail_if_both_Strings_are_not_XML_equals(){
    String actual="<rss version=\"2.0\"><channel><title>Java Tutorials</title></channel></rss>";
    String expected="<rss version=\"2.0\"><channel><title>Java Tutorials and Examples</title></channel></rss>";
    AssertionInfo info=someInfo();
    try {
      strings.assertXmlEqualsTo(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(xmlPrettyFormat(actual),xmlPrettyFormat(expected),info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_both_Strings_are_XML_equals_case_insensitively(){
    String actual="<rss version=\"2.0\"><Channel><title>Java Tutorials</title></Channel></rss>";
    String expected="<rss version=\"2.0\"><channel><TITLE>JAVA Tutorials</TITLE></channel></rss>";
    stringsWithCaseInsensitiveComparisonStrategy.assertXmlEqualsTo(someInfo(),actual,expected);
  }
  @Test public void should_fail_if_both_Strings_are_not_XML_equal_regardless_of_case(){
    AssertionInfo info=someInfo();
    String actual="<rss version=\"2.0\"><channel><title>Java Tutorials</title></channel></rss>";
    String expected="<rss version=\"2.0\"><channel><title>Java Tutorials and Examples</title></channel></rss>";
    try {
      stringsWithCaseInsensitiveComparisonStrategy.assertXmlEqualsTo(someInfo(),actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(xmlPrettyFormat(actual),xmlPrettyFormat(expected),info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
