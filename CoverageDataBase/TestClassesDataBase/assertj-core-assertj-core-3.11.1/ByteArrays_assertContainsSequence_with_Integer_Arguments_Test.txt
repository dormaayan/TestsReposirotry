/** 
 * Tests for <code> {@link ByteArrays#assertContainsSequence(AssertionInfo,byte[],int[])}</code>.
 */
public class ByteArrays_assertContainsSequence_with_Integer_Arguments_Test extends ByteArraysBaseTest {
  @Override protected void initActualArray(){
    actual=arrayOf(6,8,10,12);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsSequence(someInfo(),null,IntArrays.arrayOf(8))).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContainsSequence(someInfo(),actual,(int[])null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=emptyArray();
    arrays.assertContainsSequence(someInfo(),actual,IntArrays.emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsSequence(someInfo(),actual,IntArrays.emptyArray()));
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual(){
    AssertionInfo info=someInfo();
    try {
      arrays.assertContainsSequence(info,actual,IntArrays.arrayOf(6,8,10,12,20,22));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,8,10,12,20,22)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_contain_whole_sequence(){
    AssertionInfo info=someInfo();
    try {
      arrays.assertContainsSequence(info,actual,IntArrays.arrayOf(6,20));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,20)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_first_elements_of_sequence(){
    AssertionInfo info=someInfo();
    try {
      arrays.assertContainsSequence(info,actual,IntArrays.arrayOf(6,20,22));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,20,22)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_sequence(){
    arrays.assertContainsSequence(someInfo(),actual,IntArrays.arrayOf(6,8));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal(){
    arrays.assertContainsSequence(someInfo(),actual,IntArrays.arrayOf(6,8,10,12));
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsSequence(someInfo(),null,IntArrays.arrayOf(-8))).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_sequence_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsSequence(someInfo(),actual,(int[])null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsSequence(someInfo(),actual,IntArrays.emptyArray()));
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      arraysWithCustomComparisonStrategy.assertContainsSequence(info,actual,IntArrays.arrayOf(6,-8,10,12,20,22));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,-8,10,12,20,22),absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_contain_whole_sequence_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      arraysWithCustomComparisonStrategy.assertContainsSequence(info,actual,IntArrays.arrayOf(6,20));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,20),absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_first_elements_of_sequence_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      arraysWithCustomComparisonStrategy.assertContainsSequence(info,actual,IntArrays.arrayOf(6,20,22));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainSequence(actual,arrayOf(6,20,22),absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_sequence_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsSequence(someInfo(),actual,IntArrays.arrayOf(6,-8));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsSequence(someInfo(),actual,IntArrays.arrayOf(6,-8,10,12));
  }
}
