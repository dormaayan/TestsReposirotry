public class OffsetTimeAssert_isEqualTo_Test extends OffsetTimeAssertBaseTest {
  @Test public void test_isEqualTo_assertion(){
    assertThat(REFERENCE).isEqualTo(REFERENCE);
    assertThat(REFERENCE).isEqualTo(REFERENCE.toString());
    verify_that_isEqualTo_assertion_fails_and_throws_AssertionError(REFERENCE);
  }
  @Test public void test_isEqualTo_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OffsetTime.of(3,0,5,0,ZoneOffset.UTC)).isEqualTo("03:03:03Z")).withMessage(format("%nExpecting:%n <03:00:05Z>%nto be equal to:%n <03:03:03Z>%nbut was not."));
  }
  @Test public void should_fail_if_offsetTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isEqualTo((String)null)).withMessage("The String representing the OffsetTime to compare actual with should not be null");
  }
  private static void verify_that_isEqualTo_assertion_fails_and_throws_AssertionError(  OffsetTime reference){
    try {
      assertThat(reference).isEqualTo(reference.plusHours(1).toString());
    }
 catch (    AssertionError e) {
      return;
    }
    fail("Should have thrown AssertionError");
  }
}
