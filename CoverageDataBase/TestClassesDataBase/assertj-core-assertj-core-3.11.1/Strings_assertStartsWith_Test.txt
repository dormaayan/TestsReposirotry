/** 
 * Tests for <code> {@link Strings#assertStartsWith(AssertionInfo,CharSequence,CharSequence)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Strings_assertStartsWith_Test extends StringsBaseTest {
  @Test public void should_fail_if_actual_does_not_start_with_prefix(){
    AssertionInfo info=someInfo();
    try {
      strings.assertStartsWith(info,"Yoda","Luke");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldStartWith("Yoda","Luke"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_throw_error_if_prefix_is_null(){
    assertThatNullPointerException().isThrownBy(() -> strings.assertStartsWith(someInfo(),"Yoda",null)).withMessage("The given prefix should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertStartsWith(someInfo(),null,"Yoda")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_starts_with_prefix(){
    strings.assertStartsWith(someInfo(),"Yoda","Yo");
  }
  @Test public void should_pass_if_actual_starts_with_prefix_according_to_custom_comparison_strategy(){
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","Y");
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","Yo");
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","Yod");
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","Yoda");
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","yoda");
    stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(someInfo(),"Yoda","YODA");
  }
  @Test public void should_fail_if_actual_does_not_start_with_prefix_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      stringsWithCaseInsensitiveComparisonStrategy.assertStartsWith(info,"Yoda","Luke");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldStartWith("Yoda","Luke",comparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
