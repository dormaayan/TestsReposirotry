/** 
 * Only test String based assertion (tests with  {@link LocalTime} are already defined in assertj-core)
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class LocalTimeAssert_isNotEqualTo_Test extends LocalTimeAssertBaseTest {
  @Test public void test_isNotEqualTo_assertion(){
    assertThat(REFERENCE).isNotEqualTo(REFERENCE.plusHours(1).toString());
    verify_that_isNotEqualTo_assertion_fails_and_throws_AssertionError(REFERENCE);
  }
  @Test public void test_isNotEqualTo_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalTime.of(3,0,5)).isNotEqualTo("03:00:05")).withMessage(format("%n" + "Expecting:%n" + " <03:00:05>%n"+ "not to be equal to:%n"+ " <03:00:05>%n"));
  }
  @Test public void should_fail_if_timeTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalTime.now()).isNotEqualTo((String)null)).withMessage("The String representing the LocalTime to compare actual with should not be null");
  }
  private static void verify_that_isNotEqualTo_assertion_fails_and_throws_AssertionError(  LocalTime reference){
    try {
      assertThat(reference).isNotEqualTo(reference.toString());
    }
 catch (    AssertionError e) {
      return;
    }
    fail("Should have thrown AssertionError");
  }
}
