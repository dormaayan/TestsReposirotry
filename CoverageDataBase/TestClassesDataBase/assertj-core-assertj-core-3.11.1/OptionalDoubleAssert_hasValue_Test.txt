public class OptionalDoubleAssert_hasValue_Test extends BaseTest {
  @Test public void should_fail_when_optionalDouble_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((OptionalDouble)null).hasValue(10.0)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_optionalDouble_has_expected_value(){
    assertThat(OptionalDouble.of(10.0)).hasValue(10.0);
  }
  @Test public void should_fail_if_optionalDouble_does_not_have_expected_value(){
    OptionalDouble actual=OptionalDouble.of(5.0);
    double expectedValue=10.0;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).hasValue(expectedValue)).withMessage(shouldContain(actual,expectedValue).create());
  }
  @Test public void should_fail_if_optionalDouble_is_empty(){
    double expectedValue=10.0;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OptionalDouble.empty()).hasValue(expectedValue)).withMessage(shouldContain(expectedValue).create());
  }
}
