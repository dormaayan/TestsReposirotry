/** 
 * Tests for <code> {@link Characters#assertNotEqual(AssertionInfo,Character,char)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Characters_assertNotEqual_Test extends CharactersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> characters.assertNotEqual(someInfo(),null,'a')).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_characters_are_not_equal(){
    characters.assertNotEqual(someInfo(),'a','b');
  }
  @Test public void should_fail_if_characters_are_equal(){
    AssertionInfo info=someInfo();
    try {
      characters.assertNotEqual(info,'b','b');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual('b','b'));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> charactersWithCaseInsensitiveComparisonStrategy.assertNotEqual(someInfo(),null,'a')).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_characters_are_not_equal_according_to_custom_comparison_strategy(){
    charactersWithCaseInsensitiveComparisonStrategy.assertNotEqual(someInfo(),'a','b');
  }
  @Test public void should_fail_if_characters_are_equal_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      charactersWithCaseInsensitiveComparisonStrategy.assertNotEqual(info,'b','B');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual('b','B',caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
