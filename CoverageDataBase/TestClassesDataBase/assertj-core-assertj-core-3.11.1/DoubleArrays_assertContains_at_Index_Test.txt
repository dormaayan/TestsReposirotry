/** 
 * Tests for <code> {@link DoubleArrays#assertContains(AssertionInfo,double[],double,Index)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class DoubleArrays_assertContains_at_Index_Test extends DoubleArraysBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContains(someInfo(),null,8d,someIndex())).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContains(someInfo(),emptyArray(),8d,someIndex())).withMessage(actualIsEmpty());
  }
  @Test public void should_throw_error_if_Index_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContains(someInfo(),actual,8d,null)).withMessage("Index should not be null");
  }
  @Test public void should_throw_error_if_Index_is_out_of_bounds(){
    assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> arrays.assertContains(someInfo(),actual,8d,atIndex(6))).withMessageContaining(format("Index should be between <0> and <2> (inclusive) but was:%n <6>"));
  }
  @Test public void should_fail_if_actual_does_not_contain_value_at_index(){
    double value=6;
    Index index=atIndex(1);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContains(someInfo(),actual,value,index)).withMessage(shouldContainAtIndex(actual,value,index,8d).create());
  }
  @Test public void should_pass_if_actual_contains_value_at_index(){
    arrays.assertContains(someInfo(),actual,8d,atIndex(1));
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContains(someInfo(),null,-8d,someIndex())).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContains(someInfo(),emptyArray(),-8d,someIndex())).withMessage(actualIsEmpty());
  }
  @Test public void should_throw_error_if_Index_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContains(someInfo(),actual,-8d,null)).withMessage("Index should not be null");
  }
  @Test public void should_throw_error_if_Index_is_out_of_bounds_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContains(someInfo(),actual,-8d,atIndex(6))).withMessageContaining(format("Index should be between <0> and <2> (inclusive) but was:%n <6>"));
  }
  @Test public void should_fail_if_actual_does_not_contain_value_at_index_according_to_custom_comparison_strategy(){
    double value=6;
    Index index=atIndex(1);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContains(someInfo(),actual,value,index)).withMessage(shouldContainAtIndex(actual,value,index,8d,absValueComparisonStrategy).create());
  }
  @Test public void should_pass_if_actual_contains_value_at_index_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContains(someInfo(),actual,-8d,atIndex(1));
  }
}
