/** 
 * Tests for <code> {@link ShouldHaveMethods}</code>
 */
public class ShouldHaveMethods_create_Test {
  @Test public void should_create_error_message_for_methods(){
    ErrorMessageFactory factory=shouldHaveMethods(Person.class,false,newTreeSet("getName","getAddress"),newTreeSet("getAddress"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "to have methods:%n"+ "  <[\"getAddress\", \"getName\"]>%n"+ "but could not find:%n"+ "  <[\"getAddress\"]>"));
  }
  @Test public void should_create_error_message_for_declared_methods(){
    ErrorMessageFactory factory=shouldHaveMethods(Person.class,true,newTreeSet("getName","getAddress"),newTreeSet("getAddress"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "to have declared methods:%n"+ "  <[\"getAddress\", \"getName\"]>%n"+ "but could not find:%n"+ "  <[\"getAddress\"]>"));
  }
  @Test public void should_create_error_message_for_shouldNotHave_PublicDeclared_Methods(){
    ErrorMessageFactory factory=shouldNotHaveMethods(Person.class,Modifier.toString(Modifier.PUBLIC),true,newTreeSet("getName"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "not to have any declared public methods but it has the following:%n"+ "  <[\"getName\"]>"));
  }
  @Test public void should_create_error_message_for_shouldNotHave_Public_Methods(){
    ErrorMessageFactory factory=shouldNotHaveMethods(Person.class,Modifier.toString(Modifier.PUBLIC),false,newTreeSet("getName"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "not to have any public methods but it has the following:%n"+ "  <[\"getName\"]>"));
  }
  @Test public void should_create_error_message_for_shouldNotHave_Declared_Methods(){
    ErrorMessageFactory factory=shouldNotHaveMethods(Person.class,true,newTreeSet("getName"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "not to have any declared methods but it has the following:%n"+ "  <[\"getName\"]>"));
  }
  @Test public void should_create_error_message_for_shouldNotHaveMethods(){
    ErrorMessageFactory factory=shouldNotHaveMethods(Person.class,false,newTreeSet("getName"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "not to have any methods but it has the following:%n"+ "  <[\"getName\"]>"));
  }
  @Test public void should_create_error_message_for_shouldHaveMethods_with_non_matching_modifier(){
    ErrorMessageFactory factory=shouldHaveMethods(Person.class,false,newTreeSet("finalize"),Modifier.toString(Modifier.PUBLIC),mapOf(entry("finalize",Modifier.toString(Modifier.PROTECTED))));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting%n" + "  <org.assertj.core.test.Person>%n"+ "to have public methods:%n"+ "  <[\"finalize\"]>%n"+ "but the following are not public:%n"+ "  <{\"finalize\"=\"protected\"}>"));
  }
}
