/** 
 * Tests for <code> {@link Floats#assertNotEqual(AssertionInfo,Float,float)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Floats_assertNotEqual_Test extends FloatsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> floats.assertNotEqual(someInfo(),null,8f)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_floats_are_not_equal(){
    floats.assertNotEqual(someInfo(),8f,6f);
  }
  @Test public void should_fail_if_floats_are_equal(){
    AssertionInfo info=someInfo();
    try {
      floats.assertNotEqual(info,6f,6f);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(6f,6f));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> floatsWithAbsValueComparisonStrategy.assertNotEqual(someInfo(),null,8f)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_floats_are_not_equal_according_to_custom_comparison_strategy(){
    floatsWithAbsValueComparisonStrategy.assertNotEqual(someInfo(),8f,6f);
  }
  @Test public void should_fail_if_floats_are_equal_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      floatsWithAbsValueComparisonStrategy.assertNotEqual(info,6f,-6f);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(6f,-6f,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
