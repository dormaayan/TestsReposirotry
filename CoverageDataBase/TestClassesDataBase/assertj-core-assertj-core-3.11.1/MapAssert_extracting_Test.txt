public class MapAssert_extracting_Test {
  private static final Object NAME="name";
  private Map<Object,Object> map;
  @BeforeEach public void setup(){
    map=new HashMap<>();
    map.put(NAME,"kawhi");
    map.put("age",25);
  }
  @Test public void should_allow_assertions_on_values_extracted_from_given_map_keys(){
    assertThat(map).extracting(NAME,"age").contains("kawhi",25);
  }
  @Test public void should_allow_assertions_on_values_extracted_from_given_extractors(){
    assertThat(map).extracting(m -> m.get(NAME),m -> m.get("age")).contains("kawhi",25);
  }
  @Test public void should_extract_null_from_unknown_key(){
    assertThat(map).extracting(NAME,"id").contains("kawhi",(Object)null);
  }
  @Test public void should_use_key_names_as_description(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(map).extracting(NAME,"age").isEmpty()).withMessageContaining("[Extracted: name, age]");
  }
  @Test public void should_keep_existing_description_if_set_when_extracting_values_list(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(map).as("check name and age").extracting(NAME,"age").isEmpty()).withMessageContaining("[check name and age]");
  }
  @Test public void should_fail_if_actual_is_null(){
    map=null;
    Throwable error=catchThrowable(() -> assertThat(map).extracting(NAME,"age"));
    assertThat(error).hasMessage(actualIsNull());
  }
}
