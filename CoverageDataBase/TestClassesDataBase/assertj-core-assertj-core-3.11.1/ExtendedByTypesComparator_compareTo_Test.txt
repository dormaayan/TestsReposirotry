public class ExtendedByTypesComparator_compareTo_Test {
  private static final TypeComparators COMPARATORS_BY_TYPE=new TypeComparators();
  private static final ExtendedByTypesComparator EXTENDED_STANDARD_COMPARATOR=new ExtendedByTypesComparator(COMPARATORS_BY_TYPE);
  private static final ExtendedByTypesComparator EXTENDED_FIELD_BY_FIELD_COMPARATOR=new ExtendedByTypesComparator(new FieldByFieldComparator(),COMPARATORS_BY_TYPE);
  public static Iterable<ExtendedByTypesComparator> data(){
    return asList(EXTENDED_STANDARD_COMPARATOR,EXTENDED_FIELD_BY_FIELD_COMPARATOR);
  }
  @BeforeAll public static void beforeClass(){
    COMPARATORS_BY_TYPE.put(BigDecimal.class,new BigDecimalComparator());
  }
  @ParameterizedTest @MethodSource("data") public void should_return_equal_if_both_objects_are_null(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare(null,null)).isZero();
  }
  @ParameterizedTest @MethodSource("data") public void should_return_are_not_equal_if_first_object_is_null_and_second_is_not(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare(null,"some")).isNotZero();
  }
  @ParameterizedTest @MethodSource("data") public void should_return_are_not_equal_if_second_object_is_null_and_first_is_not(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare("some",null)).isNotZero();
  }
  @Test public void should_return_equal_if_objects_are_equal_by_default_comparator(){
    assertThat(EXTENDED_STANDARD_COMPARATOR.compare(new Jedi("Yoda","Green"),new Jedi("Yoda","Green"))).isZero();
    assertThat(EXTENDED_FIELD_BY_FIELD_COMPARATOR.compare(new Jedi("Yoda","Green"),new Jedi("Yoda","Green"))).isZero();
  }
  @Test public void should_return_are_not_equal_if_objects_are_not_equal_by_default_comparator(){
    assertThat(EXTENDED_STANDARD_COMPARATOR.compare(new Jedi("Yoda","Green"),new Jedi("Luke","Blue"))).isNotZero();
    assertThat(EXTENDED_FIELD_BY_FIELD_COMPARATOR.compare(new Jedi("Yoda","Green"),new Jedi("Yoda","Any"))).isNotZero();
  }
  @ParameterizedTest @MethodSource("data") public void should_return_equal_if_objects_are_equal_by_type_comparator(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare(new BigDecimal("4.2"),new BigDecimal("4.20"))).isZero();
  }
  @ParameterizedTest @MethodSource("data") public void should_return_are_not_equal_if_objects_are_not_equal_by_type_comparator(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare(new BigDecimal(42),new BigDecimal("42.5"))).isNotZero();
  }
  @ParameterizedTest @MethodSource("data") public void should_return_are_not_equal_if_objects_are_different_by_type_for_type_comparator(  ExtendedByTypesComparator extendedComparator){
    assertThat(extendedComparator.compare(new BigDecimal(42),"some")).isNotZero();
  }
}
