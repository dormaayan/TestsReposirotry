/** 
 * Tests for <code> {@link CharArrays#assertContainsOnly(AssertionInfo,char[],char[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class CharArrays_assertContainsOnly_Test extends CharArraysBaseTest {
  @Test public void should_pass_if_actual_contains_given_values_only(){
    arrays.assertContainsOnly(someInfo(),actual,arrayOf('a','b','c'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order(){
    arrays.assertContainsOnly(someInfo(),actual,arrayOf('c','b','a'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_more_than_once(){
    actual=arrayOf('a','b','c','c','c');
    arrays.assertContainsOnly(someInfo(),actual,arrayOf('a','b','c'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated(){
    arrays.assertContainsOnly(someInfo(),actual,arrayOf('a','b','c','a','b','c'));
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=emptyArray();
    arrays.assertContainsOnly(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnly(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContainsOnly(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnly(someInfo(),null,arrayOf('a'))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_only(){
    AssertionInfo info=someInfo();
    char[] expected={'a','b','d'};
    try {
      arrays.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList('d'),newArrayList('c')));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_only_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,arrayOf('A','b','c'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,arrayOf('c','b','A'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_more_than_once_according_to_custom_comparison_strategy(){
    actual=arrayOf('A','b','c','c','c');
    arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,arrayOf('A','b','c'));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,arrayOf('A','b','c','A','b','c'));
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnly(someInfo(),null,arrayOf('A'))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_only_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    char[] expected={'A','b','d'};
    try {
      arraysWithCustomComparisonStrategy.assertContainsOnly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnly(actual,expected,newArrayList('d'),newArrayList('c'),caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
