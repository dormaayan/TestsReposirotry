public class Paths_assertStartsWith_Test extends MockPathsBaseTest {
  private Path canonicalActual;
  private Path canonicalOther;
  @BeforeEach public void init(){
    super.init();
    canonicalActual=mock(Path.class);
    canonicalOther=mock(Path.class);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> paths.assertStartsWith(info,null,other)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_other_is_null(){
    assertThatNullPointerException().isThrownBy(() -> paths.assertStartsWith(info,actual,null)).withMessage("the expected start path should not be null");
  }
  @Test public void should_throw_PathsException_if_actual_cannot_be_resolved() throws IOException {
    final IOException exception=new IOException();
    when(actual.toRealPath()).thenThrow(exception);
    assertThatExceptionOfType(PathsException.class).isThrownBy(() -> paths.assertStartsWith(info,actual,other)).withMessage("failed to resolve actual real path").withCause(exception);
  }
  @Test public void should_throw_PathsException_if_other_cannot_be_resolved() throws IOException {
    final IOException exception=new IOException();
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(other.toRealPath()).thenThrow(exception);
    assertThatExceptionOfType(PathsException.class).isThrownBy(() -> paths.assertStartsWith(info,actual,other)).withMessage("failed to resolve argument real path").withCause(exception);
  }
  @Test public void should_fail_if_actual_does_not_start_with_other() throws IOException {
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(other.toRealPath()).thenReturn(canonicalOther);
    when(canonicalActual.startsWith(canonicalOther)).thenReturn(false);
    try {
      paths.assertStartsWith(info,actual,other);
      wasExpectingAssertionError();
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldStartWith(actual,other));
    }
  }
  @Test public void should_succeed_if_actual_starts_with_other() throws IOException {
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(other.toRealPath()).thenReturn(canonicalOther);
    when(canonicalActual.startsWith(canonicalOther)).thenReturn(true);
    paths.assertStartsWith(info,actual,other);
  }
}
