public class AbstractAssert_isInstanceOfSatisfying_Test extends AbstractAssertBaseTest {
  private Jedi yoda=new Jedi("Yoda","Green");
  private Jedi luke=new Jedi("Luke Skywalker","Green");
  private Consumer<Jedi> jediRequirements;
  @BeforeEach public void setup(){
    jediRequirements=jedi -> {
      assertThat(jedi.lightSaberColor).as("check light saber").isEqualTo("Green");
      assertThat(jedi.getName()).as("check name").doesNotContain("Dark");
    }
;
  }
  @Override protected ConcreteAssert create_assertions(){
    return new ConcreteAssert(yoda);
  }
  @Override protected ConcreteAssert invoke_api_method(){
    return assertions.isInstanceOfSatisfying(Jedi.class,jediRequirements);
  }
  @Override protected void verify_internal_effects(){
    verify(objects).assertIsInstanceOf(getInfo(assertions),getActual(assertions),Jedi.class);
  }
  @Test public void should_satisfy_single_requirement(){
    assertThat(yoda).isInstanceOfSatisfying(Jedi.class,jedi -> assertThat(jedi.lightSaberColor).isEqualTo("Green"));
  }
  @Test public void should_satisfy_multiple_requirements(){
    assertThat(yoda).isInstanceOfSatisfying(Jedi.class,jediRequirements);
    assertThat(luke).isInstanceOfSatisfying(Jedi.class,jediRequirements);
  }
  @Test public void should_fail_according_to_requirements(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(new Jedi("Vader","Red")).isInstanceOfSatisfying(Jedi.class,jediRequirements)).withMessage(format("[check light saber] %nExpecting:%n <\"Red\">%nto be equal to:%n <\"Green\">%nbut was not."));
  }
  @Test public void should_fail_if_consumer_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(yoda).isInstanceOfSatisfying(Jedi.class,null)).withMessage("The Consumer<T> expressing the assertions requirements must not be null");
  }
  @Test public void should_fail_if_type_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(yoda).isInstanceOfSatisfying(null,jediRequirements)).withMessage("The given type should not be null");
  }
}
