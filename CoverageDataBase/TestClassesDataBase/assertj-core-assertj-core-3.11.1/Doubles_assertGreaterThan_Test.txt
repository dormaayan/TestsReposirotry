/** 
 * Tests for <code> {@link Doubles#assertGreaterThan(AssertionInfo,Double,double)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Doubles_assertGreaterThan_Test extends DoublesBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> doubles.assertGreaterThan(someInfo(),null,8d)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    doubles.assertGreaterThan(someInfo(),8d,6d);
  }
  @Test public void should_fail_if_actual_is_equal_to_other(){
    AssertionInfo info=someInfo();
    try {
      doubles.assertGreaterThan(info,6d,6d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(6d,6d));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      doubles.assertGreaterThan(info,6d,8d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(6d,8d));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    doublesWithAbsValueComparisonStrategy.assertGreaterThan(someInfo(),-8d,6d);
  }
  @Test public void should_fail_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      doublesWithAbsValueComparisonStrategy.assertGreaterThan(info,-6d,6d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(-6d,6d,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      doublesWithAbsValueComparisonStrategy.assertGreaterThan(info,-6d,8d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(-6d,8d,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
