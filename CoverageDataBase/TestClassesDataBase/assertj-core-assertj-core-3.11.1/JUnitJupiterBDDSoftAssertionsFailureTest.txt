public class JUnitJupiterBDDSoftAssertionsFailureTest {
  JUnitJupiterBDDSoftAssertions softly=new JUnitJupiterBDDSoftAssertions();
  @Test public void should_report_all_errors(){
    softly.then(1).isEqualTo(1);
    softly.then(1).isEqualTo(2);
    softly.then(list(1,2)).containsOnly(1,3);
    MultipleFailuresError error=catchThrowableOfType(() -> softly.afterEach(null),MultipleFailuresError.class);
    List<Throwable> failures=error.getFailures();
    assertThat(failures).hasSize(2).extracting("message").contains(format("%nExpecting:%n <1>%nto be equal to:%n <2>%nbut was not."),format("%n" + "Expecting:%n" + "  <[1, 2]>%n"+ "to contain only:%n"+ "  <[1, 3]>%n"+ "elements not found:%n"+ "  <[3]>%n"+ "and elements not expected:%n"+ "  <[2]>%n"));
  }
}
