public class ObjectArrayAssert_flatExtracting_Test {
  private CartoonCharacter bart;
  private CartoonCharacter lisa;
  private CartoonCharacter maggie;
  private CartoonCharacter homer;
  private CartoonCharacter pebbles;
  private CartoonCharacter fred;
  private static final ThrowingExtractor<CartoonCharacter,List<CartoonCharacter>,Exception> childrenThrowingExtractor=CartoonCharacter::getChildren;
  private static final Extractor<CartoonCharacter,List<CartoonCharacter>> children=new Extractor<CartoonCharacter,List<CartoonCharacter>>(){
    @Override public List<CartoonCharacter> extract(    CartoonCharacter input){
      return input.getChildren();
    }
  }
;
  @BeforeEach public void setUp(){
    bart=new CartoonCharacter("Bart Simpson");
    lisa=new CartoonCharacter("Lisa Simpson");
    maggie=new CartoonCharacter("Maggie Simpson");
    homer=new CartoonCharacter("Homer Simpson");
    homer.addChildren(bart,lisa,maggie);
    pebbles=new CartoonCharacter("Pebbles Flintstone");
    fred=new CartoonCharacter("Fred Flintstone");
    fred.addChildren(pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children(){
    assertThat(array(homer,fred)).flatExtracting(children).containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_empty_result_lists(){
    assertThat(array(bart,lisa,maggie)).flatExtracting(children).isEmpty();
  }
  @Test public void should_throw_null_pointer_exception_when_extracting_from_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(array(homer,null)).flatExtracting(children));
  }
  @Test public void should_keep_existing_description_if_set_when_extracting_using_property(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(array(homer)).as("expected description").flatExtracting("children").isEmpty()).withMessageContaining("[expected description]");
  }
  @Test public void should_keep_existing_description_if_set_when_extracting_using_extractor(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(array(homer)).as("expected description").flatExtracting(children).isEmpty()).withMessageContaining("[expected description]");
  }
  @Test public void should_rethrow_throwing_extractor_checked_exception_as_a_runtime_exception(){
    CartoonCharacter[] childCharacters=array(bart,lisa,maggie);
    assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> assertThat(childCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new Exception("no children");
      return cartoonCharacter.getChildren();
    }
)).withMessage("java.lang.Exception: no children");
  }
  @Test public void should_let_throwing_extractor_runtime_exception_bubble_up(){
    CartoonCharacter[] childCharacters=array(bart,lisa,maggie);
    assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> assertThat(childCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new RuntimeException("no children");
      return cartoonCharacter.getChildren();
    }
)).withMessage("no children");
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children_with_throwing_extractor(){
    CartoonCharacter[] cartoonCharacters=array(homer,fred);
    assertThat(cartoonCharacters).flatExtracting(cartoonCharacter -> {
      if (cartoonCharacter.getChildren().isEmpty())       throw new Exception("no children");
      return cartoonCharacter.getChildren();
    }
).containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children_with_anonymous_class_throwing_extractor(){
    CartoonCharacter[] cartoonCharacters=array(homer,fred);
    assertThat(cartoonCharacters).flatExtracting(new ThrowingExtractor<CartoonCharacter,List<CartoonCharacter>,Exception>(){
      @Override public List<CartoonCharacter> extractThrows(      CartoonCharacter cartoonCharacter) throws Exception {
        if (cartoonCharacter.getChildren().isEmpty())         throw new Exception("no children");
        return cartoonCharacter.getChildren();
      }
    }
).containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void flatExtracting_should_keep_assertion_state(){
    AlwaysEqualComparator<CartoonCharacter> cartoonCharacterAlwaysEqualComparator=alwaysEqual();
    AbstractListAssert<?,?,?,?> assertion=assertThat(array(homer,fred)).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"foo").usingComparatorForElementFieldsWithType(ALWAY_EQUALS_TIMESTAMP,Timestamp.class).usingComparatorForType(cartoonCharacterAlwaysEqualComparator,CartoonCharacter.class).flatExtracting(children).contains(bart,lisa,new CartoonCharacter("Unknown"));
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(CartoonCharacter.class)).isSameAs(cartoonCharacterAlwaysEqualComparator);
    assertThat(comparatorForElementFieldsWithTypeOf(assertion).get(Timestamp.class)).isSameAs(ALWAY_EQUALS_TIMESTAMP);
    assertThat(comparatorForElementFieldsWithNamesOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
  }
  @Test public void flatExtracting_with_ThrowingExtractor_should_keep_assertion_state(){
    AlwaysEqualComparator<CartoonCharacter> cartoonCharacterAlwaysEqualComparator=alwaysEqual();
    AbstractListAssert<?,?,?,?> assertion=assertThat(array(homer,fred)).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"foo").usingComparatorForElementFieldsWithType(ALWAY_EQUALS_TIMESTAMP,Timestamp.class).usingComparatorForType(cartoonCharacterAlwaysEqualComparator,CartoonCharacter.class).flatExtracting(childrenThrowingExtractor).contains(bart,lisa,new CartoonCharacter("Unknown"));
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(CartoonCharacter.class)).isSameAs(cartoonCharacterAlwaysEqualComparator);
    assertThat(comparatorForElementFieldsWithTypeOf(assertion).get(Timestamp.class)).isSameAs(ALWAY_EQUALS_TIMESTAMP);
    assertThat(comparatorForElementFieldsWithNamesOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
  }
}
