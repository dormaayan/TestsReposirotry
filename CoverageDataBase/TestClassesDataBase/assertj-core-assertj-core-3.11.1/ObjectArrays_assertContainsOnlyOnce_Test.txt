/** 
 * Tests for <code> {@link ObjectArrays#assertContainsOnlyOnce(AssertionInfo,Object[],Object[])}</code>.
 * @author William Delanoue
 */
public class ObjectArrays_assertContainsOnlyOnce_Test extends ObjectArraysBaseTest {
  @Test public void should_pass_if_actual_contains_given_values_only_once(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,array("Luke","Yoda","Leia"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_once_even_if_actual_type_is_not_comparable(){
    Rectangle r1=new Rectangle(1,1);
    Rectangle r2=new Rectangle(2,2);
    arrays.assertContainsOnlyOnce(someInfo(),array(r1,r2,r2),array(r1));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,array("Leia","Yoda","Luke"));
  }
  @Test public void should_fail_if_actual_contains_given_values_more_than_once(){
    AssertionInfo info=someInfo();
    actual=array("Luke","Yoda","Han","Luke","Yoda","Han","Yoda","Luke");
    String[] expected={"Luke","Yoda","Leia"};
    try {
      arrays.assertContainsOnlyOnce(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainsOnlyOnce(actual,expected,newLinkedHashSet("Leia"),newLinkedHashSet("Luke","Yoda")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_only_once_even_if_duplicated(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,array("Luke","Yoda","Leia","Luke","Yoda","Leia"));
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=new String[]{};
    arrays.assertContainsOnlyOnce(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),null,array("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_all_given_values(){
    AssertionInfo info=someInfo();
    String[] expected={"Luke","Yoda","Han"};
    try {
      arrays.assertContainsOnlyOnce(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainsOnlyOnce(actual,expected,newLinkedHashSet("Han"),newLinkedHashSet()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_only_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,array("Luke","yoda","Leia"));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,array("Leia","yoda","Luke"));
  }
  @Test public void should_fail_if_actual_contains_given_values_more_than_once_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=array("Luke","yODA","Han","luke","yoda","Han","YodA");
    String[] expected={"Luke","yOda","Leia"};
    try {
      arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainsOnlyOnce(actual,expected,newLinkedHashSet("Leia"),newLinkedHashSet("Luke","yOda"),caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_only_once_according_to_custom_comparison_strategy_even_if_duplicated_(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,array("Luke","Yoda","Leia","Luke","yODA","LeiA"));
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),null,array("yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_all_given_values_only_once_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    String[] expected={"Luke","yoda","han"};
    try {
      arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainsOnlyOnce(actual,expected,newLinkedHashSet("han"),newLinkedHashSet(),caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
