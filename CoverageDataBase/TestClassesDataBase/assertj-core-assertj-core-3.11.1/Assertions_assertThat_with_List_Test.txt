/** 
 * Tests for <code> {@link Assertions#assertThat(List)}</code>.
 * @author Yvonne Wang
 * @author Alex Ruiz
 * @author Mikhail Mazursky
 */
public class Assertions_assertThat_with_List_Test {
private static class Person {
    @SuppressWarnings("unused") private String name;
    public Person(    String name){
      this.name=name;
    }
  }
private static class Employee extends Person {
    public Employee(    String name){
      super(name);
    }
  }
  @Test public void should_create_Assert(){
    AbstractListAssert<?,List<? extends Object>,Object,ObjectAssert<Object>> assertions=assertThat(emptyList());
    assertThat(assertions).isNotNull();
  }
  @Test public void should_create_Assert_generics(){
    Employee bill=new Employee("bill");
    Person billou=bill;
    Assertions.assertThat(bill).isEqualTo(billou);
    Assertions.assertThat(billou).isEqualTo(bill);
  }
  @Test public void should_create_Assert_with_list_extended(){
    List<String> strings0=new ArrayList<>();
    List<? extends String> strings1=new ArrayList<>();
    Assertions.assertThat(strings0).isEqualTo(strings1);
    Assertions.assertThat(strings1).isEqualTo(strings0);
  }
  @Test public void should_create_Assert_with_extends(){
    Employee bill=new Employee("bill");
    Person billou=bill;
    List<Person> list1=newArrayList(billou);
    List<Employee> list2=newArrayList(bill);
    Assertions.assertThat(list1).isEqualTo(list2);
    Assertions.assertThat(list2).isEqualTo(list1);
  }
  @Test public void should_pass_actual(){
    List<String> names=singletonList("Luke");
    assertThat(assertThat(names).actual).isSameAs(names);
  }
}
