public class Urls_assertHasHost_Test extends UrlsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> urls.assertHasHost(info,null,"www.helloworld.org")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_URL_has_the_given_host() throws MalformedURLException {
    urls.assertHasHost(info,new URL("http://www.helloworld.org"),"www.helloworld.org");
  }
  @Test public void should_pass_if_actual_URL_with_path_has_the_given_host() throws MalformedURLException {
    urls.assertHasHost(info,new URL("http://www.helloworld.org/pages"),"www.helloworld.org");
  }
  @Test public void should_fail_if_actual_URL_has_not_the_expected_host() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com/pages/");
    String expectedHost="example.org";
    try {
      urls.assertHasHost(info,url,expectedHost);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveHost(url,expectedHost));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
