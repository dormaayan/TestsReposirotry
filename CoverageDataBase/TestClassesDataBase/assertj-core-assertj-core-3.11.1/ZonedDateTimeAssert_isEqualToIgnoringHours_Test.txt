public class ZonedDateTimeAssert_isEqualToIgnoringHours_Test extends BaseTest {
  private final ZonedDateTime refDatetime=ZonedDateTime.of(2000,1,2,0,0,0,0,UTC);
  @Test public void should_pass_if_actual_is_equal_to_other_ignoring_hours(){
    assertThat(refDatetime).isEqualToIgnoringHours(refDatetime.plusHours(1));
  }
  @Test public void should_pass_if_actual_is_equal_to_other_ignoring_hours_in_different_timezone(){
    ZonedDateTime utcDateTime=ZonedDateTime.of(2013,6,10,0,0,0,0,UTC);
    ZoneId cestTimeZone=ZoneId.of("Europe/Berlin");
    assertThat(utcDateTime).isEqualToIgnoringHours(ZonedDateTime.of(2013,6,10,5,0,0,0,cestTimeZone));
    assertThat(utcDateTime).isEqualToIgnoringHours(ZonedDateTime.of(2013,6,11,1,0,0,0,cestTimeZone));
    try {
      assertThat(utcDateTime).isEqualToIgnoringHours(ZonedDateTime.of(2013,6,10,0,0,0,0,cestTimeZone));
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n  <2013-06-10T00:00Z>%nto have same year, month and day as:%n  <2013-06-09T22:00Z>%nbut had not."));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_not_equal_to_given_datetime_with_hours_ignored(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refDatetime).isEqualToIgnoringHours(refDatetime.minusHours(1))).withMessage(format("%nExpecting:%n  <2000-01-02T00:00Z>%nto have same year, month and day as:%n  <2000-01-01T23:00Z>%nbut had not."));
  }
  @Test public void should_fail_as_hours_fields_are_different_even_if_time_difference_is_less_than_a_hour(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refDatetime).isEqualToIgnoringHours(refDatetime.minusNanos(1))).withMessage(format("%nExpecting:%n  <2000-01-02T00:00Z>%nto have same year, month and day as:%n  <2000-01-01T23:59:59.999999999Z>%nbut had not."));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      ZonedDateTime actual=null;
      assertThat(actual).isEqualToIgnoringHours(ZonedDateTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_given_datetime_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(refDatetime).isEqualToIgnoringHours(null)).withMessage(NULL_DATE_TIME_PARAMETER_MESSAGE);
  }
}
