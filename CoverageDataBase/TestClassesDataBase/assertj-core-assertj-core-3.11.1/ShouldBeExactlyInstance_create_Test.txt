/** 
 * Tests for <code> {@link ShouldBeExactlyInstanceOf#create(Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Nicolas Fran√ßois
 */
public class ShouldBeExactlyInstance_create_Test {
  private ErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    factory=shouldBeExactlyInstance("Yoda",File.class);
  }
  @Test public void should_create_error_message(){
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <\"Yoda\">%n"+ "to be exactly an instance of:%n"+ " <java.io.File>%n"+ "but was an instance of:%n <java.lang.String>"));
  }
  @Test public void should_create_error_message_with_stack_trace_for_throwable(){
    IllegalArgumentException throwable=new IllegalArgumentException("Not a Nullpointer");
    String message=shouldBeExactlyInstance(throwable,NullPointerException.class).create();
    assertThat(message).isEqualTo(format("%nExpecting:%n" + " <java.lang.IllegalArgumentException: Not a Nullpointer>%n" + "to be exactly an instance of:%n"+ " <java.lang.NullPointerException>%n"+ "but was:%n"+ " <\"%s\">",getStackTrace(throwable)));
  }
}
