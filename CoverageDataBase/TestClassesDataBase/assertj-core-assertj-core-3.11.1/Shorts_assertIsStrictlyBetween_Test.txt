/** 
 * Tests for <code> {@link Shorts#assertIsStrictlyBetween(AssertionInfo,Short,Short,Short)}</code>.
 * @author William Delanoue
 */
public class Shorts_assertIsStrictlyBetween_Test extends ShortsBaseTest {
  private static final Short ZERO=0;
  private static final Short ONE=1;
  private static final Short TWO=2;
  private static final Short TEN=10;
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shorts.assertIsStrictlyBetween(someInfo(),null,ZERO,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_start_is_null(){
    assertThatNullPointerException().isThrownBy(() -> shorts.assertIsStrictlyBetween(someInfo(),ONE,null,ONE));
  }
  @Test public void should_fail_if_end_is_null(){
    assertThatNullPointerException().isThrownBy(() -> shorts.assertIsStrictlyBetween(someInfo(),ONE,ZERO,null));
  }
  @Test public void should_pass_if_actual_is_in_range(){
    shorts.assertIsStrictlyBetween(someInfo(),ONE,ZERO,TEN);
  }
  @Test public void should_fail_if_actual_is_equal_to_range_start(){
    AssertionInfo info=someInfo();
    try {
      shorts.assertIsStrictlyBetween(info,ONE,ONE,TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(ONE,ONE,TEN,false,false));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equal_to_range_end(){
    AssertionInfo info=someInfo();
    try {
      shorts.assertIsStrictlyBetween(info,ONE,ZERO,ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(ONE,ZERO,ONE,false,false));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_not_in_range_start(){
    AssertionInfo info=someInfo();
    try {
      shorts.assertIsStrictlyBetween(info,ONE,TWO,TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(ONE,TWO,TEN,false,false));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_not_in_range_end(){
    assertThatIllegalArgumentException().isThrownBy(() -> shorts.assertIsStrictlyBetween(someInfo(),ONE,ZERO,ZERO)).withMessage("The end value <0> must not be less than or equal to the start value <0>!");
  }
}
