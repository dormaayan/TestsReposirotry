/** 
 * Tests for <code> {@link org.assertj.core.internal.Maps#assertContainsOnlyKeys(org.assertj.core.api.AssertionInfo,java.util.Map,java.lang.Object)}</code> .
 * @author Christopher Arnott
 */
public class Maps_assertContainsOnlyKeys_Test extends MapsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertContainsOnlyKeys(someInfo(),null,"name")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_given_keys_array_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertContainsOnlyKeys(someInfo(),actual,(String[])null)).withMessage(keysToLookForIsNull());
  }
  @Test public void should_fail_if_given_keys_array_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> maps.assertContainsOnlyKeys(someInfo(),actual,emptyKeys())).withMessage(keysToLookForIsEmpty());
  }
  @Test public void should_pass_if_actual_and_entries_are_empty(){
    maps.assertContainsOnlyKeys(someInfo(),emptyMap(),(Object[])emptyKeys());
  }
  @Test public void should_pass_if_actual_contains_only_expected_entries(){
    maps.assertContainsOnlyKeys(someInfo(),actual,"color","name");
  }
  @Test public void should_fail_if_actual_contains_unexpected_entry(){
    AssertionInfo info=someInfo();
    String[] expectedKeys={"name"};
    try {
      maps.assertContainsOnlyKeys(info,actual,expectedKeys);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyKeys(actual,expectedKeys,emptySet(),newHashSet("color")));
      return;
    }
    shouldHaveThrown(AssertionError.class);
  }
  @Test public void should_fail_if_actual_does_not_contains_every_expected_entries(){
    AssertionInfo info=someInfo();
    String[] expectedKeys={"name","color"};
    Map<String,String> underTest=Maps.mapOf(entry("name","Yoda"));
    try {
      maps.assertContainsOnlyKeys(info,underTest,expectedKeys);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyKeys(underTest,expectedKeys,newHashSet("color"),emptySet()));
      return;
    }
    shouldHaveThrown(AssertionError.class);
  }
  @Test public void should_fail_if_actual_does_not_contains_every_expected_entries_and_contains_unexpected_one(){
    AssertionInfo info=someInfo();
    String[] expectedKeys={"name","color"};
    Map<String,String> underTest=Maps.mapOf(entry("name","Yoda"),entry("job","Jedi"));
    try {
      maps.assertContainsOnlyKeys(info,underTest,expectedKeys);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyKeys(underTest,expectedKeys,newHashSet("color"),newHashSet("job")));
      return;
    }
    shouldHaveThrown(AssertionError.class);
  }
  private static HashSet<String> newHashSet(  String entry){
    HashSet<String> notExpected=new HashSet<>();
    notExpected.add(entry);
    return notExpected;
  }
}
