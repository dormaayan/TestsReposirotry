/** 
 * Tests for <code> {@link ShouldBeInstance#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class ShouldBeInstance_create_Test {
  private ErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    factory=shouldBeInstance("Yoda",File.class);
  }
  @Test public void should_create_error_message(){
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <\"Yoda\">%n"+ "to be an instance of:%n"+ "  <java.io.File>%n"+ "but was instance of:%n"+ "  <java.lang.String>"));
  }
  @Test public void should_create_error_message_with_stack_trace_for_throwable(){
    IllegalArgumentException throwable=new IllegalArgumentException("Not a file");
    String message=shouldBeInstance(throwable,File.class).create();
    assertThat(message).isEqualTo(format("%nExpecting:%n" + "  <java.lang.IllegalArgumentException: Not a file>%n" + "to be an instance of:%n"+ "  <java.io.File>%n"+ "but was:%n"+ "  <\"%s\">",getStackTrace(throwable)));
  }
  @Test public void should_create_shouldBeInstanceButWasNull_error_message(){
    factory=shouldBeInstanceButWasNull("other",File.class);
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting object:%n" + "  \"other\"%n"+ "to be an instance of:%n"+ "  <java.io.File>%n"+ "but was null"));
  }
}
