public class AtomicReferenceArrayAssert_filteredOn_condition_Test extends AtomicReferenceArrayAssert_filtered_baseTest {
  protected Condition<Employee> oldEmployees;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    oldEmployees=new Condition<Employee>("old employees"){
      @Override public boolean matches(      Employee employee){
        return employee.getAge() > 100;
      }
    }
;
  }
  @Test public void should_filter_object_array_under_test_on_condition(){
    assertThat(employees).filteredOn(oldEmployees).containsOnly(yoda,obiwan);
  }
  @Test public void should_filter_object_array_under_test_on_combined_condition(){
    assertThat(employees).filteredOn(not(oldEmployees)).contains(luke,noname);
  }
  @Test public void should_fail_if_given_condition_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(employees).filteredOn(null)).withMessage("The filter condition should not be null");
  }
}
