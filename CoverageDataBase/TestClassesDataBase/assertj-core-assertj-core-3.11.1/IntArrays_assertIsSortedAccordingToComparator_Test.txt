/** 
 * Tests for <code> {@link IntArrays#assertIsSortedAccordingToComparator(AssertionInfo,int[],Comparator)}</code>
 * @author Joel Costigliola
 */
public class IntArrays_assertIsSortedAccordingToComparator_Test extends IntArraysBaseTest {
  private Comparator<Integer> intDescendingOrderComparator;
  private Comparator<Integer> intSquareComparator;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=new int[]{4,3,2,2,1};
    intDescendingOrderComparator=(int1,int2) -> -int1.compareTo(int2);
    intSquareComparator=(int1,int2) -> new Integer(int1 * int1).compareTo(new Integer(int2 * int2));
  }
  @Test public void should_pass_if_actual_is_sorted_according_to_given_comparator(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),actual,intDescendingOrderComparator);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_given_comparator_is(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),intDescendingOrderComparator);
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),intSquareComparator);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),null,intDescendingOrderComparator)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_comparator_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),null));
  }
  @Test public void should_fail_if_actual_is_not_sorted_according_to_given_comparator(){
    AssertionInfo info=someInfo();
    actual=new int[]{3,2,1,9};
    try {
      arrays.assertIsSortedAccordingToComparator(info,actual,intDescendingOrderComparator);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSortedAccordingToGivenComparator(2,actual,intDescendingOrderComparator));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
