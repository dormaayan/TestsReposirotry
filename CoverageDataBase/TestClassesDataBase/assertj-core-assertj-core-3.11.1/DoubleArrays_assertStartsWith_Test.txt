/** 
 * Tests for <code> {@link DoubleArrays#assertStartsWith(AssertionInfo,double[],double[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class DoubleArrays_assertStartsWith_Test extends DoubleArraysBaseTest {
  @Override protected void initActualArray(){
    actual=arrayOf(6d,8d,10d,12d);
  }
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=emptyArray();
    arrays.assertStartsWith(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,emptyArray()));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),null,arrayOf(8d))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual(){
    double[] sequence={6d,8d,10d,12d,20d,22d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence).create());
  }
  @Test public void should_fail_if_actual_does_not_start_with_sequence(){
    double[] sequence={8d,10d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence).create());
  }
  @Test public void should_fail_if_actual_starts_with_first_elements_of_sequence_only(){
    double[] sequence={6d,20d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence).create());
  }
  @Test public void should_pass_if_actual_starts_with_sequence(){
    arrays.assertStartsWith(someInfo(),actual,arrayOf(6d,8d,10d));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal(){
    arrays.assertStartsWith(someInfo(),actual,arrayOf(6d,8d,10d,12d));
  }
  @Test public void should_throw_error_if_sequence_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,emptyArray()));
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),null,arrayOf(-8d))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual_according_to_custom_comparison_strategy(){
    double[] sequence={6d,-8d,10d,12d,20d,22d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence,absValueComparisonStrategy).create());
  }
  @Test public void should_fail_if_actual_does_not_start_with_sequence_according_to_custom_comparison_strategy(){
    double[] sequence={-8d,10d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence,absValueComparisonStrategy).create());
  }
  @Test public void should_fail_if_actual_starts_with_first_elements_of_sequence_only_according_to_custom_comparison_strategy(){
    double[] sequence={6d,20d};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,sequence)).withMessage(shouldStartWith(actual,sequence,absValueComparisonStrategy).create());
  }
  @Test public void should_pass_if_actual_starts_with_sequence_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,arrayOf(6d,-8d,10d));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertStartsWith(someInfo(),actual,arrayOf(6d,-8d,10d,12d));
  }
}
