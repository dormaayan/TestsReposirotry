/** 
 * Tests for <code> {@link ObjectArrays#assertDoesNotContain(AssertionInfo,Object[],Object,Index)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class ObjectArrays_assertDoesNotContain_at_Index_Test extends ObjectArraysBaseTest {
  @Override protected void initActualArray(){
    actual=array("Yoda","Luke","Leia");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),null,"Yoda",someIndex())).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_does_not_contain_value_at_Index(){
    arrays.assertDoesNotContain(someInfo(),actual,"Yoda",atIndex(1));
  }
  @Test public void should_pass_if_actual_is_empty(){
    arrays.assertDoesNotContain(someInfo(),emptyArray(),"Yoda",someIndex());
  }
  @Test public void should_throw_error_if_Index_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),actual,"Yoda",null)).withMessage("Index should not be null");
  }
  @Test public void should_pass_if_Index_is_out_of_bounds(){
    arrays.assertDoesNotContain(someInfo(),actual,"Yoda",atIndex(6));
  }
  @Test public void should_fail_if_actual_contains_value_at_index(){
    AssertionInfo info=someInfo();
    Index index=atIndex(0);
    try {
      arrays.assertDoesNotContain(info,actual,"Yoda",index);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContainAtIndex(actual,"Yoda",index));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_does_not_contain_value_at_Index_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,"YOda",atIndex(1));
  }
  @Test public void should_pass_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),emptyArray(),"YOda",someIndex());
  }
  @Test public void should_throw_error_if_Index_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,"YOda",null)).withMessage("Index should not be null");
  }
  @Test public void should_pass_if_Index_is_out_of_bounds_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,"YOda",atIndex(6));
  }
  @Test public void should_fail_if_actual_contains_value_at_index_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Index index=atIndex(0);
    try {
      arraysWithCustomComparisonStrategy.assertDoesNotContain(info,actual,"YOda",index);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContainAtIndex(actual,"YOda",index,caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
