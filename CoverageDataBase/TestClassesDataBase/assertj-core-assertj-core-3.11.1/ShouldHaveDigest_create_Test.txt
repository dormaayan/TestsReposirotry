public class ShouldHaveDigest_create_Test {
  private static final TestDescription TEST_DESCRIPTION=new TestDescription("TEST");
  private DigestDiff diff;
  @BeforeEach public void setup() throws Exception {
    diff=new DigestDiff("actualHex","actualHex",MessageDigest.getInstance("MD5"));
  }
  @Test public void should_create_error_message_with_File(){
    File actual=new FakeFile("actual.png");
    String message=shouldHaveDigest(actual,diff).create(TEST_DESCRIPTION,STANDARD_REPRESENTATION);
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting File " + actual + " MD5 digest to be:%n"+ "  <\""+ diff.getExpected()+ "\">%n"+ "but was:%n"+ "  <\""+ diff.getActual()+ "\">"));
  }
  @Test public void should_create_error_message_with_Path(){
    Path actual=mock(Path.class);
    String message=shouldHaveDigest(actual,diff).create(TEST_DESCRIPTION,STANDARD_REPRESENTATION);
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting Path " + actual + " MD5 digest to be:%n"+ "  <\""+ diff.getExpected()+ "\">%n"+ "but was:%n"+ "  <\""+ diff.getActual()+ "\">"));
  }
  @Test public void should_create_error_message_with_InputStream(){
    InputStream actual=mock(InputStream.class);
    String message=shouldHaveDigest(actual,diff).create(TEST_DESCRIPTION,STANDARD_REPRESENTATION);
    assertThat(message).isEqualTo(format("[TEST] %n" + "Expecting InputStream " + actual + " MD5 digest to be:%n"+ "  <\""+ diff.getExpected()+ "\">%n"+ "but was:%n"+ "  <\""+ diff.getActual()+ "\">"));
  }
}
