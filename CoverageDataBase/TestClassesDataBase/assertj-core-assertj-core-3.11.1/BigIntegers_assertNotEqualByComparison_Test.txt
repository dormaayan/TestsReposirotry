/** 
 * Tests for <code> {@link BigIntegers#assertNotEqualByComparison(AssertionInfo,BigInteger,BigInteger)}</code>.
 */
public class BigIntegers_assertNotEqualByComparison_Test extends BigIntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertNotEqualByComparison(someInfo(),null,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_big_integers_are_not_equal_by_comparison(){
    numbers.assertNotEqualByComparison(someInfo(),TEN,ONE);
  }
  @Test public void should_fail_if_big_integers_are_equal_by_comparison(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertNotEqualByComparison(info,ONE,ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(ONE,ONE));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbersWithAbsValueComparisonStrategy.assertNotEqualByComparison(someInfo(),null,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_big_integers_are_not_equal_by_comparison_whatever_custom_comparison_strategy_is(){
    numbersWithAbsValueComparisonStrategy.assertNotEqualByComparison(someInfo(),TEN,ONE);
  }
  @Test public void should_fail_if_big_integers_are_equal_by_comparison_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertNotEqualByComparison(info,ONE,ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(ONE,ONE));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
