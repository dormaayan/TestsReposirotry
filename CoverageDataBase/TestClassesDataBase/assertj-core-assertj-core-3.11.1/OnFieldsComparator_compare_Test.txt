public class OnFieldsComparator_compare_Test {
  private OnFieldsComparator onFieldsComparator;
  @BeforeEach public void setUp(){
    onFieldsComparator=new OnFieldsComparator("telling");
  }
  @Test public void should_return_true_if_both_Objects_are_null(){
    assertThat(onFieldsComparator.compare(null,null)).isZero();
  }
  @Test public void should_return_are_not_equal_if_first_Object_is_null_and_second_is_not(){
    assertThat(onFieldsComparator.compare(null,new DarthVader("I like you","I'll kill you"))).isNotZero();
  }
  @Test public void should_return_are_not_equal_if_second_Object_is_null_and_first_is_not(){
    assertThat(onFieldsComparator.compare(new DarthVader("I like you","I'll kill you"),null)).isNotZero();
  }
  @Test public void should_return_true_if_given_fields_are_equal(){
    DarthVader actual=new DarthVader("I like you","I'll kill you");
    DarthVader other=new DarthVader("I like you","I like you");
    assertThat(onFieldsComparator.compare(actual,other)).isZero();
  }
  @Test public void should_return_false_if_given_fields_are_not_equal(){
    DarthVader actual=new DarthVader("I like you","I'll kill you");
    DarthVader other=new DarthVader("I'll kill you","I'll kill you");
    assertThat(onFieldsComparator.compare(actual,other)).isNotZero();
  }
  @Test public void should_return_false_if_Objects_do_not_have_the_same_properties(){
    assertThat(onFieldsComparator.compare(new DarthVader("I like you","I'll kill you"),2)).isNotZero();
  }
public static class DarthVader {
    public final String telling;
    public final String thinking;
    public DarthVader(    String telling,    String thinking){
      this.telling=telling;
      this.thinking=thinking;
    }
  }
}
