public class ObjectArrayAssert_filteredOnAssertions_Test extends ObjectArrayAssert_filtered_baseTest {
  private static Consumer<? super TolkienCharacter> nameStartingWithFro=hobbit -> assertThat(hobbit.getName()).startsWith("Fro");
  @Test public void should_filter_iterable_under_test_verifying_given_assertions(){
    assertThat(employees).filteredOnAssertions(employee -> assertThat(employee.getAge()).isGreaterThan(100)).containsOnly(yoda,obiwan);
    assertThat(newLinkedHashSet(employees)).filteredOnAssertions(employee -> assertThat(employee.getAge()).isGreaterThan(100)).containsOnly(yoda,obiwan);
  }
  @Test public void should_fail_if_given_consumer_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> {
      Consumer<? super Employee> consumer=null;
      assertThat(employees).filteredOnAssertions(consumer);
    }
).withMessage("The element assertions should not be null");
  }
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).element(0).hasAge(33);
  }
  @Test public void should_keep_assertion_state(){
    Iterable<String> names=asList("John","Doe","Jane","Doe");
    IterableAssert<String> assertion=assertThat(names).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingElementComparator(CaseInsensitiveStringComparator.instance).filteredOnAssertions(string -> assertThat(string.length()).isEqualTo(4)).containsExactly("JOHN","JANE");
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
  }
}
