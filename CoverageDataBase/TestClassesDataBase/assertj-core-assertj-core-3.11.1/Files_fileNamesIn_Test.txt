/** 
 * Tests for <code> {@link Files#fileNamesIn(String,boolean)}</code>.
 * @author Alex Ruiz
 * @author Yvonne Wang
 */
public class Files_fileNamesIn_Test extends Files_TestCase {
  @Test public void should_throw_error_if_directory_does_not_exist(){
    String path=concat("root",separator,"not_existing_dir");
    assertThatIllegalArgumentException().isThrownBy(() -> Files.fileNamesIn(path,false));
  }
  @Test public void should_throw_error_if_path_does_not_belong_to_a_directory() throws Exception {
    String fileName="file_1";
    root.addFiles(fileName);
    String path=concat("root",separator,fileName);
    assertThatIllegalArgumentException().isThrownBy(() -> Files.fileNamesIn(path,false));
  }
  @Test public void should_return_names_of_files_in_given_directory_but_not_subdirectories(){
    String path=concat("root",separator,"dir_1");
    assertThatContainsFiles(newArrayList("file_1_1","file_1_2"),Files.fileNamesIn(path,false));
  }
  @Test public void should_return_names_of_files_in_given_directory_and_its_subdirectories(){
    String path=concat("root",separator,"dir_1");
    assertThatContainsFiles(newArrayList("file_1_1","file_1_2","file_1_1_1"),Files.fileNamesIn(path,true));
  }
  private void assertThatContainsFiles(  List<String> expectedFiles,  List<String> actualFiles){
    assertThat(actualFiles).doesNotHaveDuplicates();
    for (    String fileName : actualFiles) {
      assertThat(expectedFiles.remove(pathNameFor(fileName))).isTrue();
    }
    assertThat(expectedFiles).isEmpty();
  }
  private String pathNameFor(  String fileName){
    return new File(fileName).getName();
  }
}
