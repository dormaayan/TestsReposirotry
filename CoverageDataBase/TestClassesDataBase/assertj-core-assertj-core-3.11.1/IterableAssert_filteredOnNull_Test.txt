public class IterableAssert_filteredOnNull_Test extends IterableAssert_filtered_baseTest {
  @Test public void should_filter_iterable_under_test_on_null_property_values(){
    assertThat(employees).filteredOnNull("name").containsOnly(noname);
  }
  @Test public void should_filter_iterable_under_test_on_null_nested_property_values(){
    assertThat(employees).filteredOnNull("name.last").containsOnly(yoda,obiwan,noname);
  }
  @Test public void should_fail_if_on_of_the_iterable_element_does_not_have_given_property_or_field(){
    assertThatExceptionOfType(IntrospectionError.class).isThrownBy(() -> assertThat(employees).filteredOnNull("secret")).withMessageContaining("Can't find any field or property with name 'secret'");
  }
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbitsWithoutNames();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").last().hasAge(35);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbitsWithoutNames();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").last().hasAge(35);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").element(0).hasAge(33);
  }
  @Test public void should_keep_assertion_state(){
    Iterable<Name> namesWithNullLast=asList(name("John",null),name("Jane","Doe"));
    IterableAssert<Name> assertion=assertThat(namesWithNullLast).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingElementComparator(alwaysEqual()).filteredOnNull("last").hasSize(1).contains(name("Can be","anybody"));
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
  }
  protected static Iterable<TolkienCharacter> hobbitsWithoutNames(){
    TolkienCharacter frodo=TolkienCharacter.of(null,33,HOBBIT);
    TolkienCharacter sam=TolkienCharacter.of(null,35,HOBBIT);
    return asList(frodo,sam);
  }
}
