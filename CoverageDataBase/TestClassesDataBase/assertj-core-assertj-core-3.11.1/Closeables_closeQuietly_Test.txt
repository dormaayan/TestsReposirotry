/** 
 * Tests for  {@link Closeables#closeQuietly(Closeable)}.
 * @author Yvonne Wang
 */
public class Closeables_closeQuietly_Test {
  @Test public void should_close_Closeables(){
    CloseableStub[] toClose=new CloseableStub[]{new CloseableStub(),new CloseableStub()};
    Closeables.closeQuietly(toClose);
    assertClosed(toClose);
  }
  @Test public void should_ignore_thrown_errors(){
    CloseableStub[] toClose=new CloseableStub[]{new CloseableStub(new IOException("")),new CloseableStub()};
    Closeables.closeQuietly(toClose);
    assertClosed(toClose);
  }
  @Test public void should_ignore_null_Closeables(){
    CloseableStub c=new CloseableStub();
    CloseableStub[] toClose=new CloseableStub[]{null,c};
    Closeables.closeQuietly(toClose);
    assertClosed(c);
  }
  private void assertClosed(  CloseableStub... supposelyClosed){
    for (    CloseableStub c : supposelyClosed) {
      assertThat(c.closed).isTrue();
    }
  }
private static class CloseableStub implements Closeable {
    boolean closed;
    IOException toThrow;
    public CloseableStub(){
    }
    public CloseableStub(    IOException toThrow){
      this.toThrow=toThrow;
    }
    @Override public void close() throws IOException {
      closed=true;
      if (toThrow != null) {
        throw toThrow;
      }
    }
  }
}
