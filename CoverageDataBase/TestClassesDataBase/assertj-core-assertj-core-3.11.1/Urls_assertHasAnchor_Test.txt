public class Urls_assertHasAnchor_Test extends UrlsBaseTest {
  @Test public void should_pass_if_actual_url_has_the_given_anchor() throws MalformedURLException {
    urls.assertHasAnchor(info,new URL("http://www.helloworld.org/pages/index.html#print"),"print");
    urls.assertHasAnchor(info,new URL("http://www.helloworld.org/index.html#print"),"print");
  }
  @Test public void should_pass_if_actual_url_has_no_anchor_and_given_is_null() throws MalformedURLException {
    urls.assertHasAnchor(info,new URL("http://www.helloworld.org/index.html"),null);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> urls.assertHasAnchor(info,null,"http://www.helloworld.org/index.html#print")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_URL_has_not_the_expected_anchor() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com/index.html#print");
    String expectedAnchor="foo";
    try {
      urls.assertHasAnchor(info,url,expectedAnchor);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveAnchor(url,expectedAnchor));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_URL_has_no_anchor_and_expected_anchor_is_not_null() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com/index.html");
    String expectedAnchor="print";
    try {
      urls.assertHasAnchor(info,url,expectedAnchor);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveAnchor(url,expectedAnchor));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_URL_has_anchor_and_expected_anchor_is_null() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com/index.html#print");
    String expectedAnchor=null;
    try {
      urls.assertHasAnchor(info,url,expectedAnchor);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveAnchor(url,expectedAnchor));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_throw_error_if_actual_url_has_no_anchor() throws MalformedURLException {
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> urls.assertHasAnchor(info,new URL("http://www.helloworld.org/index.html"),"print"));
  }
}
