/** 
 * This test has to be in a package other than org.assertj because otherwise the line number information will be removed by the assertj filtering of internal lines. {@link org.assertj.core.util.Throwables#removeAssertJRelatedElementsFromStackTrace}
 */
public class SoftAssertionsLineNumberTest {
  @Test public void should_print_line_numbers_of_failed_assertions(){
    SoftAssertions softly=new SoftAssertions();
    softly.assertThat(1).isLessThan(0).isLessThan(1);
    AssertionError error=catchThrowableOfType(() -> softly.assertAll(),AssertionError.class);
    assertThat(error).hasMessageContaining(format("%n" + "Expecting:%n" + " <1>%n"+ "to be less than:%n"+ " <0> %n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions(SoftAssertionsLineNumberTest.java:37)%n")).hasMessageContaining(format("%n" + "Expecting:%n" + " <1>%n"+ "to be less than:%n"+ " <1> %n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions(SoftAssertionsLineNumberTest.java:38)"));
  }
  @Test public void should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(){
    SoftAssertions softly=new SoftAssertions();
    softly.assertThat(Optional.empty()).contains("Foo");
    softly.assertThat((Predicate<String>)null).accepts("a","b","c");
    Predicate<String> lowercasePredicate=s -> s.equals(s.toLowerCase());
    softly.assertThat(lowercasePredicate).accepts("a","b","C");
    AssertionError error=catchThrowableOfType(() -> softly.assertAll(),AssertionError.class);
    assertThat(error).hasMessageContaining(format("%n" + "Expecting Optional to contain:%n" + "  <\"Foo\">%n"+ "but was empty.%n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:60)%n")).hasMessageContaining(format("%n" + "Expecting actual not to be null%n" + "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:62)%n")).hasMessageContaining(format("%n" + "Expecting all elements of:%n" + "  <[\"a\", \"b\", \"C\"]>%n"+ "to match given predicate but this element did not:%n"+ "  <\"C\">%n"+ "at SoftAssertionsLineNumberTest.should_print_line_numbers_of_failed_assertions_even_if_it_came_from_nested_calls(SoftAssertionsLineNumberTest.java:64)"));
  }
}
