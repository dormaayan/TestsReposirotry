/** 
 * Tests for <code> {@link ShouldBeEqualToIgnoringFields#create(Description)}</code>.
 * @author Nicolas Fran√ßois
 * @author Joel Costigliola
 */
public class ShouldBeEqualIgnoringGivenFields_create_Test {
  private ErrorMessageFactory factory;
  @Test public void should_create_error_message_with_all_fields_differences(){
    factory=shouldBeEqualToIgnoringGivenFields(new Jedi("Yoda","blue"),newArrayList("name","lightSaberColor"),newArrayList((Object)"Yoda","blue"),newArrayList((Object)"Yoda","green"),newArrayList("someIgnoredField"));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting values:%n" + "  <[\"Yoda\", \"green\"]>%n"+ "in fields:%n"+ "  <[\"name\", \"lightSaberColor\"]>%n"+ "but were:%n"+ "  <[\"Yoda\", \"blue\"]>%n"+ "in <Yoda the Jedi>.%n"+ "Comparison was performed on all fields but <[\"someIgnoredField\"]>"));
  }
  @Test public void should_create_error_message_with_single_field_difference(){
    factory=shouldBeEqualToIgnoringGivenFields(new Jedi("Yoda","blue"),newArrayList("lightSaberColor"),newArrayList((Object)"blue"),newArrayList((Object)"green"),newArrayList("someIgnoredField"));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting value <\"green\"> in field <\"lightSaberColor\"> " + "but was <\"blue\"> in <Yoda the Jedi>.%n"+ "Comparison was performed on all fields but <[\"someIgnoredField\"]>"));
  }
  @Test public void should_create_error_message_with_all_fields_differences_without_ignored_fields(){
    List<String> ignoredFields=newArrayList();
    factory=shouldBeEqualToIgnoringGivenFields(new Jedi("Yoda","blue"),newArrayList("name","lightSaberColor"),newArrayList((Object)"Yoda","blue"),newArrayList((Object)"Yoda","green"),ignoredFields);
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting values:%n" + "  <[\"Yoda\", \"green\"]>%n" + "in fields:%n"+ "  <[\"name\", \"lightSaberColor\"]>%n"+ "but were:%n"+ "  <[\"Yoda\", \"blue\"]>%n"+ "in <Yoda the Jedi>.%n"+ "Comparison was performed on all fields"));
  }
  @Test public void should_create_error_message_with_single_field_difference_without_ignored_fields(){
    List<String> ignoredFields=newArrayList();
    factory=shouldBeEqualToIgnoringGivenFields(new Jedi("Yoda","blue"),newArrayList("lightSaberColor"),newArrayList((Object)"blue"),newArrayList((Object)"green"),ignoredFields);
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting value <\"green\"> " + "in field <\"lightSaberColor\"> " + "but was <\"blue\"> in <Yoda the Jedi>.%n"+ "Comparison was performed on all fields"));
  }
}
