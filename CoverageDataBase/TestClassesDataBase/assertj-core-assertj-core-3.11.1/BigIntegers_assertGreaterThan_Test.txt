/** 
 * Tests for <code> {@link BigIntegers#assertGreaterThan(AssertionInfo,BigInteger,BigInteger)}</code>.
 */
public class BigIntegers_assertGreaterThan_Test extends BigIntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertGreaterThan(someInfo(),null,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    numbers.assertGreaterThan(someInfo(),TEN,ONE);
  }
  @Test public void should_fail_if_actual_is_equal_to_other(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertGreaterThan(info,TEN,TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(TEN,TEN));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equal_to_other_by_comparison(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertGreaterThan(info,TEN,new BigInteger("10"));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(TEN,new BigInteger("10")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertGreaterThan(info,ONE,TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(ONE,TEN));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    numbersWithAbsValueComparisonStrategy.assertGreaterThan(someInfo(),TEN.negate(),ONE);
  }
  @Test public void should_fail_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertGreaterThan(info,TEN.negate(),TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(TEN.negate(),TEN,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertGreaterThan(info,ONE,TEN.negate());
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(ONE,TEN.negate(),absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
