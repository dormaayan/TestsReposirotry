public class ObjectArrayAssert_flatExtracting_with_String_parameter_Test {
  private CartoonCharacter bart;
  private CartoonCharacter lisa;
  private CartoonCharacter maggie;
  private CartoonCharacter homer;
  private CartoonCharacter pebbles;
  private CartoonCharacter fred;
  @BeforeEach public void setUp(){
    bart=new CartoonCharacter("Bart Simpson");
    lisa=new CartoonCharacter("Lisa Simpson");
    maggie=new CartoonCharacter("Maggie Simpson");
    homer=new CartoonCharacter("Homer Simpson");
    homer.addChildren(bart,lisa,maggie);
    pebbles=new CartoonCharacter("Pebbles Flintstone");
    fred=new CartoonCharacter("Fred Flintstone");
    fred.addChildren(pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children(){
    assertThat(array(homer,fred)).flatExtracting("children").containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_joined_lists_when_extracting_children_array(){
    assertThat(array(homer,fred)).flatExtracting("childrenArray").containsOnly(bart,lisa,maggie,pebbles);
  }
  @Test public void should_allow_assertions_on_empty_result_lists(){
    assertThat(array(bart,lisa,maggie)).flatExtracting("children").isEmpty();
  }
  @Test public void should_throw_illegal_argument_exception_when_extracting_from_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(array(homer,null)).flatExtracting("children"));
  }
  @Test public void should_throw_exception_when_extracted_value_is_not_an_array_or_an_iterable(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(array(homer,fred)).flatExtracting("name")).withMessage("Flat extracting expects extracted values to be Iterables or arrays but was a String");
  }
  @Test public void flatExtracting_should_keep_assertion_state(){
    AlwaysEqualComparator<CartoonCharacter> cartoonCharacterAlwaysEqualComparator=alwaysEqual();
    AbstractListAssert<?,?,?,?> assertion=assertThat(array(homer,fred)).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"foo").usingComparatorForElementFieldsWithType(ALWAY_EQUALS_TIMESTAMP,Timestamp.class).usingComparatorForType(cartoonCharacterAlwaysEqualComparator,CartoonCharacter.class).flatExtracting("children").contains(bart,lisa,new CartoonCharacter("Unknown"));
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(CartoonCharacter.class)).isSameAs(cartoonCharacterAlwaysEqualComparator);
    assertThat(comparatorForElementFieldsWithTypeOf(assertion).get(Timestamp.class)).isSameAs(ALWAY_EQUALS_TIMESTAMP);
    assertThat(comparatorForElementFieldsWithNamesOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
  }
}
