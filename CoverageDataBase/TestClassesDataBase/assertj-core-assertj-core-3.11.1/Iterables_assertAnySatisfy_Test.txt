public class Iterables_assertAnySatisfy_Test extends IterablesBaseTest {
  private List<String> actual=newArrayList("Luke","Leia","Yoda","Obiwan");
  @Test public void should_pass_when_one_element_satisfies_the_single_assertion_requirement(){
    iterables.<String>assertAnySatisfy(someInfo(),actual,s -> assertThat(s).hasSize(6));
  }
  @Test public void should_pass_when_one_element_satisfies_all_the_assertion_requirements(){
    iterables.<String>assertAnySatisfy(someInfo(),actual,s -> {
      assertThat(s).hasSize(4);
      assertThat(s).doesNotContain("L");
    }
);
  }
  @Test public void should_pass_when_several_elements_satisfy_all_the_assertion_requirements(){
    iterables.<String>assertAnySatisfy(someInfo(),actual,s -> {
      assertThat(s).hasSize(4);
      assertThat(s).contains("L");
    }
);
  }
  @Test public void should_fail_if_no_elements_satisfy_the_assertions_requirements(){
    try {
      iterables.<String>assertAnySatisfy(someInfo(),actual,s -> {
        assertThat(s).hasSize(4);
        assertThat(s).contains("W");
      }
);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsShouldSatisfyAny(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_the_iterable_under_test_is_empty_whatever_the_assertions_requirements_are(){
    actual.clear();
    try {
      iterables.<String>assertAnySatisfy(someInfo(),actual,$ -> assertThat(true).isTrue());
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsShouldSatisfyAny(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_consumer_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(actual).anySatisfy(null)).withMessage("The Consumer<T> expressing the assertions requirements must not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      actual=null;
      assertThat(actual).anySatisfy(null);
    }
).withMessage(actualIsNull());
  }
}
