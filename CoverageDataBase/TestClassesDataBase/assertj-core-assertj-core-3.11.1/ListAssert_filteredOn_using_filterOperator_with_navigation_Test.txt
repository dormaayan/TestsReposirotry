public class ListAssert_filteredOn_using_filterOperator_with_navigation_Test extends ListAssert_filteredOn_BaseTest {
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn("name",in("Frodo")).first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn("name",in("Frodo")).last().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn("name",in("Frodo")).element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn("name",in("Frodo")).first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn("name",in("Frodo")).last().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn("name",in("Frodo")).element(0).hasAge(33);
  }
}
