/** 
 * Tests for <code> {@link Bytes#assertGreaterThan(AssertionInfo,Byte,byte)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Bytes_assertGreaterThan_Test extends BytesBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> bytes.assertGreaterThan(someInfo(),null,(byte)8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    bytes.assertGreaterThan(someInfo(),(byte)8,(byte)6);
  }
  @Test public void should_fail_if_actual_is_equal_to_other(){
    try {
      bytes.assertGreaterThan(someInfo(),(byte)6,(byte)6);
    }
 catch (    AssertionError e) {
      verify(failures).failure(someInfo(),shouldBeGreater((byte)6,(byte)6));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      bytes.assertGreaterThan(info,(byte)6,(byte)8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater((byte)6,(byte)8));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    bytesWithAbsValueComparisonStrategy.assertGreaterThan(someInfo(),(byte)-8,(byte)6);
  }
  @Test public void should_fail_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    try {
      bytesWithAbsValueComparisonStrategy.assertGreaterThan(someInfo(),(byte)-6,(byte)6);
    }
 catch (    AssertionError e) {
      verify(failures).failure(someInfo(),shouldBeGreater((byte)-6,(byte)6,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      bytesWithAbsValueComparisonStrategy.assertGreaterThan(info,(byte)-6,(byte)8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater((byte)-6,(byte)8,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
