public class OptionalAssert_hasValueSatisfying_Condition_Test extends BaseTest {
  private Condition<String> passingCondition=new TestCondition<>(true);
  private Condition<String> notPassingCondition=new TestCondition<>();
  @Test public void should_fail_when_optional_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((Optional<String>)null).hasValueSatisfying(passingCondition)).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_optional_is_empty(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(Optional.<String>empty()).hasValueSatisfying(passingCondition)).withMessage(shouldBePresent(Optional.empty()).create());
  }
  @Test public void should_fail_when_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(Optional.of("something")).hasValueSatisfying((Condition<String>)null)).withMessage("The condition to evaluate should not be null");
  }
  @Test public void should_pass_when_condition_is_met(){
    assertThat(Optional.of("something")).hasValueSatisfying(passingCondition);
  }
  @Test public void should_fail_when_condition_is_not_met(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(Optional.of("something")).hasValueSatisfying(notPassingCondition)).withMessage(shouldBe("something",notPassingCondition).create());
  }
}
