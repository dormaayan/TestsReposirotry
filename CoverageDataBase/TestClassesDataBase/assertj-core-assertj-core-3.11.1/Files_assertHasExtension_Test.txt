/** 
 * Tests for <code> {@link org.assertj.core.internal.Files#assertHasExtension(org.assertj.core.api.AssertionInfo,java.io.File,String)}</code> .
 * @author Jean-Christophe Gay
 */
public class Files_assertHasExtension_Test extends FilesBaseTest {
  private String expectedExtension="java";
  @Test public void should_throw_error_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> files.assertHasExtension(someInfo(),null,expectedExtension)).withMessage(actualIsNull());
  }
  @Test public void should_throw_npe_if_extension_is_null(){
    assertThatNullPointerException().isThrownBy(() -> files.assertHasExtension(someInfo(),actual,null)).withMessage("The expected extension should not be null.");
  }
  @Test public void should_throw_error_if_actual_is_not_a_file(){
    AssertionInfo info=someInfo();
    when(actual.isFile()).thenReturn(false);
    try {
      files.assertHasExtension(info,actual,expectedExtension);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeFile(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_throw_error_if_actual_does_not_have_the_expected_extension(){
    AssertionInfo info=someInfo();
    when(actual.isFile()).thenReturn(true);
    when(actual.getName()).thenReturn("file.png");
    try {
      files.assertHasExtension(info,actual,expectedExtension);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveExtension(actual,"png",expectedExtension));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_has_expected_extension(){
    when(actual.isFile()).thenReturn(true);
    when(actual.getName()).thenReturn("file.java");
    files.assertHasExtension(someInfo(),actual,expectedExtension);
  }
}
