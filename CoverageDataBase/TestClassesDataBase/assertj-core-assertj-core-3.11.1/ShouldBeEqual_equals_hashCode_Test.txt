/** 
 * Tests for <code> {@link ShouldBeEqual#equals(Object)}</code> and <code> {@link ShouldBeEqual#hashCode()}</code>.
 * @author Yvonne Wang
 */
public class ShouldBeEqual_equals_hashCode_Test {
  private static ShouldBeEqual factory;
  @BeforeAll public static void setUpOnce(){
    factory=(ShouldBeEqual)shouldBeEqual("Yoda","Luke",new StandardRepresentation());
  }
  @Test public void should_have_reflexive_equals(){
    assertEqualsIsReflexive(factory);
  }
  @Test public void should_have_symmetric_equals(){
    assertEqualsIsSymmetric(factory,shouldBeEqual("Yoda","Luke",new StandardRepresentation()));
  }
  @Test public void should_have_transitive_equals(){
    assertEqualsIsTransitive(factory,shouldBeEqual("Yoda","Luke",new StandardRepresentation()),shouldBeEqual("Yoda","Luke",new StandardRepresentation()));
  }
  @Test public void should_maintain_equals_and_hashCode_contract(){
    assertMaintainsEqualsAndHashCodeContract(factory,shouldBeEqual("Yoda","Luke",new StandardRepresentation()));
  }
  @Test public void should_not_be_equal_to_Object_of_different_type(){
    assertThat(factory.equals("Yoda")).isFalse();
  }
  @Test public void should_not_be_equal_to_null(){
    assertThat(factory.equals(null)).isFalse();
  }
  @Test public void should_not_be_equal_to_IsNotEqual_with_different_actual(){
    assertThat(factory.equals(shouldBeEqual("Leia","Luke",new StandardRepresentation()))).isFalse();
  }
  @Test public void should_not_be_equal_to_IsNotEqual_with_different_expected(){
    assertThat(factory.equals(shouldBeEqual("Yoda","Leia",new StandardRepresentation()))).isFalse();
  }
}
