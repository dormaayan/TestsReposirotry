/** 
 * Tests for <code> {@link ObjectArrays#assertEndsWith(AssertionInfo,Object[],Object[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 * @author Florent Biville
 */
public class ObjectArrays_assertEndsWith_Test extends ObjectArraysBaseTest {
  @Override protected void initActualArray(){
    actual=array("Yoda","Luke","Leia","Obi-Wan");
  }
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertEndsWith(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=new String[0];
    arrays.assertEndsWith(someInfo(),actual,emptyArray());
  }
  @Test public void should_pass_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    arrays.assertEndsWith(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertEndsWith(someInfo(),null,array("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Yoda","Luke","Leia","Obi-Wan","Han","C-3PO","R2-D2","Anakin"};
    try {
      arrays.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_end_with_sequence(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Han","C-3PO"};
    try {
      arrays.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_ends_with_first_elements_of_sequence_only(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Leia","Obi-Wan","Han"};
    try {
      arrays.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  private void verifyFailureThrownWhenSequenceNotFound(  AssertionInfo info,  Object[] sequence){
    verify(failures).failure(info,shouldEndWith(actual,sequence));
  }
  @Test public void should_pass_if_actual_ends_with_sequence(){
    arrays.assertEndsWith(someInfo(),actual,array("Luke","Leia","Obi-Wan"));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal(){
    arrays.assertEndsWith(someInfo(),actual,array("Yoda","Luke","Leia","Obi-Wan"));
  }
  @Test public void should_pass_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertEndsWith(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Yoda","LUKE","Leia","Obi-Wan","Han","C-3PO","R2-D2","Anakin"};
    try {
      arraysWithCustomComparisonStrategy.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldEndWith(actual,sequence,caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_end_with_sequence_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Han","C-3PO"};
    try {
      arraysWithCustomComparisonStrategy.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldEndWith(actual,sequence,caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_ends_with_first_elements_of_sequence_only_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Object[] sequence={"Leia","Obi-Wan","Han"};
    try {
      arraysWithCustomComparisonStrategy.assertEndsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldEndWith(actual,sequence,caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_ends_with_sequence_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertEndsWith(someInfo(),actual,array("LUKE","Leia","Obi-Wan"));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertEndsWith(someInfo(),actual,array("Yoda","LUKE","Leia","Obi-Wan"));
  }
}
