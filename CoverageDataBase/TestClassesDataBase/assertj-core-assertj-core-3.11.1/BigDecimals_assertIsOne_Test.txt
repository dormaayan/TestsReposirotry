/** 
 * Tests for <code> {@link BigDecimals#assertIsOne(AssertionInfo,BigDecimal)}</code>.
 * @author Drummond Dawson
 */
public class BigDecimals_assertIsOne_Test extends BigDecimalsBaseTest {
  @Test public void should_succeed_since_actual_is_one(){
    numbers.assertIsOne(someInfo(),BigDecimal.ONE);
  }
  @Test public void should_fail_since_actual_is_not_one(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertIsOne(someInfo(),BigDecimal.ZERO)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
  @Test public void should_succeed_since_actual_is_one_whatever_custom_comparison_strategy_is(){
    numbersWithComparatorComparisonStrategy.assertIsOne(someInfo(),BigDecimal.ONE);
  }
  @Test public void should_fail_since_actual_is_not_one_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbersWithComparatorComparisonStrategy.assertIsOne(someInfo(),BigDecimal.ZERO)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
}
