public class Iterables_assertNoneSatisfy_Test extends IterablesBaseTest {
  private List<String> actual=newArrayList("Luke","Leia","Yoda");
  @Test public void should_pass_when_no_elements_satisfy_the_given_single_restriction(){
    Consumer<String> restriction=name -> assertThat(name).hasSize(5);
    iterables.assertNoneSatisfy(someInfo(),actual,restriction);
  }
  @Test public void should_pass_when_no_elements_satisfy_the_given_restrictions(){
    Consumer<String> restrictions=name -> {
      assertThat(name).hasSize(5);
      assertThat(name).contains("V");
    }
;
    iterables.assertNoneSatisfy(someInfo(),actual,restrictions);
  }
  @Test public void should_pass_for_empty_whatever_the_given_restrictions_are(){
    Consumer<String> restriction=name -> assertThat(name).hasSize(5);
    actual.clear();
    iterables.assertNoneSatisfy(someInfo(),actual,restriction);
  }
  @Test public void should_fail_when_one_elements_satisfy_the_given_restrictions(){
    Consumer<String> restrictions=name -> assertThat(name).startsWith("Y");
    Throwable assertionError=catchThrowable(() -> iterables.assertNoneSatisfy(someInfo(),actual,restrictions));
    verify(failures).failure(info,noElementsShouldSatisfy(actual,"Yoda"));
    assertThat(assertionError).isNotNull();
  }
  @Test public void should_throw_error_if_consumer_restrictions_is_null(){
    assertThatNullPointerException().isThrownBy(() -> iterables.assertNoneSatisfy(someInfo(),actual,null)).withMessage("The Consumer<T> expressing the restrictions must not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      List<String> nullActual=null;
      iterables.assertNoneSatisfy(someInfo(),nullActual,name -> assertThat(name).startsWith("Y"));
    }
).withMessage(actualIsNull());
  }
}
