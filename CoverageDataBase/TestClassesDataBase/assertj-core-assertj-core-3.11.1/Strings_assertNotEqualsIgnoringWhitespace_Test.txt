/** 
 * Tests for <code> {@link org.assertj.core.internal.Strings#assertNotEqualsIgnoringWhitespace(org.assertj.core.api.AssertionInfo,CharSequence,CharSequence)} </code>.
 * @author Dan Corder
 */
public class Strings_assertNotEqualsIgnoringWhitespace_Test extends StringsBaseTest {
  @Test public void should_fail_if_actual_is_not_null_and_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> strings.assertNotEqualsIgnoringWhitespace(someInfo(),"Luke",null)).withMessage(charSequenceToLookForIsNull());
  }
  @ParameterizedTest @MethodSource("notEqualIgnoringWhitespaceGenerator") public void should_pass_if_both_Strings_are_not_equal_ignoring_whitespace(  String actual,  String expected){
    strings.assertNotEqualsIgnoringWhitespace(someInfo(),actual,expected);
  }
  public static Stream<Arguments> notEqualIgnoringWhitespaceGenerator(){
    return Stream.of(Arguments.of("foo","bar"),Arguments.of("foo",new String(arrayOf('b','a','r'))),Arguments.of(null,"bar"));
  }
  @ParameterizedTest @MethodSource("equalIgnoringWhitespaceGenerator") public void should_fail_if_both_Strings_are_equal_ignoring_whitespace(  String actual,  String expected){
    try {
      strings.assertNotEqualsIgnoringWhitespace(someInfo(),actual,expected);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenStringsAreEqualIgnoringWhitespace(someInfo(),actual,expected);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  public static Stream<Arguments> equalIgnoringWhitespaceGenerator(){
    return Stream.of(Arguments.of("my foo","myfoo"),Arguments.of("myfoo","my foo"),Arguments.of("my   foo bar","my foo bar"),Arguments.of("  my foo bar  ","my foo bar"),Arguments.of(" my\tfoo bar "," my foo bar"),Arguments.of(" my foo    bar ","my foo bar"),Arguments.of(" my foo    bar ","  my foo bar   "),Arguments.of("       "," "),Arguments.of(" my\tfoo bar ",new String(arrayOf(' ','m','y',' ','f','o','o',' ','b','a','r'))),Arguments.of(" my\tfoo bar "," my\tfoo bar "),Arguments.of(null,null),Arguments.of(" \t \t"," "),Arguments.of(" abc","abc "));
  }
  private void verifyFailureThrownWhenStringsAreEqualIgnoringWhitespace(  AssertionInfo info,  String actual,  String expected){
    verify(failures).failure(info,shouldNotBeEqualIgnoringWhitespace(actual,expected));
  }
}
