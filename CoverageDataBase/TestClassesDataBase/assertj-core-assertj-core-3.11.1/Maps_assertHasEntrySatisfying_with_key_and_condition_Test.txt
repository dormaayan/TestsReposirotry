/** 
 * Tests for <code> {@link Maps#assertHasEntrySatisfying(AssertionInfo,Map,Object,Condition)}</code>.
 * @author Valeriy Vyrva
 */
public class Maps_assertHasEntrySatisfying_with_key_and_condition_Test extends MapsBaseTest {
  private static final Pattern IS_DIGITS=Pattern.compile("^\\d+$");
  private Condition<String> isDigits;
  private Condition<String> isNotDigits;
  private Condition<Object> isNull;
  private Condition<Object> nonNull;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=mapOf(entry("name","Yoda"),entry("color","green"),entry((String)null,(String)null));
    isDigits=new Condition<String>("isDigits"){
      @Override public boolean matches(      String value){
        return IS_DIGITS.matcher(value).matches();
      }
    }
;
    isNotDigits=not(isDigits);
    isNull=new Condition<Object>("isNull"){
      @Override public boolean matches(      Object value){
        return value == null;
      }
    }
;
    nonNull=not(isNull);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),null,8,isDigits)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_key(){
    AssertionInfo info=someInfo();
    String key="id";
    try {
      maps.assertHasEntrySatisfying(info,actual,key,isDigits);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainKeys(actual,newLinkedHashSet(key)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_key_with_value_not_matching_condition(){
    AssertionInfo info=someInfo();
    String key="name";
    try {
      maps.assertHasEntrySatisfying(info,actual,key,isDigits);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsShouldBe(actual,actual.get(key),isDigits));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_null_key_with_value_not_matching_condition(){
    AssertionInfo info=someInfo();
    String key=null;
    try {
      maps.assertHasEntrySatisfying(info,actual,key,nonNull);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsShouldBe(actual,actual.get(key),nonNull));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_null_key_with_value_match_condition(){
    AssertionInfo info=someInfo();
    maps.assertHasEntrySatisfying(info,actual,null,isNull);
  }
  @Test public void should_pass_if_actual_contains_key_with_value_match_condition(){
    AssertionInfo info=someInfo();
    String key="name";
    maps.assertHasEntrySatisfying(info,actual,key,isNotDigits);
  }
}
