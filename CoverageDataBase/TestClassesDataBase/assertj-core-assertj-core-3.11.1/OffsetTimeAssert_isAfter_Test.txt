public class OffsetTimeAssert_isAfter_Test extends OffsetTimeAssertBaseTest {
  @Test public void test_isAfter_assertion(){
    assertThat(AFTER).isAfter(REFERENCE);
    assertThat(AFTER).isAfter(REFERENCE.toString());
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(REFERENCE,REFERENCE);
    verify_that_isAfter_assertion_fails_and_throws_AssertionError(BEFORE,REFERENCE);
  }
  @Test public void test_isAfter_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(parse("03:00:05.123Z")).isAfter(parse("03:00:05.123456789Z"))).withMessage(format("%n" + "Expecting:%n" + "  <03:00:05.123Z>%n"+ "to be strictly after:%n"+ "  <03:00:05.123456789Z>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetTime actual=null;
      assertThat(actual).isAfter(OffsetTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_offsetTime_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isAfter((OffsetTime)null)).withMessage("The OffsetTime to compare actual with should not be null");
  }
  @Test public void should_fail_if_offsetTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isAfter((String)null)).withMessage("The String representing the OffsetTime to compare actual with should not be null");
  }
  private static void verify_that_isAfter_assertion_fails_and_throws_AssertionError(  OffsetTime timeToCheck,  OffsetTime reference){
    try {
      assertThat(timeToCheck).isAfter(reference);
    }
 catch (    AssertionError e) {
      try {
        assertThat(timeToCheck).isAfter(reference.toString());
      }
 catch (      AssertionError e2) {
        return;
      }
    }
    fail("Should have thrown AssertionError");
  }
}
