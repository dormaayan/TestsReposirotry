/** 
 * Class for testing <code> {@link IterableDiff}</code>
 * @author Billy Yuan
 */
public class IterableDiff_Test {
  private List<String> actual;
  private List<String> expected;
  private ComparisonStrategy comparisonStrategy;
  @BeforeEach public void setUp(){
    comparisonStrategy=StandardComparisonStrategy.instance();
  }
  @Test public void should_not_report_any_differences_between_two_identical_iterables(){
    actual=newArrayList("#","$");
    expected=newArrayList("#","$");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThatNoDiff(diff);
  }
  @Test public void should_not_report_any_differences_between_two_iterables_with_elements_in_a_different_order(){
    actual=newArrayList("#","$");
    expected=newArrayList("$","#");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThatNoDiff(diff);
  }
  @Test public void should_not_report_any_differences_between_two_iterables_with_duplicate_elements_in_a_different_order(){
    actual=newArrayList("#","#","$","$");
    expected=newArrayList("$","$","#","#");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThatNoDiff(diff);
  }
  @Test public void should_report_difference_between_two_different_iterables_without_duplicate_elements(){
    actual=newArrayList("A","B","C");
    expected=newArrayList("X","Y","Z");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThat(diff.differencesFound()).isTrue();
    assertThat(diff.missing).containsExactly("X","Y","Z");
    assertThat(diff.unexpected).containsExactly("A","B","C");
  }
  @Test public void should_report_difference_between_two_different_iterables_with_duplicate_elements(){
    actual=newArrayList("#","#","$");
    expected=newArrayList("$","$","#");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThat(diff.differencesFound()).isTrue();
    assertThat(diff.missing).containsExactly("$");
    assertThat(diff.unexpected).containsExactly("#");
  }
  @Test public void should_not_report_any_differences_between_two_case_sensitive_iterables_according_to_custom_comparison_strategy(){
    comparisonStrategy=new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance);
    actual=newArrayList("a","b","C","D");
    expected=newArrayList("A","B","C","D");
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThatNoDiff(diff);
  }
  @Test public void should_not_report_any_differences_between_two_same_iterables_with_custom_objects(){
    Foo foo1=new Foo();
    Foo foo2=new Foo();
    Foo foo3=new Foo();
    List<Foo> actual=newArrayList(foo1,foo2,foo3);
    List<Foo> expected=newArrayList(foo1,foo2,foo3);
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThatNoDiff(diff);
  }
  @Test public void should_report_difference_between_two_iterables_with_duplicate_objects(){
    Foo foo1=new Foo();
    Foo foo2=new Foo();
    List<Foo> actual=newArrayList(foo1,foo1,foo2);
    List<Foo> expected=newArrayList(foo1,foo2,foo2);
    IterableDiff diff=diff(actual,expected,comparisonStrategy);
    assertThat(diff.differencesFound()).isTrue();
    assertThat(diff.missing).containsExactly(foo2);
    assertThat(diff.unexpected).containsExactly(foo1);
  }
private class Foo {
  }
  private static void assertThatNoDiff(  IterableDiff diff){
    assertThat(diff.differencesFound()).isFalse();
    assertThat(diff.missing).isEmpty();
    assertThat(diff.unexpected).isEmpty();
  }
}
