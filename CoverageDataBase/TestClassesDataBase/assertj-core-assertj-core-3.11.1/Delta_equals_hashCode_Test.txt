public class Delta_equals_hashCode_Test {
  private Chunk<String> chunk;
  private Delta<String> delta;
  @BeforeEach public void setUp(){
    chunk=new Chunk<>(1,Collections.<String>emptyList());
    delta=new ChangeDelta<>(chunk,chunk);
  }
  @Test public void should_have_reflexive_equals(){
    assertEqualsIsReflexive(delta);
  }
  @Test public void should_have_symmetric_equals(){
    assertEqualsIsSymmetric(delta,new ChangeDelta<>(chunk,chunk));
  }
  @Test public void should_have_transitive_equals(){
    assertEqualsIsTransitive(delta,new ChangeDelta<>(chunk,chunk),new ChangeDelta<>(chunk,chunk));
  }
  @Test public void should_maintain_equals_and_hashCode_contract(){
    assertMaintainsEqualsAndHashCodeContract(delta,new ChangeDelta<>(chunk,chunk));
  }
  @Test public void should_not_be_equal_to_Object_of_different_type(){
    assertThat(delta.equals("8")).isFalse();
  }
  @Test public void should_not_be_equal_to_null(){
    assertThat(delta.equals(null)).isFalse();
  }
  @Test public void should_not_be_equal_to_Delta_with_different_value(){
    Chunk<String> chunk2=new Chunk<>(5,Collections.<String>emptyList());
    assertThat(delta.equals(new ChangeDelta<>(chunk2,chunk2))).isFalse();
  }
}
