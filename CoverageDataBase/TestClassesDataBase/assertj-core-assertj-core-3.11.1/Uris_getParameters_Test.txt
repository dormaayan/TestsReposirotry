public class Uris_getParameters_Test {
  @Test public void should_return_empty_for_empty_query(){
    assertThat(getParameters("")).isEmpty();
  }
  @Test public void should_return_empty_for_null_query(){
    assertThat(getParameters(null)).isEmpty();
  }
  @Test public void should_accept_parameter_with_no_value(){
    Map<String,List<String>> parameters=getParameters("foo");
    assertThat(parameters).containsKey("foo");
    assertThat(parameters.get("foo")).hasSize(1).containsNull();
  }
  @Test public void should_accept_parameter_with_value(){
    Map<String,List<String>> parameters=getParameters("foo=bar");
    assertThat(parameters).containsKey("foo");
    assertThat(parameters.get("foo")).containsExactly("bar");
  }
  @Test public void should_decode_name(){
    assertThat(getParameters("foo%3Dbar=baz")).containsKey("foo=bar");
  }
  @Test public void should_decode_value(){
    assertThat(getParameters("foo=bar%3Dbaz").get("foo")).contains("bar=baz");
  }
  @Test public void should_accept_duplicate_names(){
    Map<String,List<String>> parameters=getParameters("foo&foo=bar");
    assertThat(parameters).containsKey("foo");
    assertThat(parameters.get("foo")).containsOnly(null,"bar");
  }
  @Test public void should_accept_duplicate_values(){
    Map<String,List<String>> parameters=getParameters("foo=bar&foo=bar");
    assertThat(parameters).containsKey("foo");
    assertThat(parameters.get("foo")).containsExactly("bar","bar");
  }
}
