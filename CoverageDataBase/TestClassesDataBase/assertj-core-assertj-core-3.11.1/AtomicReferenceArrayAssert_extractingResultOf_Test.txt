public class AtomicReferenceArrayAssert_extractingResultOf_Test {
  private static FluentJedi yoda;
  private static FluentJedi vader;
  private static AtomicReferenceArray<FluentJedi> jedis;
  @BeforeAll public static void setUpOnce(){
    yoda=new FluentJedi(new Name("Yoda"),800,false);
    vader=new FluentJedi(new Name("Darth Vader"),50,true);
    jedis=new AtomicReferenceArray<>(array(yoda,vader));
  }
  @Test public void should_allow_assertions_on_method_invocation_result_extracted_from_given_iterable(){
    assertThat(jedis).extractingResultOf("age").containsOnly(800,50);
    assertThat(jedis).extractingResultOf("darkSide").containsOnly(false,true);
    assertThat(jedis).extractingResultOf("name").containsOnly(new Name("Yoda"),new Name("Darth Vader"));
    assertThat(jedis).extractingResultOf("toString").containsOnly("Yoda","Darth Vader");
  }
  @Test public void should_allow_assertions_on_method_invocation_result_extracted_from_given_iterable_with_enforcing_return_type(){
    assertThat(jedis).extractingResultOf("name",Name.class).containsOnly(new Name("Yoda"),new Name("Darth Vader"));
  }
  @Test public void should_throw_error_if_no_method_with_given_name_can_be_extracted(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(jedis).extractingResultOf("unknown")).withMessage("Can't find method 'unknown' in class FluentJedi.class. Make sure public method exists and accepts no arguments!");
  }
  @Test public void should_use_method_name_as_description_when_extracting_result_of_method_list(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(jedis).extractingResultOf("age").isEmpty()).withMessageContaining("[Extracted: result of age()]");
  }
  @Test public void should_use_method_name_as_description_when_extracting_typed_result_of_method_list(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(jedis).extractingResultOf("age",Integer.class).isEmpty()).withMessageContaining("[Extracted: result of age()]");
  }
}
