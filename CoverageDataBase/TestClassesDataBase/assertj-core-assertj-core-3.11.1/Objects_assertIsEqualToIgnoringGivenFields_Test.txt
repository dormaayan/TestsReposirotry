/** 
 * Tests for <code> {@link Objects#assertIsEqualToIgnoringGivenFields(AssertionInfo,Object,Object,Map,TypeComparators,String)}</code>.
 * @author Nicolas FranÃ§ois
 * @author Joel Costigliola
 */
public class Objects_assertIsEqualToIgnoringGivenFields_Test extends ObjectsBaseTest {
  @Test public void should_pass_when_fields_are_equal(){
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda","Green");
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
  @Test public void should_pass_when_not_ignored_fields_are_equal(){
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda","Blue");
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"lightSaberColor");
  }
  @Test public void should_pass_when_not_ignored_inherited_fields_are_equal(){
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Luke","Green");
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"name");
  }
  @Test public void should_pass_when_not_ignored_fields_are_equal_even_if_one_ignored_field_is_not_defined(){
    Person actual=new Person("Yoda");
    Jedi other=new Jedi("Yoda","Green");
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"lightSaberColor");
  }
  @Test public void should_pass_when_field_values_are_null(){
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Yoda",null);
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"name");
  }
  @Test public void should_pass_when_fields_are_equal_even_if_objects_types_differ(){
    CartoonCharacter actual=new CartoonCharacter("Homer Simpson");
    Person other=new Person("Homer Simpson");
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"children");
  }
  @Test public void should_fail_if_actual_is_null(){
    Jedi other=new Jedi("Yoda","Green");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> objects.assertIsEqualToIgnoringGivenFields(someInfo(),null,other,noFieldComparators(),defaultTypeComparators(),"name")).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_some_field_values_differ(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda","Blue");
    try {
      objects.assertIsEqualToIgnoringGivenFields(info,actual,other,noFieldComparators(),defaultTypeComparators(),"name");
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("lightSaberColor"),newArrayList((Object)"Green"),newArrayList((Object)"Blue"),newArrayList("name")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_when_some_field_values_differ_and_no_fields_are_ignored(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda","Blue");
    try {
      objects.assertIsEqualToIgnoringGivenFields(info,actual,other,noFieldComparators(),defaultTypeComparators());
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("lightSaberColor"),newArrayList("Green"),newArrayList("Blue"),new ArrayList<>()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_when_some_inherited_field_values_differ(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Luke","Green");
    try {
      objects.assertIsEqualToIgnoringGivenFields(info,actual,other,noFieldComparators(),defaultTypeComparators(),"lightSaberColor");
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("name"),newArrayList("Yoda"),newArrayList("Luke"),newArrayList("lightSaberColor")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_when_one_of_actual_field_to_compare_can_not_be_found_in_the_other_object(){
    Jedi actual=new Jedi("Yoda","Green");
    Employee other=new Employee();
    assertThatExceptionOfType(IntrospectionError.class).isThrownBy(() -> {
      objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"name");
    }
).withMessageContaining("Can't find any field or property with name 'lightSaberColor'");
  }
  @Test public void should_fail_when_some_field_value_is_null_on_one_object_only(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Yoda","Green");
    try {
      objects.assertIsEqualToIgnoringGivenFields(info,actual,other,noFieldComparators(),defaultTypeComparators(),"name");
    }
 catch (    AssertionError err) {
      List<Object> expected=newArrayList((Object)"Green");
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("lightSaberColor"),newArrayList((Object)null),expected,newArrayList("name")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_when_private_fields_differ_but_are_not_compared_or_are_ignored(){
    Assertions.setAllowComparingPrivateFields(false);
    TestClassWithRandomId actual=new TestClassWithRandomId("1",1);
    TestClassWithRandomId other=new TestClassWithRandomId("1",2);
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators(),"n");
    Assertions.setAllowComparingPrivateFields(true);
  }
  @Test public void should_be_able_to_compare_objects_of_different_types(){
    Dude person=new Dude("John","Doe");
    DudeDAO personDAO=new DudeDAO("John","Doe",1L);
    assertThat(person).isEqualToComparingFieldByField(personDAO);
    assertThat(personDAO).isEqualToIgnoringGivenFields(person,"id");
  }
  @Test public void should_be_able_to_use_a_comparator_for_specified_fields(){
    Comparator<String> alwaysEqual=(s1,s2) -> 0;
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Luke","Green");
    assertThat(actual).usingComparatorForFields(alwaysEqual,"name").isEqualToComparingFieldByField(other);
  }
  @Test public void should_pass_when_class_has_synthetic_field(){
    InnerClass actual=new OuterClass().createInnerClass();
    InnerClass other=new OuterClass().createInnerClass();
    assertThat(InnerClass.class.getDeclaredFields()).extracting("synthetic").contains(Boolean.TRUE);
    objects.assertIsEqualToIgnoringGivenFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
private static class Dude {
    @SuppressWarnings("unused") String firstname, lastname;
    public Dude(    String firstname,    String lastname){
      this.firstname=firstname;
      this.lastname=lastname;
    }
  }
private static class DudeDAO {
    @SuppressWarnings("unused") String firstname, lastname;
    @SuppressWarnings("unused") Long id;
    public DudeDAO(    String firstname,    String lastname,    Long id){
      this.firstname=firstname;
      this.lastname=lastname;
      this.id=id;
    }
  }
class OuterClass {
    private String outerField;
class InnerClass {
      private InnerClass(){
      }
      String getOuterField(){
        return outerField;
      }
    }
    InnerClass createInnerClass(){
      return new InnerClass();
    }
  }
}
