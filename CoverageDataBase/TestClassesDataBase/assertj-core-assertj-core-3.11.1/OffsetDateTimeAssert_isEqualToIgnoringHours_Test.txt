public class OffsetDateTimeAssert_isEqualToIgnoringHours_Test extends BaseTest {
  private final OffsetDateTime refOffsetDateTime=of(2000,1,2,0,0,0,0,UTC);
  @Test public void should_pass_if_actual_is_equal_to_other_ignoring_hour_fields(){
    assertThat(refOffsetDateTime).isEqualToIgnoringHours(refOffsetDateTime.plusHours(1));
  }
  @Test public void should_fail_if_actual_is_not_equal_to_given_offsetdatetime_with_hour_ignored(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refOffsetDateTime).isEqualToIgnoringHours(refOffsetDateTime.minusHours(1))).withMessage(format("%n" + "Expecting:%n" + "  <2000-01-02T00:00Z>%n"+ "to have same year, month and day as:%n"+ "  <2000-01-01T23:00Z>%nbut had not."));
  }
  @Test public void should_fail_as_hours_fields_are_different_even_if_time_difference_is_less_than_a_hour(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refOffsetDateTime).isEqualToIgnoringHours(refOffsetDateTime.minusNanos(1))).withMessage(format("%n" + "Expecting:%n" + "  <2000-01-02T00:00Z>%n"+ "to have same year, month and day as:%n"+ "  <2000-01-01T23:59:59.999999999Z>%n"+ "but had not."));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetDateTime actual=null;
      assertThat(actual).isEqualToIgnoringHours(OffsetDateTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_given_offsetdatetime_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(refOffsetDateTime).isEqualToIgnoringHours(null)).withMessage(NULL_OFFSET_DATE_TIME_PARAMETER_MESSAGE);
  }
}
