/** 
 * Tests for <code> {@link Files#assertHasContent(AssertionInfo,File,String,Charset)}</code>.
 * @author Olivier Michallat
 * @author Joel Costigliola
 */
public class Files_assertHasContent_Test extends FilesBaseTest {
  private static File actual;
  private static String expected;
  private static Charset charset;
  @BeforeAll public static void setUpOnce(){
    actual=new File("src/test/resources/actual_file.txt");
    expected="xyz";
    charset=Charset.defaultCharset();
  }
  @Test public void should_throw_error_if_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> files.assertHasContent(someInfo(),actual,null,charset)).withMessage("The text to compare to should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> files.assertHasContent(someInfo(),null,expected,charset)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_not_file(){
    AssertionInfo info=someInfo();
    File notAFile=new File("xyz");
    try {
      files.assertHasContent(info,notAFile,expected,charset);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeFile(notAFile));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_file_has_text_content() throws IOException {
    when(diff.diff(actual,expected,charset)).thenReturn(new ArrayList<>());
    files.assertHasContent(someInfo(),actual,expected,charset);
  }
  @Test public void should_throw_error_wrapping_catched_IOException() throws IOException {
    IOException cause=new IOException();
    when(diff.diff(actual,expected,charset)).thenThrow(cause);
    assertThatExceptionOfType(UncheckedIOException.class).isThrownBy(() -> files.assertHasContent(someInfo(),actual,expected,charset)).withCause(cause);
  }
  @Test public void should_fail_if_file_does_not_have_expected_text_content() throws IOException {
    List<Delta<String>> diffs=Lists.newArrayList(delta);
    when(diff.diff(actual,expected,charset)).thenReturn(diffs);
    AssertionInfo info=someInfo();
    try {
      files.assertHasContent(info,actual,expected,charset);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveContent(actual,charset,diffs));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
