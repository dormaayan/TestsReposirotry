/** 
 * @author Paweł Stawicki
 * @author Joel Costigliola
 * @author Marcin Zajączkowski
 */
public class LocalDateAssert_isBefore_Test extends LocalDateAssertBaseTest {
  @Test public void test_isBefore_assertion(){
    assertThat(BEFORE).isBefore(REFERENCE);
    verify_that_isBefore_assertion_fails_and_throws_AssertionError(REFERENCE,REFERENCE);
    verify_that_isBefore_assertion_fails_and_throws_AssertionError(AFTER,REFERENCE);
  }
  @Test public void test_isBefore_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalDate.of(2000,1,5)).isBefore(LocalDate.of(1998,1,1))).withMessage(format("%nExpecting:%n  <2000-01-05>%nto be strictly before:%n  <1998-01-01>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      LocalDate actual=null;
      assertThat(actual).isBefore(LocalDate.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_date_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isBefore((LocalDate)null)).withMessage("The LocalDate to compare actual with should not be null");
  }
  @Test public void should_fail_if_date_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDate.now()).isBefore((String)null)).withMessage("The String representing the LocalDate to compare actual with should not be null");
  }
  private static void verify_that_isBefore_assertion_fails_and_throws_AssertionError(  LocalDate dateToTest,  LocalDate reference){
    assertThatThrownBy(() -> assertThat(dateToTest).isBefore(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToTest).isBefore(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
