/** 
 * Tests for <code> {@link org.assertj.core.internal.Classes#assertHasDeclaredMethods(AssertionInfo,Class,String)}</code>
 */
public class Classes_assertHasDeclaredMethods_Test extends ClassesBaseTest {
  @BeforeEach public void setupActual(){
    AnotherMethodsClass m=new AnotherMethodsClass();
    Strings.isNullOrEmpty(m.string);
    actual=AnotherMethodsClass.class;
  }
@SuppressWarnings("unused") private static final class AnotherMethodsClass {
    private String string;
    public void publicMethod(){
    }
    protected void protectedMethod(){
    }
    private void privateMethod(){
    }
  }
  @Test public void should_pass_if_actual_has_the_expected_declared_methods(){
    classes.assertHasDeclaredMethods(someInfo(),actual,"publicMethod","protectedMethod","privateMethod");
  }
  @Test public void should_pass_if_actual_has_no_declared_methods_and_no_expected_methods_are_given(){
    actual=Jedi.class;
    classes.assertHasDeclaredMethods(someInfo(),actual);
  }
  @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasDeclaredMethods(someInfo(),actual)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_has_some_declared_methods_and_no_expected_methods_are_given(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasDeclaredMethods(someInfo(),actual)).withMessage(format(shouldNotHaveMethods(actual,true,newTreeSet("publicMethod","privateMethod","protectedMethod")).create()));
  }
  @Test() public void should_fail_if_actual_does_not_have_the_expected_declared_methods(){
    String[] expected=new String[]{"missingMethod","publicMethod"};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasDeclaredMethods(someInfo(),actual,expected)).withMessage(format(shouldHaveMethods(actual,true,newTreeSet(expected),newTreeSet("missingMethod")).create()));
  }
}
