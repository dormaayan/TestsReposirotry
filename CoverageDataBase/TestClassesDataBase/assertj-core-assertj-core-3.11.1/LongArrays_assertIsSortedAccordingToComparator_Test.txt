/** 
 * Tests for <code> {@link LongArrays#assertIsSortedAccordingToComparator(AssertionInfo,long[],Comparator)}</code>
 * @author Joel Costigliola
 */
public class LongArrays_assertIsSortedAccordingToComparator_Test extends LongArraysBaseTest {
  private Comparator<Long> longDescendingOrderComparator;
  private Comparator<Long> longSquareComparator;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=new long[]{4L,3L,2L,2L,1L};
    longDescendingOrderComparator=(long1,long2) -> -long1.compareTo(long2);
    longSquareComparator=(long1,long2) -> new Long(long1 * long1).compareTo(new Long(long2 * long2));
  }
  @Test public void should_pass_if_actual_is_sorted_according_to_given_comparator(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),actual,longDescendingOrderComparator);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_given_comparator_is(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),longDescendingOrderComparator);
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),longSquareComparator);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),null,longDescendingOrderComparator)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_comparator_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),null));
  }
  @Test public void should_fail_if_actual_is_not_sorted_according_to_given_comparator(){
    AssertionInfo info=someInfo();
    actual=new long[]{3L,2L,1L,9L};
    try {
      arrays.assertIsSortedAccordingToComparator(info,actual,longDescendingOrderComparator);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSortedAccordingToGivenComparator(2,actual,longDescendingOrderComparator));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
