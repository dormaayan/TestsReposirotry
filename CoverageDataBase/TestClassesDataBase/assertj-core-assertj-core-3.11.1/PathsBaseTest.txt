/** 
 * Base test class for  {@link Path} instances<p> Assertion on  {@link Path} objects are of two categories:</p> <ul> <li>assertions on the  {@link Path} object themselves: those do not require a {@link FileSystem};</li> <li>assertions inducing filesystem I/O: those <em>do</em> require a  {@link FileSystem}.</li> </ul> <p> An advantage when compared with  {@link File} is that we do not need to pollute the developer's machine with temporaryfiles/directories/etc for I/O bound tests; all that is required is a filesystem implementation. </p> <p> <a href="https://github.com/marschall/memoryfilesystem">memoryfilesystem</a> is chosen for its great support of getting/setting file attributes etc, and for its emulation of both Unix and Windows filesystems. </p>
 * @see Path
 * @see FileSystem
 * @see Files
 */
public abstract class PathsBaseTest {
  protected Failures failures;
  protected Paths paths;
  protected NioFilesWrapper nioFilesWrapper;
  protected AssertionInfo info;
  protected Diff diff;
  protected BinaryDiff binaryDiff;
  @BeforeEach public void setUp(){
    failures=spy(new Failures());
    nioFilesWrapper=mock(NioFilesWrapper.class);
    paths=new Paths(nioFilesWrapper);
    paths.failures=failures;
    info=someInfo();
    diff=mock(Diff.class);
    paths.diff=diff;
    binaryDiff=mock(BinaryDiff.class);
    paths.binaryDiff=binaryDiff;
  }
  /** 
 * A  {@link FileSystem} for test classes which need them
 */
public static class FileSystemResource {
    private final FileSystem fs;
    public FileSystemResource(){
      try {
        fs=MemoryFileSystemBuilder.newLinux().build("PathsTest");
      }
 catch (      IOException e) {
        throw new RuntimeException("failed to initialize filesystem",e);
      }
    }
    public FileSystem getFileSystem(){
      return fs;
    }
    public void close(){
      try {
        fs.close();
      }
 catch (      IOException e) {
        throw new RuntimeException("failed to close filesystem",e);
      }
    }
  }
}
