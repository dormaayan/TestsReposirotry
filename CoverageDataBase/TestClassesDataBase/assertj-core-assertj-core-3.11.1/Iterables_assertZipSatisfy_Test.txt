public class Iterables_assertZipSatisfy_Test extends IterablesBaseTest {
  private List<String> other=newArrayList("LUKE","YODA","LEIA");
  @Test public void should_satisfy_single_zip_requirement(){
    iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).isEqualToIgnoringCase(s2));
  }
  @Test public void should_satisfy_compound_zip_requirements(){
    iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> {
      assertThat(s1).isEqualToIgnoringCase(s2);
      assertThat(s1).startsWith(firstChar(s2));
    }
);
  }
  @Test public void should_pass_if_both_iterables_are_empty(){
    actual.clear();
    other.clear();
    iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).isEqualToIgnoringCase(s2));
  }
  @Test public void should_fail_according_to_requirements(){
    ThrowingCallable assertion=() -> iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).startsWith(s2));
    AssertionError assertionError=catchThrowableOfType(assertion,AssertionError.class);
    assertThat(assertionError).isNotNull();
    List<ZipSatisfyError> errors=list(new ZipSatisfyError("Luke","LUKE",shouldStartWith("Luke","LUKE").create()),new ZipSatisfyError("Yoda","YODA",shouldStartWith("Yoda","YODA").create()),new ZipSatisfyError("Leia","LEIA",shouldStartWith("Leia","LEIA").create()));
    verify(failures).failure(info,zippedElementsShouldSatisfy(actual,other,errors));
  }
  @Test public void should_fail_when_compared_iterables_have_different_sizes(){
    other.add("Vader");
    try {
      iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).startsWith(s2));
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessageContaining(shouldHaveSameSizeAs(actual,actual.size(),other.size()).create());
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_consumer_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(actual).zipSatisfy(other,null)).withMessage("The BiConsumer expressing the assertions requirements must not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      actual=null;
      iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).isEqualToIgnoringCase(s2));
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_other_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      other=null;
      iterables.assertZipSatisfy(someInfo(),actual,other,(s1,s2) -> assertThat(s1).isEqualToIgnoringCase(s2));
    }
).withMessage("The iterable to zip actual with must not be null");
  }
  private static String firstChar(  String s2){
    return String.valueOf(s2.charAt(0));
  }
}
