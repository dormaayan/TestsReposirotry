/** 
 * Tests for <code> {@link ShortArrays#assertIsSorted(AssertionInfo,short[])}</code>.
 * @author Joel Costigliola
 */
public class ShortArrays_assertIsSorted_Test extends ShortArraysBaseTest {
  @Override protected void initActualArray(){
    actual=new short[]{1,2,3,4,4};
  }
  @Test public void should_pass_if_actual_is_sorted_in_ascending_order(){
    arrays.assertIsSorted(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_is_empty(){
    arrays.assertIsSorted(someInfo(),emptyArray());
  }
  @Test public void should_pass_if_actual_contains_only_one_element(){
    arrays.assertIsSorted(someInfo(),arrayOf(1));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSorted(someInfo(),(short[])null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_not_sorted_in_ascending_order(){
    AssertionInfo info=someInfo();
    actual=arrayOf(1,3,2);
    try {
      arrays.assertIsSorted(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSorted(1,actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_sorted_in_ascending_order_according_to_custom_comparison_strategy(){
    actual=new short[]{1,-2,3,-4,4};
    arraysWithCustomComparisonStrategy.assertIsSorted(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertIsSorted(someInfo(),emptyArray());
  }
  @Test public void should_pass_if_actual_contains_only_one_element_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertIsSorted(someInfo(),arrayOf(1));
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertIsSorted(someInfo(),(short[])null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_not_sorted_in_ascending_order_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=arrayOf(1,3,2);
    try {
      arraysWithCustomComparisonStrategy.assertIsSorted(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeSortedAccordingToGivenComparator(1,actual,comparatorForCustomComparisonStrategy()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
