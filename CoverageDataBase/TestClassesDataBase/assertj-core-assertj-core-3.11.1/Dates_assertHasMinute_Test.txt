/** 
 * Tests for <code> {@link Dates#assertHasMinute(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertHasMinute_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=parseDatetime("2011-01-01T03:49:02");
  }
  @Test public void should_fail_if_actual_has_not_minute(){
    AssertionInfo info=someInfo();
    int minute=5;
    try {
      dates.assertHasMinute(info,actual,minute);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"minute",minute));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertHasMinute(someInfo(),null,49)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_minute(){
    dates.assertHasMinute(someInfo(),actual,49);
  }
  @Test public void should_fail_if_actual_has_not_minute_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int minute=5;
    try {
      datesWithCustomComparisonStrategy.assertHasMinute(info,actual,minute);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"minute",minute));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertHasMinute(someInfo(),null,49)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_minute_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertHasMinute(someInfo(),actual,49);
  }
}
