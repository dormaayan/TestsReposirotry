/** 
 * @author Filip Hrisafov
 */
public class DoublePredicateAssert_rejects_Test extends DoublePredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((DoublePredicate)null).rejects(1.0,2.0,3.0)).withMessage(actualIsNull());
  }
  @Test public void should_pass_when_predicate_does_not_accept_value(){
    DoublePredicate predicate=val -> val <= 2;
    assertThat(predicate).rejects(3.0);
  }
  @Test public void should_fail_when_predicate_accepts_value(){
    DoublePredicate predicate=val -> val <= 2;
    Predicate<Double> wrapPredicate=predicate::test;
    double expectedValue=2.0;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(expectedValue)).withMessage(shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_value_with_string_description(){
    DoublePredicate predicate=val -> val <= 2;
    Predicate<Double> wrapPredicate=predicate::test;
    double expectedValue=2.0;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).as("test").rejects(expectedValue)).withMessage("[test] " + shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_some_value(){
    DoublePredicate predicate=num -> num <= 2;
    double[] matchValues=new double[]{1.0,2.0,3.0};
    List<Double> matchValuesList=DoubleStream.of(matchValues).boxed().collect(Collectors.toList());
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(matchValues)).withMessage(noElementsShouldMatch(matchValuesList,1D,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_no_value(){
    DoublePredicate predicate=num -> num <= 2;
    assertThat(predicate).rejects(3.0,4.0,5.0);
  }
  @Override protected DoublePredicateAssert invoke_api_method(){
    return assertions.rejects(3.0,4.0);
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertNoneMatch(getInfo(assertions),newArrayList(3.0D,4.0D),wrapped,PredicateDescription.GIVEN);
  }
}
