/** 
 * Tests for <code> {@link ShouldBeInstanceOfAny#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Alex Ruiz
 */
public class ShouldBeInstanceOfAny_create_Test {
  private ErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    Class<?>[] types={File.class,Pattern.class};
    factory=shouldBeInstanceOfAny("Yoda",types);
  }
  @Test public void should_create_error_message(){
    String message=factory.create(new TestDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <\"Yoda\">%n"+ "to be an instance of any of:%n"+ " <[java.io.File, java.util.regex.Pattern]>%n"+ "but was instance of:%n"+ " <java.lang.String>"));
  }
  @Test public void should_create_error_message_with_stack_trace_for_throwable(){
    IllegalArgumentException throwable=new IllegalArgumentException("Not in a list");
    Class<?>[] types={NullPointerException.class,IllegalStateException.class};
    String message=shouldBeInstanceOfAny(throwable,types).create();
    assertThat(message).isEqualTo(format("%nExpecting:%n" + " <java.lang.IllegalArgumentException: Not in a list>%n" + "to be an instance of any of:%n"+ " <[java.lang.NullPointerException, java.lang.IllegalStateException]>%n"+ "but was:%n <\"%s\">",getStackTrace(throwable)));
  }
}
