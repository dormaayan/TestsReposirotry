public class ListAssert_filteredOn_consumer_with_navigation_Test extends ListAssert_filteredOn_BaseTest {
  private static Consumer<? super TolkienCharacter> nameStartingWithFro=hobbit -> assertThat(hobbit.getName()).startsWith("Fro");
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnAssertions(nameStartingWithFro).element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnAssertions(nameStartingWithFro).element(0).hasAge(33);
  }
}
