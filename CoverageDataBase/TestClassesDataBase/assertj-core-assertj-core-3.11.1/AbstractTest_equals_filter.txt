public abstract class AbstractTest_equals_filter extends WithPlayerData {
  @Test public void should_filter_iterable_elements_with_property_equals_to_given_value(){
    Iterable<Player> bullsPlayers=filterIterable(players,"team","Chicago Bulls");
    assertThat(bullsPlayers).containsOnly(jordan);
    assertThat(players).hasSize(4);
    Iterable<Player> filteredPlayers=filter(players).with("name.last","Duncan").get();
    assertThat(filteredPlayers).containsOnly(duncan);
    assertThat(players).hasSize(4);
  }
  @Test public void should_filter_iterable_elements_with_field_equals_to_given_value(){
    setAllowExtractingPrivateFields(true);
    Iterable<Player> bullsPlayers=filterIterable(players,"highestScore",69);
    assertThat(bullsPlayers).containsOnly(jordan);
    assertThat(players).hasSize(4);
  }
  protected abstract Iterable<Player> filterIterable(  Iterable<Player> players,  String propertyName,  Object propertyValue);
  @Test public void should_fail_if_property_to_filter_on_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> filterIterable(players,null,6000L)).withMessage("The property/field name to filter on should not be null or empty");
  }
  @Test public void should_fail_if_elements_to_filter_do_not_have_property_used_by_filter(){
    assertThatExceptionOfType(IntrospectionError.class).isThrownBy(() -> filterIterable(players,"country","France")).withMessageContaining("Can't find any field or property with name 'country'");
  }
}
