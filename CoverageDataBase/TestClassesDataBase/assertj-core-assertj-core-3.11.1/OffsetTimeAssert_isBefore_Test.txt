/** 
 * @author Paweł Stawicki
 * @author Joel Costigliola
 * @author Marcin Zajączkowski
 */
public class OffsetTimeAssert_isBefore_Test extends OffsetTimeAssertBaseTest {
  @Test public void test_isBefore_assertion(){
    assertThat(BEFORE).isBefore(REFERENCE);
    assertThat(BEFORE).isBefore(REFERENCE.toString());
    verify_that_isBefore_assertion_fails_and_throws_AssertionError(REFERENCE,REFERENCE);
    verify_that_isBefore_assertion_fails_and_throws_AssertionError(AFTER,REFERENCE);
  }
  @Test public void test_isBefore_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OffsetTime.of(3,0,5,0,ZoneOffset.UTC)).isBefore(OffsetTime.of(3,0,4,0,ZoneOffset.UTC))).withMessage(format("%n" + "Expecting:%n" + "  <03:00:05Z>%n"+ "to be strictly before:%n"+ "  <03:00:04Z>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetTime actual=null;
      assertThat(actual).isBefore(OffsetTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_offsetTime_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isBefore((OffsetTime)null)).withMessage("The OffsetTime to compare actual with should not be null");
  }
  @Test public void should_fail_if_offsetTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(OffsetTime.now()).isBefore((String)null)).withMessage("The String representing the OffsetTime to compare actual with should not be null");
  }
  private static void verify_that_isBefore_assertion_fails_and_throws_AssertionError(  OffsetTime timeToTest,  OffsetTime reference){
    try {
      assertThat(timeToTest).isBefore(reference);
    }
 catch (    AssertionError e) {
      try {
        assertThat(timeToTest).isBefore(reference.toString());
      }
 catch (      AssertionError e2) {
        return;
      }
    }
    fail("Should have thrown AssertionError");
  }
}
