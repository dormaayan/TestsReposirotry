public class OffsetTimeAssert_hasSameHourAs_Test extends BaseTest {
  private final OffsetTime refOffsetTime=OffsetTime.of(23,0,0,0,ZoneOffset.UTC);
  @Test public void should_pass_if_actual_andexpected_have_same_hour(){
    assertThat(refOffsetTime).hasSameHourAs(refOffsetTime.plusMinutes(1));
  }
  @Test public void should_fail_if_actual_is_not_equal_to_given_offsetTime_with_minute_ignored(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refOffsetTime).hasSameHourAs(refOffsetTime.minusMinutes(1))).withMessage(format("%n" + "Expecting:%n" + "  <23:00Z>%n"+ "to have same hour as:%n"+ "  <22:59Z>%n"+ "but had not."));
  }
  @Test public void should_fail_as_minutes_fields_are_different_even_if_time_difference_is_less_than_a_minute(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refOffsetTime).hasSameHourAs(refOffsetTime.minusNanos(1))).withMessage(format("%n" + "Expecting:%n" + "  <23:00Z>%n"+ "to have same hour as:%n"+ "  <22:59:59.999999999Z>%n"+ "but had not."));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetTime actual=null;
      assertThat(actual).hasSameHourAs(OffsetTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_given_offsetTime_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(refOffsetTime).hasSameHourAs(null)).withMessage(NULL_OFFSET_TIME_PARAMETER_MESSAGE);
  }
}
