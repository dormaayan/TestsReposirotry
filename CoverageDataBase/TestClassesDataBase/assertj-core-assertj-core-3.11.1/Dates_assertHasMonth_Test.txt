/** 
 * Tests for <code> {@link Dates#assertHasMonth(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertHasMonth_Test extends DatesBaseTest {
  @Test public void should_fail_if_actual_has_not_given_month(){
    AssertionInfo info=someInfo();
    int month=5;
    try {
      dates.assertHasMonth(info,actual,month);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"month",month));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertHasMonth(someInfo(),null,1)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_month(){
    dates.assertHasMonth(someInfo(),actual,1);
  }
  @Test public void should_fail_if_actual_has_not_given_month_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int month=5;
    try {
      datesWithCustomComparisonStrategy.assertHasMonth(info,actual,month);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"month",month));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertHasMonth(someInfo(),null,1)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_month_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertHasMonth(someInfo(),actual,1);
  }
}
