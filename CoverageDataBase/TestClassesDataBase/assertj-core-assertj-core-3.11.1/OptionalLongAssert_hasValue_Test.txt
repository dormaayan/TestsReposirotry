public class OptionalLongAssert_hasValue_Test extends BaseTest {
  @Test public void should_fail_when_OptionalLong_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((OptionalLong)null).hasValue(10L)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_OptionalLong_has_expected_value(){
    assertThat(OptionalLong.of(10L)).hasValue(10L);
  }
  @Test public void should_fail_if_OptionalLong_does_not_have_expected_value(){
    OptionalLong actual=OptionalLong.of(5L);
    long expectedValue=10L;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).hasValue(expectedValue)).withMessage(shouldContain(actual,expectedValue).create());
  }
  @Test public void should_fail_if_OptionalLong_is_empty(){
    long expectedValue=10L;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OptionalLong.empty()).hasValue(expectedValue)).withMessage(shouldContain(expectedValue).create());
  }
}
