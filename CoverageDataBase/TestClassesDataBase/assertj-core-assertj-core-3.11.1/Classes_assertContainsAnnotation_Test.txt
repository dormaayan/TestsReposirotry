/** 
 * Tests for <code> {@link org.assertj.core.internal.Classes#assertContainsAnnotations(org.assertj.core.api.AssertionInfo,Class,Class[])}</code> .
 * @author William Delanoue
 */
public class Classes_assertContainsAnnotation_Test extends ClassesBaseTest {
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) private @interface MyAnnotation {}
@MyAnnotation private static class AnnotatedClass {
  }
  @SuppressWarnings("unchecked") @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertContainsAnnotations(someInfo(),actual,Override.class)).withMessage(actualIsNull());
  }
  @SuppressWarnings("unchecked") @Test public void should_fail_if_expected_has_null_value(){
    actual=AssertionInfo.class;
    assertThatNullPointerException().isThrownBy(() -> classes.assertContainsAnnotations(someInfo(),actual,Override.class,null,Deprecated.class)).withMessage("The class to compare actual with should not be null");
  }
  @SuppressWarnings("unchecked") @Test public void should_pass_if_expected_is_empty(){
    actual=AssertionInfo.class;
    classes.assertContainsAnnotations(someInfo(),actual);
  }
  @SuppressWarnings("unchecked") @Test public void should_pass_if_actual_have_annotation(){
    actual=AnnotatedClass.class;
    classes.assertContainsAnnotations(someInfo(),actual,MyAnnotation.class);
  }
  @SuppressWarnings("unchecked") @Test() public void should_fail_if_actual_does_not_contains_an_annotation(){
    actual=AnnotatedClass.class;
    Class<Annotation> expected[]=new Class[]{Override.class,Deprecated.class,MyAnnotation.class};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertContainsAnnotations(someInfo(),actual,expected)).withMessage(shouldHaveAnnotations(actual,Sets.<Class<? extends Annotation>>newLinkedHashSet(expected),Sets.<Class<? extends Annotation>>newLinkedHashSet(Override.class,Deprecated.class)).create());
  }
}
