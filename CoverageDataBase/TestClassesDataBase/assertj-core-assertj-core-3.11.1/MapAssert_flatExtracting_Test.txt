/** 
 * Tests for <code> {@link MapAssert#flatExtracting(String)}</code>.
 * @author Daniel Weber
 */
public class MapAssert_flatExtracting_Test {
  private Map<String,Object> map;
  @BeforeEach public void beforeEachTest(){
    String[] names=array("Dave","Jeff");
    LinkedHashSet<String> jobs=newLinkedHashSet("Plumber","Builder");
    Iterable<String> cities=asList("Dover","Boston","Paris");
    int[] ranks={1,2,3};
    map=new LinkedHashMap<>();
    map.put("name",names);
    map.put("job",jobs);
    map.put("city",cities);
    map.put("rank",ranks);
  }
  @Test public void should_allow_assertions_on_flattened_values_extracted_from_given_map_keys(){
    assertThat(map).flatExtracting("name","job","city","rank").containsExactly("Dave","Jeff","Plumber","Builder","Dover","Boston","Paris",1,2,3);
    assertThat(map).flatExtracting("city","job","name").containsExactly("Dover","Boston","Paris","Plumber","Builder","Dave","Jeff");
  }
  @Test public void should_extract_null_from_unknown_key(){
    assertThat(map).flatExtracting("name","id","city").containsExactly("Dave","Jeff",null,"Dover","Boston","Paris");
    assertThat(map).flatExtracting("foo","bar").containsOnlyNulls();
  }
  @Test public void should_extract_but_not_flatten_non_collection_values(){
    map.put("year",2017);
    assertThat(map).flatExtracting("name","job","year").containsExactly("Dave","Jeff","Plumber","Builder",2017);
  }
}
