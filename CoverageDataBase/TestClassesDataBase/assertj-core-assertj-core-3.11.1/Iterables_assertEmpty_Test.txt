/** 
 * Tests for <code> {@link Iterables#assertEmpty(AssertionInfo,Collection)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Iterables_assertEmpty_Test extends IterablesBaseTest {
  @Test public void should_pass_if_actual_is_empty(){
    iterables.assertEmpty(someInfo(),emptyList());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterables.assertEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_has_elements(){
    AssertionInfo info=someInfo();
    Collection<String> actual=newArrayList("Yoda");
    try {
      iterables.assertEmpty(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEmpty(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    iterablesWithCaseInsensitiveComparisonStrategy.assertEmpty(someInfo(),emptyList());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterablesWithCaseInsensitiveComparisonStrategy.assertEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_has_elements_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    Collection<String> actual=newArrayList("Yoda");
    try {
      iterablesWithCaseInsensitiveComparisonStrategy.assertEmpty(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEmpty(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
