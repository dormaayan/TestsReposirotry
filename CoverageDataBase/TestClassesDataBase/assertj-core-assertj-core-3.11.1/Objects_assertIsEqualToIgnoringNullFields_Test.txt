/** 
 * Tests for <code> {@link Objects#assertIsEqualToIgnoringNullFields(AssertionInfo,Object,Object,Map,TypeComparators)} </code>.
 * @author Nicolas FranÃ§ois
 * @author Joel Costigliola
 */
public class Objects_assertIsEqualToIgnoringNullFields_Test extends ObjectsBaseTest {
  @Test public void should_pass_when_fields_are_equal(){
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda","Green");
    objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
  @Test public void should_pass_when_some_other_field_is_null_but_not_actual(){
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Yoda",null);
    objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
  @Test public void should_pass_when_fields_are_equal_even_if_objects_types_differ(){
    Person actual=new Person("Homer Simpson");
    CartoonCharacter other=new CartoonCharacter("Homer Simpson");
    objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
  @Test public void should_pass_when_private_fields_differ_but_are_not_compared(){
    Assertions.setAllowComparingPrivateFields(false);
    TestClassWithRandomId actual=new TestClassWithRandomId("1",1);
    TestClassWithRandomId other=new TestClassWithRandomId(null,1);
    objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
    Assertions.setAllowComparingPrivateFields(true);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Jedi other=new Jedi("Yoda","Green");
      objects.assertIsEqualToIgnoringNullFields(someInfo(),null,other,noFieldComparators(),defaultTypeComparators());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_some_actual_field_is_null_but_not_other(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Yoda","Green");
    try {
      objects.assertIsEqualToIgnoringNullFields(info,actual,other,noFieldComparators(),defaultTypeComparators());
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("lightSaberColor"),newArrayList((Object)null),newArrayList((Object)"Green"),newArrayList("strangeNotReadablePrivateField")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_when_a_field_differ(){
    AssertionInfo info=someInfo();
    Jedi actual=new Jedi("Yoda","Green");
    Jedi other=new Jedi("Soda","Green");
    try {
      objects.assertIsEqualToIgnoringNullFields(info,actual,other,noFieldComparators(),defaultTypeComparators());
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeEqualToIgnoringGivenFields(actual,newArrayList("name"),newArrayList((Object)"Yoda"),newArrayList((Object)"Soda"),newArrayList("strangeNotReadablePrivateField")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_when_one_of_actual_field_to_compare_can_not_be_found_in_the_other_object(){
    assertThatExceptionOfType(IntrospectionError.class).isThrownBy(() -> {
      Jedi actual=new Jedi("Yoda","Green");
      Employee other=new Employee();
      objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
    }
).withMessageContaining("Can't find any field or property with name 'lightSaberColor'");
  }
  @Test public void should_pass_when_class_has_synthetic_field(){
    InnerClass actual=new OuterClass().createInnerClass();
    InnerClass other=new OuterClass().createInnerClass();
    assertThat(InnerClass.class.getDeclaredFields()).extracting("synthetic").contains(Boolean.TRUE);
    objects.assertIsEqualToIgnoringNullFields(someInfo(),actual,other,noFieldComparators(),defaultTypeComparators());
  }
class OuterClass {
    private String outerField;
class InnerClass {
      private InnerClass(){
      }
      String getOuterField(){
        return outerField;
      }
    }
    InnerClass createInnerClass(){
      return new InnerClass();
    }
  }
}
