/** 
 * @author Filip Hrisafov
 */
public class PredicateAssert_rejectsAllTest extends PredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((Predicate<String>)null).rejectsAll(newArrayList("first","second"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_predicate_accepts_some_value(){
    Predicate<String> ballSportPredicate=sport -> sport.contains("ball");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(ballSportPredicate).rejectsAll(newArrayList("curling","judo","football"))).withMessage(noElementsShouldMatch(newArrayList("curling","judo","football"),"football",PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_no_value(){
    Predicate<String> ballSportPredicate=sport -> sport.contains("ball");
    assertThat(ballSportPredicate).rejectsAll(newArrayList("curling","judo","marathon"));
  }
  @Override protected PredicateAssert<Boolean> invoke_api_method(){
    return assertions.rejectsAll(newArrayList(false,false));
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertNoneMatch(getInfo(assertions),newArrayList(false,false),getActual(assertions),PredicateDescription.GIVEN);
  }
}
