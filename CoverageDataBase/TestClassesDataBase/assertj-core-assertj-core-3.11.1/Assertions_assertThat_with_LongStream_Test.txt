public class Assertions_assertThat_with_LongStream_Test {
  private LongStream intStream=LongStream.empty();
  @Test public void should_create_Assert(){
    Object assertions=assertThat(LongStream.of(823952L,1947230585L));
    assertThat(assertions).isNotNull();
  }
  @Test public void should_assert_on_size(){
    assertThat(LongStream.empty()).isEmpty();
    assertThat(LongStream.of(123L,5674L,363L)).isNotEmpty().hasSize(3);
  }
  @SuppressWarnings("unchecked") @Test public void should_initialise_actual(){
    LongStream iterator=LongStream.of(823952L,1947230585L);
    List<? extends Long> actual=assertThat(iterator).actual;
    assertThat((List<Long>)actual).contains(823952L,atIndex(0)).contains(1947230585L,atIndex(1));
  }
  @Test public void should_allow_null(){
    assertThat(assertThat((LongStream)null).actual).isNull();
  }
  @Test public void isEqualTo_should_honor_comparing_the_same_mocked_stream(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isEqualTo(stream);
  }
  @Test public void stream_can_be_asserted_twice(){
    LongStream names=LongStream.of(823952L,1947230585L);
    assertThat(names).containsExactly(823952L,1947230585L).containsExactly(823952L,1947230585L);
  }
  @Test public void should_not_consume_stream_when_asserting_non_null(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isNotNull();
    verifyZeroInteractions(stream);
  }
  @Test public void isInstanceOf_should_check_the_original_stream_without_consuming_it(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isInstanceOf(LongStream.class);
    verifyZeroInteractions(stream);
  }
  @Test public void isInstanceOfAny_should_check_the_original_stream_without_consuming_it(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isInstanceOfAny(LongStream.class,String.class);
    verifyZeroInteractions(stream);
  }
  @Test public void isOfAnyClassIn_should_check_the_original_stream_without_consuming_it(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isOfAnyClassIn(Double.class,stream.getClass());
  }
  @Test public void isExactlyInstanceOf_should_check_the_original_stream(){
    assertThat(intStream).isExactlyInstanceOf(intStream.getClass());
  }
  @Test public void isNotExactlyInstanceOf_should_check_the_original_stream(){
    assertThat(intStream).isNotExactlyInstanceOf(LongStream.class);
    try {
      assertThat(intStream).isNotExactlyInstanceOf(intStream.getClass());
    }
 catch (    AssertionError e) {
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void isNotInstanceOf_should_check_the_original_stream(){
    assertThat(intStream).isNotInstanceOf(LazyIterable.class);
  }
  @Test public void isNotInstanceOfAny_should_check_the_original_stream(){
    assertThat(intStream).isNotInstanceOfAny(LazyIterable.class,String.class);
  }
  @Test public void isNotOfAnyClassIn_should_check_the_original_stream(){
    assertThat(intStream).isNotOfAnyClassIn(LazyIterable.class,String.class);
  }
  @Test public void isSameAs_should_check_the_original_stream_without_consuming_it(){
    LongStream stream=mock(LongStream.class);
    assertThat(stream).isSameAs(stream);
    verifyZeroInteractions(stream);
  }
  @Test public void isNotSameAs_should_check_the_original_stream_without_consuming_it(){
    LongStream stream=mock(LongStream.class);
    try {
      assertThat(stream).isNotSameAs(stream);
    }
 catch (    AssertionError e) {
      verifyZeroInteractions(stream);
      return;
    }
    Assertions.fail("Expected assertionError, because assert notSame on same stream.");
  }
}
