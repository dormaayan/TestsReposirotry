public class Diff_diff_InputStream_String_Test {
  private static Diff diff;
  @BeforeAll public static void setUpOnce(){
    diff=new Diff();
  }
  private InputStream actual;
  private String expected;
  @Test public void should_return_empty_diff_list_if_inputstreams_have_equal_content() throws IOException {
    actual=stream("base","line0","line1");
    expected=joinLines("base","line0","line1");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).isEmpty();
  }
  @Test public void should_return_diffs_if_inputstreams_do_not_have_equal_content() throws IOException {
    actual=stream("base","line_0","line_1");
    expected=joinLines("base","line0","line1");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).hasSize(1).first().hasToString(format("Changed content at line 2:%n" + "expecting:%n" + "  [\"line0\",%n"+ "   \"line1\"]%n"+ "but was:%n"+ "  [\"line_0\",%n"+ "   \"line_1\"]%n"));
  }
  @Test public void should_return_multiple_diffs_if_inputstreams_contain_multiple_differences() throws IOException {
    actual=stream("base","line_0","line1","line_2");
    expected=joinLines("base","line0","line1","line2");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).hasSize(2);
    assertThat(diffs.get(0)).hasToString(format("Changed content at line 2:%n" + "expecting:%n" + "  [\"line0\"]%n"+ "but was:%n"+ "  [\"line_0\"]%n"));
    assertThat(diffs.get(1)).hasToString(format("Changed content at line 4:%n" + "expecting:%n" + "  [\"line2\"]%n"+ "but was:%n"+ "  [\"line_2\"]%n"));
  }
  @Test public void should_return_diffs_if_content_of_actual_is_shorter_than_content_of_expected() throws IOException {
    actual=stream("base","line_0");
    expected=joinLines("base","line_0","line_1");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Missing content at line 3:%n" + "  [\"line_1\"]%n"));
  }
  @Test public void should_return_diffs_if_content_of_actual_is_longer_than_content_of_expected() throws IOException {
    actual=stream("base","line_0","line_1");
    expected=joinLines("base","line_0");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Extra content at line 3:%n" + "  [\"line_1\"]%n"));
  }
  @Test public void should_return_single_diff_line_for_new_line_at_start() throws IOException {
    actual=stream("","line_0","line_1","line_2");
    expected=joinLines("line_0","line_1","line_2");
    List<Delta<String>> diffs=diff.diff(actual,expected);
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Extra content at line 1:%n" + "  [\"\"]%n"));
  }
  static String joinLines(  String... lines){
    return Arrays.stream(lines).collect(joining(System.lineSeparator()));
  }
}
