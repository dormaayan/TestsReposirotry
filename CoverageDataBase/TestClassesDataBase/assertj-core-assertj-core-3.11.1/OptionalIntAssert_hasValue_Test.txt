public class OptionalIntAssert_hasValue_Test extends BaseTest {
  @Test public void should_fail_when_OptionalInt_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((OptionalInt)null).hasValue(10)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_OptionalInt_has_expected_value(){
    assertThat(OptionalInt.of(10)).hasValue(10);
  }
  @Test public void should_fail_if_OptionalInt_does_not_have_expected_value(){
    OptionalInt actual=OptionalInt.of(5);
    int expectedValue=10;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).hasValue(expectedValue)).withMessage(shouldContain(actual,expectedValue).create());
  }
  @Test public void should_fail_if_OptionalInt_is_empty(){
    int expectedValue=10;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OptionalInt.empty()).hasValue(expectedValue)).withMessage(shouldContain(expectedValue).create());
  }
}
