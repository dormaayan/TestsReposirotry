/** 
 * Tests for <code> {@link Shorts#assertIsOne(AssertionInfo,Short)}</code>.
 * @author Drummond Dawson
 */
public class Shorts_assertIsOne_Test extends ShortsBaseTest {
  @Test public void should_succeed_since_actual_is_one(){
    shorts.assertIsOne(someInfo(),(short)1);
  }
  @Test public void should_fail_since_actual_is_not_one(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shorts.assertIsOne(someInfo(),(short)0)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
  @Test public void should_succeed_since_actual_is_not_one_whatever_custom_comparison_strategy_is(){
    shortsWithAbsValueComparisonStrategy.assertIsOne(someInfo(),(short)1);
  }
  @Test public void should_fail_since_actual_is_one_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shortsWithAbsValueComparisonStrategy.assertIsOne(someInfo(),(short)0)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
}
