public class ShouldHaveQuery_create_Test {
  @Test public void should_create_error_message_for_uri_has_query() throws Exception {
    URI uri=new URI("http://assertj.org/news?type=beta");
    String error=shouldHaveQuery(uri,"type=final").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting query of%n" + "  <http://assertj.org/news?type=beta>%n"+ "to be:%n"+ "  <\"type=final\">%n"+ "but was:%n"+ "  <\"type=beta\">"));
  }
  @Test public void should_create_error_message_for_url_has_query() throws Exception {
    URI uri=new URI("http://assertj.org/news?type=beta");
    String error=shouldHaveQuery(uri,"type=final").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting query of%n" + "  <http://assertj.org/news?type=beta>%n"+ "to be:%n"+ "  <\"type=final\">%n"+ "but was:%n"+ "  <\"type=beta\">"));
  }
  @Test public void should_create_error_message_for_uri_has_no_query() throws Exception {
    URI uri=new URI("http://assertj.org/news?type=beta");
    String error=shouldHaveQuery(uri,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org/news?type=beta>%n"+ "not to have a query but had:%n"+ "  <\"type=beta\">"));
  }
  @Test public void should_create_error_message_for_url_has_no_query() throws Exception {
    URL url=new URL("http://assertj.org/news?type=beta");
    String error=shouldHaveQuery(url,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org/news?type=beta>%n"+ "not to have a query but had:%n"+ "  <\"type=beta\">"));
  }
}
