/** 
 * Tests for <code> {@link ShouldNotContainCharSequence#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Alex Ruiz
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class ShouldNotContainString_create_Test {
  @Test public void should_create_error_message(){
    ErrorMessageFactory factory=shouldNotContain("Yoda","od",StandardComparisonStrategy.instance());
    String message=factory.create(new TextDescription("Test"),STANDARD_REPRESENTATION);
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <\"Yoda\">%n"+ "not to contain:%n"+ " <\"od\">%n"));
  }
  @Test public void should_create_error_message_with_custom_comparison_strategy(){
    ErrorMessageFactory factory=shouldNotContain("Yoda","od",new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance));
    String message=factory.create(new TextDescription("Test"),STANDARD_REPRESENTATION);
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <\"Yoda\">%n"+ "not to contain:%n"+ " <\"od\">%n"+ "when comparing values using CaseInsensitiveStringComparator"));
  }
  @Test public void should_create_error_message_with_several_string_values(){
    ErrorMessageFactory factory=shouldNotContain("Yoda",array("od","ya"),newSet("ya"),StandardComparisonStrategy.instance());
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <\"Yoda\">%n"+ "not to contain:%n"+ " <[\"od\", \"ya\"]>%n"+ "but found:%n"+ " <[\"ya\"]>%n"));
  }
}
