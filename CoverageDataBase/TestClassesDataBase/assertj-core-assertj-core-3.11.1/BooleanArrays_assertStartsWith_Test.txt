/** 
 * Tests for <code> {@link BooleanArrays#assertStartsWith(AssertionInfo,boolean[],boolean[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class BooleanArrays_assertStartsWith_Test extends BooleanArraysBaseTest {
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=emptyArray();
    arrays.assertContains(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),actual,emptyArray()));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertStartsWith(someInfo(),null,arrayOf(true))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_sequence_is_bigger_than_actual(){
    AssertionInfo info=someInfo();
    boolean[] sequence={true,false,false,true,true,false};
    try {
      arrays.assertStartsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_start_with_sequence(){
    AssertionInfo info=someInfo();
    boolean[] sequence={false,true};
    try {
      arrays.assertStartsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_starts_with_first_elements_of_sequence_only(){
    AssertionInfo info=someInfo();
    boolean[] sequence={true,true};
    try {
      arrays.assertStartsWith(info,actual,sequence);
    }
 catch (    AssertionError e) {
      verifyFailureThrownWhenSequenceNotFound(info,sequence);
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  private void verifyFailureThrownWhenSequenceNotFound(  AssertionInfo info,  boolean[] sequence){
    verify(failures).failure(info,shouldStartWith(actual,sequence));
  }
  @Test public void should_pass_if_actual_starts_with_sequence(){
    arrays.assertStartsWith(someInfo(),actual,arrayOf(true,false));
  }
  @Test public void should_pass_if_actual_and_sequence_are_equal(){
    actual=arrayOf(true,false,false,true);
    arrays.assertStartsWith(someInfo(),actual,arrayOf(true,false,false,true));
  }
}
