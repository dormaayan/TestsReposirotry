/** 
 * Tests for <code> {@link ObjectArrays#assertDoesNotContainSubsequence(AssertionInfo,Object[],Object[])} </code>.
 * @author Marcin Mikosik
 */
public class ObjectArrays_assertDoesNotContainSubsequence_Test extends ObjectArraysBaseTest {
  @Override protected void initActualArray(){
    actual=array("Yoda","Luke","Leia","Obi-Wan");
  }
  private void expectFailure(  ObjectArrays arrays,  Object[] actual,  Object[] subsequence,  int index){
    AssertionInfo info=someInfo();
    try {
      arrays.assertDoesNotContainSubsequence(info,actual,subsequence);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContainSubsequence(actual,subsequence,arrays.getComparisonStrategy(),index));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_sequence(){
    Object[] subsequence=array("Yoda","Leia");
    expectFailure(arrays,actual,subsequence,0);
  }
  @Test public void should_fail_if_actual_and_sequence_are_equal(){
    Object[] subsequence=array("Yoda","Luke","Leia","Obi-Wan");
    expectFailure(arrays,actual,subsequence,0);
  }
  @Test public void should_fail_if_actual_contains_full_sequence_even_if_partial_sequence_is_found_before(){
    actual=array("Yoda","Luke","Leia","Yoda","Luke","Obi-Wan");
    Object[] subsequence=array("Yoda","Luke","Obi-Wan");
    expectFailure(arrays,actual,subsequence,0);
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=new String[0];
    arrays.assertDoesNotContainSubsequence(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotContainSubsequence(someInfo(),null,array("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertDoesNotContainSubsequence(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotContainSubsequence(someInfo(),actual,emptyArray()));
  }
  @Test public void should_pass_if_subsequence_is_bigger_than_actual(){
    Object[] subsequence={"Luke","Leia","Obi-Wan","Han","C-3PO","R2-D2","Anakin"};
    arrays.assertDoesNotContainSubsequence(someInfo(),actual,subsequence);
  }
  @Test public void should_pass_if_actual_does_not_contain_whole_subsequence(){
    Object[] subsequence={"Han","C-3PO"};
    arrays.assertDoesNotContainSubsequence(someInfo(),actual,subsequence);
  }
  @Test public void should_pass_if_actual_contains_first_elements_of_subsequence(){
    Object[] subsequence={"Leia","Obi-Wan","Han"};
    arrays.assertDoesNotContainSubsequence(someInfo(),actual,subsequence);
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),null,array("YOda"))).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_subsequence_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),actual,emptyArray()));
  }
  @Test public void should_pass_if_sequence_is_bigger_than_actual_according_to_custom_comparison_strategy(){
    Object[] subsequence={"LUKE","LeiA","Obi-Wan","Han","C-3PO","R2-D2","Anakin"};
    arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),actual,subsequence);
  }
  @Test public void should_pass_if_actual_does_not_contain_whole_subsequence_according_to_custom_comparison_strategy(){
    Object[] sequence={"Han","C-3PO"};
    arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),actual,sequence);
  }
  @Test public void should_pass_if_actual_contains_first_elements_of_subsequence_according_to_custom_comparison_strategy(){
    Object[] sequence={"LeiA","Obi-Wan","Han"};
    arraysWithCustomComparisonStrategy.assertDoesNotContainSubsequence(someInfo(),actual,sequence);
  }
  @Test public void should_fail_if_actual_contains_sequence_according_to_custom_comparison_strategy(){
    Object[] subsequence=array("LUKE","LeiA");
    expectFailure(arraysWithCustomComparisonStrategy,actual,subsequence,1);
  }
  @Test public void should_fail_if_actual_and_sequence_are_equal_according_to_custom_comparison_strategy(){
    Object[] subsequence=array("YOda","LUKE","LeiA","Obi-WAn");
    expectFailure(arraysWithCustomComparisonStrategy,actual,subsequence,0);
  }
}
