public class Arrays_asObjectArray_Test {
  @ParameterizedTest @MethodSource("dataProvider") public void should_return_an_Object_array_corresponding_to_the_given_object(  Object arrayAsObject,  Object[] expected){
    assertThat(asObjectArray(arrayAsObject)).isEqualTo(expected);
  }
  public static Object[][] dataProvider(){
    return new Object[][]{{new String[0],array()},{new String[]{"a","b","c"},array("a","b","c")},{new int[]{1,2,3},array(1,2,3)}};
  }
  @ParameterizedTest @MethodSource("notArrays") public void should_throw_IllegalArgumentException_if_given_object_is_not_an_array(  final Object notArray,  final String error){
    Throwable throwable=arrayValuesCall(notArray);
    assertThat(throwable).isInstanceOf(IllegalArgumentException.class).hasMessage(error);
  }
  private static Throwable arrayValuesCall(  final Object actual){
    return catchThrowable(new ThrowingCallable(){
      @Override public void call() throws Exception {
        asObjectArray(actual);
      }
    }
);
  }
  public static Object[][] notArrays(){
    return new Object[][]{{null,"Given object null is not an array"},{"abc","Given object abc is not an array"},{123,"Given object 123 is not an array"}};
  }
}
