public class IterableAssert_filteredOn_predicate_Test extends IterableAssert_filtered_baseTest {
  private static Predicate<? super TolkienCharacter> nameStartingWithFro=hobbit -> hobbit.getName().startsWith("Fro");
  @Test public void should_filter_iterable_under_test_on_predicate(){
    assertThat(employees).filteredOn(employee -> employee.getAge() > 100).containsOnly(yoda,obiwan);
    assertThat(newHashSet(employees)).filteredOn(employee -> employee.getAge() > 100).containsOnly(yoda,obiwan);
  }
  @Test public void should_fail_if_given_predicate_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> {
      Predicate<? super Employee> predicate=null;
      assertThat(employees).filteredOn(predicate);
    }
).withMessage("The filter predicate should not be null");
  }
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOn(nameStartingWithFro).element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbits();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn(nameStartingWithFro).first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn(nameStartingWithFro).last().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOn(nameStartingWithFro).element(0).hasAge(33);
  }
  @Test public void should_keep_assertion_state(){
    Iterable<String> names=asList("John","Doe","Jane","Doe");
    IterableAssert<String> assertion=assertThat(names).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingElementComparator(CaseInsensitiveStringComparator.instance).filteredOn(string -> string.length() == 4).containsExactly("JOHN","JANE");
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
  }
}
