/** 
 * Tests for  {@link Files#linesOf(File,Charset)} and {@link Files#linesOf(File,String)}.
 * @author Mateusz Haligowski
 */
public class Files_linesOf_Test {
  private static final File SAMPLE_UNIX_FILE=new File("src/test/resources/utf8.txt");
  private static final File SAMPLE_WIN_FILE=new File("src/test/resources/utf8_win.txt");
  private static final File SAMPLE_MAC_FILE=new File("src/test/resources/utf8_mac.txt");
  private static final List<String> EXPECTED_CONTENT=newArrayList("A text file encoded in UTF-8, with diacritics:","é à");
  public static final String UTF_8="UTF-8";
  @Test public void should_throw_exception_when_charset_is_null(){
    Charset charset=null;
    assertThatNullPointerException().isThrownBy(() -> linesOf(SAMPLE_UNIX_FILE,charset));
  }
  @Test public void should_throw_exception_if_charset_name_does_not_exist(){
    assertThatIllegalArgumentException().isThrownBy(() -> linesOf(new File("test"),"Klingon"));
  }
  @Test public void should_throw_exception_if_file_not_found(){
    File missingFile=new File("missing.txt");
    assertThat(missingFile).doesNotExist();
    assertThatExceptionOfType(UncheckedIOException.class).isThrownBy(() -> linesOf(missingFile,Charset.defaultCharset()));
  }
  @Test public void should_pass_if_unix_file_is_split_into_lines(){
    assertThat(linesOf(SAMPLE_UNIX_FILE,StandardCharsets.UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
  @Test public void should_pass_if_unix_file_is_split_into_lines_using_charset(){
    assertThat(linesOf(SAMPLE_UNIX_FILE,UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
  @Test public void should_pass_if_windows_file_is_split_into_lines(){
    assertThat(linesOf(SAMPLE_WIN_FILE,StandardCharsets.UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
  @Test public void should_pass_if_windows_file_is_split_into_lines_using_charset(){
    assertThat(linesOf(SAMPLE_WIN_FILE,UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
  @Test public void should_pass_if_mac_file_is_split_into_lines(){
    assertThat(linesOf(SAMPLE_MAC_FILE,StandardCharsets.UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
  @Test public void should_pass_if_mac_file_is_split_into_lines_using_charset(){
    assertThat(linesOf(SAMPLE_MAC_FILE,UTF_8)).isEqualTo(EXPECTED_CONTENT);
  }
}
