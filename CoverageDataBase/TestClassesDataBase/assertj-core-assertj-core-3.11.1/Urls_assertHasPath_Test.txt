public class Urls_assertHasPath_Test extends UrlsBaseTest {
  @Test public void should_pass_if_actual_url_has_the_given_path() throws MalformedURLException {
    urls.assertHasPath(info,new URL("http://example.com/pages/"),"/pages/");
    urls.assertHasPath(info,new URL("http://example.com"),"");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> urls.assertHasPath(info,null,"path")).withMessage(actualIsNull());
  }
  @Test public void should_throw_an_exception_fail_if_given_path_is_null() throws MalformedURLException {
    assertThatIllegalArgumentException().isThrownBy(() -> urls.assertHasPath(info,new URL("http://example.com"),null)).withMessage("Expecting given path not to be null");
  }
  @Test public void should_fail_if_actual_URL_path_is_not_the_given_path() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com/pages/");
    String expectedPath="/news/";
    try {
      urls.assertHasPath(info,url,expectedPath);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHavePath(url,expectedPath));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_URL_has_no_path_and_the_given_path_is_not_null() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com");
    String expectedPath="/news";
    try {
      urls.assertHasPath(info,url,expectedPath);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHavePath(url,expectedPath));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
