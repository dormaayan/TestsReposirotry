/** 
 * Tests for <code> {@link ShouldContainSequenceOfCharSequence#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Billy Yuan
 */
public class ShouldContainSequenceOfCharSequence_create_Test {
  private ErrorMessageFactory factory;
  @Test public void should_create_error_message(){
    String[] sequenceValues={"{","author","title","}"};
    String actual="{ 'title':'A Game of Thrones', 'author':'George Martin'}";
    factory=shouldContainSequence(actual,sequenceValues);
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %nExpecting:%n" + "  <\"{ 'title':'A Game of Thrones', 'author':'George Martin'}\">%n" + "to contain sequence:%n"+ "  <[\"{\", \"author\", \"title\", \"}\"]>%n"));
  }
  @Test public void should_create_error_message_with_custom_comparison_strategy(){
    String[] sequenceValues={"{","author","title","}"};
    String actual="{ 'title':'A Game of Thrones', 'author':'George Martin'}";
    factory=shouldContainSequence(actual,sequenceValues,new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %nExpecting:%n" + "  <\"{ 'title':'A Game of Thrones', 'author':'George Martin'}\">%n" + "to contain sequence:%n"+ "  <[\"{\", \"author\", \"title\", \"}\"]>%n"+ "when comparing values using CaseInsensitiveStringComparator"));
  }
}
