/** 
 * Tests for  {@link ComparatorBasedComparisonStrategy#iterableRemoves(Iterable,Object)}.
 * @author Joel Costigliola
 */
public class ComparatorBasedComparisonStrategy_iterableRemove_Test extends AbstractTest_ComparatorBasedComparisonStrategy {
  @Test public void should_remove_value_from_collections_since_it_matches_one_collections_element_according_to_given_comparator(){
    List<String> hobbits=newArrayList("Merry","Frodo",null,"Merry","Sam");
    assertThat(caseInsensitiveComparisonStrategy.iterableContains(hobbits,"SAM")).isTrue();
    caseInsensitiveComparisonStrategy.iterableRemoves(hobbits,"Sam");
    assertThat(caseInsensitiveComparisonStrategy.iterableContains(hobbits,"SAM")).isFalse();
    caseInsensitiveComparisonStrategy.iterableRemoves(hobbits,null);
    assertThat(caseInsensitiveComparisonStrategy.iterableContains(hobbits,null)).isFalse();
  }
  @Test public void should_not_remove_value_from_collections_since_it_does_not_match_any_collections_elements_according_to_given_comparator(){
    List<String> hobbits=newArrayList("Merry","Frodo",null,"Merry","Sam");
    assertThat(caseInsensitiveComparisonStrategy.iterableContains(hobbits,"SAM")).isTrue();
    caseInsensitiveComparisonStrategy.iterableRemoves(hobbits,"SAM ");
    assertThat(caseInsensitiveComparisonStrategy.iterableContains(hobbits,"SAM")).isTrue();
  }
  @Test public void should_not_fail_if_collections_is_empty_or_null(){
    List<String> hobbits=newArrayList();
    caseInsensitiveComparisonStrategy.iterableRemoves(hobbits,"SAM");
    caseInsensitiveComparisonStrategy.iterableRemoves(null,"SAM ");
  }
}
