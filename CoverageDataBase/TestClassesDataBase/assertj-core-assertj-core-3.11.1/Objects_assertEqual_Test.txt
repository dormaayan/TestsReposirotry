/** 
 * Tests for <code> {@link Objects#assertEqual(AssertionInfo,Object,Object)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Objects_assertEqual_Test extends ObjectsBaseTest {
  private static final Objects OBJECTS_WITH_ALWAY_EQUALS_COMPARATOR=new Objects(new ComparatorBasedComparisonStrategy(ALWAY_EQUALS));
  @Test public void should_pass_if_objects_are_equal(){
    objects.assertEqual(someInfo(),"Yoda","Yoda");
  }
  @Test public void should_fail_if_objects_are_not_equal(){
    AssertionInfo info=someInfo();
    try {
      objects.assertEqual(info,"Luke","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual("Luke","Yoda",info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_objects_are_equal_according_to_custom_comparison_strategy(){
    objectsWithCustomComparisonStrategy.assertEqual(someInfo(),"Yoda","YODA");
  }
  @ParameterizedTest @CsvSource({"foo, bar","null, foo","null, bar","null, null"}) public void should_not_check_actual_or_expected_before_applying_a_custom_comparator(  String actual,  String expected){
    OBJECTS_WITH_ALWAY_EQUALS_COMPARATOR.assertEqual(someInfo(),actual,expected);
  }
  @Test public void should_fail_if_objects_are_not_equal_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      objectsWithCustomComparisonStrategy.assertEqual(info,"Luke","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual("Luke","Yoda",customComparisonStrategy,STANDARD_REPRESENTATION));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_with_my_exception_if_compared_with_null(){
    try {
      objects.assertEqual(someInfo(),new MyObject(),null);
    }
 catch (    MyObject.NullEqualsException e) {
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_with_my_exception_if_compared_with_other_object(){
    try {
      objects.assertEqual(someInfo(),new MyObject(),"Yoda");
    }
 catch (    MyObject.DifferentClassesException e) {
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
private static class MyObject {
    private final int anInt=0;
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (o == null)       throw new NullEqualsException();
      if (getClass() != o.getClass())       throw new DifferentClassesException();
      MyObject myObject=(MyObject)o;
      if (anInt != myObject.anInt)       return false;
      return true;
    }
private class NullEqualsException extends RuntimeException {
      private static final long serialVersionUID=6906581676690444515L;
    }
private class DifferentClassesException extends RuntimeException {
      private static final long serialVersionUID=-7330747471795712311L;
    }
  }
}
