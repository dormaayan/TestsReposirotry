public class BigIntegers_assertIsNotCloseToPercentage_Test extends BigIntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertIsNotCloseToPercentage(someInfo(),null,ONE,withPercentage(1))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatNullPointerException().isThrownBy(() -> numbers.assertIsNotCloseToPercentage(someInfo(),ONE,null,withPercentage(1)));
  }
  @Test public void should_fail_if_percentage_is_null(){
    assertThatNullPointerException().isThrownBy(() -> numbers.assertIsNotCloseToPercentage(someInfo(),ONE,ZERO,null));
  }
  @Test public void should_fail_if_percentage_is_negative(){
    assertThatIllegalArgumentException().isThrownBy(() -> numbers.assertIsNotCloseToPercentage(someInfo(),ONE,ZERO,withPercentage(-1)));
  }
  @ParameterizedTest @CsvSource({"1, 2, 1","1, 11, 90","-1, -2, 1","-1, -11, 90","0, -1, 99"}) public void should_pass_if_difference_is_greater_than_given_percentage(  BigInteger actual,  BigInteger other,  Integer percentage){
    numbers.assertIsNotCloseToPercentage(someInfo(),actual,other,withPercentage(percentage));
  }
  @ParameterizedTest @CsvSource({"1, 1, 0","2, 1, 100","1, 2, 50","-1, -1, 0","-2, -1, 100","-1, -2, 50"}) public void should_fail_if_difference_is_equal_to_given_percentage(  BigInteger actual,  BigInteger other,  Integer percentage){
    AssertionInfo info=someInfo();
    try {
      numbers.assertIsNotCloseToPercentage(info,actual,other,withPercentage(percentage));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqualWithinPercentage(actual,other,withinPercentage(percentage),actual.subtract(other).abs()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_close_enough_to_expected_value(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertIsNotCloseToPercentage(someInfo(),ONE,TEN,withPercentage(100));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqualWithinPercentage(ONE,TEN,withinPercentage(100),TEN.subtract(ONE)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
