public class OptionalAssert_hasValueSatisfying_Test extends BaseTest {
  @Test public void should_fail_when_optional_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThat((Optional<String>)null).hasValueSatisfying(s -> {
        ;
      }
);
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_optional_is_empty(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThat(Optional.empty()).hasValueSatisfying(o -> {
        ;
      }
);
    }
).withMessage(shouldBePresent(Optional.empty()).create());
  }
  @Test public void should_pass_when_consumer_passes(){
    assertThat(Optional.of("something")).hasValueSatisfying(s -> assertThat(s).isEqualTo("something").startsWith("some").endsWith("thing"));
    assertThat(Optional.of(10)).hasValueSatisfying(i -> assertThat(i).isGreaterThan(9));
  }
  @Test public void should_fail_from_consumer(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThat(Optional.of("something else")).hasValueSatisfying(s -> assertThat(s).isEqualTo("something"));
    }
).withMessage(format("%nExpecting:%n <\"something else\">%nto be equal to:%n <\"something\">%nbut was not."));
  }
}
