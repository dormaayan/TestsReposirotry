/** 
 * Tests for <code> {@link Comparables#assertNotEqualByComparison(AssertionInfo,Comparable,Comparable)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Comparables_assertNotEqualByComparison_Test extends ComparablesBaseTest {
  @Override protected Comparator<?> comparatorForCustomComparisonStrategy(){
    return new PersonCaseInsensitiveNameComparator();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> comparables.assertNotEqualByComparison(someInfo(),null,8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_objects_are_not_equal(){
    Person a=spy(new Person("Han"));
    Person o=new Person("Yoda");
    comparables.assertNotEqualByComparison(someInfo(),a,o);
    verify(a).compareTo(o);
  }
  @Test public void should_fail_if_objects_are_equal(){
    AssertionInfo info=someInfo();
    try {
      comparables.assertNotEqualByComparison(info,"Yoda","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual("Yoda","Yoda"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> comparablesWithCustomComparisonStrategy.assertNotEqualByComparison(someInfo(),null,new Person("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_objects_are_not_equal_whatever_custom_comparison_strategy_is(){
    Person actual=spy(new Person("YODA"));
    Person other=new Person("Yoda");
    comparablesWithCustomComparisonStrategy.assertNotEqualByComparison(someInfo(),actual,other);
    verify(actual).compareTo(other);
  }
  @Test public void should_fail_if_objects_are_equal_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      comparablesWithCustomComparisonStrategy.assertNotEqualByComparison(info,new Person("Yoda"),new Person("Yoda"));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(new Person("Yoda"),new Person("Yoda")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
