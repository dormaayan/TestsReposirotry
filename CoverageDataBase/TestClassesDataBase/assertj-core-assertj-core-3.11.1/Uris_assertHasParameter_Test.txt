public class Uris_assertHasParameter_Test extends UrisBaseTest {
  @Test public void should_fail_if_parameter_is_missing() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news");
    String name="article";
    try {
      uris.assertHasParameter(info,uri,name);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_parameter_has_no_value() throws URISyntaxException {
    uris.assertHasParameter(info,new URI("http://assertj.org/news?article"),"article");
  }
  @Test public void should_pass_if_parameter_has_value() throws URISyntaxException {
    uris.assertHasParameter(info,new URI("http://assertj.org/news?article=10"),"article");
  }
  @Test public void should_fail_if_parameter_without_value_is_missing() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news");
    String name="article";
    String expectedValue=null;
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_parameter_without_value_is_found() throws URISyntaxException {
    uris.assertHasParameter(info,new URI("http://assertj.org/news?article"),"article",null);
  }
  @Test public void should_fail_if_parameter_without_value_has_value() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=11");
    String name="article";
    String expectedValue=null;
    List<String> actualValue=newArrayList("11");
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue,actualValue));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_without_value_has_multiple_values() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=11&article=12");
    String name="article";
    String expectedValue=null;
    List<String> actualValues=newArrayList("11","12");
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_with_value_is_missing() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news");
    String name="article";
    String expectedValue="10";
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_with_value_has_no_value() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article");
    String name="article";
    String expectedValue="10";
    List<String> actualValues=newArrayList((String)null);
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_with_value_has_multiple_no_values() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article&article");
    String name="article";
    String expectedValue="10";
    List<String> actualValues=newArrayList(null,null);
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_parameter_with_value_is_wrong() throws URISyntaxException {
    URI uri=new URI("http://assertj.org/news?article=11");
    String name="article";
    String expectedValue="10";
    List<String> actualValues=newArrayList("11");
    try {
      uris.assertHasParameter(info,uri,name,expectedValue);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveParameter(uri,name,expectedValue,actualValues));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_parameter_with_value_is_found() throws URISyntaxException {
    uris.assertHasParameter(info,new URI("http://assertj.org/news?article=10"),"article","10");
  }
}
