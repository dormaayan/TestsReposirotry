public class CompletableFutureAssert_hasFailedWithThrowableThat_Test extends BaseTest {
  @Test public void should_pass_if_completable_future_has_failed(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.completeExceptionally(new RuntimeException("some random error"));
    assertThat(future).hasFailedWithThrowableThat().isInstanceOf(RuntimeException.class).hasMessage("some random error");
  }
  @Test public void should_fail_when_completable_future_is_null(){
    assertThatThrownBy(() -> assertThat((CompletableFuture<String>)null).hasFailedWithThrowableThat()).isInstanceOf(AssertionError.class).hasMessage(format(actualIsNull()));
  }
  @Test public void should_fail_if_completable_future_has_failed_with_wrong_throwable(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.completeExceptionally(new RuntimeException("some random error"));
    assertThatThrownBy(() -> assertThat(future).hasFailedWithThrowableThat().isInstanceOf(IllegalArgumentException.class)).isInstanceOf(AssertionError.class).hasMessageContaining(format("%nExpecting:%n" + "  <java.lang.RuntimeException: some random error>%n" + "to be an instance of:%n"+ "  <java.lang.IllegalArgumentException>%n"));
  }
  @Test public void should_fail_if_completable_future_is_incomplete(){
    CompletableFuture<String> future=new CompletableFuture<>();
    assertThatThrownBy(() -> assertThat(future).hasFailedWithThrowableThat()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
  @Test public void should_fail_if_completable_future_is_completed(){
    CompletableFuture<String> future=CompletableFuture.completedFuture("done");
    assertThatThrownBy(() -> assertThat(future).hasFailedWithThrowableThat()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
  @Test public void should_fail_if_completable_future_was_cancelled(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.cancel(true);
    assertThatThrownBy(() -> assertThat(future).hasFailedWithThrowableThat()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
}
