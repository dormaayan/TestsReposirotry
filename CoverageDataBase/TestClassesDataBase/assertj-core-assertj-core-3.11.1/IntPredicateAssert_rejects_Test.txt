/** 
 * @author Filip Hrisafov
 */
public class IntPredicateAssert_rejects_Test extends IntPredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((IntPredicate)null).rejects(3,4,5)).withMessage(actualIsNull());
  }
  @Test public void should_pass_when_predicate_does_not_accept_value(){
    IntPredicate predicate=val -> val <= 2;
    assertThat(predicate).rejects(3);
  }
  @Test public void should_fail_when_predicate_accepts_value(){
    IntPredicate predicate=val -> val <= 2;
    Predicate<Integer> wrapPredicate=predicate::test;
    int expectedValue=2;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(expectedValue)).withMessage(shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_value_with_string_description(){
    IntPredicate predicate=val -> val <= 2;
    Predicate<Integer> wrapPredicate=predicate::test;
    int expectedValue=2;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).as("test").rejects(expectedValue)).withMessage("[test] " + shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_some_value(){
    IntPredicate predicate=num -> num <= 2;
    int[] matchValues=new int[]{1,2,3};
    List<Integer> matchValuesList=IntStream.of(matchValues).boxed().collect(Collectors.toList());
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(matchValues)).withMessage(noElementsShouldMatch(matchValuesList,1,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_no_value(){
    IntPredicate predicate=num -> num <= 2;
    assertThat(predicate).rejects(3,4,5);
  }
  @Override protected IntPredicateAssert invoke_api_method(){
    return assertions.rejects(3,4);
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertNoneMatch(getInfo(assertions),newArrayList(3,4),wrapped,PredicateDescription.GIVEN);
  }
}
