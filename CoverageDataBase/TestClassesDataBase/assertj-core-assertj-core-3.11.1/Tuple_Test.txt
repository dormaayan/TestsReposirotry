public class Tuple_Test {
  @Test public void should_create_tuple(){
    Tuple tuple=new Tuple("Yoda",800,"Jedi");
    assertThat(tuple).isEqualTo(new Tuple("Yoda",800,"Jedi"));
  }
  @Test public void tuple_equal_should_support_primitive_array(){
    Tuple tuple=new Tuple("1".getBytes(),"Name");
    assertThat(tuple).isEqualTo(new Tuple("1".getBytes(),"Name"));
  }
  @Test public void should_create_empty_tuple(){
    Tuple tuple=new Tuple();
    assertThat(tuple).isEqualTo(new Tuple());
  }
  @Test public void convert_tuple_to_an_array(){
    Tuple tuple=new Tuple("Yoda",800,"Jedi");
    assertThat(tuple.toArray()).isEqualTo(array("Yoda",800,"Jedi"));
  }
  @Test public void convert_tuple_to_a_list(){
    Tuple tuple=new Tuple("Yoda",800,"Jedi");
    assertThat(tuple.toList()).isEqualTo(newArrayList("Yoda",800,"Jedi"));
  }
  @Test public void tuple_representation(){
    Tuple tuple=new Tuple("Yoda",800,"Jedi");
    assertThat(tuple).hasToString("(\"Yoda\", 800, \"Jedi\")");
  }
  @Test public void test_for_issue_448(){
    SinteticClass item1=new SinteticClass("1".getBytes(),"Foo");
    SinteticClass item2=new SinteticClass("2".getBytes(),"Bar");
    SinteticClass item3=new SinteticClass("3".getBytes(),"Baz");
    List<SinteticClass> list=asList(item1,item2,item3);
    assertThat(list).extracting("pk","name").contains(tuple("1".getBytes(),"Foo"),tuple("2".getBytes(),"Bar"),tuple("3".getBytes(),"Baz"));
    assertThat(list).extracting("pk","name").contains(tuple("1".getBytes(),"Foo")).contains(tuple("2".getBytes(),"Bar")).contains(tuple("3".getBytes(),"Baz"));
  }
}
