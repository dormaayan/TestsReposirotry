/** 
 * Tests for <code> {@link DoubleArrays#assertContainsOnlyOnce(AssertionInfo,double[],double[])}</code>.
 * @author William Delanoue
 */
public class DoubleArrays_assertContainsOnlyOnce_Test extends DoubleArraysBaseTest {
  @Test public void should_pass_if_actual_contains_given_values_only(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,arrayOf(6,8,10));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,arrayOf(10,8,6));
  }
  @Test public void should_fail_if_actual_contains_given_values_only_more_than_once(){
    actual=arrayOf(6,-8,10,-6,-8,10,-8,6);
    double[] expected={6,-8,20};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,expected)).withMessage(format(shouldContainsOnlyOnce(actual,expected,newLinkedHashSet((double)20),newLinkedHashSet((double)6,(double)-8)).create()));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated(){
    arrays.assertContainsOnlyOnce(someInfo(),actual,arrayOf(6,8,10,6,8,10));
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    actual=emptyArray();
    arrays.assertContainsOnlyOnce(someInfo(),actual,emptyArray());
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),null,arrayOf(8))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_only(){
    double[] expected={6,8,20};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyOnce(someInfo(),actual,expected)).withMessage(shouldContainsOnlyOnce(actual,expected,newLinkedHashSet((double)20),newLinkedHashSet()).create());
  }
  @Test public void should_pass_if_actual_contains_given_values_only_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,arrayOf(6,-8,10));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_in_different_order_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,arrayOf(10,-8,6));
  }
  @Test public void should_fail_if_actual_contains_given_values_only_more_than_once_according_to_custom_comparison_strategy(){
    actual=arrayOf(6,-8,10,-6,-8,10,-8);
    double[] expected={6,-8,20};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,expected)).withMessage(format(shouldContainsOnlyOnce(actual,expected,newLinkedHashSet((double)20),newLinkedHashSet((double)6,(double)-8),absValueComparisonStrategy).create()));
  }
  @Test public void should_pass_if_actual_contains_given_values_only_even_if_duplicated_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,arrayOf(6,8,10,6,-8,10));
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),null,arrayOf(-8))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_only_according_to_custom_comparison_strategy(){
    double[] expected={6,-8,20};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsOnlyOnce(someInfo(),actual,expected)).withMessage(format(shouldContainsOnlyOnce(actual,expected,newLinkedHashSet((double)20),newLinkedHashSet(),absValueComparisonStrategy).create()));
  }
}
