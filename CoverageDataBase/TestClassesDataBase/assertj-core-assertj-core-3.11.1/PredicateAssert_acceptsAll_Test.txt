/** 
 * @author Filip Hrisafov
 */
public class PredicateAssert_acceptsAll_Test extends PredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((Predicate<String>)null).acceptsAll(newArrayList("first","second"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_predicate_does_not_accept_values(){
    Predicate<String> ballSportPredicate=sport -> sport.contains("ball");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(ballSportPredicate).acceptsAll(newArrayList("football","basketball","curling"))).withMessage(elementsShouldMatch(newArrayList("football","basketball","curling"),"curling",PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_all_values(){
    Predicate<String> ballSportPredicate=sport -> sport.contains("ball");
    assertThat(ballSportPredicate).acceptsAll(newArrayList("football","basketball","handball"));
  }
  @Override protected PredicateAssert<Boolean> invoke_api_method(){
    return assertions.acceptsAll(newArrayList(true,true));
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertAllMatch(getInfo(assertions),newArrayList(true,true),getActual(assertions),PredicateDescription.GIVEN);
  }
}
