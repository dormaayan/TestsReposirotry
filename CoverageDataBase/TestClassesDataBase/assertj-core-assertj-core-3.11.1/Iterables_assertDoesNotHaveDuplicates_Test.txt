/** 
 * Tests for <code> {@link Iterables#assertDoesNotHaveDuplicates(AssertionInfo,Collection)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Iterables_assertDoesNotHaveDuplicates_Test extends IterablesBaseTest {
  private static final int GENERATED_OBJECTS_NUMBER=50000;
  private final List<String> actual=newArrayList("Luke","Yoda","Leia");
  @Test public void should_pass_if_actual_does_not_have_duplicates(){
    iterables.assertDoesNotHaveDuplicates(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_is_empty(){
    iterables.assertDoesNotHaveDuplicates(someInfo(),emptyList());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterables.assertDoesNotHaveDuplicates(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_duplicates(){
    AssertionInfo info=someInfo();
    Collection<String> duplicates=newLinkedHashSet("Luke","Yoda");
    actual.addAll(duplicates);
    try {
      iterables.assertDoesNotHaveDuplicates(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotHaveDuplicates(actual,duplicates));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_within_time_constraints(){
    List<UUID> generated=Stream.generate(UUID::randomUUID).limit(GENERATED_OBJECTS_NUMBER).collect(toList());
    long time=System.currentTimeMillis();
    iterables.assertDoesNotHaveDuplicates(someInfo(),generated);
    System.out.println("Time elapsed in ms for assertDoesNotHaveDuplicates : " + (System.currentTimeMillis() - time));
    assertThat((System.currentTimeMillis() - time)).isLessThan(2000);
  }
  @Test public void should_fail_if_actual_contains_duplicates_array(){
    Collection<String[]> actual=newArrayList(array("Luke","Yoda"),array("Luke","Yoda"));
    try {
      iterables.assertDoesNotHaveDuplicates(someInfo(),actual);
    }
 catch (    AssertionError e) {
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_does_not_have_duplicates_according_to_custom_comparison_strategy(){
    iterablesWithCaseInsensitiveComparisonStrategy.assertDoesNotHaveDuplicates(someInfo(),actual);
  }
  @Test public void should_fail_if_actual_contains_duplicates_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Collection<String> duplicates=newLinkedHashSet("LUKE","yoda");
    actual.addAll(duplicates);
    try {
      iterablesWithCaseInsensitiveComparisonStrategy.assertDoesNotHaveDuplicates(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotHaveDuplicates(actual,duplicates,comparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_within_time_constraints_with_custom_comparison_strategy(){
    List<String> generated=Stream.generate(() -> UUID.randomUUID().toString()).limit(GENERATED_OBJECTS_NUMBER).collect(toList());
    long time=System.currentTimeMillis();
    iterablesWithCaseInsensitiveComparisonStrategy.assertDoesNotHaveDuplicates(someInfo(),generated);
    System.out.println("Time elapsed in ms for assertDoesNotHaveDuplicates with custom comparison strategy : " + (System.currentTimeMillis() - time));
    assertThat((System.currentTimeMillis() - time)).isLessThan(10000);
  }
}
