/** 
 * Tests for <code> {@link BasicErrorMessageFactory#create(Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Yvonne Wang
 */
public class BasicErrorMessageFactory_create_Test {
  private MessageFormatter formatter;
  private BasicErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    formatter=mock(MessageFormatter.class);
    factory=new BasicErrorMessageFactory("Hello %s","Yoda");
    factory.formatter=formatter;
  }
  @Test public void should_implement_toString(){
    Description description=new TestDescription("Test");
    Representation representation=new StandardRepresentation();
    String formattedMessage="[Test] Hello Yoda";
    when(formatter.format(description,representation,"Hello %s","Yoda")).thenReturn(formattedMessage);
    assertThat(factory.create(description,representation)).isEqualTo(formattedMessage);
  }
  @Test public void should_create_error_with_configured_representation(){
    Description description=new TestDescription("Test");
    String formattedMessage="[Test] Hello Yoda";
    when(formatter.format(eq(description),same(CONFIGURATION_PROVIDER.representation()),eq("Hello %s"),eq("Yoda"))).thenReturn(formattedMessage);
    assertThat(factory.create(description)).isEqualTo(formattedMessage);
  }
  @Test public void should_create_error_with_empty_description_and_configured_representation(){
    Description description=emptyDescription();
    String formattedMessage="[] Hello Yoda";
    when(formatter.format(eq(description),same(CONFIGURATION_PROVIDER.representation()),eq("Hello %s"),eq("Yoda"))).thenReturn(formattedMessage);
    assertThat(factory.create()).isEqualTo(formattedMessage);
  }
}
