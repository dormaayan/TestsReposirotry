/** 
 * Tests for <code> {@link BigIntegers#assertLessThanOrEqualTo(AssertionInfo,BigInteger,BigInteger)}</code>.
 */
public class BigIntegers_assertLessThanOrEqualTo_Test extends BigIntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertLessThanOrEqualTo(someInfo(),null,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_less_than_other(){
    numbers.assertLessThanOrEqualTo(someInfo(),ONE,TEN);
  }
  @Test public void should_pass_if_actual_is_equal_to_other(){
    numbers.assertLessThanOrEqualTo(someInfo(),ONE,ONE);
  }
  @Test public void should_pass_if_actual_is_equal_to_other_by_comparison(){
    numbers.assertLessThanOrEqualTo(someInfo(),ONE,new BigInteger("1"));
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertLessThanOrEqualTo(info,TEN,ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLessOrEqual(TEN,ONE));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    numbersWithAbsValueComparisonStrategy.assertLessThanOrEqualTo(someInfo(),ONE,TEN.negate());
  }
  @Test public void should_pass_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    numbersWithAbsValueComparisonStrategy.assertLessThanOrEqualTo(someInfo(),ONE.negate(),ONE);
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertLessThanOrEqualTo(info,TEN.negate(),ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLessOrEqual(TEN.negate(),ONE,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
