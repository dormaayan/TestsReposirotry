/** 
 * Tests specific to  {@link org.assertj.core.api.ZonedDateTimeAssert#isNotEqualTo(ZonedDateTime)} that can't bedone in  {@link org.assertj.core.api.AbstractAssert#isNotEqualTo(Object)} tests.
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class ZonedDateTimeAssert_isNotEqualTo_Test extends ZonedDateTimeAssertBaseTest {
  @Test public void isNotEqualTo_should_compare_datetimes_in_actual_timezone(){
    ZonedDateTime utcDateTime=ZonedDateTime.of(2013,6,10,2,0,0,0,ZoneOffset.UTC);
    ZoneId cestTimeZone=ZoneId.of("Europe/Berlin");
    ZonedDateTime cestDateTime=ZonedDateTime.of(2013,6,10,2,0,0,0,cestTimeZone);
    assertThat(utcDateTime).as("in UTC time zone").isNotEqualTo(cestDateTime);
    assertThat(cestDateTime).as("in CEST time zone").isNotEqualTo(utcDateTime);
  }
  @Test public void should_pass_if_actual_dateTime_is_null_and_expected_dateTime_as_string_is_not(){
    assertThat((ZonedDateTime)null).isNotEqualTo("2000-01-01T01:00:00+01:00");
  }
  @Test public void should_pass_if_actual_dateTime_is_null_and_expected_dateTime_is_not(){
    assertThat((ZonedDateTime)null).isNotEqualTo(ZonedDateTime.now());
  }
  @Test public void should_pass_if_dateTime_as_ZoneDateTime_is_null(){
    assertThat(ZonedDateTime.now()).isNotEqualTo((ZonedDateTime)null);
  }
}
