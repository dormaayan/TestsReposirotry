/** 
 * Tests for <code> {@link Characters#assertLowerCase(AssertionInfo,Character)}</code>.
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class Characters_assertLowerCase_Test extends CharactersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> characters.assertLowerCase(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_lowercase(){
    characters.assertLowerCase(someInfo(),'a');
  }
  @Test public void should_fail_if_actual_is_not_lowercase(){
    AssertionInfo info=someInfo();
    try {
      characters.assertLowerCase(info,'A');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLowerCase('A'));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> charactersWithCaseInsensitiveComparisonStrategy.assertLowerCase(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_lowercase_whatever_custom_comparison_strategy_is(){
    charactersWithCaseInsensitiveComparisonStrategy.assertLowerCase(someInfo(),'a');
  }
  @Test public void should_fail_if_actual_is_not_lowercase_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      charactersWithCaseInsensitiveComparisonStrategy.assertLowerCase(info,'A');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLowerCase('A'));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
