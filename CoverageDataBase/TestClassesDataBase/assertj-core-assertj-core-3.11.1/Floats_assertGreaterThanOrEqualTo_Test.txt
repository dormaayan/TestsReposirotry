/** 
 * Tests for <code> {@link Floats#assertGreaterThanOrEqualTo(AssertionInfo,Float,float)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Floats_assertGreaterThanOrEqualTo_Test extends FloatsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> floats.assertGreaterThanOrEqualTo(someInfo(),null,8f)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    floats.assertGreaterThanOrEqualTo(someInfo(),8f,6f);
  }
  @Test public void should_pass_if_actual_is_equal_to_other(){
    floats.assertGreaterThanOrEqualTo(someInfo(),6f,6f);
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      floats.assertGreaterThanOrEqualTo(info,6f,8f);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreaterOrEqual(6f,8f));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),null,8f)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),-8f,6f);
    floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),8f,6f);
  }
  @Test public void should_pass_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),-6f,6f);
    floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(someInfo(),6f,6f);
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      floatsWithAbsValueComparisonStrategy.assertGreaterThanOrEqualTo(info,6f,-8f);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreaterOrEqual(6f,-8f,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
