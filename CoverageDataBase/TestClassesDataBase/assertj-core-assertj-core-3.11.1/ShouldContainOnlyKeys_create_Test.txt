/** 
 * Tests for <code> {@link ShouldContainOnlyKeys#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code> .
 * @author Joel Costigliola.
 */
public class ShouldContainOnlyKeys_create_Test {
  @Test public void should_create_error_message(){
    ErrorMessageFactory factory=shouldContainOnlyKeys(mapOf(entry("name","Yoda"),entry("color","green")),newArrayList("jedi","color"),newLinkedHashSet("jedi"),newLinkedHashSet("name"));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting:%n" + "  <{\"color\"=\"green\", \"name\"=\"Yoda\"}>%n"+ "to contain only following keys:%n"+ "  <[\"jedi\", \"color\"]>%n"+ "keys not found:%n"+ "  <[\"jedi\"]>%n"+ "and keys not expected:%n"+ "  <[\"name\"]>%n"));
  }
  @Test public void should_not_display_unexpected_elements_when_there_are_none(){
    ErrorMessageFactory factory=shouldContainOnlyKeys(mapOf(entry("color","green")),newArrayList("jedi","color"),newLinkedHashSet("jedi"),Collections.emptySet());
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting:%n" + "  <{\"color\"=\"green\"}>%n"+ "to contain only following keys:%n"+ "  <[\"jedi\", \"color\"]>%n"+ "but could not find the following keys:%n"+ "  <[\"jedi\"]>%n"));
  }
}
