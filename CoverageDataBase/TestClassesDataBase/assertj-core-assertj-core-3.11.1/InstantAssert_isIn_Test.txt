public class InstantAssert_isIn_Test extends InstantAssertBaseTest {
  @Test public void test_isIn_assertion(){
    assertThat(REFERENCE).isIn(REFERENCE.toString(),REFERENCE.plusSeconds(1).toString());
    assertThatThrownBy(() -> assertThat(REFERENCE).isIn(REFERENCE.plusSeconds(1).toString(),REFERENCE.plusSeconds(2).toString())).isInstanceOf(AssertionError.class);
  }
  @Test public void test_isIn_assertion_error_message(){
    Instant instantReference=Instant.parse("2007-12-03T10:15:30.00Z");
    Instant instantAfter=Instant.parse("2007-12-03T10:15:35.00Z");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(instantReference).isIn(instantAfter.toString())).withMessage(format("%nExpecting:%n <2007-12-03T10:15:30Z>%nto be in:%n <[2007-12-03T10:15:35Z]>%n"));
  }
  @Test public void should_fail_if_dates_as_string_array_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isIn((String[])null)).withMessage("The given Instant array should not be null");
  }
  @Test public void should_fail_if_dates_as_string_array_parameter_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isIn(new String[0])).withMessage("The given Instant array should not be empty");
  }
}
