/** 
 * Tests for <code> {@link Digests#digestDiff(InputStream,MessageDigest,byte[])}</code>.
 * @author Valeriy Vyrva
 */
public class Digests_digestDiff_Test extends DigestsBaseTest {
  private InputStream stream;
  private MessageDigest digest;
  private byte[] expected=new byte[]{0,1};
  @BeforeEach public void init(){
    stream=mock(InputStream.class);
    digest=mock(MessageDigest.class);
  }
  @Test public void should_fail_if_stream_is_null() throws IOException {
    assertThatNullPointerException().isThrownBy(() -> digestDiff(null,null,null)).withMessage("The stream should not be null");
  }
  @Test public void should_fail_if_digest_is_null() throws IOException {
    assertThatNullPointerException().isThrownBy(() -> digestDiff(stream,null,null)).withMessage("The digest should not be null");
  }
  @Test public void should_fail_if_expected_is_null() throws IOException {
    assertThatNullPointerException().isThrownBy(() -> digestDiff(stream,digest,null)).withMessage("The expected should not be null");
  }
  @Test public void should_pass_if_stream_is_readable() throws IOException {
    given(digest.digest()).willReturn(expected);
    digestDiff(stream,digest,expected);
  }
  @Test public void should_pass_if_digest_is_MD5() throws IOException, NoSuchAlgorithmException {
    InputStream inputStream=getClass().getResourceAsStream("/red.png");
    DigestDiff diff=digestDiff(inputStream,MessageDigest.getInstance("MD5"),EXPECTED_MD5_DIGEST);
    assertThat(diff.digestsDiffer()).isFalse();
  }
  @Test public void should_pass_if_digest_is_MD5_and_updated() throws IOException, NoSuchAlgorithmException {
    InputStream inputStream=getClass().getResourceAsStream("/red.png");
    MessageDigest digest=MessageDigest.getInstance("MD5");
    digest.update(expected);
    DigestDiff diff=digestDiff(inputStream,digest,EXPECTED_MD5_DIGEST);
    assertThat(diff.digestsDiffer()).isFalse();
  }
}
