/** 
 * @author Filip Hrisafov
 */
public class LongPredicateAssert_accepts_Test extends LongPredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((LongPredicate)null).accepts(1L,2L)).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_predicate_does_not_accept_value(){
    LongPredicate predicate=val -> val <= 2;
    Predicate<Long> wrapPredicate=predicate::test;
    long expectedValue=3;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).accepts(expectedValue)).withMessage(shouldAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_does_not_accept_value_with_string_description(){
    LongPredicate predicate=val -> val <= 2;
    Predicate<Long> wrapPredicate=predicate::test;
    long expectedValue=3;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).as("test").accepts(expectedValue)).withMessage("[test] " + shouldAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_value(){
    LongPredicate predicate=val -> val <= 2;
    assertThat(predicate).accepts(1);
  }
  @Test public void should_fail_when_predicate_does_not_accept_values(){
    LongPredicate predicate=val -> val <= 2;
    long[] matchValues=new long[]{1L,2L,3L};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).accepts(matchValues)).withMessage(elementsShouldMatch(matchValues,3L,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_all_values(){
    LongPredicate predicate=val -> val <= 2;
    assertThat(predicate).accepts(1L,2L);
  }
  @Override protected LongPredicateAssert invoke_api_method(){
    return assertions.accepts(1L,2L);
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertAllMatch(getInfo(assertions),newArrayList(1L,2L),wrapped,PredicateDescription.GIVEN);
  }
}
