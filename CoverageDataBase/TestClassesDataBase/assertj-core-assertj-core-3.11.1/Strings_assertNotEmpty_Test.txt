/** 
 * Tests for <code> {@link Strings#assertNotEmpty(AssertionInfo,CharSequence)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Strings_assertNotEmpty_Test extends StringsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertNotEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertNotEmpty(someInfo(),"")).withMessage(shouldNotBeEmpty().create());
  }
  @Test public void should_pass_if_actual_is_not_empty(){
    strings.assertNotEmpty(someInfo(),"Yoda");
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertNotEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      stringsWithCaseInsensitiveComparisonStrategy.assertNotEmpty(info,"");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEmpty());
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_not_empty_whatever_custom_comparison_strategy_is(){
    stringsWithCaseInsensitiveComparisonStrategy.assertNotEmpty(someInfo(),"Yoda");
  }
}
