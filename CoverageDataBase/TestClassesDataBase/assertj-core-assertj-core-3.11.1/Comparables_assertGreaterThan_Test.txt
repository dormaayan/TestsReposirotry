/** 
 * Tests for <code> {@link Comparables#assertGreaterThan(AssertionInfo,Comparable,Comparable)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Comparables_assertGreaterThan_Test extends ComparablesBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> comparables.assertGreaterThan(someInfo(),null,8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_greater_than_other(){
    comparables.assertGreaterThan(someInfo(),8,6);
  }
  @Test public void should_fail_if_actual_is_equal_to_other(){
    AssertionInfo info=someInfo();
    try {
      comparables.assertGreaterThan(info,"Yoda","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater("Yoda","Yoda"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      comparables.assertGreaterThan(info,6,8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(6,8));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_greater_than_other_according_to_custom_comparison_strategy(){
    comparablesWithCustomComparisonStrategy.assertGreaterThan(someInfo(),-8,6);
  }
  @Test public void should_fail_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      comparablesWithCustomComparisonStrategy.assertGreaterThan(info,7,-7);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(7,-7,customComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      comparablesWithCustomComparisonStrategy.assertGreaterThan(info,-6,8);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeGreater(-6,8,customComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
