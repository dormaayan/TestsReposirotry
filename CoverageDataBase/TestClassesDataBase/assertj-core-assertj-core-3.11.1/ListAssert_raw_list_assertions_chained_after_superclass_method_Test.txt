public class ListAssert_raw_list_assertions_chained_after_superclass_method_Test {
  @SuppressWarnings({"unchecked","rawtypes"}) @Disabled @Test public void raw_list_assertions_mixed_with_inherited_methods(){
    Description description=emptyDescription();
    List list=new java.util.ArrayList<>();
    list.add("Key1");
    list.add("Key2");
    assertThat(list).as("desc").containsOnly("Key1","Key2");
    assertThat(list).as("desc").usingDefaultComparator().isSorted().as(description).isSorted().describedAs(description).describedAs("describedAs").has(null).hasSameClassAs(list).hasToString(list.toString()).is(null).isEqualTo(list).isExactlyInstanceOf(Map.class).isIn(new ArrayList<>()).isIn(Map.class).isInstanceOf(Map.class).isInstanceOfAny(Map.class,String.class).isNot(null).isNotEqualTo(null).isNotEmpty().isNotExactlyInstanceOf(String.class).isNotIn(new ArrayList<>()).isNotIn(Map.class).isNotInstanceOf(Map.class).isNotInstanceOfAny(Map.class,String.class).isNotNull().isNotOfAnyClassIn(Map.class,String.class).isNotSameAs(null).isOfAnyClassIn(Map.class,String.class).isSameAs("").overridingErrorMessage("").withFailMessage("").withThreadDumpOnError().usingDefaultComparator().contains("Key1",atIndex(0));
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void test_bug_485(){
    List list=new java.util.ArrayList<>();
    list.add("Key1");
    list.add("Key2");
    assertThat(list).as("").isSorted().contains("Key1","Key2");
    assertThat(list).as("").containsOnly("Key1","Key2");
  }
}
