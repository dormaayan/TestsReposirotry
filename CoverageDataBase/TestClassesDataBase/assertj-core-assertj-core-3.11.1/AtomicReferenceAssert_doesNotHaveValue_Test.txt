public class AtomicReferenceAssert_doesNotHaveValue_Test {
  @Test public void should_pass_when_actual_does_not_have_the_expected_value(){
    AtomicReference<String> actual=new AtomicReference<>("foo");
    assertThat(actual).doesNotHaveValue("bar");
  }
  @Test public void should_fail_when_actual_has_the_expected_value(){
    String value="foo";
    AtomicReference<String> actual=new AtomicReference<>(value);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).doesNotHaveValue(value)).withMessage(shouldNotContainValue(actual,value).create());
  }
  @Test public void should_fail_when_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      AtomicReference<String> actual=null;
      assertThat(actual).doesNotHaveValue("foo");
    }
).withMessage(actualIsNull());
  }
}
