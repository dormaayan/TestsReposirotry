public class Filter_with_common_Test extends WithPlayerData {
  @Test public void filter_does_not_modify_given_iterable(){
    List<Player> playersCopy=newArrayList(players);
    filter(players).with("reboundsPerGame").equalsTo(5).get();
    assertThat(playersCopy).isEqualTo(players);
  }
  @Test public void should_fail_if_property_or_field_to_filter_on_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> filter(players).with("reboundsPerGame").equalsTo(5).and(null).equalsTo("OKC")).withMessage("The property/field name to filter on should not be null or empty");
  }
  @Test public void should_fail_if_property_or_field_to_filter_on_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> filter(players).with("").equalsTo("OKC")).withMessage("The property/field name to filter on should not be null or empty");
  }
}
