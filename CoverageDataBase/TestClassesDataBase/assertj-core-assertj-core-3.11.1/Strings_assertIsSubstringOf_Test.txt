public class Strings_assertIsSubstringOf_Test extends StringsBaseTest {
  @Test public void should_pass_if_actual_is_a_substring_of_given_string(){
    strings.assertIsSubstringOf(someInfo(),"Yo","Yoda");
  }
  @Test public void should_pass_if_actual_is_equal_to_given_string(){
    strings.assertIsSubstringOf(someInfo(),"Yoda","Yoda");
  }
  @Test public void should_pass_if_actual_is_empty(){
    strings.assertIsSubstringOf(someInfo(),"","Yoda");
    strings.assertIsSubstringOf(someInfo(),"","");
  }
  @Test public void should_fail_if_actual_contains_given_string(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertIsSubstringOf(someInfo(),"Yoda","oda")).withMessage(shouldBeSubstring("Yoda","oda",StandardComparisonStrategy.instance()).create());
  }
  @Test public void should_fail_if_actual_completely_different_from_given_string(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertIsSubstringOf(someInfo(),"Yoda","Luke")).withMessage(shouldBeSubstring("Yoda","Luke",StandardComparisonStrategy.instance()).create());
  }
  @Test public void should_throw_error_if_sequence_is_null(){
    assertThatNullPointerException().isThrownBy(() -> strings.assertIsSubstringOf(someInfo(),"Yoda",null)).withMessage("Expecting CharSequence not to be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertIsSubstringOf(someInfo(),null,"Yoda")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_a_part_of_sequence_only_according_to_custom_comparison_strategy(){
    stringsWithCaseInsensitiveComparisonStrategy.assertIsSubstringOf(someInfo(),"Yo","Yoda");
    stringsWithCaseInsensitiveComparisonStrategy.assertIsSubstringOf(someInfo(),"yo","Yoda");
    stringsWithCaseInsensitiveComparisonStrategy.assertIsSubstringOf(someInfo(),"YO","Yoda");
  }
  @Test public void should_fail_if_actual_is_not_a_substring_of_sequence_according_to_custom_comparison_strategy(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertIsSubstringOf(someInfo(),"Yoda","Luke")).withMessage(shouldBeSubstring("Yoda","Luke",comparisonStrategy).create());
  }
}
