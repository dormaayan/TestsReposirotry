/** 
 * Tests for <code> {@link org.assertj.core.error.ShouldBeEqualWithinPercentage#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code> .
 * @author Alexander Bischof
 */
public class ShouldBeEqualWithinPercentage_create_Test {
  private ErrorMessageFactory factory;
  @Test public void should_create_error_message_with_int_percentage_displayed_as_int(){
    factory=shouldBeEqualWithinPercentage(12.0,10.0,withPercentage(10),2d);
    String message=factory.create(new TestDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <12.0>%n"+ "to be close to:%n"+ "  <10.0>%n"+ "by less than 10%% but difference was 20.0%%.%n"+ "(a difference of exactly 10%% being considered valid)"));
  }
  @Test public void should_create_error_message_with_double_percentage_displayed_as_int(){
    factory=shouldBeEqualWithinPercentage(12.0,10.0,withPercentage(10.0),2d);
    String message=factory.create(new TestDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <12.0>%n"+ "to be close to:%n"+ "  <10.0>%n"+ "by less than 10%% but difference was 20.0%%.%n"+ "(a difference of exactly 10%% being considered valid)"));
  }
  @Test public void should_create_error_message_with_percentage_as_double(){
    factory=shouldBeEqualWithinPercentage(12.0,10.0,withPercentage(0.5),2d);
    String message=factory.create(new TestDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <12.0>%n"+ "to be close to:%n"+ "  <10.0>%n"+ "by less than 0.5%% but difference was 20.0%%.%n"+ "(a difference of exactly 0.5%% being considered valid)"));
  }
}
