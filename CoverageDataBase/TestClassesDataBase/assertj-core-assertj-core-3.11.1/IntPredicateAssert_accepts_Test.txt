/** 
 * @author Filip Hrisafov
 */
public class IntPredicateAssert_accepts_Test extends IntPredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((IntPredicate)null).accepts(1,2,3)).withMessage(actualIsNull());
  }
  @Test public void should_fail_when_predicate_does_not_accept_value(){
    IntPredicate predicate=val -> val <= 2;
    Predicate<Integer> wrapPredicate=predicate::test;
    int expectedValue=3;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).accepts(expectedValue)).withMessage(shouldAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_does_not_accept_value_with_string_description(){
    IntPredicate predicate=val -> val <= 2;
    Predicate<Integer> wrapPredicate=predicate::test;
    int expectedValue=3;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).as("test").accepts(expectedValue)).withMessage("[test] " + shouldAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_value(){
    IntPredicate predicate=val -> val <= 2;
    assertThat(predicate).accepts(1);
  }
  @Test public void should_fail_when_predicate_does_not_accept_values(){
    IntPredicate predicate=val -> val <= 2;
    int[] matchValues=new int[]{1,2,3};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).accepts(matchValues)).withMessage(elementsShouldMatch(matchValues,3,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_all_values(){
    IntPredicate predicate=val -> val <= 2;
    assertThat(predicate).accepts(1,2);
  }
  @Override protected IntPredicateAssert invoke_api_method(){
    return assertions.accepts(1,2);
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertAllMatch(getInfo(assertions),newArrayList(1,2),wrapped,PredicateDescription.GIVEN);
  }
}
