/** 
 * Tests for <code> {@link ShouldContainEntry#create(Description)}</code>.
 */
public class ShouldContainEntry_create_Test {
  @Test public void should_create_error_message_with_entry_condition(){
    Map<?,?> map=mapOf(entry("name","Yoda"),entry("color","green"));
    ErrorMessageFactory factory=shouldContainEntry(map,new TestCondition<>("test condition"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting:%n" + " <{\"color\"=\"green\", \"name\"=\"Yoda\"}>%n"+ "to contain an entry satisfying:%n"+ " <test condition>"));
  }
  @Test public void should_create_error_message_with_key_and_value_conditions(){
    Map<?,?> map=mapOf(entry("name","Yoda"),entry("color","green"));
    ErrorMessageFactory factory=shouldContainEntry(map,new TestCondition<>("test key condition"),new TestCondition<>("test value condition"));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(String.format("[Test] %n" + "Expecting:%n" + " <{\"color\"=\"green\", \"name\"=\"Yoda\"}>%n"+ "to contain an entry satisfying both key and value conditions:%n"+ "- key condition:%n"+ "    <test key condition>%n"+ "- value condition:%n"+ "    <test value condition>"));
  }
}
