public class Assertions_catchThrowableOfType_Test {
  @Test public void should_build_ThrowableAssert_with_runtime_exception_thrown(){
    assertThatThrownBy(codeThrowing(new IllegalArgumentException("boom"))).isInstanceOf(IllegalArgumentException.class).hasMessage("boom");
  }
  @Test public void should_build_ThrowableAssert_with_throwable_thrown(){
    assertThatThrownBy(codeThrowing(new Throwable("boom"))).isInstanceOf(Throwable.class).hasMessage("boom");
  }
  @Test public void should_be_able_to_pass_a_description_to_assertThatThrownBy(){
    Throwable assertionError=catchThrowable(() -> {
      assertThatThrownBy(raisingException("boom"),"Test %s","code").hasMessage("bam");
    }
);
    assertThat(assertionError).isInstanceOf(AssertionError.class).hasMessageContaining("[Test code]");
  }
  @Test public void should_fail_if_no_throwable_was_thrown(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThatThrownBy(() -> {
    }
).hasMessage("boom ?")).withMessage(format("%nExpecting code to raise a throwable."));
  }
  @Test public void can_capture_exception_and_then_assert_following_AAA_or_BDD_style(){
    Exception exception=new Exception("boom!!");
    Throwable boom=catchThrowable(codeThrowing(exception));
    assertThat(boom).isSameAs(exception);
  }
  @Test public void catchThrowable_returns_null_when_no_exception_thrown(){
    Throwable boom=catchThrowable(() -> {
    }
);
    assertThat(boom).isNull();
  }
  @Test public void catchThrowableOfType_should_fail_with_good_message_if_wrong_type(){
    try {
      catchThrowableOfType(raisingException("boom!!"),RuntimeException.class);
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessageContaining(RuntimeException.class.getName()).hasMessageContaining(Exception.class.getName());
      return;
    }
    shouldHaveThrown(AssertionError.class);
  }
  @Test public void catchThrowableOfType_should_succeed_and_return_actual_instance_with_correct_class(){
    final Exception expected=new RuntimeException("boom!!");
    Exception actual=null;
    try {
      actual=catchThrowableOfType(codeThrowing(expected),Exception.class);
    }
 catch (    AssertionError a) {
      fail("catchThrowableOfType should not have asserted",a);
    }
    assertThat(actual).isSameAs(expected);
  }
  @Test public void catchThrowableOfType_should_succeed_and_return_null_if_no_exception_thrown(){
    IOException actual=catchThrowableOfType(() -> {
    }
,IOException.class);
    assertThat(actual).isNull();
  }
  @Test public void should_fail_with_good_message_when_assertion_is_failing(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThatThrownBy(raisingException("boom")).hasMessage("bam")).withMessageContaining("Expecting message:").withMessageContaining("<\"bam\">").withMessageContaining("but was:").withMessageContaining("<\"boom\">");
  }
  private ThrowingCallable raisingException(  final String reason){
    return codeThrowing(new Exception(reason));
  }
  protected static ThrowingCallable codeThrowing(  Throwable t){
    return () -> {
      throw t;
    }
;
  }
}
