public class ShouldHavePath_create_Test {
  @Test public void should_create_error_message_for_uri() throws Exception {
    String error=shouldHavePath(new URI("http://assertj.org/news"),"/foo").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting path of%n" + "  <http://assertj.org/news>%n"+ "to be:%n"+ "  <\"/foo\">%n"+ "but was:%n"+ "  <\"/news\">"));
  }
  @Test public void should_create_error_message_for_url() throws Exception {
    String error=shouldHavePath(new URL("http://assertj.org/news"),"/foo").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting path of%n" + "  <http://assertj.org/news>%n"+ "to be:%n"+ "  <\"/foo\">%n"+ "but was:%n"+ "  <\"/news\">"));
  }
  @Test public void should_create_error_message_for_uri_has_no_path() throws Exception {
    URI uri=new URI("http://assertj.org/news?type=beta");
    String error=shouldHavePath(uri,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org/news?type=beta>%n"+ "not to have a path but had:%n"+ "  <\"/news\">"));
  }
  @Test public void should_create_error_message_for_url_has_no_path() throws Exception {
    URL url=new URL("http://assertj.org/news?type=beta");
    String error=shouldHavePath(url,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org/news?type=beta>%n"+ "not to have a path but had:%n"+ "  <\"/news\">"));
    error=shouldHavePath(url,"").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://assertj.org/news?type=beta>%n"+ "not to have a path but had:%n"+ "  <\"/news\">"));
  }
}
