public class Paths_assertHasNoParent_Test extends MockPathsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> paths.assertHasNoParent(info,null)).withMessage(actualIsNull());
  }
  @Test public void should_throw_PathsException_if_actual_cannot_be_canonicalized() throws IOException {
    final IOException exception=new IOException();
    when(actual.toRealPath()).thenThrow(exception);
    assertThatExceptionOfType(PathsException.class).isThrownBy(() -> paths.assertHasNoParent(info,actual)).withMessage("failed to resolve actual real path").withCause(exception);
  }
  @Test public void should_fail_if_actual_has_parent() throws IOException {
    final Path canonicalActual=mock(Path.class);
    final Path parent=mock(Path.class);
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(canonicalActual.getParent()).thenReturn(parent);
    try {
      paths.assertHasNoParent(info,actual);
      wasExpectingAssertionError();
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveNoParent(actual));
    }
  }
  @Test public void should_succeed_if_actual_has_no_parent() throws IOException {
    final Path canonicalActual=mock(Path.class);
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(canonicalActual.getParent()).thenReturn(null);
    paths.assertHasNoParent(info,actual);
  }
}
