public class Urls_assertHasAuthority_Test extends UrlsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> urls.assertHasAuthority(info,null,"http://www.helloworld.org")).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_url_has_the_expected_authority() throws MalformedURLException {
    urls.assertHasAuthority(info,new URL("http://www.helloworld.org:8080"),"www.helloworld.org:8080");
  }
  @Test public void should_pass_if_actual_url_with_path_has_the_expected_authority() throws MalformedURLException {
    urls.assertHasAuthority(info,new URL("http://www.helloworld.org:8080/pages"),"www.helloworld.org:8080");
  }
  @Test public void should_fail_if_actual_authority_is_not_the_expected_one_because_ports_differ() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com:8080/pages/");
    String expectedAuthority="example.com:8888";
    try {
      urls.assertHasAuthority(info,url,expectedAuthority);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveAuthority(url,expectedAuthority));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_authority_is_not_the_expected_one_because_hosts_differ() throws MalformedURLException {
    AssertionInfo info=someInfo();
    URL url=new URL("http://example.com:8080/pages/");
    String expectedAuthority="example.org:8080";
    try {
      urls.assertHasAuthority(info,url,expectedAuthority);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveAuthority(url,expectedAuthority));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
