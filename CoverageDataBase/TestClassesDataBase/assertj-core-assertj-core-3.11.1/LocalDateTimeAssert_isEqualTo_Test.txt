/** 
 * Only test String based assertion (tests with  {@link java.time.LocalDateTime} are already defined in assertj-core)
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class LocalDateTimeAssert_isEqualTo_Test extends LocalDateTimeAssertBaseTest {
  @Test public void test_isEqualTo_assertion(){
    assertThat(REFERENCE).isEqualTo(REFERENCE.toString());
    assertThatThrownBy(() -> assertThat(REFERENCE).isEqualTo(REFERENCE.plusSeconds(1).toString())).isInstanceOf(AssertionError.class);
  }
  @Test public void test_isEqualTo_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalDateTime.of(2000,1,5,3,0,5)).isEqualTo(LocalDateTime.of(2012,1,1,3,3,3).toString())).withMessage(format("%nExpecting:%n <2000-01-05T03:00:05>%nto be equal to:%n <2012-01-01T03:03:03>%nbut was not."));
  }
  @Test public void should_fail_if_dateTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDateTime.now()).isEqualTo((String)null)).withMessage("The String representing the LocalDateTime to compare actual with should not be null");
  }
}
