/** 
 * Tests for <code> {@link Comparables#assertEqualByComparison(AssertionInfo,Comparable,Comparable)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Comparables_assertEqualByComparison_Test extends ComparablesBaseTest {
  @Override protected Comparator<?> comparatorForCustomComparisonStrategy(){
    return new AbsValueComparator<BigDecimal>();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> comparables.assertEqualByComparison(someInfo(),null,8)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_objects_are_equal(){
    BigDecimal a=new BigDecimal("10.0");
    BigDecimal e=new BigDecimal("10.000");
    assertThat(a.equals(e)).isFalse();
    comparables.assertEqualByComparison(someInfo(),a,e);
  }
  @Test public void should_fail_if_objects_are_not_equal(){
    AssertionInfo info=someInfo();
    try {
      comparables.assertEqualByComparison(info,"Luke","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual("Luke","Yoda",info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> comparablesWithCustomComparisonStrategy.assertEqualByComparison(someInfo(),null,BigDecimal.ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_objects_are_equal_whatever_custom_comparison_strategy_is(){
    BigDecimal a=new BigDecimal("10.0");
    BigDecimal e=new BigDecimal("10.000");
    assertThat(a.equals(e)).isFalse();
    comparablesWithCustomComparisonStrategy.assertEqualByComparison(someInfo(),a,e);
  }
  @Test public void should_fail_if_objects_are_not_equal_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      comparablesWithCustomComparisonStrategy.assertEqualByComparison(info,"Luke","Yoda");
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual("Luke","Yoda",info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
