/** 
 * Tests for <code> {@link LongArrays#assertDoesNotContain(AssertionInfo,long[],long[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class LongArrays_assertDoesNotContain_Test extends LongArraysBaseTest {
  @Test public void should_pass_if_actual_does_not_contain_given_values(){
    arrays.assertDoesNotContain(someInfo(),actual,arrayOf(12L));
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_even_if_duplicated(){
    arrays.assertDoesNotContain(someInfo(),actual,arrayOf(12L,12L,20L));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),actual,emptyArray())).withMessage(valuesToLookForIsEmpty());
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),null,arrayOf(8L))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_given_values(){
    AssertionInfo info=someInfo();
    long[] expected={6L,8L,20L};
    try {
      arrays.assertDoesNotContain(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContain(actual,expected,newLinkedHashSet(6L,8L)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,arrayOf(12L));
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_even_if_duplicated_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,arrayOf(12L,12L,20L));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_empty_whatever_custom_comparison_strategy_is(){
    assertThatIllegalArgumentException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,emptyArray())).withMessage(valuesToLookForIsEmpty());
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),null,arrayOf(-8L))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_given_values_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    long[] expected={6L,-8L,20L};
    try {
      arraysWithCustomComparisonStrategy.assertDoesNotContain(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContain(actual,expected,newLinkedHashSet(6L,-8L),absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
