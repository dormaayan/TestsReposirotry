public class ShouldContainsAnyOf_create_Test {
  private ErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    factory=shouldContainAnyOf(newArrayList("Yoda","Han","Han"),newArrayList("Vador","Leia"));
  }
  @Test public void should_create_error_message(){
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <[\"Yoda\", \"Han\", \"Han\"]>%n"+ "to contain at least one of the following elements:%n"+ "  <[\"Vador\", \"Leia\"]>%n"+ "but none were found "));
  }
  @Test public void should_create_error_message_with_custom_comparison_strategy(){
    ErrorMessageFactory factory=shouldContainAnyOf(newArrayList("Yoda","Han","Han"),newArrayList("Vador","Leia"),new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance));
    String message=factory.create(new TextDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <[\"Yoda\", \"Han\", \"Han\"]>%n"+ "to contain at least one of the following elements:%n"+ "  <[\"Vador\", \"Leia\"]>%n"+ "but none were found "+ "when comparing values using CaseInsensitiveStringComparator"));
  }
}
