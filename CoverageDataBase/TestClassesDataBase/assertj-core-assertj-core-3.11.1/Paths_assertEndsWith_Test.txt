public class Paths_assertEndsWith_Test extends MockPathsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> paths.assertEndsWith(info,null,other)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_other_is_null(){
    assertThatNullPointerException().isThrownBy(() -> paths.assertEndsWith(info,actual,null)).withMessage("the expected end path should not be null");
  }
  @Test public void should_fail_with_PathsException_if_actual_cannot_be_resolved() throws IOException {
    final IOException causeException=new IOException();
    when(actual.toRealPath()).thenThrow(causeException);
    assertThatExceptionOfType(PathsException.class).isThrownBy(() -> paths.assertEndsWith(info,actual,other)).withMessage("failed to resolve actual real path").withCause(causeException);
  }
  @Test public void should_fail_if_canonical_actual_does_not_end_with_normalized_other() throws IOException {
    final Path canonicalActual=mock(Path.class);
    final Path normalizedOther=mock(Path.class);
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(other.normalize()).thenReturn(normalizedOther);
    when(canonicalActual.endsWith(normalizedOther)).thenReturn(false);
    try {
      paths.assertEndsWith(info,actual,other);
      wasExpectingAssertionError();
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldEndWith(actual,other));
    }
  }
  @Test public void should_succeed_if_canonical_actual_ends_with_normalized_other() throws IOException {
    final Path canonicalActual=mock(Path.class);
    final Path normalizedOther=mock(Path.class);
    when(actual.toRealPath()).thenReturn(canonicalActual);
    when(other.normalize()).thenReturn(normalizedOther);
    when(canonicalActual.endsWith(normalizedOther)).thenReturn(true);
    paths.assertEndsWith(info,actual,other);
  }
}
