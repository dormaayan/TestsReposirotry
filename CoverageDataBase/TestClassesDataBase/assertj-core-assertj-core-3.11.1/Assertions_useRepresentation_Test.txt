public class Assertions_useRepresentation_Test {
  private CustomRepresentation customRepresentation=new CustomRepresentation();
  @AfterEach public void afterTest(){
    Assertions.useDefaultRepresentation();
  }
  @Test public void should_use_given_representation_in_assertion_error_messages(){
    Assertions.useRepresentation(customRepresentation);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat("foo").startsWith("bar")).withMessageContaining("$foo$").withMessageContaining("$bar$");
  }
  @Test public void should_use_default_representation_in_assertion_error_messages_after_calling_useDefaultRepresentation(){
    Assertions.useRepresentation(customRepresentation);
    Assertions.useDefaultRepresentation();
    try {
      assertThat("foo").startsWith("bar");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage()).doesNotContain("$foo$").doesNotContain("bar$");
      return;
    }
    fail("AssertionError expected");
  }
private class CustomRepresentation extends StandardRepresentation {
    @Override public String toStringOf(    Object o){
      if (o instanceof Example)       return "Example";
      return super.toStringOf(o);
    }
    @Override protected String toStringOf(    String s){
      return "$" + s + "$";
    }
  }
}
