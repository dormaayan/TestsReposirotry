/** 
 * Only test String based assertion (tests with  {@link LocalTime} are already defined in assertj-core)
 * @author Joel Costigliola
 * @author Marcin ZajÄ…czkowski
 */
public class LocalTimeAssert_isNotIn_Test extends LocalTimeAssertBaseTest {
  @Test public void test_isNotIn_assertion(){
    assertThat(REFERENCE).isNotIn(REFERENCE.plusHours(1).toString(),REFERENCE.plusHours(2).toString());
    assertThatThrownBy(() -> assertThat(REFERENCE).isNotIn(REFERENCE.toString(),REFERENCE.plusHours(1).toString())).isInstanceOf(AssertionError.class);
  }
  @Test public void test_isNotIn_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalTime.of(3,0,5)).isNotIn("03:00:05","03:03:03")).withMessage(format("%n" + "Expecting:%n" + " <03:00:05>%n"+ "not to be in:%n"+ " <[03:00:05, 03:03:03]>%n"));
  }
  @Test public void should_fail_if_timeTimes_as_string_array_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalTime.now()).isNotIn((String[])null)).withMessage("The given LocalTime array should not be null");
  }
  @Test public void should_fail_if_timeTimes_as_string_array_parameter_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalTime.now()).isNotIn(new String[0])).withMessage("The given LocalTime array should not be empty");
  }
}
