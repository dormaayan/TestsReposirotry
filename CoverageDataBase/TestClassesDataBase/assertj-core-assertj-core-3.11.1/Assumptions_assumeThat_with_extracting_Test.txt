public class Assumptions_assumeThat_with_extracting_Test {
  private Set<Jedi> jedis;
  private Jedi yoda;
  private Jedi luke;
  private CartoonCharacter bart;
  private CartoonCharacter lisa;
  private CartoonCharacter maggie;
  private CartoonCharacter homer;
  private CartoonCharacter pebbles;
  private CartoonCharacter fred;
  @BeforeEach public void setup(){
    yoda=new Jedi("Yoda","green");
    luke=new Jedi("Luke","green");
    jedis=newHashSet(yoda,luke);
    bart=new CartoonCharacter("Bart Simpson");
    lisa=new CartoonCharacter("Lisa Simpson");
    maggie=new CartoonCharacter("Maggie Simpson");
    homer=new CartoonCharacter("Homer Simpson");
    homer.addChildren(bart,lisa,maggie);
    pebbles=new CartoonCharacter("Pebbles Flintstone");
    fred=new CartoonCharacter("Fred Flintstone");
    fred.addChildren(pebbles);
  }
  @Test public void should_run_test_when_assumption_using_extracting_on_list_passes(){
    assertThatCode(() -> assumeThat(jedis).extracting("name").contains("Luke")).doesNotThrowAnyException();
  }
  @Test public void should_run_test_when_assumption_using_extracting_on_object_passes(){
    assertThatCode(() -> assumeThat(yoda).extracting("name").containsExactly("Yoda")).doesNotThrowAnyException();
  }
  @Test public void should_allow_assumptions_with_flatExtracting(){
    assertThatCode(() -> assumeThat(newArrayList(homer,fred)).flatExtracting("children").containsOnly(bart,lisa,maggie,pebbles)).doesNotThrowAnyException();
  }
  @Test public void should_ignore_test_when_assumption_using_extracting_fails(){
    assertThatExceptionOfType(AssumptionViolatedException.class).isThrownBy(() -> assumeThat(jedis).extracting("name").contains("Vader"));
  }
}
