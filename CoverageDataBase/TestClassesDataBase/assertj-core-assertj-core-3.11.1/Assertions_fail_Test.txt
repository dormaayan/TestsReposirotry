public class Assertions_fail_Test {
  @Test public void should_include_message_when_failing(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> fail("Failed :(")).withMessage("Failed :(");
  }
  @Test public void should_include_message_with_parameters_when_failing(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> fail("Failed %s",":(")).withMessage("Failed :(");
  }
  @Test public void should_include_message_with_cause_when_failing(){
    String message="Some Throwable";
    Throwable cause=new Throwable();
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> fail(message,cause)).withMessage(message).withCause(cause);
  }
  @Test public void should_return_a_value_to_allow_using_optional_orElseGet(){
    Optional<Integer> empty=Optional.empty();
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> doSomethingWithInt(empty.orElseGet(() -> fail("Failed :(")))).withMessage("Failed :(");
  }
  private void doSomethingWithInt(  @SuppressWarnings("unused") int parameter){
  }
}
