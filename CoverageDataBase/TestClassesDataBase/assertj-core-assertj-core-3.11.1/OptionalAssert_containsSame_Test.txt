public class OptionalAssert_containsSame_Test extends BaseTest {
  @Test public void should_fail_when_optional_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((Optional<String>)null).containsSame("something")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Optional.of("something")).containsSame(null)).withMessage("The expected value should not be <null>.");
  }
  @Test public void should_pass_if_optional_contains_the_expected_object_reference(){
    String containedAndExpected="something";
    assertThat(Optional.of(containedAndExpected)).containsSame(containedAndExpected);
  }
  @Test public void should_fail_if_optional_does_not_contain_the_expected_object_reference(){
    Optional<String> actual=Optional.of("not-expected");
    String expectedValue="something";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).containsSame(expectedValue)).withMessage(shouldContainSame(actual,expectedValue).create());
  }
  @Test public void should_fail_if_optional_contains_equal_but_not_same_value(){
    Optional<String> actual=Optional.of(new String("something"));
    String expectedValue=new String("something");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).containsSame(expectedValue)).withMessage(shouldContainSame(actual,expectedValue).create());
  }
  @Test public void should_fail_if_optional_is_empty(){
    String expectedValue="something";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(Optional.empty()).containsSame(expectedValue)).withMessage(shouldContain(expectedValue).create());
  }
}
