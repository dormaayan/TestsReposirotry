/** 
 * Tests for <code> {@link CharArrays#assertContainsExactly(AssertionInfo,char[],char[])}</code>.
 */
public class CharArrays_assertContainsExactly_Test extends CharArraysBaseTest {
  @Test public void should_pass_if_actual_contains_given_values_exactly(){
    arrays.assertContainsExactly(someInfo(),actual,arrayOf('a','b','c'));
  }
  @Test public void should_pass_if_actual_and_given_values_are_empty(){
    arrays.assertContainsExactly(someInfo(),emptyArray(),emptyArray());
  }
  @Test public void should_fail_if_actual_contains_given_values_exactly_but_in_different_order(){
    AssertionInfo info=someInfo();
    try {
      arrays.assertContainsExactly(info,actual,arrayOf('a','c','b'));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsDifferAtIndex('b','c',1));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_arrays_have_different_sizes(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsExactly(someInfo(),actual,arrayOf('a','b')));
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsExactly(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertContainsExactly(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsExactly(someInfo(),null,arrayOf('b'))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_exactly(){
    AssertionInfo info=someInfo();
    char[] expected={'a','b','e'};
    try {
      arrays.assertContainsExactly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainExactly(actual,asList(expected),newArrayList('e'),newArrayList('c')));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_all_given_values_but_size_differ(){
    AssertionInfo info=someInfo();
    char[] expected={'a','b','c','c'};
    try {
      arrays.assertContainsExactly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainExactly(actual,asList(expected),newArrayList('c'),newArrayList()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_given_values_exactly_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertContainsExactly(someInfo(),actual,arrayOf('a','B','c'));
  }
  @Test public void should_pass_if_actual_contains_given_values_exactly_in_different_order_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    char[] expected={'A','c','b'};
    try {
      arraysWithCustomComparisonStrategy.assertContainsExactly(someInfo(),actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,elementsDifferAtIndex('b','c',1,caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_array_of_values_to_look_for_is_empty_and_actual_is_not_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsExactly(someInfo(),actual,emptyArray()));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsExactly(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertContainsExactly(someInfo(),null,arrayOf('b'))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_given_values_exactly_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    char[] expected={'a','B','e'};
    try {
      arraysWithCustomComparisonStrategy.assertContainsExactly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainExactly(actual,asList(expected),newArrayList('e'),newArrayList('c'),caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_all_given_values_but_size_differ_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    char[] expected={'a','b','C','c'};
    try {
      arraysWithCustomComparisonStrategy.assertContainsExactly(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainExactly(actual,asList(expected),newArrayList('c'),newArrayList(),caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
