public class Longs_assertIsNotCloseTo_Test extends LongsBaseTest {
  private static final Long ZERO=0L;
  private static final Long ONE=1L;
  @ParameterizedTest @CsvSource({"1, 3, 1","-1, -3, 1","1, -2, 2","-1, 2, 2"}) public void should_pass_if_difference_is_greater_than_offset(  long actual,  long other,  long offset){
    longs.assertIsNotCloseTo(someInfo(),actual,other,byLessThan(offset));
    longs.assertIsNotCloseTo(someInfo(),actual,other,within(offset));
  }
  @ParameterizedTest @CsvSource({"1, 0, 1","1, 2, 1","-1, 0, 1","1, -1, 2","-1, 1, 2"}) public void should_pass_if_difference_is_equal_to_strict_offset(  long actual,  long other,  long offset){
    longs.assertIsNotCloseTo(someInfo(),actual,other,byLessThan(offset));
  }
  @ParameterizedTest @CsvSource({"1, 2, 10","1, 2, 2","1, 0, 2","0, 1, 2"}) public void should_fail_if_actual_is_too_close_to_the_other_value(  long actual,  long other,  long offset){
    AssertionInfo info=someInfo();
    try {
      longs.assertIsNotCloseTo(someInfo(),actual,other,byLessThan(offset));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(actual,other,byLessThan(offset),abs(actual - other)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @ParameterizedTest @CsvSource({"1, 2, 10","1, 0, 2","0, 1, 2"}) public void should_fail_if_actual_is_too_close_to_the_other_value_with_strict_offset(  long actual,  long other,  long offset){
    AssertionInfo info=someInfo();
    try {
      longs.assertIsNotCloseTo(info,actual,other,byLessThan(offset));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(actual,other,byLessThan(offset),abs(actual - other)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @ParameterizedTest @CsvSource({"1, 1, 0","1, 0, 1","1, 2, 1"}) public void should_fail_if_difference_is_equal_to_given_offset(  long actual,  long other,  long offset){
    AssertionInfo info=someInfo();
    try {
      longs.assertIsNotCloseTo(someInfo(),actual,other,within(offset));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqual(actual,other,within(offset),abs(actual - other)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> longs.assertIsNotCloseTo(someInfo(),null,ONE,byLessThan(ONE))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatNullPointerException().isThrownBy(() -> longs.assertIsNotCloseTo(someInfo(),ONE,null,byLessThan(ONE)));
  }
  @Test public void should_fail_if_offset_is_null(){
    assertThatNullPointerException().isThrownBy(() -> longs.assertIsNotCloseTo(someInfo(),ONE,ZERO,null));
  }
}
