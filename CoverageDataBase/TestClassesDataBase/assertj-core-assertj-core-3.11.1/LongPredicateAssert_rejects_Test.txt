/** 
 * @author Filip Hrisafov
 */
public class LongPredicateAssert_rejects_Test extends LongPredicateAssertBaseTest {
  @Test public void should_fail_when_predicate_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((LongPredicate)null).rejects(1L,2L,3L)).withMessage(actualIsNull());
  }
  @Test public void should_pass_when_predicate_does_not_accept_value(){
    LongPredicate predicate=val -> val <= 2;
    assertThat(predicate).rejects(3);
  }
  @Test public void should_fail_when_predicate_accepts_value(){
    LongPredicate predicate=val -> val <= 2;
    Predicate<Long> wrapPredicate=predicate::test;
    long expectedValue=2;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(expectedValue)).withMessage(shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_value_with_description(){
    LongPredicate predicate=val -> val <= 2;
    Predicate<Long> wrapPredicate=predicate::test;
    long expectedValue=2;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).as(new TextDescription("test")).rejects(expectedValue)).withMessage("[test] " + shouldNotAccept(wrapPredicate,expectedValue,PredicateDescription.GIVEN).create());
  }
  @Test public void should_fail_when_predicate_accepts_some_value(){
    LongPredicate predicate=num -> num <= 2;
    long[] matchValues=new long[]{1L,2L,3L};
    List<Long> matchValuesList=LongStream.of(matchValues).boxed().collect(Collectors.toList());
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(predicate).rejects(matchValues)).withMessage(noElementsShouldMatch(matchValuesList,1L,PredicateDescription.GIVEN).create());
  }
  @Test public void should_pass_when_predicate_accepts_no_value(){
    LongPredicate predicate=num -> num <= 2;
    assertThat(predicate).rejects(3L,4L,5L);
  }
  @Override protected LongPredicateAssert invoke_api_method(){
    return assertions.rejects(3L,4L);
  }
  @Override protected void verify_internal_effects(){
    verify(iterables).assertNoneMatch(getInfo(assertions),newArrayList(3L,4L),wrapped,PredicateDescription.GIVEN);
  }
}
