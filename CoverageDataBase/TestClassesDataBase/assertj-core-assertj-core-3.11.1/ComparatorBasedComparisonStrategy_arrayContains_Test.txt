/** 
 * Tests for  {@link ComparatorBasedComparisonStrategy#arrayContains(Object,Object)}.
 * @author Joel Costigliola
 */
public class ComparatorBasedComparisonStrategy_arrayContains_Test extends AbstractTest_ComparatorBasedComparisonStrategy {
  @Test public void should_return_true_if_array_contains_value_according_to_comparison_strategy(){
    String[] hobbits=array("Merry","Frodo","Merry","Sam");
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"Sam")).isTrue();
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"SAM")).isTrue();
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"Merry")).isTrue();
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"MerRy")).isTrue();
  }
  @Test public void should_return_false_if_array_does_not_contain_value_according_to_comparison_strategy(){
    String[] hobbits=array("Merry","Frodo","Merry","Sam");
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"Pippin")).isFalse();
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(hobbits,"Sam  ")).isFalse();
  }
  @Test public void should_return_false_if_array_is_empty(){
    assertThat(caseInsensitiveComparisonStrategy.arrayContains(new String[]{},"Pippin")).isFalse();
  }
  @Test public void should_fail_if_first_parameter_is_not_an_array(){
    assertThatIllegalArgumentException().isThrownBy(() -> caseInsensitiveComparisonStrategy.arrayContains("not an array","Pippin"));
  }
}
