/** 
 * Tests for <code> {@link Dates#assertIsToday(AssertionInfo,Date)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertIsToday_Test extends DatesBaseTest {
  @Test public void should_fail_if_actual_is_not_today(){
    AssertionInfo info=someInfo();
    try {
      actual=parseDate("2111-01-01");
      dates.assertIsToday(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeToday(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertIsToday(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_today(){
    dates.assertIsToday(someInfo(),new Date());
  }
  @Test public void should_fail_if_actual_is_not_today_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      actual=parseDate("2111-01-01");
      datesWithCustomComparisonStrategy.assertIsToday(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeToday(actual,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertIsToday(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_today_according_to_custom_comparison_strategy(){
    actual=monthOf(tomorrow()) == monthOf(new Date()) ? tomorrow() : yesterday();
    datesWithCustomComparisonStrategy.assertIsToday(someInfo(),actual);
  }
}
