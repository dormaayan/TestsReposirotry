/** 
 * Tests for <code> {@link Maps#assertHasEntrySatisfyingConditions(AssertionInfo,Map,Condition,Condition)}</code>.
 */
public class Maps_assertHasEntrySatisfying_with_key_and_value_conditions_Test extends MapsBaseTest {
  private Condition<String> isColor=new Condition<String>("is color condition"){
    @Override public boolean matches(    String value){
      return "color".equals(value);
    }
  }
;
  private Condition<String> isGreen=new Condition<String>("green color condition"){
    @Override public boolean matches(    String value){
      return "green".equals(value);
    }
  }
;
  private Condition<Object> isAge=new Condition<Object>(){
    @Override public boolean matches(    Object value){
      return "age".equals(value);
    }
  }
;
  private Condition<Object> isBlack=new Condition<Object>("black color condition"){
    @Override public boolean matches(    Object value){
      return "black".equals(value);
    }
  }
;
  @Test public void should_fail_if_key_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertHasEntrySatisfyingConditions(someInfo(),actual,null,isGreen)).withMessage("The condition to evaluate for entries key should not be null");
  }
  @Test public void should_fail_if_value_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertHasEntrySatisfyingConditions(someInfo(),actual,isColor,null)).withMessage("The condition to evaluate for entries value should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfyingConditions(someInfo(),null,isColor,isGreen)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_any_entry_matching_the_given_key_condition(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasEntrySatisfyingConditions(info,actual,isAge,isGreen);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainEntry(actual,isAge,isGreen));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_contain_any_entry_matching_the_given_value_condition(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasEntrySatisfyingConditions(info,actual,isColor,isBlack);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainEntry(actual,isColor,isBlack));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_does_not_contain_any_entry_matching_both_given_key_and_value_conditions(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasEntrySatisfyingConditions(info,actual,isAge,isBlack);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainEntry(actual,isAge,isBlack));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_an_entry_matching_both_key_and_value_conditions(){
    maps.assertHasEntrySatisfyingConditions(someInfo(),actual,isColor,isGreen);
  }
}
