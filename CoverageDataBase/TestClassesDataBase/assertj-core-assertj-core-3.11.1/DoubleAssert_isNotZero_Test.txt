public class DoubleAssert_isNotZero_Test extends DoubleAssertBaseTest {
  @Override protected DoubleAssert invoke_api_method(){
    return assertions.isNotZero();
  }
  @Override protected void verify_internal_effects(){
    verify(doubles).assertIsNotZero(getInfo(assertions),getActual(assertions));
  }
  @Test public void should_pass_with_Double_negative_zero(){
    final Double negativeZero=-0.0;
    assertThat(negativeZero).isNotZero();
  }
  @Test public void should_fail_with_primitive_negative_zero(){
    final double negativeZero=-0.0;
    try {
      assertThat(negativeZero).isNotZero();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n <-0.0>%nnot to be equal to:%n <0.0>%n"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_with_primitive_positive_zero(){
    final double positiveZero=0.0;
    try {
      assertThat(positiveZero).isNotZero();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n <0.0>%nnot to be equal to:%n <0.0>%n"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_with_Double_positive_zero(){
    final Double positiveZero=0.0;
    try {
      assertThat(positiveZero).isNotZero();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n <0.0>%nnot to be equal to:%n <0.0>%n"));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
