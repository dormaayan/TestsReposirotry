public class ObjectAssert_extracting_with_function_Test {
  private Employee yoda;
  private static final Function<Employee,String> firstName=employee -> employee.getName().getFirst();
  @BeforeEach public void setUp(){
    yoda=new Employee(1L,new Name("Yoda"),800);
  }
  @Test public void should_allow_extracting_a_value_using_a_single_extractor(){
    assertThat(yoda).extracting(firstName).isEqualTo("Yoda");
    assertThat(yoda).extracting(Employee::getAge).isEqualTo(800);
  }
  @Test public void should_rethrow_any_extractor_function_exception(){
    RuntimeException explosion=new RuntimeException("boom!");
    Throwable error=catchThrowable(() -> {
      throw explosion;
    }
);
    assertThat(error).isSameAs(explosion);
  }
  @Test public void should_throw_a_NullPointerException_if_the_given_extractor_is_null(){
    Function<Employee,Object> extractor=null;
    Throwable error=catchThrowable(() -> assertThat(yoda).extracting(extractor));
    assertThat(error).isInstanceOf(NullPointerException.class).hasMessage("The given java.util.function.Function extractor must not be null");
  }
  @Test public void extracting_should_honor_registered__comparator(){
    assertThat(yoda).usingComparator(ALWAY_EQUALS).extracting(firstName).isEqualTo("YODA");
  }
  @Test public void extracting_should_keep_assertion_state(){
    AbstractObjectAssert<?,?> assertion=assertThat(yoda).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparator(ALWAY_EQUALS).usingComparatorForFields(ALWAY_EQUALS_STRING,"foo").usingComparatorForType(ALWAY_EQUALS_STRING,String.class).extracting(firstName).isEqualTo("YODA");
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(String.class)).isSameAs(ALWAY_EQUALS_STRING);
    assertThat(comparatorByPropertyOrFieldOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
    assertThat(comparatorOf(assertion).getComparator()).isSameAs(ALWAY_EQUALS);
  }
  public static Objects comparatorOf(  AbstractObjectAssert<?,?> assertion){
    return (Objects)PropertyOrFieldSupport.EXTRACTION.getValueOf("objects",assertion);
  }
  public static TypeComparators comparatorsByTypeOf(  AbstractObjectAssert<?,?> assertion){
    return (TypeComparators)PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorByType",assertion);
  }
  @SuppressWarnings("unchecked") public static Map<String,Comparator<?>> comparatorByPropertyOrFieldOf(  AbstractObjectAssert<?,?> assertion){
    return (Map<String,Comparator<?>>)PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorByPropertyOrField",assertion);
  }
}
