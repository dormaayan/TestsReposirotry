public class ListAssert_filteredOn_null_with_navigation_Test extends ListAssert_filteredOn_BaseTest {
  @Test public void shoul_honor_AssertFactory_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbitsWithoutNames();
    TolkienCharacterAssertFactory tolkienCharacterAssertFactory=new TolkienCharacterAssertFactory();
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").first().hasAge(33);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").last().hasAge(35);
    assertThat(hobbits,tolkienCharacterAssertFactory).filteredOnNull("name").element(0).hasAge(33);
  }
  @Test public void shoul_honor_ClassBased_strongly_typed_navigation_assertions(){
    Iterable<TolkienCharacter> hobbits=hobbitsWithoutNames();
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").first().hasAge(33);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").last().hasAge(35);
    assertThat(hobbits,TolkienCharacterAssert.class).filteredOnNull("name").element(0).hasAge(33);
  }
  protected static List<TolkienCharacter> hobbitsWithoutNames(){
    TolkienCharacter frodo=TolkienCharacter.of(null,33,HOBBIT);
    TolkienCharacter sam=TolkienCharacter.of(null,35,HOBBIT);
    return asList(frodo,sam);
  }
}
