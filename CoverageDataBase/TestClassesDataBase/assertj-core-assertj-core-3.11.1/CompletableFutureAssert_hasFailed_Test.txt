public class CompletableFutureAssert_hasFailed_Test extends BaseTest {
  @Test public void assertion_should_pass_if_completable_future_has_failed(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.completeExceptionally(new RuntimeException());
    assertThat(future).hasFailed();
  }
  @Test public void assertion_should_fail_when_completable_future_is_null(){
    assertThatThrownBy(() -> assertThat((CompletableFuture<String>)null).hasFailed()).isInstanceOf(AssertionError.class).hasMessage(format(actualIsNull()));
  }
  @Test public void assertion_should_fail_if_completable_future_is_incomplete(){
    CompletableFuture<String> future=new CompletableFuture<>();
    assertThatThrownBy(() -> assertThat(future).hasFailed()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
  @Test public void assertion_should_fail_if_completable_future_is_completed(){
    CompletableFuture<String> future=CompletableFuture.completedFuture("done");
    assertThatThrownBy(() -> assertThat(future).hasFailed()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
  @Test public void assertion_should_fail_if_completable_future_was_cancelled(){
    CompletableFuture<String> future=new CompletableFuture<>();
    future.cancel(true);
    assertThatThrownBy(() -> assertThat(future).hasFailed()).isInstanceOf(AssertionError.class).hasMessage(shouldHaveFailed(future).create());
  }
}
