/** 
 * Tests for <code> {@link Maps#assertHasEntrySatisfying(AssertionInfo,Map,Object,Consumer)}</code>.
 * @author Valeriy Vyrva
 */
public class Maps_assertHasEntrySatisfyingConsumer_Test extends MapsBaseTest {
  private static final Pattern IS_DIGITS=Pattern.compile("^\\d+$");
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=mapOf(entry("name","Yoda"),entry("color","green"),entry(null,null));
  }
  @Test public void should_pass_if_actual_contains_null_key_with_value_matching_condition(){
    maps.assertHasEntrySatisfying(someInfo(),actual,null,s -> assertThat(s).isNull());
  }
  @Test public void should_pass_if_actual_contains_key_with_value_matching_condition(){
    maps.assertHasEntrySatisfying(someInfo(),actual,"name",s -> assertThat(s).startsWith("Yo"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),(Map<Integer,?>)null,8,o -> assertThat(o).isNotNull())).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contains_key(){
    AssertionInfo info=someInfo();
    String key="id";
    try {
      maps.assertHasEntrySatisfying(info,actual,key,s -> assertThat(s).containsPattern(IS_DIGITS));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainKeys(actual,newLinkedHashSet(key)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_key_with_value_not_matching_condition(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),actual,"name",s -> assertThat(s).containsPattern(IS_DIGITS))).withMessage(shouldContainPattern("Yoda",IS_DIGITS.pattern()).create());
  }
  @Test public void should_fail_if_actual_contains_null_key_with_value_does_not_matching_condition(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),actual,null,s -> assertThat(s).isNotNull())).withMessage(actualIsNull());
  }
}
