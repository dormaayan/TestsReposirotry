public class OptionalDoubleAssert_hasValueCloseTo_Test extends BaseTest {
  @Test public void should_fail_when_optionaldouble_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((OptionalDouble)null).hasValueCloseTo(10.0,within(2.0))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_optionaldouble_is_empty(){
    double expectedValue=10.0;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(OptionalDouble.empty()).hasValueCloseTo(expectedValue,within(2.0))).withMessage(shouldHaveValueCloseTo(expectedValue).create());
  }
  @Test public void should_fail_if_actual_is_not_close_enough_to_expected_value(){
    double expectedValue=10.0;
    Offset<Double> offset=within(1.0);
    OptionalDouble actual=OptionalDouble.of(1.0);
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).hasValueCloseTo(expectedValue,offset)).withMessage(shouldHaveValueCloseTo(actual,expectedValue,offset,abs(expectedValue - actual.getAsDouble())).create());
  }
  @Test public void should_fail_if_offset_is_null(){
    assertThatNullPointerException().isThrownBy(() -> assertThat(OptionalDouble.of(10.0)).hasValueCloseTo(10.0,null));
  }
  @Test public void should_pass_if_optionaldouble_has_expected_value_close_to(){
    assertThat(OptionalDouble.of(10.0)).hasValueCloseTo(10.0,within(2.0));
  }
  @Test public void should_pass_if_optionaldouble_has_expected_value_with_less_than_given_offset(){
    assertThat(OptionalDouble.of(1.0)).hasValueCloseTo(1.0,within(1.0));
    assertThat(OptionalDouble.of(1.0)).hasValueCloseTo(2.0,within(10.0));
  }
  @Test public void should_pass_if_optionaldouble_has_expected_value_equal_given_offset(){
    assertThat(OptionalDouble.of(1.0)).hasValueCloseTo(1.0,within(0.0));
    assertThat(OptionalDouble.of(1.0)).hasValueCloseTo(0.0,within(1.0));
    assertThat(OptionalDouble.of(1.0)).hasValueCloseTo(2.0,within(1.0));
  }
}
