/** 
 * Tests for <code> {@link Maps#assertHasKeySatisfying(AssertionInfo,Map,Condition)}</code>.
 */
public class Maps_assertHasKeySatisfying_Test extends MapsBaseTest {
  private Condition<String> isColor=new Condition<String>("is color condition"){
    @Override public boolean matches(    String value){
      return "color".equals(value);
    }
  }
;
  private Condition<Object> isAge=new Condition<Object>(){
    @Override public boolean matches(    Object value){
      return "age".equals(value);
    }
  }
;
  @Test public void should_fail_if_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertHasKeySatisfying(someInfo(),actual,null)).withMessage("The condition to evaluate should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasKeySatisfying(someInfo(),null,isColor)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_any_key_matching_the_given_condition(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasKeySatisfying(info,actual,isAge);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainKey(actual,isAge));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_a_key_matching_the_given_condition(){
    maps.assertHasKeySatisfying(someInfo(),actual,isColor);
  }
}
