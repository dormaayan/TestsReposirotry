public class Classes_assertHasPublicMethods_Test extends ClassesBaseTest {
  @BeforeEach public void setupActual(){
    actual=MethodsClass.class;
  }
  @Test public void should_pass_if_actual_has_the_expected_public_methods(){
    classes.assertHasPublicMethods(someInfo(),actual,"publicMethod");
  }
  @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicMethods(someInfo(),actual)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_no_methods_are_expected_but_public_methods_are_available(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicMethods(someInfo(),actual)).withMessage(format(shouldNotHaveMethods(actual,Modifier.toString(Modifier.PUBLIC),false,newTreeSet("publicMethod","wait","equals","toString","hashCode","getClass","notify","notifyAll")).create()));
  }
  @Test() public void should_fail_if_methods_are_protected_or_private(){
    String[] expected=array("publicMethod","protectedMethod","privateMethod");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicMethods(someInfo(),actual,expected)).withMessage(format(shouldHaveMethods(actual,false,newTreeSet(expected),newTreeSet("protectedMethod","privateMethod")).create()));
  }
  @Test() public void should_fail_if_expected_public_methods_are_missing(){
    String[] expected=array("missingMethod","publicMethod");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicMethods(someInfo(),actual,expected)).withMessage(format(shouldHaveMethods(actual,false,newTreeSet(expected),newTreeSet("missingMethod")).create()));
  }
}
