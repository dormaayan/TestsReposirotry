public class IterableAssert_usingElementComparatorIgnoringFields_Test extends IterableAssertBaseTest {
  private Iterables iterablesBefore;
  @BeforeEach public void before(){
    iterablesBefore=getIterables(assertions);
  }
  @Override protected ConcreteIterableAssert<Object> invoke_api_method(){
    return assertions.usingElementComparatorIgnoringFields("field");
  }
  @Override protected void verify_internal_effects(){
    Iterables iterables=getIterables(assertions);
    assertThat(iterables).isNotSameAs(iterablesBefore);
    assertThat(iterables.getComparisonStrategy()).isInstanceOf(ComparatorBasedComparisonStrategy.class);
    ComparatorBasedComparisonStrategy strategy=(ComparatorBasedComparisonStrategy)iterables.getComparisonStrategy();
    assertThat(strategy.getComparator()).isInstanceOf(ExtendedByTypesComparator.class);
    assertThat(((IgnoringFieldsComparator)((ExtendedByTypesComparator)strategy.getComparator()).getComparator()).getFields()).containsOnly("field");
  }
  @Test public void should_be_able_to_use_a_comparator_for_specified_fields_of_elements_when_using_element_comparator_ignoring_fields(){
    Jedi actual=new Jedi("Yoda","green");
    Jedi other=new Jedi("Luke","green");
    assertThat(singletonList(actual)).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"name").usingElementComparatorIgnoringFields("lightSaberColor").contains(other);
  }
  @Test public void comparators_for_element_field_names_should_have_precedence_over_comparators_for_element_field_types_using_element_comparator_ignoring_fields(){
    Comparator<String> comparator=(o1,o2) -> o1.compareTo(o2);
    Jedi actual=new Jedi("Yoda","green");
    Jedi other=new Jedi("Luke","green");
    assertThat(singletonList(actual)).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"name").usingComparatorForElementFieldsWithType(comparator,String.class).usingElementComparatorIgnoringFields("lightSaberColor").contains(other);
  }
  @Test public void should_be_able_to_use_a_comparator_for_element_fields_with_specified_type_using_element_comparator_ignoring_fields(){
    Jedi actual=new Jedi("Yoda","green");
    Jedi other=new Jedi("Luke","blue");
    assertThat(singletonList(actual)).usingComparatorForElementFieldsWithType(ALWAY_EQUALS_STRING,String.class).usingElementComparatorIgnoringFields("name").contains(other);
  }
}
