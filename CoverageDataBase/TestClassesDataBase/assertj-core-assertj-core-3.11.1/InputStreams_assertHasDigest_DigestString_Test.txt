/** 
 * Tests for <code> {@link InputStreams#assertHasDigest(AssertionInfo,InputStream,MessageDigest,String)}</code>
 * @author Valeriy Vyrva
 */
public class InputStreams_assertHasDigest_DigestString_Test extends InputStreamsBaseTest {
  private final MessageDigest digest=mock(MessageDigest.class);
  private final String expected="";
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> inputStreams.assertHasDigest(INFO,null,digest,expected)).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_digest_is_null(){
    assertThatNullPointerException().isThrownBy(() -> inputStreams.assertHasDigest(INFO,null,(MessageDigest)null,expected)).withMessage("The message digest algorithm should not be null");
  }
  @Test public void should_throw_error_if_expected_is_null(){
    assertThatNullPointerException().isThrownBy(() -> inputStreams.assertHasDigest(INFO,null,digest,(byte[])null)).withMessage("The binary representation of digest to compare to should not be null");
  }
  @Test public void should_throw_error_wrapping_catched_IOException() throws IOException {
    IOException cause=new IOException();
    actual=mock(InputStream.class);
    given(actual.read(any())).willThrow(cause);
    Throwable error=catchThrowable(() -> inputStreams.assertHasDigest(INFO,actual,digest,expected));
    assertThat(error).isInstanceOf(InputStreamsException.class).hasCause(cause);
  }
  @Test public void should_fail_if_actual_does_not_have_expected_digest(){
    actual=getClass().getResourceAsStream("/red.png");
    given(digest.digest()).willReturn(new byte[]{0,1});
    catchThrowable(() -> inputStreams.assertHasDigest(INFO,actual,digest,expected));
    verify(failures).failure(INFO,shouldHaveDigest(actual,new DigestDiff("0001","",digest)));
  }
  @Test public void should_pass_if_actual_has_expected_digest(){
    actual=getClass().getResourceAsStream("/red.png");
    given(digest.digest()).willReturn(expected.getBytes());
    inputStreams.assertHasDigest(INFO,actual,digest,expected);
  }
}
