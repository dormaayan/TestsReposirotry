public class ObjectArrays_assertHasOnlyElementsOfTypes_Test extends ObjectArraysBaseTest {
  private static final Object[] ARRAY={6,7.0,8L};
  @Test public void should_pass_if_actual_has_only_elements_of_the_expected_types(){
    arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,Number.class);
    arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,Number.class,Long.class,Integer.class);
  }
  @Test public void should_pass_if_actual_has_only_elements_of_the_expected_types_even_if_some_types_dont_match_any_elements(){
    arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,Number.class,Long.class,Integer.class,String.class);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertHasOnlyElementsOfTypes(someInfo(),null,Integer.class)).withMessage(actualIsNull());
  }
  @Test public void should_throw_exception_if_no_expected_types_are_given(){
    assertThatNullPointerException().isThrownBy(() -> {
      Class<?>[] types=null;
      arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,types);
    }
);
  }
  @Test public void should_pass_if_actual_and_given_types_are_empty(){
    Class<?>[] types=new Class<?>[0];
    arrays.assertHasOnlyElementsOfTypes(someInfo(),array(),types);
  }
  @Test public void should_fail_if_expected_types_are_empty_but_actual_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Class<?>[] types=new Class<?>[0];
      arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,types);
    }
);
  }
  @Test public void should_fail_if_one_element_in_actual_does_not_belong_to_the_expected_types(){
    String error=shouldOnlyHaveElementsOfTypes(ARRAY,array(Long.class,String.class),newArrayList(6,7.0)).create();
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertHasOnlyElementsOfTypes(someInfo(),ARRAY,Long.class,String.class)).withMessage(error);
  }
}
