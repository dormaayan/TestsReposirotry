/** 
 * @author Paweł Stawicki
 * @author Joel Costigliola
 * @author Marcin Zajączkowski
 */
public class LocalDateTimeAssert_isBeforeOrEqualTo_Test extends LocalDateTimeAssertBaseTest {
  @Test public void test_isBeforeOrEqual_assertion(){
    assertThat(BEFORE).isBeforeOrEqualTo(REFERENCE);
    assertThat(REFERENCE).isBeforeOrEqualTo(REFERENCE);
    verify_that_isBeforeOrEqual_assertion_fails_and_throws_AssertionError(AFTER,REFERENCE);
  }
  @Test public void test_isBeforeOrEqual_assertion_error_message(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(LocalDateTime.of(2000,1,5,3,0,5)).isBeforeOrEqualTo(LocalDateTime.of(1998,1,1,3,3,3))).withMessage(format("%nExpecting:%n  <2000-01-05T03:00:05>%nto be before or equals to:%n  <1998-01-01T03:03:03>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      LocalDateTime actual=null;
      assertThat(actual).isBeforeOrEqualTo(LocalDateTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_dateTime_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDateTime.now()).isBeforeOrEqualTo((LocalDateTime)null)).withMessage("The LocalDateTime to compare actual with should not be null");
  }
  @Test public void should_fail_if_dateTime_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(LocalDateTime.now()).isBeforeOrEqualTo((String)null)).withMessage("The String representing the LocalDateTime to compare actual with should not be null");
  }
  private static void verify_that_isBeforeOrEqual_assertion_fails_and_throws_AssertionError(  LocalDateTime dateToCheck,  LocalDateTime reference){
    assertThatThrownBy(() -> assertThat(dateToCheck).isBeforeOrEqualTo(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToCheck).isBeforeOrEqualTo(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
