/** 
 * Tests for <code> {@link FileAssert#hasSameContentAs(java.io.File)}</code>.
 * @author Yvonne Wang
 */
public class FileAssert_hasSameContentAs_Test extends FileAssertBaseTest {
  private static File expected;
  @BeforeAll public static void beforeOnce(){
    expected=new File("xyz");
  }
  @Override protected FileAssert invoke_api_method(){
    return assertions.hasSameContentAs(expected);
  }
  @Override protected void verify_internal_effects(){
    verify(files).assertSameContentAs(getInfo(assertions),getActual(assertions),defaultCharset(),expected,defaultCharset());
  }
  @Test public void should_use_charset_specified_by_usingCharset_to_read_actual_file_content() throws Exception {
    Charset turkishCharset=Charset.forName("windows-1254");
    File actual=createDeleteOnExitTempFileWithContent("Gerçek",turkishCharset);
    File expected=createDeleteOnExitTempFileWithContent("Gerçek",defaultCharset());
    assertThat(actual).usingCharset(turkishCharset).hasSameContentAs(expected);
  }
  @Test public void should_allow_charset_to_be_specified_for_reading_expected_file_content() throws Exception {
    Charset turkishCharset=Charset.forName("windows-1254");
    File actual=createDeleteOnExitTempFileWithContent("Gerçek",defaultCharset());
    File expected=createDeleteOnExitTempFileWithContent("Gerçek",turkishCharset);
    assertThat(actual).hasSameContentAs(expected,turkishCharset);
  }
  private File createDeleteOnExitTempFileWithContent(  String content,  Charset charset) throws IOException {
    Path tempFile=Files.createTempFile("test","test");
    tempFile.toFile().deleteOnExit();
    Files.write(tempFile,asList(content),charset);
    return tempFile.toFile();
  }
}
