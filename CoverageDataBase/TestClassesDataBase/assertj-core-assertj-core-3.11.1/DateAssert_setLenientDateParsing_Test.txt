/** 
 * Tests the lenient mode of date parsing used in date assertions with date represented as  {@link String}.
 * @author Michal Kordas
 */
public class DateAssert_setLenientDateParsing_Test extends DateAssertBaseTest {
  @Override @BeforeEach public void setUp(){
    super.setUp();
    setLenientDateParsing(true);
  }
  @Test public void should_parse_date_leniently(){
    final Date date=parse("2001-02-03");
    assertThat(date).isEqualTo("2001-01-34");
    assertThat(date).isEqualTo("2001-02-02T24:00:00");
    assertThat(date).isEqualTo("2001-02-04T-24:00:00.000");
  }
  @Test public void should_parse_date_time_leniently(){
    final Date dateTime=parseDatetime("2001-02-03T04:05:06");
    assertThat(dateTime).isEqualTo("2001-02-03T04:05:05.1000");
    assertThat(dateTime).isEqualTo("2001-02-03T04:04:66");
  }
  @Test public void should_parse_date_time_with_milliseconds_leniently(){
    final Date dateTimeWithMs=parseDatetimeWithMs("2001-02-03T04:05:06.700");
    assertThat(dateTimeWithMs).isEqualTo("2001-02-03T04:05:07.-300");
  }
  @Test public void should_parse_date_time_leniently_using_custom_date_string_representation(){
    final Date date=parse("2001-02-03");
    assertThat(date).withDateFormat("yyyy/MM/dd").isEqualTo("2001/01/34");
  }
  @Test public void should_fail_if_given_date_string_representation_cant_be_parsed(){
    final String dateAsString="2001/02/03";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(new Date()).isEqualTo(dateAsString));
  }
  @Test public void should_fail_if_date_can_be_parsed_leniently_but_lenient_mode_is_disabled(){
    final Date date=parse("2001-02-03");
    setLenientDateParsing(false);
    try {
      assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(date).isEqualTo("2001-01-34")).withMessageContaining("Failed to parse");
    }
  finally {
      setLenientDateParsing(true);
    }
  }
  @Override @AfterEach public void tearDown(){
    super.tearDown();
    setLenientDateParsing(false);
  }
}
