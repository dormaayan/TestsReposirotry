/** 
 * Tests for <code> {@link Doubles#assertEqual(AssertionInfo,Double,double)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Doubles_assertEqual_Test extends DoublesBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> doubles.assertEqual(someInfo(),null,8d)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_doubles_are_equal(){
    doubles.assertEqual(someInfo(),8d,8d);
  }
  @Test public void should_fail_if_doubles_are_not_equal(){
    AssertionInfo info=someInfo();
    try {
      doubles.assertEqual(info,6d,8d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(6d,8d,info.representation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> doublesWithAbsValueComparisonStrategy.assertEqual(someInfo(),null,8d)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_doubles_are_equal_according_to_custom_comparison_strategy(){
    doublesWithAbsValueComparisonStrategy.assertEqual(someInfo(),8d,-8d);
  }
  @Test public void should_fail_if_doubles_are_not_equal_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      doublesWithAbsValueComparisonStrategy.assertEqual(info,6d,8d);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeEqual(6d,8d,absValueComparisonStrategy,new StandardRepresentation()));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
