public class LocalTimeAssert_isEqualToIgnoringSeconds_Test extends BaseTest {
  private final LocalTime refLocalTime=LocalTime.of(23,51,0,0);
  @Test public void should_pass_if_actual_is_equal_to_other_ignoring_second_fields(){
    assertThat(refLocalTime).isEqualToIgnoringSeconds(refLocalTime.plusSeconds(1));
  }
  @Test public void should_fail_if_actual_is_not_equal_to_given_localtimetime_with_second_ignored(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refLocalTime).isEqualToIgnoringSeconds(refLocalTime.plusMinutes(1))).withMessage(format("%nExpecting:%n" + "  <23:51>%n" + "to have same hour and minute as:%n"+ "  <23:52>%n"+ "but had not."));
  }
  @Test public void should_fail_as_seconds_fields_are_different_even_if_time_difference_is_less_than_a_second(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(refLocalTime).isEqualToIgnoringSeconds(refLocalTime.minusNanos(1))).withMessage(format("%nExpecting:%n" + "  <23:51>%n" + "to have same hour and minute as:%n"+ "  <23:50:59.999999999>%n"+ "but had not."));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      LocalTime actual=null;
      assertThat(actual).isEqualToIgnoringSeconds(LocalTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_given_localtimetime_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(refLocalTime).isEqualToIgnoringSeconds(null)).withMessage(NULL_LOCAL_TIME_PARAMETER_MESSAGE);
  }
}
