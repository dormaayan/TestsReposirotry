/** 
 * Tests for <code> {@link CharArrays#assertDoesNotHaveDuplicates(AssertionInfo,char[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class CharArrays_assertDoesNotHaveDuplicates_Test extends CharArraysBaseTest {
  @Override protected void initActualArray(){
    actual=arrayOf('a','b');
  }
  @Test public void should_pass_if_actual_does_not_have_duplicates(){
    arrays.assertDoesNotHaveDuplicates(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_is_empty(){
    arrays.assertDoesNotHaveDuplicates(someInfo(),emptyArray());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotHaveDuplicates(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_duplicates(){
    AssertionInfo info=someInfo();
    actual=arrayOf('a','b','a','b');
    try {
      arrays.assertDoesNotHaveDuplicates(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotHaveDuplicates(actual,newLinkedHashSet('a','b')));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_does_not_have_duplicates_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotHaveDuplicates(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    arraysWithCustomComparisonStrategy.assertDoesNotHaveDuplicates(someInfo(),emptyArray());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotHaveDuplicates(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_duplicates_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=arrayOf('A','b','A','b');
    try {
      arraysWithCustomComparisonStrategy.assertDoesNotHaveDuplicates(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotHaveDuplicates(actual,newLinkedHashSet('A','b'),caseInsensitiveComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
