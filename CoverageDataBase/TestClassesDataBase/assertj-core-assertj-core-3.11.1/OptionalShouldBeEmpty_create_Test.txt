public class OptionalShouldBeEmpty_create_Test {
  @Test public void should_create_error_message_for_optional(){
    String errorMessage=shouldBeEmpty(Optional.of("not-empty")).create();
    assertThat(errorMessage).isEqualTo(format("%nExpecting an empty Optional but was containing value: <\"not-empty\">."));
  }
  @Test public void should_fail_with_empty_optional(){
    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> shouldBeEmpty(Optional.empty()).create());
  }
  @Test public void should_create_error_message_for_optionaldouble(){
    String errorMessage=shouldBeEmpty(OptionalDouble.of(1)).create();
    assertThat(errorMessage).isEqualTo(format("%nExpecting an empty OptionalDouble but was containing value: <1.0>."));
  }
  @Test public void should_create_error_message_for_optionalint(){
    String errorMessage=shouldBeEmpty(OptionalInt.of(1)).create();
    assertThat(errorMessage).isEqualTo(format("%nExpecting an empty OptionalInt but was containing value: <1>."));
  }
  @Test public void should_create_error_message_for_optionallong(){
    String errorMessage=shouldBeEmpty(OptionalLong.of(1L)).create();
    assertThat(errorMessage).isEqualTo(format("%nExpecting an empty OptionalLong but was containing value: <1L>."));
  }
}
