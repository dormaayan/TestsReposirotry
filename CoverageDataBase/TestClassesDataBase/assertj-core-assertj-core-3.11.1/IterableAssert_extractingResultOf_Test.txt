/** 
 * Tests for: <ul> <li><code> {@link AbstractIterableAssert#extractingResultOf(String)}</code>, <li><code> {@link AbstractIterableAssert#extractingResultOf(String,Class)}</code>. </ul>
 * @author Micha≈Ç Piotrkowski
 */
public class IterableAssert_extractingResultOf_Test {
  private static FluentJedi yoda;
  private static FluentJedi vader;
  private static Iterable<FluentJedi> jedis;
  @BeforeAll public static void setUpOnce(){
    Assertions.setAllowExtractingPrivateFields(true);
    yoda=new FluentJedi(new Name("Yoda"),800,false);
    vader=new FluentJedi(new Name("Darth Vader"),50,true);
    jedis=newArrayList(yoda,vader);
  }
  @Test public void should_allow_assertions_on_method_invocation_result_extracted_from_given_iterable(){
    assertThat(jedis).extractingResultOf("age").containsOnly(800,50);
    assertThat(jedis).extractingResultOf("darkSide").containsOnly(false,true);
    assertThat(jedis).extractingResultOf("name").containsOnly(new Name("Yoda"),new Name("Darth Vader"));
    assertThat(jedis).extractingResultOf("toString").containsOnly("Yoda","Darth Vader");
  }
  @Test public void should_allow_assertions_on_method_invocation_result_extracted_from_given_iterable_with_enforcing_return_type(){
    assertThat(jedis).extractingResultOf("name",Name.class).containsOnly(new Name("Yoda"),new Name("Darth Vader"));
  }
  @Test public void should_throw_error_if_no_method_with_given_name_can_be_extracted(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(jedis).extractingResultOf("unknown")).withMessage("Can't find method 'unknown' in class FluentJedi.class. Make sure public method exists and accepts no arguments!");
  }
  @Test public void should_use_method_name_as_description_when_extracting_result_of_method_list(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(jedis).extractingResultOf("age").isEmpty()).withMessageContaining("[Extracted: result of age()]");
  }
  @Test public void should_use_method_name_as_description_when_extracting_typed_result_of_method_list(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(jedis).extractingResultOf("age",Integer.class).isEmpty()).withMessageContaining("[Extracted: result of age()]");
  }
  @Test public void extractingResultOf_should_keep_assertion_state(){
    AbstractListAssert<?,?,?,?> assertion=assertThat(jedis).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"foo").usingComparatorForElementFieldsWithType(ALWAY_EQUALS_TIMESTAMP,Timestamp.class).usingComparatorForType(CaseInsensitiveStringComparator.instance,String.class).extractingResultOf("toString").containsOnly("YODA","darth vader");
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(String.class)).isSameAs(CaseInsensitiveStringComparator.instance);
    assertThat(comparatorForElementFieldsWithTypeOf(assertion).get(Timestamp.class)).isSameAs(ALWAY_EQUALS_TIMESTAMP);
    assertThat(comparatorForElementFieldsWithNamesOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
  }
  @Test public void strongly_typed_extractingResultOf_should_keep_assertion_state(){
    AbstractListAssert<?,?,?,?> assertion=assertThat(jedis).as("test description").withFailMessage("error message").withRepresentation(UNICODE_REPRESENTATION).usingComparatorForElementFieldsWithNames(ALWAY_EQUALS_STRING,"foo").usingComparatorForElementFieldsWithType(ALWAY_EQUALS_TIMESTAMP,Timestamp.class).usingComparatorForType(CaseInsensitiveStringComparator.instance,String.class).extractingResultOf("toString",String.class).containsOnly("YODA","darth vader");
    assertThat(assertion.descriptionText()).isEqualTo("test description");
    assertThat(assertion.info.representation()).isEqualTo(UNICODE_REPRESENTATION);
    assertThat(assertion.info.overridingErrorMessage()).isEqualTo("error message");
    assertThat(comparatorsByTypeOf(assertion).get(String.class)).isSameAs(CaseInsensitiveStringComparator.instance);
    assertThat(comparatorForElementFieldsWithTypeOf(assertion).get(Timestamp.class)).isSameAs(ALWAY_EQUALS_TIMESTAMP);
    assertThat(comparatorForElementFieldsWithNamesOf(assertion).get("foo")).isSameAs(ALWAY_EQUALS_STRING);
  }
}
