/** 
 * Tests for <code> {@link DoubleArrays#assertIsSortedAccordingToComparator(AssertionInfo,double[],Comparator)}</code>
 * @author Joel Costigliola
 */
public class DoubleArrays_assertIsSortedAccordingToComparator_Test extends DoubleArraysBaseTest {
  private Comparator<Double> doubleDescendingOrderComparator;
  private Comparator<Double> doubleSquareComparator;
  @Override @BeforeEach public void setUp(){
    super.setUp();
    actual=new double[]{4.0,3.0,2.0,2.0,1.0};
    doubleDescendingOrderComparator=(double1,double2) -> -double1.compareTo(double2);
    doubleSquareComparator=(double1,double2) -> new Double(double1 * double1).compareTo(new Double(double2 * double2));
  }
  @Test public void should_pass_if_actual_is_sorted_according_to_given_comparator(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),actual,doubleDescendingOrderComparator);
  }
  @Test public void should_pass_if_actual_is_empty_whatever_given_comparator_is(){
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),doubleDescendingOrderComparator);
    arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),doubleSquareComparator);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),null,doubleDescendingOrderComparator)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_comparator_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),emptyArray(),null));
  }
  @Test public void should_fail_if_actual_is_not_sorted_according_to_given_comparator(){
    actual=new double[]{3.0,2.0,1.0,9.0};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertIsSortedAccordingToComparator(someInfo(),actual,doubleDescendingOrderComparator)).withMessage(shouldBeSortedAccordingToGivenComparator(2,actual,doubleDescendingOrderComparator).create());
  }
}
