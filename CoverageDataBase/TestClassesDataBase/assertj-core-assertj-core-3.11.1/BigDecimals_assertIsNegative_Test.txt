/** 
 * Tests for <code> {@link BigDecimals#assertIsNegative(AssertionInfo,BigDecimal)}</code>.
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class BigDecimals_assertIsNegative_Test extends BigDecimalsBaseTest {
  @Test public void should_succeed_since_actual_is_negative(){
    numbers.assertIsNegative(someInfo(),new BigDecimal("-1.0"));
  }
  @Test public void should_fail_since_actual_is_not_negative(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertIsNegative(someInfo(),BigDecimal.ONE)).withMessage(format("%nExpecting:%n <1>%nto be less than:%n <0> "));
  }
  @Test public void should_fail_since_actual_is_zero(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertIsNegative(someInfo(),BigDecimal.ZERO)).withMessage(format("%nExpecting:%n <0>%nto be less than:%n <0> "));
  }
  @Test public void should_succeed_since_actual_is_negative_according_to_custom_comparison_strategy(){
    numbersWithComparatorComparisonStrategy.assertIsNegative(someInfo(),new BigDecimal("-1.0"));
  }
  @Test public void should_fail_since_actual_is_not_negative_according_to_custom_comparison_strategy(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbersWithComparatorComparisonStrategy.assertIsNegative(someInfo(),BigDecimal.ONE)).withMessage(format("%nExpecting:%n <1>%nto be less than:%n <0> when comparing values using org.assertj.core.util.BigDecimalComparator"));
  }
}
