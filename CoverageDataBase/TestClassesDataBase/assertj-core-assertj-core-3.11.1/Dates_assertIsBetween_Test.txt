/** 
 * Tests for <code> {@link Dates#assertIsBetween(AssertionInfo,Date,Date,Date,boolean,boolean)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertIsBetween_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=parseDate("2011-09-27");
  }
  @Test public void should_fail_if_actual_is_not_between_given_period(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-10-01");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    boolean inclusiveStart=true;
    boolean inclusiveEnd=true;
    try {
      dates.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equals_to_start_of_given_period_and_start_is_not_included_in_given_period(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-09-01");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    boolean inclusiveStart=false;
    boolean inclusiveEnd=true;
    try {
      dates.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equals_to_end_of_given_period_and_end_is_not_included_in_given_period(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-09-30");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    boolean inclusiveStart=true;
    boolean inclusiveEnd=false;
    try {
      dates.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_throw_error_if_start_date_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      Date end=parseDate("2011-09-30");
      dates.assertIsBetween(someInfo(),actual,null,end,true,true);
    }
).withMessage(startDateToCompareActualWithIsNull());
  }
  @Test public void should_throw_error_if_end_date_is_null(){
    assertThatNullPointerException().isThrownBy(() -> {
      Date start=parseDate("2011-09-01");
      dates.assertIsBetween(someInfo(),actual,start,null,true,true);
    }
).withMessage(endDateToCompareActualWithIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Date start=parseDate("2011-09-01");
      Date end=parseDate("2011-09-30");
      dates.assertIsBetween(someInfo(),null,start,end,true,true);
    }
).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_strictly_between_given_period(){
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    dates.assertIsBetween(someInfo(),actual,start,end,false,false);
  }
  @Test public void should_pass_if_actual_is_equals_to_start_of_given_period_and_start_is_included_in_given_period(){
    actual=parseDate("2011-09-01");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    dates.assertIsBetween(someInfo(),actual,start,end,true,false);
    dates.assertIsBetween(someInfo(),actual,start,end,true,true);
  }
  @Test public void should_pass_if_actual_is_equals_to_end_of_given_period_and_end_is_included_in_given_period(){
    actual=parseDate("2011-09-30");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    dates.assertIsBetween(someInfo(),actual,start,end,false,true);
    dates.assertIsBetween(someInfo(),actual,start,end,true,true);
  }
  @Test public void should_fail_if_actual_is_not_between_given_period_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-10-01");
    Date start=parseDate("2011-09-01");
    Date end=parseDate("2011-09-30");
    boolean inclusiveStart=true;
    boolean inclusiveEnd=true;
    try {
      datesWithCustomComparisonStrategy.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equals_to_start_of_given_period_and_start_is_not_included_in_given_period_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-09-01");
    Date start=parseDate("2011-09-30");
    Date end=parseDate("2011-10-30");
    boolean inclusiveStart=false;
    boolean inclusiveEnd=true;
    try {
      datesWithCustomComparisonStrategy.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equals_to_end_of_given_period_and_end_is_not_included_in_given_period_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    actual=parseDate("2011-09-01");
    Date start=parseDate("2011-08-01");
    Date end=parseDate("2011-09-30");
    boolean inclusiveStart=true;
    boolean inclusiveEnd=false;
    try {
      datesWithCustomComparisonStrategy.assertIsBetween(info,actual,start,end,inclusiveStart,inclusiveEnd);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBetween(actual,start,end,inclusiveStart,inclusiveEnd,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_throw_error_if_start_date_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> {
      Date end=parseDate("2011-09-30");
      datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,null,end,true,true);
    }
).withMessage(startDateToCompareActualWithIsNull());
  }
  @Test public void should_throw_error_if_end_date_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> {
      Date start=parseDate("2011-09-01");
      datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,null,true,true);
    }
).withMessage(endDateToCompareActualWithIsNull());
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Date start=parseDate("2011-09-01");
      Date end=parseDate("2011-09-30");
      datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),null,start,end,true,true);
    }
).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_strictly_between_given_period_according_to_custom_comparison_strategy(){
    Date start=parseDate("2011-08-30");
    Date end=parseDate("2011-10-01");
    datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,end,false,false);
  }
  @Test public void should_pass_if_actual_is_equals_to_start_of_given_period_and_start_is_included_in_given_period_according_to_custom_comparison_strategy(){
    actual=parseDate("2011-09-01");
    Date start=parseDate("2011-09-10");
    Date end=parseDate("2011-10-01");
    datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,end,true,false);
    datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,end,true,true);
  }
  @Test public void should_pass_if_actual_is_equals_to_end_of_given_period_and_end_is_included_in_given_period_according_to_custom_comparison_strategy(){
    actual=parseDate("2011-09-15");
    Date start=parseDate("2011-08-30");
    Date end=parseDate("2011-09-30");
    datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,end,false,true);
    datesWithCustomComparisonStrategy.assertIsBetween(someInfo(),actual,start,end,true,true);
  }
}
