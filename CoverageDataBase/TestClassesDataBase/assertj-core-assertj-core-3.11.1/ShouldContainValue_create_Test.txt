/** 
 * Tests for <code> {@link ShouldContainValue#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code> .
 * @author Nicolas Fran√ßois
 */
public class ShouldContainValue_create_Test {
  @Test public void should_create_error_message(){
    Map<?,?> map=mapOf(entry("name","Yoda"),entry("color","green"));
    ErrorMessageFactory factory=shouldContainValue(map,"VeryOld");
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <{\"color\"=\"green\", \"name\"=\"Yoda\"}>%n"+ "to contain value:%n"+ "  <\"VeryOld\">"));
  }
  @Test public void should_create_error_message_with_value_condition(){
    Map<?,?> map=mapOf(entry("name","Yoda"),entry("color","green"));
    ErrorMessageFactory factory=shouldContainValue(map,new TestCondition<>("test condition"));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <{\"color\"=\"green\", \"name\"=\"Yoda\"}>%n"+ "to contain a value satisfying:%n"+ "  <test condition>"));
  }
}
