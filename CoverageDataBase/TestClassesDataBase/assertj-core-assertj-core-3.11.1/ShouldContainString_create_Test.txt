/** 
 * Tests for <code> {@link ShouldContainCharSequence#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code>.
 * @author Alex Ruiz
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class ShouldContainString_create_Test {
  private ErrorMessageFactory factory;
  @Test public void should_create_error_message(){
    factory=shouldContain("Yoda","Luke");
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting:%n <\"Yoda\">%nto contain:%n <\"Luke\"> "));
  }
  @Test public void should_create_error_message_with_custom_comparison_strategy(){
    factory=shouldContain("Yoda","Luke",new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting:%n <\"Yoda\">%nto contain:%n <\"Luke\"> when comparing values using CaseInsensitiveStringComparator"));
  }
  @Test public void should_create_error_message_when_ignoring_case(){
    factory=shouldContainIgnoringCase("Yoda","Luke");
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting:%n <\"Yoda\">%nto contain:%n <\"Luke\">%n (ignoring case)"));
  }
  @Test public void should_create_error_message_with_several_string_values(){
    factory=shouldContain("Yoda, Luke",array("Luke","Vador","Solo"),newSet("Vador","Solo"));
    String message=factory.create(new TextDescription("Test"),new StandardRepresentation());
    assertThat(message).isEqualTo(String.format("[Test] %nExpecting:%n <\"Yoda, Luke\">%nto contain:%n <[\"Luke\", \"Vador\", \"Solo\"]>%nbut could not find:%n <[\"Vador\", \"Solo\"]>%n "));
  }
}
