/** 
 * Tests for <code> {@link Dates#assertIsBeforeYear(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertIsBeforeYear_Test extends DatesBaseTest {
  @Test public void should_fail_if_actual_is_not_strictly_before_given_year(){
    AssertionInfo info=someInfo();
    int year=2010;
    try {
      dates.assertIsBeforeYear(info,actual,year);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBeforeYear(actual,year));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_year_is_equals_to_given_year(){
    AssertionInfo info=someInfo();
    parseDate("2011-01-01");
    int year=2011;
    try {
      dates.assertIsBeforeYear(info,actual,year);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBeforeYear(actual,year));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertIsBeforeYear(someInfo(),null,2010)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_strictly_before_given_year(){
    dates.assertIsBeforeYear(someInfo(),actual,2020);
  }
  @Test public void should_fail_if_actual_is_not_strictly_before_given_year_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int year=2010;
    try {
      datesWithCustomComparisonStrategy.assertIsBeforeYear(info,actual,year);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBeforeYear(actual,year));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_year_is_equals_to_given_year_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    parseDate("2011-01-01");
    int year=2011;
    try {
      datesWithCustomComparisonStrategy.assertIsBeforeYear(info,actual,year);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeBeforeYear(actual,year));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertIsBeforeYear(someInfo(),null,2010)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_strictly_before_given_year_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertIsBeforeYear(someInfo(),actual,2020);
  }
}
