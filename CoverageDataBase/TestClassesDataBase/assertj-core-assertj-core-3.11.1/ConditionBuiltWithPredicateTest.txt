public class ConditionBuiltWithPredicateTest implements WithAssertions {
  private final Set<String> jedis=newLinkedHashSet("Luke","Yoda","Obiwan");
  private Condition<String> jedi;
  private Condition<String> jediPower;
  private static final String JEDI="jedi";
  @BeforeEach public void setup(){
    Predicate<String> jediPredicate=s -> jedis.contains(s);
    jedi=new Condition<>(jediPredicate,"a %s",JEDI);
    jediPower=new Condition<>(jediPredicate,"%s power",JEDI);
  }
  @Test public void is_condition_should_be_met(){
    assertThat("Luke").is(jedi);
  }
  @Test public void has_condition_should_be_met(){
    assertThat("Luke").has(jediPower);
  }
  @Test public void satisfies_condition_should_be_met(){
    assertThat("Luke").satisfies(jedi);
  }
  @Test public void isNot_condition_should_be_met(){
    assertThat("Vader").isNot(jedi).doesNotHave(jediPower);
  }
  @Test public void doesNotHave_condition_should_be_met(){
    assertThat("Vader").doesNotHave(jediPower);
  }
  @Test public void should_fail_if_condition_is_not_met(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat("Vader").is(jedi)).withMessage(format("%n" + "Expecting:%n" + " <\"Vader\">%n"+ "to be <a jedi>"));
  }
}
