public class Throwables_assertHasCause_Test extends ThrowablesBaseTest {
  private static final String EXCEPTION_MESSAGE="invalid arg";
  private Throwable throwableWithCause=new Throwable(new IllegalArgumentException(EXCEPTION_MESSAGE));
  @Test public void should_pass_if_cause_has_expected_type_and_message(){
    throwables.assertHasCause(someInfo(),throwableWithCause,new IllegalArgumentException(EXCEPTION_MESSAGE));
  }
  @Test public void should_pass_if_actual_has_no_cause_and_expected_cause_is_null(){
    throwables.assertHasCause(someInfo(),new Throwable(),null);
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> throwables.assertHasCause(someInfo(),null,new Throwable())).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_has_no_cause_and_expected_cause_is_not_null(){
    AssertionInfo info=someInfo();
    Throwable expectedCause=new Throwable();
    try {
      throwables.assertHasCause(info,actual,expectedCause);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveCause(actual.getCause(),expectedCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_has_cause_and_expected_cause_is_null(){
    AssertionInfo info=someInfo();
    try {
      throwables.assertHasCause(info,throwableWithCause,null);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveNoCause(throwableWithCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_cause_is_not_instance_of_expected_type(){
    AssertionInfo info=someInfo();
    Throwable expectedCause=new NullPointerException(EXCEPTION_MESSAGE);
    try {
      throwables.assertHasCause(info,throwableWithCause,expectedCause);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveCause(throwableWithCause.getCause(),expectedCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_cause_has_not_the_expected_message(){
    AssertionInfo info=someInfo();
    Throwable expectedCause=new IllegalArgumentException(EXCEPTION_MESSAGE + "foo");
    try {
      throwables.assertHasCause(info,throwableWithCause,expectedCause);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveCause(throwableWithCause.getCause(),expectedCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_cause_has_no_message_and_the_expected_cause_has_one(){
    AssertionInfo info=someInfo();
    Throwable expectedCause=new IllegalArgumentException("error cause");
    throwableWithCause=new Throwable(new IllegalArgumentException());
    try {
      throwables.assertHasCause(info,throwableWithCause,expectedCause);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveCause(throwableWithCause.getCause(),expectedCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_cause_has_different_type_and_message_to_expected_cause(){
    AssertionInfo info=someInfo();
    Throwable expectedCause=new NullPointerException("error cause");
    try {
      throwables.assertHasCause(info,throwableWithCause,expectedCause);
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveCause(throwableWithCause.getCause(),expectedCause));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
