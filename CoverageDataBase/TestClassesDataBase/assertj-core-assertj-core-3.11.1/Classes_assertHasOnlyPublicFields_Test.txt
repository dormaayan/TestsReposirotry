/** 
 * Tests for <code > {@link org.assertj.core.internal.Classes#assertHasOnlyPublicFields(org.assertj.core.api.AssertionInfo,Class,String)}</code> .
 * @author Filip Hrisafov
 */
public class Classes_assertHasOnlyPublicFields_Test extends ClassesBaseTest {
  private static final LinkedHashSet<String> EMPTY_STRING_SET=Sets.<String>newLinkedHashSet();
  @BeforeEach public void setupActual(){
    actual=AnnotatedClass.class;
  }
  @Test public void should_pass_if_class_has_all_the_expected_public_fields(){
    classes.assertHasOnlyPublicFields(someInfo(),actual,"publicField","publicField2");
  }
  @Test public void should_pass_if_class_has_all_the_expected_public_fields_whatever_the_order_is(){
    classes.assertHasOnlyPublicFields(someInfo(),actual,"publicField2","publicField");
  }
  @Test public void should_pass_if_class_has_no_public_fields_and_none_are_expected(){
    classes.assertHasOnlyPublicFields(someInfo(),NoField.class);
  }
  @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_some_public_fields_are_not_present_in_the_expected_fields(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual,"publicField")).withMessage(format(shouldOnlyHaveFields(actual,newLinkedHashSet("publicField"),EMPTY_STRING_SET,newLinkedHashSet("publicField2")).create()));
  }
  @Test public void should_fail_if_some_public_fields_are_missing(){
    String[] expected=new String[]{"missingField","publicField","publicField2"};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual,expected)).withMessage(format(shouldOnlyHaveFields(actual,newLinkedHashSet(expected),newLinkedHashSet("missingField"),EMPTY_STRING_SET).create()));
  }
  @Test public void should_fail_if_fields_are_protected_or_private(){
    String[] expected=new String[]{"publicField","publicField2","protectedField","privateField"};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual,expected)).withMessage(format(shouldOnlyHaveFields(actual,newLinkedHashSet(expected),newLinkedHashSet("protectedField","privateField"),EMPTY_STRING_SET).create()));
  }
  @Test public void should_fail_if_fields_are_not_found_and_not_expected(){
    String[] expected=new String[]{"publicField","protectedField","privateField"};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual,expected)).withMessage(format(shouldOnlyHaveFields(actual,newLinkedHashSet(expected),newLinkedHashSet("protectedField","privateField"),newLinkedHashSet("publicField2")).create()));
  }
  @Test public void should_fail_if_no_public_fields_are_expected_and_class_has_some(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasOnlyPublicFields(someInfo(),actual)).withMessage(shouldHaveNoPublicFields(actual,newLinkedHashSet("publicField","publicField2")).create());
  }
}
