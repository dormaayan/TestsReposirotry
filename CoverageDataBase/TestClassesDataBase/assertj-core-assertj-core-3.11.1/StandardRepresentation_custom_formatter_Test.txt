/** 
 * Tests for  {@link org.assertj.core.presentation.StandardRepresentation#toStringOf(Object)}.
 * @author Joel Costigliola
 */
public class StandardRepresentation_custom_formatter_Test {
  @AfterEach public void afterTest(){
    StandardRepresentation.removeAllRegisteredFormatters();
  }
  @Test public void should_use_registered_formatter_for_type(){
    Object longNumber=123L;
    assertThat(STANDARD_REPRESENTATION.toStringOf(longNumber)).isEqualTo("123L");
    assertThat(HEXA_REPRESENTATION.toStringOf(longNumber)).isEqualTo("0x0000_0000_0000_007B");
    assertThat(BINARY_REPRESENTATION.toStringOf(longNumber)).isEqualTo("0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01111011");
    assertThat(UNICODE_REPRESENTATION.toStringOf(longNumber)).isEqualTo("123L");
    Assertions.registerFormatterForType(Long.class,value -> "$" + value + "$");
    assertThat(STANDARD_REPRESENTATION.toStringOf(longNumber)).isEqualTo("$123$");
    assertThat(HEXA_REPRESENTATION.toStringOf(longNumber)).isEqualTo("$123$");
    assertThat(BINARY_REPRESENTATION.toStringOf(longNumber)).isEqualTo("$123$");
    assertThat(UNICODE_REPRESENTATION.toStringOf(longNumber)).isEqualTo("$123$");
  }
  @Test public void should_remove_all_registered_formatters_after_resetting_to_default(){
    StandardRepresentation.registerFormatterForType(String.class,value -> "'" + value + "'");
    StandardRepresentation.registerFormatterForType(Integer.class,value -> "int(" + Integer.toBinaryString(value) + ")");
    StandardRepresentation.registerFormatterForType(Integer.class,value -> "int(" + Integer.toBinaryString(value) + ")");
    Object string="abc";
    Object intNumber=8;
    assertThat(STANDARD_REPRESENTATION.toStringOf(string)).isEqualTo("'abc'");
    assertThat(STANDARD_REPRESENTATION.toStringOf(intNumber)).isEqualTo("int(1000)");
    StandardRepresentation.removeAllRegisteredFormatters();
    assertThat(STANDARD_REPRESENTATION.toStringOf(string)).isEqualTo("\"abc\"");
    assertThat(STANDARD_REPRESENTATION.toStringOf(intNumber)).isEqualTo("8");
  }
}
