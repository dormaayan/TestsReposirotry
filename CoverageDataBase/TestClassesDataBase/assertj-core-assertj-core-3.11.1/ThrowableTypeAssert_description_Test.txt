public class ThrowableTypeAssert_description_Test {
  @BeforeAll public static void beforeAll(){
    Assertions.setRemoveAssertJRelatedElementsFromStackTrace(false);
  }
  public static Object[][] parameters(){
    return new Function[][]{{t -> ((ThrowableTypeAssert<?>)t).as("test description")},{t -> ((ThrowableTypeAssert<?>)t).describedAs("test description")},{t -> ((ThrowableTypeAssert<?>)t).as(new TextDescription("%s description","test"))},{t -> ((ThrowableTypeAssert<?>)t).describedAs(new TextDescription("%s description","test"))}};
  }
  @ParameterizedTest @MethodSource("parameters") public void should_contain_provided_description_if_nothing_is_thrown_by_lambda(  Function<ThrowableTypeAssert<?>,ThrowableTypeAssert<?>> descriptionAdder){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> descriptionAdder.apply(assertThatExceptionOfType(NoSuchElementException.class)).isThrownBy(() -> {
    }
)).withMessage(format("[test description] %nExpecting code to raise a throwable."));
  }
  @ParameterizedTest @MethodSource("parameters") public void should_contain_provided_description_when_exception_type_is_wrong(  Function<ThrowableTypeAssert<?>,ThrowableTypeAssert<?>> descriptionAdder){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> descriptionAdder.apply(assertThatExceptionOfType(NoSuchElementException.class)).isThrownBy(() -> {
      throw new IllegalArgumentException();
    }
)).withMessageContaining(format("[test description] %n" + "Expecting:%n" + "  <java.lang.IllegalArgumentException>%n"+ "to be an instance of:%n"+ "  <java.util.NoSuchElementException>"));
  }
  @ParameterizedTest @MethodSource("parameters") public void should_contain_provided_description_when_exception_message_is_wrong(  Function<ThrowableTypeAssert<?>,ThrowableTypeAssert<?>> descriptionAdder){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      descriptionAdder.apply(assertThatIllegalArgumentException()).isThrownBy(() -> {
        throw new IllegalArgumentException("some cause");
      }
).withMessage("other cause");
    }
).withMessage(format("[test description] %n" + "Expecting message:%n" + " <\"other cause\">%n"+ "but was:%n"+ " <\"some cause\">"));
  }
}
