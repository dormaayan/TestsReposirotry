public class IterableAssert_hasOnlyOneElementSatisfying_Test {
  @Test public void succeeds_if_iterable_has_only_one_element_and_that_element_statisfies_the_given_assertion(){
    List<Jedi> jedis=asList(new Jedi("Yoda","red"));
    assertThat(jedis).hasOnlyOneElementSatisfying(yoda -> assertThat(yoda.getName()).startsWith("Y"));
  }
  @Test public void succeeds_if_iterable_has_only_one_element_and_that_element_statisfies_the_given_assertions(){
    assertThat(asList(new Jedi("Yoda","red"))).hasOnlyOneElementSatisfying(yoda -> {
      assertThat(yoda.getName()).isEqualTo("Yoda");
      assertThat(yoda.lightSaberColor).isEqualTo("red");
    }
);
  }
  @Test public void fails_if_iterable_has_only_one_element_and_that_element_does_not_statisfy_the_given_assertion(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      List<Jedi> jedis=asList(new Jedi("Yoda","red"));
      assertThat(jedis).hasOnlyOneElementSatisfying(yoda -> assertThat(yoda.getName()).startsWith("L"));
    }
).withMessage(format("%nExpecting:%n <\"Yoda\">%nto start with:%n <\"L\">%n"));
  }
  @Test public void fails_if_iterable_has_only_one_element_and_that_element_does_not_statisfy_one_of_the_given_assertion(){
    List<Jedi> jedis=asList(new Jedi("Yoda","red"));
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      assertThat(jedis).hasOnlyOneElementSatisfying(yoda -> {
        assertThat(yoda.getName()).startsWith("Y");
        assertThat(yoda.getName()).startsWith("L");
      }
);
    }
).withMessage(format("%nExpecting:%n <\"Yoda\">%nto start with:%n <\"L\">%n"));
  }
  @Test public void fails_if_iterable_has_only_one_element_and_that_element_does_not_statisfy_the_soft_assertion(){
    List<Jedi> jedis=asList(new Jedi("Yoda","red"));
    Throwable assertionError=catchThrowable(() -> {
      assertThat(jedis).hasOnlyOneElementSatisfying(yoda -> {
        SoftAssertions softly=new SoftAssertions();
        softly.assertThat(yoda.getName()).startsWith("L");
        softly.assertThat(yoda.getName()).startsWith("M");
        softly.assertAll();
      }
);
    }
);
    assertThat(assertionError).hasMessageContaining(format("Expecting:%n <\"Yoda\">%nto start with:%n <\"L\">")).hasMessageContaining(format("Expecting:%n <\"Yoda\">%nto start with:%n <\"M\">"));
  }
  @Test public void fails_if_iterable_has_more_than_one_element(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      List<Jedi> jedis=asList(new Jedi("Yoda","red"),new Jedi("Luke","green"));
      assertThat(jedis).hasOnlyOneElementSatisfying(yoda -> assertThat(yoda.getName()).startsWith("Y"));
    }
).withMessageContaining("Expected size:<1> but was:<2>");
  }
}
