public class ShouldNotHaveAnyElementsOfTypes_create_Test {
  @Test public void should_create_error_message(){
    List<Number> actual=newArrayList(1,2,3.0,4.1,BigDecimal.ONE);
    Class<?>[] unexpectedTypes={Long.class,Double.class,BigDecimal.class};
    Map<Class<?>,List<Object>> nonMatchingElementsByType=new LinkedHashMap<>();
    nonMatchingElementsByType.put(BigDecimal.class,newArrayList(BigDecimal.ONE));
    nonMatchingElementsByType.put(Double.class,newArrayList(3.0,4.1));
    ShouldNotHaveAnyElementsOfTypes shouldNotHaveAnyElementsOfTypes=shouldNotHaveAnyElementsOfTypes(actual,unexpectedTypes,nonMatchingElementsByType);
    String message=shouldNotHaveAnyElementsOfTypes.create(new TestDescription("Test"),CONFIGURATION_PROVIDER.representation());
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <[1, 2, 3.0, 4.1, 1]>%n"+ "to not have any elements of the following types:%n"+ "  <[java.lang.Long, java.lang.Double, java.math.BigDecimal]>%n"+ "but found:%n"+ "  <{java.math.BigDecimal=[1], java.lang.Double=[3.0, 4.1]}>"));
  }
}
