/** 
 * Tests for <code> {@link Dates#assertIsInTheFuture(AssertionInfo,Date)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertIsInTheFuture_Test extends DatesBaseTest {
  @Test public void should_fail_if_actual_is_not_in_the_future(){
    AssertionInfo info=someInfo();
    try {
      dates.assertIsInTheFuture(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeInTheFuture(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_today(){
    AssertionInfo info=someInfo();
    try {
      actual=new Date();
      dates.assertIsInTheFuture(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeInTheFuture(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertIsInTheFuture(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_in_the_future(){
    actual=parseDate("2111-01-01");
    dates.assertIsInTheFuture(someInfo(),actual);
  }
  @Test public void should_fail_if_actual_is_not_in_the_future_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      datesWithCustomComparisonStrategy.assertIsInTheFuture(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeInTheFuture(actual,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_today_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      Calendar cal=Calendar.getInstance();
      cal.add(Calendar.DAY_OF_MONTH,1);
      Date tomorrow=cal.getTime();
      cal.add(Calendar.DAY_OF_MONTH,-2);
      Date yesterday=cal.getTime();
      actual=monthOf(tomorrow) == monthOf(new Date()) ? tomorrow : yesterday;
      datesWithCustomComparisonStrategy.assertIsInTheFuture(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeInTheFuture(actual,yearAndMonthComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertIsInTheFuture(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_in_the_future_according_to_custom_comparison_strategy(){
    actual=parseDate("2111-01-01");
    datesWithCustomComparisonStrategy.assertIsInTheFuture(someInfo(),actual);
  }
}
