/** 
 * Tests for <code> {@link Characters#assertUpperCase(AssertionInfo,Character)}</code>.
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class Characters_assertUpperCase_Test extends CharactersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> characters.assertUpperCase(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_uppercase(){
    characters.assertUpperCase(someInfo(),'A');
  }
  @Test public void should_fail_if_actual_is_not_uppercase(){
    AssertionInfo info=someInfo();
    try {
      characters.assertUpperCase(info,'a');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeUpperCase('a'));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> charactersWithCaseInsensitiveComparisonStrategy.assertUpperCase(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_uppercase_whatever_custom_comparison_strategy_is(){
    charactersWithCaseInsensitiveComparisonStrategy.assertUpperCase(someInfo(),'A');
  }
  @Test public void should_fail_if_actual_is_not_uppercase_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      charactersWithCaseInsensitiveComparisonStrategy.assertUpperCase(info,'a');
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeUpperCase('a'));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
