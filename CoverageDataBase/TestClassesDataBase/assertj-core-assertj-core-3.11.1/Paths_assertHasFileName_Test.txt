public class Paths_assertHasFileName_Test extends PathsBaseTest {
  public static FileSystemResource resource;
  private static Path existingFile;
  private static Path symlinkToExistingFile;
  private static Path nonExistingPath;
  private static Path symlinkToNonExistingPath;
  private static Path existingDirectory;
  private static Path symlinkToExistingDirectory;
  @BeforeAll public static void initPaths() throws IOException {
    resource=new FileSystemResource();
    final FileSystem fs=resource.getFileSystem();
    existingDirectory=fs.getPath("/dir1/dir2");
    symlinkToExistingDirectory=fs.getPath("/symlinkToExistingDirectory");
    Files.createDirectory(fs.getPath("/dir1"));
    Files.createDirectory(existingDirectory);
    Files.createSymbolicLink(symlinkToExistingDirectory,existingDirectory);
    existingFile=fs.getPath("/dir1/dir2/gc.log");
    symlinkToExistingFile=fs.getPath("/dir1/good-symlink");
    Files.createFile(existingFile);
    Files.createSymbolicLink(symlinkToExistingFile,existingFile);
    nonExistingPath=fs.getPath("/dir1/fake.log");
    symlinkToNonExistingPath=fs.getPath("/dir1/bad-symlink");
    Files.createSymbolicLink(symlinkToNonExistingPath,nonExistingPath);
  }
  @AfterAll public static void tearDown(){
    resource.close();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> paths.assertHasFileName(info,null,"file.txt")).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_given_file_name_is_null(){
    assertThatNullPointerException().isThrownBy(() -> paths.assertHasFileName(info,existingFile,null)).withMessage("expected fileName should not be null");
  }
  @Test public void should_pass_if_actual_file_has_the_given_file_name(){
    paths.assertHasFileName(info,existingFile,"gc.log");
  }
  @Test public void should_pass_if_actual_non_existent_path_has_the_given_file_name(){
    paths.assertHasFileName(info,nonExistingPath,"fake.log");
  }
  @Test public void should_pass_if_actual_symbolic_link_has_the_given_file_name(){
    paths.assertHasFileName(info,symlinkToNonExistingPath,"bad-symlink");
    paths.assertHasFileName(info,symlinkToExistingFile,"good-symlink");
  }
  @Test public void should_pass_if_actual_directory_has_the_given_file_name(){
    paths.assertHasFileName(info,existingDirectory,"dir2");
  }
}
