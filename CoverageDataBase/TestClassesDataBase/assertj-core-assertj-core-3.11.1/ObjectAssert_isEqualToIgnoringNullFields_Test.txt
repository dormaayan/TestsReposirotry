/** 
 * Tests for <code> {@link ObjectAssert#isEqualToIgnoringNullFields(Object)}</code>.
 * @author Nicolas Fran√ßois
 * @author Mikhail Mazursky
 */
public class ObjectAssert_isEqualToIgnoringNullFields_Test extends ObjectAssertBaseTest {
  private Jedi other=new Jedi("Yoda","Green");
  @Override protected ObjectAssert<Jedi> invoke_api_method(){
    return assertions.isEqualToIgnoringNullFields(other);
  }
  @Override @SuppressWarnings("unchecked") protected void verify_internal_effects(){
    verify(objects).assertIsEqualToIgnoringNullFields(getInfo(assertions),getActual(assertions),other,EMPTY_MAP,defaultTypeComparators());
  }
  @Test public void should_be_able_to_use_a_comparator_for_specified_fields(){
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Luke",null);
    assertThat(actual).usingComparatorForFields(ALWAY_EQUALS_STRING,"name").isEqualToIgnoringNullFields(other);
  }
  @Test public void comparators_for_fields_should_have_precedence_over_comparators_for_types(){
    Comparator<String> comparator=(o1,o2) -> o1.compareTo(o2);
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Luke",null);
    assertThat(actual).usingComparatorForFields(ALWAY_EQUALS_STRING,"name").usingComparatorForType(comparator,String.class).isEqualToIgnoringNullFields(other);
  }
  @Test public void should_be_able_to_use_a_comparator_for_specified_type(){
    Jedi actual=new Jedi("Yoda",null);
    Jedi other=new Jedi("Luke",null);
    assertThat(actual).usingComparatorForType(ALWAY_EQUALS_STRING,String.class).isEqualToIgnoringNullFields(other);
  }
}
