/** 
 * Tests for <code> {@link Diff#diff(File,File)}</code>.
 * @author Yvonne Wang
 */
public class Diff_diff_File_Test {
  private static Diff diff;
  private static TextFileWriter writer;
  @BeforeAll public static void setUpOnce(){
    diff=new Diff();
    writer=TextFileWriter.instance();
  }
  private File actual;
  private File expected;
  @BeforeEach public void setUp(){
    actual=Files.newTemporaryFile();
    actual.deleteOnExit();
    expected=Files.newTemporaryFile();
    expected.deleteOnExit();
  }
  @Test public void should_return_empty_diff_list_if_files_have_equal_content() throws IOException {
    String[] content=array("line0","line1");
    writer.write(actual,content);
    writer.write(expected,content);
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).isEmpty();
  }
  @Test public void should_return_diffs_if_files_do_not_have_equal_content() throws IOException {
    writer.write(actual,"line_0","line_1");
    writer.write(expected,"line0","line1");
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Changed content at line 1:%n" + "expecting:%n" + "  [\"line0\",%n"+ "   \"line1\"]%n"+ "but was:%n"+ "  [\"line_0\",%n"+ "   \"line_1\"]%n"));
  }
  @Test public void should_return_multiple_diffs_if_files_contain_multiple_differences() throws IOException {
    writer.write(actual,"line_0","line1","line_2");
    writer.write(expected,"line0","line1","line2");
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).hasSize(2);
    assertThat(diffs.get(0)).hasToString(format("Changed content at line 1:%n" + "expecting:%n" + "  [\"line0\"]%n"+ "but was:%n"+ "  [\"line_0\"]%n"));
    assertThat(diffs.get(1)).hasToString(format("Changed content at line 3:%n" + "expecting:%n" + "  [\"line2\"]%n"+ "but was:%n"+ "  [\"line_2\"]%n"));
  }
  @Test public void should_be_able_to_detect_mixed_differences() throws IOException {
    writer.write(actual,"line1","line2","line3","line4","line5","line 9","line 10","line 11");
    writer.write(expected,"line1","line1a","line1b","line2","line3","line7","line5");
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).hasSize(3);
    assertThat(diffs.get(0)).hasToString(format("Missing content at line 2:%n" + "  [\"line1a\",%n" + "   \"line1b\"]%n"));
    assertThat(diffs.get(1)).hasToString(format("Changed content at line 6:%n" + "expecting:%n" + "  [\"line7\"]%n"+ "but was:%n"+ "  [\"line4\"]%n"));
    assertThat(diffs.get(2)).hasToString(format("Extra content at line 8:%n" + "  [\"line 9\",%n" + "   \"line 10\",%n"+ "   \"line 11\"]%n"));
  }
  @Test public void should_return_diffs_if_content_of_actual_is_shorter_than_content_of_expected() throws IOException {
    writer.write(actual,"line_0");
    writer.write(expected,"line_0","line_1");
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Missing content at line 2:%n" + "  [\"line_1\"]%n"));
  }
  @Test public void should_return_diffs_if_content_of_actual_is_longer_than_content_of_expected() throws IOException {
    writer.write(actual,"line_0","line_1");
    writer.write(expected,"line_0");
    List<Delta<String>> diffs=diff.diff(actual,defaultCharset(),expected,defaultCharset());
    assertThat(diffs).hasSize(1);
    assertThat(diffs.get(0)).hasToString(format("Extra content at line 2:%n" + "  [\"line_1\"]%n"));
  }
}
