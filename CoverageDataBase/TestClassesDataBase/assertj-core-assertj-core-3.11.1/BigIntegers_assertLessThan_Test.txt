/** 
 * Tests for <code> {@link BigIntegers#assertLessThan(AssertionInfo,BigInteger,BigInteger)}</code>.
 */
public class BigIntegers_assertLessThan_Test extends BigIntegersBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> numbers.assertLessThan(someInfo(),null,ONE)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_is_less_than_other(){
    numbers.assertLessThan(someInfo(),ONE,TEN);
  }
  @Test public void should_fail_if_actual_is_equal_to_other(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertLessThan(info,TEN,TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLess(TEN,TEN));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_equal_to_other_by_comparison(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertLessThan(info,TEN,new BigInteger("10"));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLess(TEN,new BigInteger("10")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other(){
    AssertionInfo info=someInfo();
    try {
      numbers.assertLessThan(info,TEN,ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLess(TEN,ONE));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    numbersWithAbsValueComparisonStrategy.assertLessThan(someInfo(),ONE,TEN.negate());
  }
  @Test public void should_fail_if_actual_is_equal_to_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertLessThan(info,TEN.negate(),TEN);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLess(TEN.negate(),TEN,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_less_than_other_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    try {
      numbersWithAbsValueComparisonStrategy.assertLessThan(info,TEN.negate(),ONE);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldBeLess(TEN.negate(),ONE,absValueComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
