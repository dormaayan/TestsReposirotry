/** 
 * Tests for <code> {@link Iterables#assertNotEmpty(AssertionInfo,Collection)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Iterables_assertNotEmpty_Test extends IterablesBaseTest {
  @Test public void should_pass_if_actual_is_not_empty(){
    iterables.assertNotEmpty(someInfo(),newArrayList("Luke"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterables.assertNotEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty(){
    AssertionInfo info=someInfo();
    try {
      iterables.assertNotEmpty(info,emptyList());
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEmpty());
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_is_not_empty_whatever_custom_comparison_strategy_is(){
    iterablesWithCaseInsensitiveComparisonStrategy.assertNotEmpty(someInfo(),newArrayList("Luke"));
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> iterablesWithCaseInsensitiveComparisonStrategy.assertNotEmpty(someInfo(),null)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    try {
      iterablesWithCaseInsensitiveComparisonStrategy.assertNotEmpty(info,emptyList());
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEmpty());
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
