public class ShouldHaveUserInfo_create_Test {
  @Test public void should_create_error_message_for_uri_has_user_info() throws Exception {
    URI uri=new URI("http://test:pass@assertj.org/news");
    String error=shouldHaveUserInfo(uri,"test:success").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting user info of%n" + "  <http://test:pass@assertj.org/news>%n"+ "to be:%n"+ "  <\"test:success\">%n"+ "but was:%n"+ "  <\"test:pass\">"));
  }
  @Test public void should_create_error_message_for_uri_has_no_user_info() throws Exception {
    URI uri=new URI("http://test:pass@assertj.org/news");
    String error=shouldHaveUserInfo(uri,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://test:pass@assertj.org/news>%n"+ "not to have user info but had:%n"+ "  <\"test:pass\">"));
  }
  @Test public void should_create_error_message_for_url_has_user_info() throws Exception {
    URL url=new URL("http://test:pass@assertj.org/news");
    String error=shouldHaveUserInfo(url,"test:success").create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting user info of%n" + "  <http://test:pass@assertj.org/news>%n"+ "to be:%n"+ "  <\"test:success\">%n"+ "but was:%n"+ "  <\"test:pass\">"));
  }
  @Test public void should_create_error_message_for_url_has_no_user_info() throws Exception {
    URL url=new URL("http://test:pass@assertj.org/news");
    String error=shouldHaveUserInfo(url,null).create(new TestDescription("TEST"));
    assertThat(error).isEqualTo(format("[TEST] %n" + "Expecting:%n" + "  <http://test:pass@assertj.org/news>%n"+ "not to have user info but had:%n"+ "  <\"test:pass\">"));
  }
}
