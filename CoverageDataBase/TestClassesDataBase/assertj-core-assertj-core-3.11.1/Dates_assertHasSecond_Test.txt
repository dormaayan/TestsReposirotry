/** 
 * Tests for <code> {@link Dates#assertHasSecond(AssertionInfo,Date,int)}</code>.
 * @author Joel Costigliola
 */
public class Dates_assertHasSecond_Test extends DatesBaseTest {
  @Override protected void initActualDate(){
    actual=parseDatetime("2011-01-01T03:49:17");
  }
  @Test public void should_fail_if_actual_has_not_given_second(){
    AssertionInfo info=someInfo();
    int second=5;
    try {
      dates.assertHasSecond(info,actual,second);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"second",second));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> dates.assertHasSecond(someInfo(),null,17)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_second(){
    dates.assertHasSecond(someInfo(),actual,17);
  }
  @Test public void should_fail_if_actual_has_not_given_second_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    int second=5;
    try {
      datesWithCustomComparisonStrategy.assertHasSecond(info,actual,second);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldHaveDateField(actual,"second",second));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> datesWithCustomComparisonStrategy.assertHasSecond(someInfo(),null,17)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_actual_has_given_second_whatever_custom_comparison_strategy_is(){
    datesWithCustomComparisonStrategy.assertHasSecond(someInfo(),actual,17);
  }
}
