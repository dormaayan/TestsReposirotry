/** 
 * Tests for <code> {@link Strings#assertHasSize(AssertionInfo,CharSequence,int)}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class Strings_assertHasSize_Test extends StringsBaseTest {
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertHasSize(someInfo(),null,3)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_size_of_actual_is_not_equal_to_expected_size(){
    AssertionInfo info=someInfo();
    String actual="Han";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertHasSize(info,actual,6)).withMessage(shouldHaveSize(actual,actual.length(),6).create());
  }
  @Test public void should_pass_if_size_of_actual_is_equal_to_expected_size(){
    strings.assertHasSize(someInfo(),"Han",3);
  }
  @Test public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertHasSize(someInfo(),null,3)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_size_of_actual_is_not_equal_to_expected_size_whatever_custom_comparison_strategy_is(){
    AssertionInfo info=someInfo();
    String actual="Han";
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertHasSize(info,actual,6)).withMessage(shouldHaveSize(actual,actual.length(),6).create());
  }
  @Test public void should_pass_if_size_of_actual_is_equal_to_expected_size_whatever_custom_comparison_strategy_is(){
    stringsWithCaseInsensitiveComparisonStrategy.assertHasSize(someInfo(),"Han",3);
  }
}
