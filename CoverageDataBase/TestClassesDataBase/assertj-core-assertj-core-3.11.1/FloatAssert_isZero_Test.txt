/** 
 * Tests for <code> {@link FloatAssert#isZero()}</code>.
 * @author Alex Ruiz
 */
public class FloatAssert_isZero_Test extends FloatAssertBaseTest {
  @Override protected FloatAssert invoke_api_method(){
    return assertions.isZero();
  }
  @Override protected void verify_internal_effects(){
    verify(floats).assertIsZero(getInfo(assertions),getActual(assertions));
  }
  @Test public void should_pass_with_primitive_negative_zero(){
    final float negativeZero=-0.0f;
    assertThat(negativeZero).isZero();
  }
  @Test public void should_pass_with_primitive_positive_zero(){
    final float positiveZero=0.0f;
    assertThat(positiveZero).isZero();
  }
  @Test public void should_pass_with_Float_positive_zero(){
    final Float positiveZero=0.0f;
    assertThat(positiveZero).isZero();
  }
  @Test public void should_fail_with_non_zero(){
    final float notZero=1.0f;
    try {
      assertThat(notZero).isZero();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n <1.0f>%nto be equal to:%n <0.0f>%nbut was not."));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_with_Float_negative_zero(){
    final Float negativeZero=-0.0f;
    try {
      assertThat(negativeZero).isZero();
    }
 catch (    AssertionError e) {
      assertThat(e).hasMessage(format("%nExpecting:%n <-0.0f>%nto be equal to:%n <0.0f>%nbut was not."));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
