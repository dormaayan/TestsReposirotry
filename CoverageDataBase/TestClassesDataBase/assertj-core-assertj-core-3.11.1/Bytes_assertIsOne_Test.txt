/** 
 * Tests for <code> {@link Bytes#assertIsOne(AssertionInfo,Comparable)}</code>.
 * @author Drummond Dawson
 */
public class Bytes_assertIsOne_Test extends BytesBaseTest {
  @BeforeEach @Override public void setUp(){
    super.setUp();
    resetFailures();
  }
  @Test public void should_succeed_since_actual_is_one(){
    bytes.assertIsOne(someInfo(),(byte)1);
  }
  @Test public void should_fail_since_actual_is_not_one(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> bytes.assertIsOne(someInfo(),(byte)0)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
  @Test public void should_fail_since_actual_is_not_one_in_hex_representation(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> bytes.assertIsOne(someHexInfo(),(byte)0x00)).withMessage(format("%nExpecting:%n <0x00>%nto be equal to:%n <0x01>%nbut was not."));
  }
  @Test public void should_succeed_since_actual_is_one_whatever_custom_comparison_strategy_is(){
    bytesWithAbsValueComparisonStrategy.assertIsOne(someInfo(),(byte)1);
  }
  @Test public void should_succeed_since_actual_is_one_whatever_custom_comparison_strategy_is_in_hex_representation(){
    bytesWithAbsValueComparisonStrategy.assertIsOne(someHexInfo(),(byte)0x01);
  }
  @Test public void should_fail_since_actual_is_not_one_whatever_custom_comparison_strategy_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> bytesWithAbsValueComparisonStrategy.assertIsOne(someInfo(),(byte)0)).withMessage(format("%nExpecting:%n <0>%nto be equal to:%n <1>%nbut was not."));
  }
  @Test public void should_fail_since_actual_is_not_one_whatever_custom_comparison_strategy_is_in_hex_representation(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> bytesWithAbsValueComparisonStrategy.assertIsOne(someHexInfo(),(byte)0x0)).withMessage(format("%nExpecting:%n <0x00>%nto be equal to:%n <0x01>%nbut was not."));
  }
}
