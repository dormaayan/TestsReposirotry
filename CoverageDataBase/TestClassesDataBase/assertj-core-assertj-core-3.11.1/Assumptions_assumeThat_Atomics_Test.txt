public class Assumptions_assumeThat_Atomics_Test {
  private static final VolatileFieldsHolder VOLATILE_FIELDS_HOLDER=new VolatileFieldsHolder();
  public static Object[][] provideAssumptionsRunners(){
    return new AssumptionRunner[][]{{new AssumptionRunner<AtomicBoolean>(new AtomicBoolean(true)){
      @Override public void runFailingAssumption(){
        assumeThat(actual).isFalse();
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).isTrue();
      }
    }
},{new AssumptionRunner<AtomicInteger>(new AtomicInteger(42)){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasNegativeValue();
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasPositiveValue();
      }
    }
},{new AssumptionRunner<AtomicIntegerArray>(new AtomicIntegerArray(new int[]{2,5,7})){
      @Override public void runFailingAssumption(){
        assumeThat(actual).contains(20);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).contains(7);
      }
    }
},{new AssumptionRunner<AtomicIntegerFieldUpdater<VolatileFieldsHolder>>(AtomicIntegerFieldUpdater.newUpdater(VolatileFieldsHolder.class,"intValue")){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasValue(10,VOLATILE_FIELDS_HOLDER);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasValue(0,VOLATILE_FIELDS_HOLDER);
      }
    }
},{new AssumptionRunner<AtomicLong>(new AtomicLong(42)){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasNegativeValue();
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasPositiveValue();
      }
    }
},{new AssumptionRunner<AtomicLongArray>(new AtomicLongArray(new long[]{2,5,7})){
      @Override public void runFailingAssumption(){
        assumeThat(actual).contains(20);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).contains(7);
      }
    }
},{new AssumptionRunner<AtomicLongFieldUpdater<VolatileFieldsHolder>>(AtomicLongFieldUpdater.newUpdater(VolatileFieldsHolder.class,"longValue")){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasValue(10L,VOLATILE_FIELDS_HOLDER);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasValue(0L,VOLATILE_FIELDS_HOLDER);
      }
    }
},{new AssumptionRunner<AtomicReference<String>>(new AtomicReference<>("test")){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasValue("other");
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasValue("test");
      }
    }
},{new AssumptionRunner<AtomicReferenceArray<String>>(new AtomicReferenceArray<>(array("2","5","7"))){
      @Override public void runFailingAssumption(){
        assumeThat(actual).contains("20");
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).contains("7");
      }
    }
},{new AssumptionRunner<AtomicReferenceFieldUpdater<VolatileFieldsHolder,String>>(AtomicReferenceFieldUpdater.newUpdater(VolatileFieldsHolder.class,String.class,"stringValue")){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasValue("other",VOLATILE_FIELDS_HOLDER);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasValue("test",VOLATILE_FIELDS_HOLDER);
      }
    }
},{new AssumptionRunner<AtomicMarkableReference<String>>(new AtomicMarkableReference<>("test",true)){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasReference("other");
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasReference("test");
      }
    }
},{new AssumptionRunner<AtomicStampedReference<String>>(new AtomicStampedReference<>("test",1)){
      @Override public void runFailingAssumption(){
        assumeThat(actual).hasStamp(0);
      }
      @Override public void runPassingAssumption(){
        assumeThat(actual).hasStamp(1);
      }
    }
}};
  }
  @ParameterizedTest @MethodSource("provideAssumptionsRunners") public void should_ignore_test_when_assumption_fails(  AssumptionRunner<?> assumptionRunner){
    assertThatExceptionOfType(AssumptionViolatedException.class).isThrownBy(() -> assumptionRunner.runFailingAssumption());
  }
  @ParameterizedTest @MethodSource("provideAssumptionsRunners") public void should_run_test_when_assumption_passes(  AssumptionRunner<?> assumptionRunner){
    assertThatCode(() -> assumptionRunner.runPassingAssumption()).doesNotThrowAnyException();
  }
@SuppressWarnings("unused") private static class VolatileFieldsHolder {
    volatile int intValue;
    volatile long longValue;
    volatile String stringValue="test";
  }
}
