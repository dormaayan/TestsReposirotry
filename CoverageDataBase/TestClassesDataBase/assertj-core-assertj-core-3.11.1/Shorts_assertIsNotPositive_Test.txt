/** 
 * Tests for <code> {@link Shorts#assertIsNotPositive(AssertionInfo, Short))}</code>.
 * @author Nicolas FranÃ§ois
 */
public class Shorts_assertIsNotPositive_Test extends ShortsBaseTest {
  @Test public void should_succeed_since_actual_is_not_positive(){
    shorts.assertIsNotPositive(someInfo(),(short)-6);
  }
  @Test public void should_succeed_since_actual_is_zero(){
    shorts.assertIsNotPositive(someInfo(),(short)0);
  }
  @Test public void should_fail_since_actual_is_positive(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shorts.assertIsNotPositive(someInfo(),(short)6)).withMessage(format("%nExpecting:%n <6>%nto be less than or equal to:%n <0> "));
  }
  @Test public void should_fail_since_actual_can_be_positive_according_to_custom_comparison_strategy(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shortsWithAbsValueComparisonStrategy.assertIsNotPositive(someInfo(),(short)-1)).withMessage(format("%nExpecting:%n <-1>%nto be less than or equal to:%n <0> when comparing values using AbsValueComparator"));
  }
  @Test public void should_fail_since_actual_is_positive_according_to_custom_comparison_strategy(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> shortsWithAbsValueComparisonStrategy.assertIsNotPositive(someInfo(),(short)1)).withMessage(format("%nExpecting:%n <1>%nto be less than or equal to:%n <0> when comparing values using AbsValueComparator"));
  }
}
