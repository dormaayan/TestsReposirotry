public class InstantAssert_isAfterOrEqual_Test extends InstantAssertBaseTest {
  @Test public void test_isAfterOrEqual_assertion(){
    assertThat(AFTER).isAfterOrEqualTo(REFERENCE);
    assertThat(REFERENCE).isAfterOrEqualTo(REFERENCE);
    verify_that_isAfterOrEqual_assertion_fails_and_throws_AssertionError(BEFORE,REFERENCE);
  }
  @Test public void test_isAfterOrEqual_assertion_error_message(){
    Instant instantReference=Instant.parse("2007-12-03T10:15:30.00Z");
    Instant instantAfter=Instant.parse("2007-12-03T10:15:35.00Z");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(instantReference).isAfterOrEqualTo(instantAfter)).withMessage(format("%n" + "Expecting:%n" + "  <2007-12-03T10:15:30Z>%n"+ "to be after or equals to:%n"+ "  <2007-12-03T10:15:35Z>"));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Instant actual=null;
      assertThat(actual).isAfterOrEqualTo(Instant.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_date_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isAfterOrEqualTo((Instant)null)).withMessage("The Instant to compare actual with should not be null");
  }
  @Test public void should_fail_if_date_as_string_parameter_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(Instant.now()).isAfterOrEqualTo((String)null)).withMessage("The String representing the Instant to compare actual with should not be null");
  }
  private static void verify_that_isAfterOrEqual_assertion_fails_and_throws_AssertionError(  Instant dateToCheck,  Instant reference){
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfterOrEqualTo(reference)).isInstanceOf(AssertionError.class);
    assertThatThrownBy(() -> assertThat(dateToCheck).isAfterOrEqualTo(reference.toString())).isInstanceOf(AssertionError.class);
  }
}
