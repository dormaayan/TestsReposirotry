/** 
 * Tests for <code> {@link BasicErrorMessageFactory#equals(Object)}</code> and <code> {@link BasicErrorMessageFactory#hashCode()}</code>.
 * @author Yvonne Wang
 */
public class BasicErrorMessageFactory_equals_hashCode_Test {
  private static BasicErrorMessageFactory factory;
  @BeforeAll public static void setUpOnce(){
    factory=new BasicErrorMessageFactory("Hello %s","Yoda");
  }
  @Test public void should_have_reflexive_equals(){
    assertEqualsIsReflexive(factory);
  }
  @Test public void should_have_symmetric_equals(){
    assertEqualsIsSymmetric(factory,new BasicErrorMessageFactory("Hello %s","Yoda"));
  }
  @Test public void should_have_transitive_equals(){
    BasicErrorMessageFactory obj2=new BasicErrorMessageFactory("Hello %s","Yoda");
    BasicErrorMessageFactory obj3=new BasicErrorMessageFactory("Hello %s","Yoda");
    assertEqualsIsTransitive(factory,obj2,obj3);
  }
  @Test public void should_maintain_equals_and_hashCode_contract(){
    assertMaintainsEqualsAndHashCodeContract(factory,new BasicErrorMessageFactory("Hello %s","Yoda"));
  }
  @Test public void should_not_be_equal_to_Object_of_different_type(){
    assertThat(factory.equals("Yoda")).isFalse();
  }
  @Test public void should_not_be_equal_to_null(){
    assertThat(factory.equals(null)).isFalse();
  }
  @Test public void should_not_be_equal_to_BasicErrorMessage_with_different_format(){
    assertThat(factory.equals(new BasicErrorMessageFactory("How are you, %s?","Yoda"))).isFalse();
  }
  @Test public void should_not_be_equal_to_BasicErrorMessage_with_different_arguments(){
    assertThat(factory.equals(new BasicErrorMessageFactory("Hello %s","Luke"))).isFalse();
  }
}
