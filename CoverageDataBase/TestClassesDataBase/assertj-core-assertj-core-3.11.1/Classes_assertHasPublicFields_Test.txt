/** 
 * Tests for <code> {@link org.assertj.core.internal.Classes#assertHasPublicFields(org.assertj.core.api.AssertionInfo,Class,String)}</code> .
 * @author William Delanoue
 */
public class Classes_assertHasPublicFields_Test extends ClassesBaseTest {
  @BeforeEach public void setupActual(){
    actual=AnnotatedClass.class;
  }
  @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicFields(someInfo(),actual)).withMessage(actualIsNull());
  }
  @Test public void should_pass_if_class_has_expected_public_fields(){
    classes.assertHasPublicFields(someInfo(),actual,"publicField");
    classes.assertHasPublicFields(someInfo(),actual,"publicField","publicField2");
  }
  @Test public void should_pass_if_class_has_no_public_fields_and_none_are_expected(){
    classes.assertHasPublicFields(someInfo(),NoField.class);
  }
  @Test public void should_fail_if_expected_fields_are_protected_or_private(){
    String[] expected=array("publicField","protectedField","privateField");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicFields(someInfo(),actual,expected)).withMessage(format(shouldHaveFields(actual,newLinkedHashSet(expected),newLinkedHashSet("protectedField","privateField")).create()));
  }
  @Test public void should_fail_if_actual_does_not_have_all_expected_fields(){
    String[] expected=array("missingField","publicField");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicFields(someInfo(),actual,expected)).withMessage(format(shouldHaveFields(actual,newLinkedHashSet(expected),newLinkedHashSet("missingField")).create()));
  }
  @Test public void should_fail_if_no_public_fields_are_expected_and_class_has_some(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> classes.assertHasPublicFields(someInfo(),actual)).withMessage(shouldHaveNoPublicFields(actual,newLinkedHashSet("publicField","publicField2")).create());
  }
}
