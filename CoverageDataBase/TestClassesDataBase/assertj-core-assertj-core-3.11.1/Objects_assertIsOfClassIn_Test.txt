/** 
 * Tests for <code> {@link Objects#assertIsOfAnyClassIn(AssertionInfo,Object,Class[])}</code>.
 * @author Nicolas Fran√ßois
 * @author Joel Costigliola
 */
public class Objects_assertIsOfClassIn_Test extends ObjectsBaseTest {
  private static Person actual;
  @BeforeAll public static void setUpOnce(){
    actual=new Person("Yoda");
  }
  @Test public void should_pass_if_actual_is_of_class_in_types(){
    Class<?>[] types=new Class[]{File.class,Person.class,String.class};
    objects.assertIsOfAnyClassIn(someInfo(),actual,types);
  }
  @Test public void should_throw_error_if_type_is_null(){
    assertThatNullPointerException().isThrownBy(() -> objects.assertIsOfAnyClassIn(someInfo(),actual,null)).withMessage("The given types should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    Class<?>[] types=new Class[]{File.class,Person.class,String.class};
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> objects.assertIsOfAnyClassIn(someInfo(),null,types)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_not_of_class_in_types(){
    AssertionInfo info=someInfo();
    Class<?>[] types=new Class[]{File.class,String.class};
    try {
      objects.assertIsOfAnyClassIn(info,actual,types);
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeOfClassIn(actual,types));
    }
  }
  @Test public void should_fail_if_actual_is_not_of_class_in_empty_types(){
    AssertionInfo info=someInfo();
    Class<?>[] types=new Class[]{};
    try {
      objects.assertIsOfAnyClassIn(info,actual,types);
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldBeOfClassIn(actual,types));
    }
  }
}
