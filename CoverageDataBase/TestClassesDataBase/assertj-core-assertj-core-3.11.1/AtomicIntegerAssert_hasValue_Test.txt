public class AtomicIntegerAssert_hasValue_Test {
  @Test public void should_pass_when_actual_has_the_expected_value(){
    int initialValue=123;
    AtomicInteger actual=new AtomicInteger(initialValue);
    assertThat(actual).hasValue(initialValue);
  }
  @Test public void should_fail_when_actual_does_not_have_the_expected_value(){
    AtomicInteger actual=new AtomicInteger(123);
    int expectedValue=1234;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).hasValue(expectedValue)).withMessage(shouldHaveValue(actual,expectedValue).create());
  }
  @Test public void should_fail_when_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      AtomicInteger actual=null;
      assertThat(actual).hasValue(1234);
    }
).withMessage(actualIsNull());
  }
}
