/** 
 * Tests for  {@link StandardComparisonStrategy#arrayContains(Object,Object)}.
 * @author Joel Costigliola
 */
public class StandardComparisonStrategy_arrayContains_Test extends AbstractTest_StandardComparisonStrategy {
  @Test public void should_return_true_if_array_contains_value(){
    String[] hobbits=array("Merry","Frodo",null,"Merry","Sam");
    assertThat(standardComparisonStrategy.arrayContains(hobbits,"Sam")).isTrue();
    assertThat(standardComparisonStrategy.arrayContains(hobbits,"Merry")).isTrue();
    assertThat(standardComparisonStrategy.arrayContains(hobbits,null)).isTrue();
  }
  @Test public void should_return_false_if_array_does_not_contain_value(){
    String[] hobbits=array("Merry","Frodo","Merry","Sam");
    assertThat(standardComparisonStrategy.arrayContains(hobbits,"Pippin")).isFalse();
    assertThat(standardComparisonStrategy.arrayContains(hobbits,"SAM ")).isFalse();
    assertThat(standardComparisonStrategy.arrayContains(hobbits,null)).isFalse();
  }
  @Test public void should_return_false_if_array_is_empty(){
    assertThat(standardComparisonStrategy.arrayContains(new String[]{},"Pippin")).isFalse();
  }
  @Test public void should_fail_if_first_parameter_is_not_an_array(){
    assertThatIllegalArgumentException().isThrownBy(() -> standardComparisonStrategy.arrayContains("not an array","Pippin"));
  }
}
