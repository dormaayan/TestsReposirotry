public class Objects_assertHasSameHashCodeAs_Test extends ObjectsBaseTest {
  public static final Jedi OTHER_JEDI=new Jedi("Yoda","Green");
  private static Jedi greenYoda;
  @BeforeAll public static void setUpOnce(){
    greenYoda=new Jedi("Yoda","green");
  }
  @Test public void should_pass_if_actual_has_the_same_hash_code_as_other(){
    Jedi redYoda=new Jedi("Yoda","Red");
    objects.assertHasSameHashCodeAs(someInfo(),greenYoda,redYoda);
    objects.assertHasSameHashCodeAs(someInfo(),redYoda,greenYoda);
    objects.assertHasSameHashCodeAs(someInfo(),greenYoda,new Jedi("Yoda","green"));
    objects.assertHasSameHashCodeAs(someInfo(),greenYoda,greenYoda);
  }
  @Test public void should_throw_error_if_other_is_null(){
    assertThatNullPointerException().isThrownBy(() -> objects.assertHasSameHashCodeAs(someInfo(),greenYoda,null)).withMessage("The object used to compare actual's hash code with should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> objects.assertHasSameHashCodeAs(someInfo(),null,greenYoda)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_have_the_same_hash_code_as_other(){
    AssertionInfo info=someInfo();
    Jedi luke=new Jedi("Luke","green");
    try {
      objects.assertHasSameHashCodeAs(info,greenYoda,luke);
      failBecauseExpectedAssertionErrorWasNotThrown();
    }
 catch (    AssertionError err) {
      verify(failures).failure(info,shouldHaveSameHashCode(greenYoda,luke));
    }
  }
}
