/** 
 * Tests for <code> {@link ObjectArrays#assertContainsOnlyNulls(AssertionInfo,Object[])}</code>.
 * @author Billy Yuan
 */
public class ObjectArrays_assertContainsOnlyNulls_Test extends ObjectArraysBaseTest {
  private Object[] actual=array();
  @Test public void should_pass_if_actual_contains_null_once(){
    actual=new Object[]{null};
    arrays.assertContainsOnlyNulls(someInfo(),actual);
  }
  @Test public void should_pass_if_actual_contains_null_more_than_once(){
    actual=array(null,null,null);
    arrays.assertContainsOnlyNulls(someInfo(),actual);
  }
  @Test public void should_fail_if_actual_is_null(){
    actual=null;
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertContainsOnlyNulls(someInfo(),actual)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_is_empty(){
    AssertionInfo info=someInfo();
    try {
      arrays.assertContainsOnlyNulls(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyNulls(actual));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_null_and_non_null_elements(){
    AssertionInfo info=someInfo();
    actual=array(null,null,"person");
    List<String> nonNulls=newArrayList("person");
    try {
      arrays.assertContainsOnlyNulls(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyNulls(actual,nonNulls));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_contains_non_null_elements_only(){
    AssertionInfo info=someInfo();
    actual=array("person","person2");
    List<String> nonNulls=newArrayList("person","person2");
    try {
      arrays.assertContainsOnlyNulls(info,actual);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainOnlyNulls(actual,nonNulls));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
