public class Longs_assertIsNotCloseToPercentage_Test extends LongsBaseTest {
  private static final Long ZERO=0L;
  private static final Long ONE=1L;
  private static final Long TEN=10L;
  private static final Long ONE_HUNDRED=100L;
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> longs.assertIsNotCloseToPercentage(someInfo(),null,ONE,withPercentage(ONE))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null(){
    assertThatNullPointerException().isThrownBy(() -> longs.assertIsNotCloseToPercentage(someInfo(),ONE,null,withPercentage(ONE)));
  }
  @Test public void should_fail_if_percentage_is_null(){
    assertThatNullPointerException().isThrownBy(() -> longs.assertIsNotCloseToPercentage(someInfo(),ONE,ZERO,null));
  }
  @Test public void should_fail_if_percentage_is_negative(){
    assertThatIllegalArgumentException().isThrownBy(() -> longs.assertIsNotCloseToPercentage(someInfo(),ONE,ZERO,withPercentage(-1L)));
  }
  @ParameterizedTest @CsvSource({"1, 2, 1","1, 11, 90","-1, -2, 1","-1, -11, 90","0, -1, 99"}) public void should_pass_if_difference_is_greater_than_given_percentage(  Long actual,  Long other,  Long percentage){
    longs.assertIsNotCloseToPercentage(someInfo(),actual,other,withPercentage(percentage));
  }
  @ParameterizedTest @CsvSource({"1, 1, 0","2, 1, 100","1, 2, 50","-1, -1, 0","-2, -1, 100","-1, -2, 50"}) public void should_fail_if_difference_is_equal_to_given_percentage(  Long actual,  Long other,  Long percentage){
    AssertionInfo info=someInfo();
    try {
      longs.assertIsNotCloseToPercentage(someInfo(),actual,other,withPercentage(percentage));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqualWithinPercentage(actual,other,withPercentage(percentage),abs(actual - other)));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_fail_if_actual_is_too_close_to_expected_value(){
    AssertionInfo info=someInfo();
    try {
      longs.assertIsNotCloseToPercentage(someInfo(),ONE,TEN,withPercentage(ONE_HUNDRED));
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotBeEqualWithinPercentage(ONE,TEN,withinPercentage(100),TEN - ONE));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
