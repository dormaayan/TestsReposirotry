/** 
 * Tests for <code> {@link ShouldContain#create(org.assertj.core.description.Description,org.assertj.core.presentation.Representation)}</code> .
 * @author Alex Ruiz
 * @author Yvonne Wang
 * @author Joel Costigliola
 */
public class ShouldContain_create_Test {
  private ErrorMessageFactory factory;
  @BeforeEach public void setUp(){
    factory=shouldContain(newArrayList("Yoda"),newArrayList("Luke","Yoda"),newLinkedHashSet("Luke"));
  }
  @Test public void should_create_error_message(){
    String message=factory.create(new TextDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <[\"Yoda\"]>%n"+ "to contain:%n"+ " <[\"Luke\", \"Yoda\"]>%n"+ "but could not find:%n"+ " <[\"Luke\"]>%n"));
  }
  @Test public void should_create_error_message_with_custom_comparison_strategy(){
    factory=shouldContain(newArrayList("Yoda"),newArrayList("Luke","Yoda"),newLinkedHashSet("Luke"),new ComparatorBasedComparisonStrategy(CaseInsensitiveStringComparator.instance));
    String message=factory.create(new TextDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <[\"Yoda\"]>%n"+ "to contain:%n"+ " <[\"Luke\", \"Yoda\"]>%n"+ "but could not find:%n"+ " <[\"Luke\"]>%n"+ "when comparing values using CaseInsensitiveStringComparator"));
  }
  @Test public void should_create_error_message_differentiating_long_from_integer(){
    factory=shouldContain(5L,5,5);
    String message=factory.create(new TextDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <5L>%n"+ "to contain:%n"+ " <5>%n"+ "but could not find:%n"+ " <5>%n"+ ""));
  }
  @Test public void should_create_error_message_differentiating_long_from_integer_in_arrays(){
    factory=shouldContain(newArrayList(5L,7L),newArrayList(5,7),newLinkedHashSet(5,7));
    String message=factory.create(new TextDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <[5L, 7L]>%n"+ "to contain:%n"+ " <[5, 7]>%n"+ "but could not find:%n"+ " <[5, 7]>%n"+ ""));
  }
  @Test public void should_create_error_message_differentiating_double_from_float(){
    factory=shouldContain(newArrayList(5d,7d),newArrayList(5f,7f),newLinkedHashSet(5f,7f));
    String message=factory.create(new TextDescription("Test"));
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + " <[5.0, 7.0]>%n"+ "to contain:%n"+ " <[5.0f, 7.0f]>%n"+ "but could not find:%n"+ " <[5.0f, 7.0f]>%n"+ ""));
  }
}
