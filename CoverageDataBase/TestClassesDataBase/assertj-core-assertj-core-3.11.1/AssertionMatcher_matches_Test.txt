public class AssertionMatcher_matches_Test {
  private static final Integer ZERO=0;
  private static final Integer ONE=1;
  private final AssertionMatcher<Integer> isZeroMatcher=new AssertionMatcher<Integer>(){
    @Override public void assertion(    Integer actual) throws AssertionError {
      assertThat(actual).isZero();
    }
  }
;
  private boolean removeAssertJRelatedElementsFromStackTrace;
  /** 
 * Stacktrace filtering must be disabled in order to check frames in {@link this#matcher_should_fill_description_when_assertion_fails()}. I use setUp and tearDown methods to ensure that it is set to original value after a test.
 */
  @BeforeEach public void setUp(){
    removeAssertJRelatedElementsFromStackTrace=Failures.instance().isRemoveAssertJRelatedElementsFromStackTrace();
    Failures.instance().setRemoveAssertJRelatedElementsFromStackTrace(false);
  }
  @AfterEach public void tearDown(){
    Failures.instance().setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);
  }
  @Test public void matcher_should_pass_when_assertion_passes(){
    assertThat(isZeroMatcher.matches(ZERO)).isTrue();
  }
  @Test public void matcher_should_not_fill_description_when_assertion_passes(){
    Description description=mock(Description.class);
    assertThat(isZeroMatcher.matches(ZERO)).isTrue();
    isZeroMatcher.describeTo(description);
    verifyZeroInteractions(description);
  }
  @Test public void matcher_should_fail_when_assertion_fails(){
    assertThat(isZeroMatcher.matches(ONE)).isFalse();
  }
  /** 
 * {@link Failures#removeAssertJRelatedElementsFromStackTrace} must be set to truein order for this test to pass. It is in  {@link this#setUp()}.
 */
  @Test public void matcher_should_fill_description_when_assertion_fails(){
    Description description=mock(Description.class);
    assertThat(isZeroMatcher.matches(ONE)).isFalse();
    isZeroMatcher.describeTo(description);
    verify(description).appendText("AssertionError with message: ");
    verify(description).appendText(format("%nExpecting:%n <1>%nto be equal to:%n <0>%nbut was not."));
    verify(description).appendText(String.format("%n%nStacktrace was: "));
    verify(description).appendText(argThat(new ArgumentMatcher<String>(){
      @Override public boolean matches(      String s){
        return s.contains(format("%nExpecting:%n <1>%nto be equal to:%n <0>%nbut was not.")) && s.contains("at org.assertj.core.matcher.AssertionMatcher_matches_Test$1.assertion(AssertionMatcher_matches_Test.java:") && s.contains("at org.assertj.core.matcher.AssertionMatcher.matches(AssertionMatcher.java:")&& s.contains("at org.assertj.core.matcher.AssertionMatcher_matches_Test.matcher_should_fill_description_when_assertion_fails(AssertionMatcher_matches_Test.java:");
      }
    }
));
  }
}
