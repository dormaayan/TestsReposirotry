/** 
 * Tests for <code> {@link Maps#assertHasEntrySatisfying(AssertionInfo,Map,Condition)}</code>.
 */
public class Maps_assertHasEntrySatisfying_with_entry_condition_Test extends MapsBaseTest {
  private Condition<Map.Entry<String,String>> greenColorCondition=new Condition<Map.Entry<String,String>>("green color condition"){
    @Override public boolean matches(    Map.Entry<String,String> entry){
      return entry.getKey().equals("color") && entry.getValue().equals("green");
    }
  }
;
  private Condition<Map.Entry<String,String>> blackColorCondition=new Condition<Map.Entry<String,String>>("black color condition"){
    @Override public boolean matches(    Map.Entry<String,String> entry){
      return entry.getKey().equals("color") && entry.getValue().equals("black");
    }
  }
;
  @Test public void should_fail_if_entry_condition_is_null(){
    assertThatNullPointerException().isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),actual,null)).withMessage("The condition to evaluate should not be null");
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> maps.assertHasEntrySatisfying(someInfo(),null,greenColorCondition)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_does_not_contain_any_entry_matching_the_given_condition(){
    AssertionInfo info=someInfo();
    try {
      maps.assertHasEntrySatisfying(info,actual,blackColorCondition);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldContainEntry(actual,blackColorCondition));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_contains_an_entry_matching_the_given_condition(){
    maps.assertHasEntrySatisfying(someInfo(),actual,greenColorCondition);
  }
}
