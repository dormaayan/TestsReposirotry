/** 
 * Tests for <code> {@link ObjectAssert#hasFieldOrPropertyWithValue(String,Object)}</code>.
 * @author Libor Ondrusek
 */
public class ObjectAssert_hasFieldOrPropertyWithValue_Test extends ObjectAssertBaseTest {
  public static final String FIELD_NAME="name";
  public static final String FIELD_VALUE="Yoda";
  @Override protected ObjectAssert<Jedi> invoke_api_method(){
    return assertions.hasFieldOrPropertyWithValue(FIELD_NAME,FIELD_VALUE);
  }
  @Override protected void verify_internal_effects(){
    verify(objects).assertHasFieldOrPropertyWithValue(getInfo(assertions),getActual(assertions),FIELD_NAME,FIELD_VALUE);
  }
  @Test public void should_pass_if_both_are_null(){
    Jedi jedi=new Jedi(null,"Blue");
    assertThat(jedi).hasFieldOrPropertyWithValue(FIELD_NAME,null);
  }
  @Test public void should_fail_if_given_field_or_property_does_not_exist(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Jedi jedi=new Jedi("Yoda","Blue");
      assertThat(jedi).hasFieldOrPropertyWithValue("not_exists_in_jedi_object",FIELD_VALUE);
    }
).withMessage(format("%nExpecting%n  <Yoda the Jedi>%nto have a property or a field named <\"not_exists_in_jedi_object\">"));
  }
  @Test public void should_fail_if_field_or_property_value_is_not_equal_to_the_expected_value(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Jedi jedi=new Jedi("Yoda","Blue");
      assertThat(jedi).hasFieldOrPropertyWithValue(FIELD_NAME,1000);
    }
).withMessage(format("%nExpecting%n  <Yoda the Jedi>%nto have a property or a field named <\"name\"> with value%n  <1000>%nbut value was:%n  <\"Yoda\">"));
  }
  @Test public void should_fail_if_field_or_property_value_is_not_null_when_expected_value_is(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Jedi jedi=new Jedi("Yoda","Blue");
      assertThat(jedi).hasFieldOrPropertyWithValue(FIELD_NAME,null);
    }
).withMessage(format("%nExpecting%n  <Yoda the Jedi>%nto have a property or a field named <\"name\"> with value%n  <null>%nbut value was:%n  <\"Yoda\">"));
  }
  @Test public void should_fail_when_property_or_field_value_is_null_and_expected_value_is_not(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      Jedi jedi=new Jedi(null,"Blue");
      assertThat(jedi).hasFieldOrPropertyWithValue(FIELD_NAME,FIELD_VALUE);
    }
).withMessage(format("%nExpecting%n  <null the Jedi>%nto have a property or a field named <\"name\"> with value%n  <\"Yoda\">%nbut value was:%n  <null>"));
  }
  @Test public void should_fail_if_given_field_or_property_name_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> {
      Jedi jedi=new Jedi("Yoda","Blue");
      assertThat(jedi).hasFieldOrPropertyWithValue(null,FIELD_VALUE);
    }
).withMessage("The name of the property/field to read should not be null");
  }
}
