/** 
 * Tests for <code> {@link ObjectArrays#assertDoesNotContain(AssertionInfo,Object[],Object[])}</code>.
 * @author Alex Ruiz
 * @author Joel Costigliola
 */
public class ObjectArrays_assertDoesNotContain_Test extends ObjectArraysBaseTest {
  @Test public void should_pass_if_actual_does_not_contain_given_values(){
    arrays.assertDoesNotContain(someInfo(),actual,array("Han"));
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_even_if_duplicated(){
    arrays.assertDoesNotContain(someInfo(),actual,array("Han","Han","Anakin"));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_empty(){
    assertThatIllegalArgumentException().isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),actual,emptyArray())).withMessage(valuesToLookForIsEmpty());
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null(){
    assertThatNullPointerException().isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> arrays.assertDoesNotContain(someInfo(),null,array("Yoda"))).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_actual_contains_given_values(){
    AssertionInfo info=someInfo();
    Object[] expected={"Luke","Yoda","Han"};
    try {
      arrays.assertDoesNotContain(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContain(actual,expected,newLinkedHashSet("Luke","Yoda")));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,array("Han"));
  }
  @Test public void should_pass_if_actual_does_not_contain_given_values_even_if_duplicated_according_to_custom_comparison_strategy(){
    arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,array("Han","HAn","Anakin"));
  }
  @Test public void should_throw_error_if_array_of_values_to_look_for_is_null_whatever_custom_comparison_strategy_is(){
    assertThatNullPointerException().isThrownBy(() -> arraysWithCustomComparisonStrategy.assertDoesNotContain(someInfo(),actual,null)).withMessage(valuesToLookForIsNull());
  }
  @Test public void should_fail_if_actual_contains_given_values_according_to_custom_comparison_strategy(){
    AssertionInfo info=someInfo();
    Object[] expected={"LUKE","Yoda","Han"};
    try {
      arraysWithCustomComparisonStrategy.assertDoesNotContain(info,actual,expected);
    }
 catch (    AssertionError e) {
      verify(failures).failure(info,shouldNotContain(actual,expected,newLinkedHashSet("LUKE","Yoda"),caseInsensitiveStringComparisonStrategy));
      return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
  }
}
