public class ExtendedByTypesComparator_toString_Test {
  @Test public void should_return_description_of_FieldByFieldComparator(){
    ExtendedByTypesComparator actual=new ExtendedByTypesComparator(new FieldByFieldComparator(),defaultTypeComparators());
    assertThat(actual).hasToString(format("field/property by field/property comparator on all fields/properties%n" + "Comparators used:%n" + "- for elements fields (by type): {Double -> DoubleComparator[precision=1.0E-15], Float -> FloatComparator[precision=1.0E-6]}%n"+ "- for elements (by type): {Double -> DoubleComparator[precision=1.0E-15], Float -> FloatComparator[precision=1.0E-6]}"));
  }
  @Test public void should_return_description_of_FieldByFieldComparator_and_extended_types(){
    Map<String,Comparator<?>> comparatorByField=new HashMap<>();
    comparatorByField.put("name",ALWAY_EQUALS_STRING);
    FieldByFieldComparator fieldByFieldComparator=new FieldByFieldComparator(comparatorByField,defaultTypeComparators());
    TypeComparators comparatorsByType=new TypeComparators();
    comparatorsByType.put(BigDecimal.class,new BigDecimalComparator());
    ExtendedByTypesComparator actual=new ExtendedByTypesComparator(fieldByFieldComparator,comparatorsByType);
    assertThat(actual).hasToString(format("field/property by field/property comparator on all fields/properties%n" + "Comparators used:%n" + "- for elements fields (by name): {name -> AlwaysEqualComparator}%n"+ "- for elements fields (by type): {Double -> DoubleComparator[precision=1.0E-15], Float -> FloatComparator[precision=1.0E-6]}%n"+ "- for elements (by type): {BigDecimal -> org.assertj.core.util.BigDecimalComparator}"));
  }
}
