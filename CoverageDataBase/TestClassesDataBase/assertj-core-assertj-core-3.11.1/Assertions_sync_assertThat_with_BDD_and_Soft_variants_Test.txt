/** 
 * @author Filip Hrisafov
 */
public class Assertions_sync_assertThat_with_BDD_and_Soft_variants_Test extends BaseAssertionsTest {
  @Test public void standard_assertions_and_bdd_assertions_should_have_the_same_assertions_methods(){
    Method[] assertThatMethods=findMethodsWithName(Assertions.class,"assertThat");
    Method[] thenMethods=findMethodsWithName(BDDAssertions.class,"then");
    assertThat(thenMethods).usingElementComparator(IGNORING_DECLARING_CLASS_AND_METHOD_NAME).containsExactlyInAnyOrder(assertThatMethods);
  }
  @Test public void standard_assertions_and_with_assertions_should_have_the_same_assertions_methods(){
    Method[] assertionsMethods=findMethodsWithName(Assertions.class,"assertThat");
    Method[] withAssertionsMethods=findMethodsWithName(WithAssertions.class,"assertThat");
    assertThat(withAssertionsMethods).usingElementComparator(IGNORING_DECLARING_CLASS_ONLY).containsExactlyInAnyOrder(assertionsMethods);
  }
  @Test public void standard_assertions_and_with_assertions_should_have_the_same_non_assertions_methods(){
    Set<Method> nonAssertionsMethods=nonAssertionsMethodsOf(Assertions.class.getDeclaredMethods());
    Set<Method> nonWithAssertionsMethods=nonAssertionsMethodsOf(WithAssertions.class.getDeclaredMethods());
    assertThat(nonWithAssertionsMethods).usingElementComparator(IGNORING_DECLARING_CLASS_ONLY).containsExactlyInAnyOrderElementsOf(nonAssertionsMethods);
  }
  @Test public void standard_assertions_and_soft_assertions_should_have_the_same_assertions_methods(){
    Method[] assertThatMethods=findMethodsWithName(Assertions.class,"assertThat",SPECIAL_IGNORED_RETURN_TYPES);
    Method[] assertThatSoftMethods=findMethodsWithName(AbstractStandardSoftAssertions.class,"assertThat");
    assertThat(assertThatMethods).usingElementComparator(IGNORING_DECLARING_CLASS_AND_RETURN_TYPE).containsExactlyInAnyOrder(assertThatSoftMethods);
  }
  @Test public void bdd_assertions_and_bdd_soft_assertions_should_have_the_same_assertions_methods(){
    Method[] thenMethods=findMethodsWithName(BDDAssertions.class,"then",SPECIAL_IGNORED_RETURN_TYPES);
    Method[] thenSoftMethods=findMethodsWithName(AbstractBDDSoftAssertions.class,"then");
    assertThat(thenMethods).usingElementComparator(IGNORING_DECLARING_CLASS_AND_RETURN_TYPE).containsExactlyInAnyOrder(thenSoftMethods);
  }
  private static Set<Method> nonAssertionsMethodsOf(  Method[] declaredMethods){
    return stream(declaredMethods).filter(method -> !method.getName().equals("assertThat")).collect(toSet());
  }
}
