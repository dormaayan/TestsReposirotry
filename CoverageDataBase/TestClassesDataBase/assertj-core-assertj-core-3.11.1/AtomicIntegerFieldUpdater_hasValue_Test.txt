public class AtomicIntegerFieldUpdater_hasValue_Test {
@SuppressWarnings("unused") private static class Person {
    private String name;
    volatile int age;
  }
  private Person person=new Person();
  @Test public void should_fail_when_atomicIntegerFieldUpdater_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat((AtomicIntegerFieldUpdater<Person>)null).hasValue(25,person)).withMessage(actualIsNull());
  }
  @Test public void should_fail_if_expected_value_is_null_and_does_not_contain_expected_value(){
    AtomicIntegerFieldUpdater<Person> fieldUpdater=AtomicIntegerFieldUpdater.newUpdater(Person.class,"age");
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(fieldUpdater).hasValue(null,person)).withMessage("The expected value should not be <null>.");
  }
  @Test public void should_fail_if_atomicIntegerFieldUpdater_does_not_contain_expected_value(){
    AtomicIntegerFieldUpdater<Person> fieldUpdater=AtomicIntegerFieldUpdater.newUpdater(Person.class,"age");
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(fieldUpdater).hasValue(25,person)).withMessage(shouldHaveValue(fieldUpdater,person.age,25,person).create());
  }
  @Test public void should_pass_if_atomicIntegerFieldUpdater_contains_expected_value(){
    AtomicIntegerFieldUpdater<Person> fieldUpdater=AtomicIntegerFieldUpdater.newUpdater(Person.class,"age");
    fieldUpdater.set(person,25);
    assertThat(fieldUpdater).hasValue(25,person);
  }
}
