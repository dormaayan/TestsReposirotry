/** 
 * Tests for <code> {@link DoubleArrayAssert#containsOnly(double)}</code>.
 * @author Alex Ruiz
 */
public class DoubleArrayAssert_containsOnly_Test extends DoubleArrayAssertBaseTest {
  @Override protected DoubleArrayAssert invoke_api_method(){
    return assertions.containsOnly(6d,8d);
  }
  @Override protected void verify_internal_effects(){
    verify(arrays).assertContainsOnly(getInfo(assertions),getActual(assertions),arrayOf(6d,8d));
  }
  @Test public void should_pass_with_precision_specified_as_last_argument(){
    double[] actual=arrayOf(1.0,2.0);
    assertThat(actual).containsOnly(arrayOf(1.01,2.0),withPrecision(0.1));
  }
  @Test public void should_pass_with_precision_specified_in_comparator(){
    double[] actual=arrayOf(1.0,2.0);
    assertThat(actual).usingComparatorWithPrecision(0.1).containsOnly(1.01,2.0);
  }
  @Test public void should_pass_when_multiple_expected_values_are_the_same_according_to_the_given_precision(){
    double[] actual=arrayOf(-1.71,-1.51,-1.51);
    assertThat(actual).containsOnly(arrayOf(-1.7,-1.6),within(0.1));
  }
  @Test public void should_pass_even_if_multiple_expected_values_are_the_same_according_to_the_given_precision(){
    double[] actual=arrayOf(-1.71,-1.51);
    assertThat(actual).containsOnly(arrayOf(-1.7,-1.6),within(0.1));
  }
  @Test public void should_pass_when_multiple_expected_values_are_the_same(){
    double[] actual=arrayOf(-1.71,-1.71);
    assertThat(actual).containsOnly(arrayOf(-1.71,-1.71));
    assertThat(actual).containsOnly(arrayOf(-1.71));
  }
}
