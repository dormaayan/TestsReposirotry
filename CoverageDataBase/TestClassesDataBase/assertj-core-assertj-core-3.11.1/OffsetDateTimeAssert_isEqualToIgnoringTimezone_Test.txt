public class OffsetDateTimeAssert_isEqualToIgnoringTimezone_Test extends BaseTest {
  private final OffsetDateTime actual=of(2000,1,5,12,0,0,0,MAX);
  @Test public void should_pass_if_actual_is_equal_to_other_ignoring_timezone_fields(){
    assertThat(actual).isEqualToIgnoringTimezone(of(2000,1,5,12,0,0,0,UTC));
  }
  @Test public void should_fail_if_actual_is_not_equal_to_given_OffsetDateTime_with_timezone_ignored(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(actual).isEqualToIgnoringTimezone(of(2000,1,5,12,1,0,0,UTC))).withMessage(format("%nExpecting:%n  " + "<2000-01-05T12:00+18:00>%n" + "to have same time fields except timezone as:%n"+ "  <2000-01-05T12:01Z>%n"+ "but had not."));
  }
  @Test public void should_fail_if_actual_is_null(){
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> {
      OffsetDateTime actual=null;
      assertThat(actual).isEqualToIgnoringTimezone(OffsetDateTime.now());
    }
).withMessage(actualIsNull());
  }
  @Test public void should_throw_error_if_given_OffsetDateTimetime_is_null(){
    assertThatIllegalArgumentException().isThrownBy(() -> assertThat(actual).isEqualToIgnoringTimezone(null)).withMessage(NULL_OFFSET_DATE_TIME_PARAMETER_MESSAGE);
  }
}
